{callPackage}:
{
  darkcode-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "-DarkCode-Theme";
    plugname = "🖤 DarkCode Theme";
    plugid = "com.yemreak.DarkCode-Theme";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13792/104732/DarkCode-Theme-JetBrains.jar";
      sha256 = "024lzch0z5cv30hmrh4j9zyjar198nlmk71hjnysbnsilbd3nv83";
      name = "-DarkCode-Theme-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yedhrab/DarkCode-Theme-JetBrains";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/yedhrab/DarkCode-Theme-JB/master/LICENSE";
        free = false;
      };
      description = ''
        🖤 DarkCode-Theme-JetBrains
      つ ◕_◕ つ Dark theme for cool "JetBrains" coders
      
          💱 Converted version of DarkCode
              Theme
      
      🤳 Screenshots
      
          
              
          
          
          
          
          
      
      💖 Support &amp; Contact 
      ​​​
          ​​ ​​ ​​​
      
      ​​
      🔏 License
      The Apache 2.0
          License ©️ Yunus Emre Ak
      '';
    };
  }) {};

  _1024-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "1024-Tools";
    plugname = "1024 Tools";
    plugid = "com.atomdu.plugin";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10277/49510/intellij-plugin-1024tools.zip";
      sha256 = "1yijnasz89dmir3dpixvqr2x1aw1wqvdwzkm8rn3fk0rkwiaa09i";
      name = "1024-Tools-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.atomdu.cn";
      license = lib.licenses.asl20;
      description = ''
        This is a programming navigation tool that brings together the quality website and resources of the whole network, mainly for Chinese users.
      这是汇集全网优质网址及资源的编程导航工具，主要面向中国用户。


      Make your programming easier by including the web site navigation and content of programming, algorithms, tools, learning, etc.
      及时收录编程、算法、工具、学习等分类的网址导航和内容,让您的编程更简单。
      '';
    };
  }) {};

  _360-fireline-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "360-FireLine-Plugin";
    plugname = "360 FireLine Plugin";
    plugid = "com.fireline.plugin.id";
    version = "1.7.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9292/72026/ASPlugin.zip";
      sha256 = "1wv8i6pqgqlj8838mgjn4hz3dcw35mhq5sglyg1ndc8lw2qsqg0z";
      name = "360-FireLine-Plugin-1.7.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://magic.360.cn/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://magic.360.cn";
        free = false;
      };
      description = ''
        火线是360旗下的一款免费的代码静态分析产品，适用于Android和Java代码。
      主打的安全检查规则是根据360业务多年技术沉淀而来。内存类检查的精确度业内领先。
      火线产品现已推出Jenkins插件，持续集成更方便，访问火线官网查看更多详情。
      
      
      FireLine is a code analysis tool for Android or Java code.It can detect Security and Resource Leak bugs.
      Produced by the test team named Qtest in Qihoo 360 Company.
      For more details,please visit the website: magic.360.cn
      
      
      How to use FireLine after installation?
      Mouse right click your Project name, Select "FireLine" -&gt; "Run", the Report link will be shown in "Event Log".
      See the blow picture for details:
      '';
    };
  }) {};

  _3dsmaxpy-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "3dsMaxPy-Support";
    plugname = "3dsMaxPy Support";
    plugid = "ca.rightsomegoodgames.maxpy";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10791/46380/3dsMaxPy_plugin.jar";
      sha256 = "1fgqrr0wzfgn90q65gndlhczdjjixvf0cd116na97zcq0xzlgywd";
      name = "3dsMaxPy-Support-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Simple interpreter support for the 3dsMaxPy python interpreter for PyCharm.
      '';
    };
  }) {};

  a-search-with-github = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "A-Search-with-Github";
    plugname = ".A Search with Github";
    plugid = "com.imuxuan.core.search";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11331/66116/search_with_github.jar";
      sha256 = "1dqlh3xkwy18fy76vr44hk34832h8gwrqikdyzinwy7fr1fwx5fg";
      name = "A-Search-with-Github-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://imuxuan.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://imuxuan.com";
        free = false;
      };
      description = ''
        Buy 
      
      Search code with Github:

      Please contact me if you have any questions: ForDeer 
      
      Preview
      '';
    };
  }) {};

  a-move-tab-left-and-right-using-the-keyboard-plugin---by-momomo-com = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "A-move-tab-left-and-right-using-the-keyboard-plugin---by-momomo.com";
    plugname = "A move tab left and right using the keyboard plugin - by momomo.com";
    plugid = "A move tab left and right using the keyboard plugin - by momomo.com";
    version = "12.550";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8443/79559/Move.artifact.jar";
      sha256 = "07d1nrkm0j94d1fga929lvp1rka9yh5h433787i5p9an8hx9mayv";
      name = "A-move-tab-left-and-right-using-the-keyboard-plugin---by-momomo.com-12.550.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://momomo.com";
      license = lib.licenses.artistic2;
      description = ''
        Other useful Intellij plugins by momomo.com
                
                        

                                A prevent pinned tabs from closing plugin

                                
                                It is an excellent extension of this plugin that together will allow you to organize important tabs for instance to the very left, and once pinned, they will always stay there.

                                
                                
                                        When this and  prevent pinned tabs from closing plugin  are used together, you could pin the most important and frequently used files, then move the pinned tabs to the left corner using the keyboard and they will always stay there!
                                

                                
                                
                                        You always know now where your files and tabs are located. There is no need to bring up that dialog to search for it, just to make the switch because you can't find it among all opened tabs!
                                
                        
                
        

        
        

        
        
                Description
                

                
                If you have been using the mouse to move your tabs to the left tab corner, you probably already know. It's tedious work, especially on Linux where it barely even works.
                Even if you make the effort to organize 3 or 4 tabs, eventually they will get closed down, usually by accident which has been killing us for years.
        

                
                
                        Finally, after waiting many years for this functionality, we decided to create a plugin that allow you to move tab left and right&lt; using the keyboard..
                
                
        

        
        
                How to use
                
                            Open Intellij preferences. Navigate to Keymap and search for momomo.com in the text field.
                                You will see all available actions that are configure by the keyboard.
                                
                        
                        
                                Set your keyboard shortcuts for various actions!
                                
                        
                        
                                
                                        Note! If you updated the plugin shortcuts might occasionally have to be reconfigured.
                                
                        
                
        

        
        
                We also recommend to enable following settings

                
                        
                                Open new tabs at the end &nbsp;&nbsp;-&gt; Check
                                
                        
                        
                                When closing active editor -&gt; The tab on the right.
                                
                        
                        
                                When closing active editor -&gt; Activate most recently closed tab is buggy in Intellij which leads to editors no longer opening at the end) at times and messing tab order.

                                
                                We could not use/rely on activate most recently closed tab together with open new tabs at end.
                                Instead, use our own Close Regardless If Pinned Or Not from 
        prevent pinned tabs from closing plugin
 instead and it will activate most recently closed tab for you instead. We recommend you bind that to Bind that to CTRL or COMMAND + SHIFT + W
                        
                

                
                This way the plugins will work in a consistent and predictable manner, and your tabs will always stay organized.
        

        
        

        

        
                
                        If you like this plugin and would like us to keep coming out with more software that helps make you more productive, please consider making a contribution to our opensource team.
                        
                        All extra cash donated goes directly to our opensource developers which does make a difference for each person since they do this mostly on their own freetime.
                

                
                
                        
                                
                        
                
        

        
        
                Want to contribute to making these ideas happen, faster and better?
                We will of course share any donated proceeds with anyone contributing to the effort.
                Let's take control of our development environment!
      '';
    };
  }) {};

  a-prevent-pinned-tabs-from-closing-plugin---by-momomo-com = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "A-prevent-pinned-tabs-from-closing-plugin---by-momomo.com";
    plugname = "A prevent pinned tabs from closing plugin - by momomo.com";
    plugid = "A prevent pinned tabs from closing plugin - by momomo.com";
    version = "17.850";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8442/82067/momomo.com.intellij.plugins.Prevent.jar";
      sha256 = "0xmi82smj1m2bj5vzal38ip19shx72wcwla9q8fkbwk3py3m86zn";
      name = "A-prevent-pinned-tabs-from-closing-plugin---by-momomo.com-17.850.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://momomo.com";
      license = lib.licenses.artistic2;
      description = ''
        Other useful Intellij plugins by momomo.com
                
                        

                                A move tab left and right using the keyboard plugin

                                
                                It is an excellent extension of this plugin that together will allow you to organize important tabs for instance to the very left, and once pinned, they will always stay there.

                                
                                
                                        When this and  move tab left and right using the keyboard plugin  are used together, you could pin the most important and frequently used files, then move the pinned tabs to the left corner using the keyboard and they will always stay there!
                                

                                
                                
                                        You always know now where your files and tabs are located. There is no need to bring up that dialog to search for it, just to make the switch because you can't find it among all opened tabs!
                                
                        
                
        

        
        

        
        
                Description
                

                Pin a tab in Intellij has long been a functionality that only have effect when you "close all tabs but pinned".

                
                
                        Finally, after waiting many years for this functionality, we decided to create a plugin that allow you to prevent a pinned tab from closing unless you use a special short cut named Close Regardless..
                
                
                This means that you can pin your most important and frequently used tabs and files and be sure they don't just disappear when you are closing down all other files and clutter that's often the result when navigating classes, interfaces and files just to have a peek. The pinned ones will  always stay there, until you unpin them.
        

        
        
                This also means that groups won't accidentally be closed down if at least one tab/file is pinned. So now you can keep your css, js groups and they won't disappear.
        

        
        
                Another feature with this plugin is when you are trying to close a pinned tab, it will switch to next left tab, allowing you to quickly navigate pinned tabs and close down all unpinned ones.
        

        
        
                Now we just need a similar plugin for all other software, Chrome, Firefox, Linux distros and so on. The Chrome extensions available are no good, because pinning a tab always move the pinned tab to the right, preventing you from properly organizing them.
        
        

        
        
                How to use
                
                            Open Intellij preferences. Navigate to Keymap and search for momomo.com in the text field.
                                You will see all available actions that are configure by the keyboard.
                                
                        
                        
                                Set your keyboard shortcuts for various actions!
                                
                        
                        
                                
                                        Note! If you updated the plugin shortcuts might occasionally have to be reconfigured.
                                
                        
                
        

        
        
                We also recommend to enable following settings

                
                        
                                Open new tabs at the end &nbsp;&nbsp;-&gt; Check
                                
                        
                        
                                When closing active editor -&gt; The tab on the right.
                                
                        
                        
                                When closing active editor -&gt; Activate most recently closed tab is buggy in Intellij which leads to editors no longer opening at the end) at times and messing tab order.

                                
                                We could not use/rely on activate most recently closed tab together with open new tabs at end.
                                Instead, use our own Close Regardless If Pinned Or Not from 
        prevent pinned tabs from closing plugin
 instead and it will activate most recently closed tab for you instead. We recommend you bind that to Bind that to CTRL or COMMAND + SHIFT + W
                        
                

                
                This way the plugins will work in a consistent and predictable manner, and your tabs will always stay organized.
        

        
        

        

        
                
                        If you like this plugin and would like us to keep coming out with more software that helps make you more productive, please consider making a contribution to our opensource team.
                        
                        All extra cash donated goes directly to our opensource developers which does make a difference for each person since they do this mostly on their own freetime.
                

                
                
                        
                                
                        
                
        

        
        
                Want to contribute to making these ideas happen, faster and better?
                We will of course share any donated proceeds with anyone contributing to the effort.
                Let's take control of our development environment!
      '';
    };
  }) {};

  a8translate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "A8Translate";
    plugname = "A8Translate";
    plugid = "org.ice1000.a8translate";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9630/58418/plugin.jar";
      sha256 = "07k7daa9g75yfr2aci5wkrx0fpgkpg0pyyxfcmjzi48qriwg45fa";
      name = "A8Translate-1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ice1000.org/";
      license = lib.licenses.gpl3Only;
      description = ''
        一款功能强大的翻译插件。
      原作: https://github.com/PingerOne/A8Translate
      GitHub: https://github.com/ice1000/A8Translate

      作者: wanpingping, ice1000
      '';
    };
  }) {};

  aba = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ABA";
    plugname = "ABA";
    plugid = "com.chinaedu.aedu.plugin";
    version = "4.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10259/79716/ABA.jar";
      sha256 = "0zq1wc48faizqky225q5cb09f3g29j87s1w4h9fx7mw17q365954";
      name = "ABA-4.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.afterfinal.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.afterfinal.com";
        free = false;
      };
      description = ''
        Plugin for: 
      1）Generate fields for Butterknife; 
      2）Generate fields by findViewById; 
      3）Generate MVP structure for Aedu Frame; 
      4）Generate Java bean with Gsonformat
      5）ADB Install
      Directions: 
      http://docs.deparse.com/
      '';
    };
  }) {};

  acode-time = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ACode-Time";
    plugname = "ACode Time";
    plugid = "com.taobao.intellij.plugin";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15282/101206/codeTime.zip";
      sha256 = "0nqcl9zgsjiqxwdzqfn0j7wbz6rj8s14ih42xlff9ar801r3abb4";
      name = "ACode-Time-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.taobao.com";
      license = lib.licenses.asl20;
      description = ''
        Statistics JetBrains coding time plug-in, currently does not open the data reporting function.
      Automatically identifies whether or not you are currently coding and counts the amount of time you have spent coding for the rest of the day
      '';
    };
  }) {};

  adb-android-debug---remote-deviceremote-cloud-mobile = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ADB-Android-Debug---Remote-DeviceRemote-Cloud-Mobile";
    plugname = "ADB Android Debug - Remote Device/Remote Cloud Mobile";
    plugid = "com.github.hoangld93";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14151/88500/AndroidWiFiADB-1.5.zip";
      sha256 = "1by4y7qmw4vh58fvbhgsjcrha6wdmd5xbmj79vc43m86as0p09nd";
      name = "ADB-Android-Debug---Remote-DeviceRemote-Cloud-Mobile-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/hoangld93";
      license = lib.licenses.mit;
      description = ''
        ADB Android Debug - Remote Device/Remote Cloud Mobile
      
      1 - ADB debugging over TCP/IP in local WiFi network
      
      Support full building, running, install, debug adb options over wifi without a cable.
      
      
      
      
      
      Follow by steps:
      
      1.1 Connect your device using a USB cable.
      
      1.2. Click on menu ADBWifi / Connect Device... (Also you can connect your device in ADB Wifi Remote at right tooltip menu). If it's successfully, it will show a notification your device is connected
      
      1.3. Now you can unplug your USB cable and enjoy deploying, running and debugging your applications over WiFi.
      
      Others: You should see your device status on right tooltips menu of Android Studio, it gives you some option for your connection
     
      2 - ADB debugging over TCP/IP by internet connection
      
      
      
      
      
      2.1 Connect your device using a USB cable to start ADB server in local machine
      
      2.2 Open ADB wifi IP at right tooltip menu
      
      2.3 Input public IP Address and NAT port of device want to connect
      
      2.4 Once a successful notification appear, you can see the status device and do some action in ADB Wifi Remote at right tooltip menu
      '';
    };
  }) {};

  adb-friendly = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ADB-Friendly";
    plugname = "ADB Friendly";
    plugid = "jp.gcreate.plugins.adbfriendly";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8323/25616/Adb_Friendly-0.2.0.zip";
      sha256 = "0an0ga6z735pxqf08izyzjjjismjffr6264shik6ji3848y9v2l7";
      name = "ADB-Friendly-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gen0083/AdbFriendly";
      license = lib.licenses.asl20;
      description = ''
        ADB Friendly is a Android Studio plugin to provide some useful functions via ADB.
 The plugin can rotate screen on connected devices or emulators only now. But I will add to some features. If you have requests feel free to contact me :) 
 Usage:
 Install the plugin then icon is added to toolbar.
 If you using Android Studio, it was added to the menu inside Tools &gt; Android.
 Click the icon or menu then dialog pop up.
 
 Now the plugin automatically connect to adb but it was not work well on Windows.
 If your devices are not shown on the dialog, please try to run some adb command (e.g. "adb devices") from the terminal. (You can use adb command, the plugin can access adb and display devices.)
      '';
    };
  }) {};

  adb-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ADB-Idea";
    plugname = "ADB Idea";
    plugid = "com.developerphil.adbidea";
    version = "1.6.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7380/91400/adb_idea-1.6.2.zip";
      sha256 = "122w106h9j4a6sdx08raizkiww3id7z4h8cfmbidqg0lhpjh6hqa";
      name = "ADB-Idea-1.6.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pbreault/adb-idea";
      license = lib.licenses.asl20;
      description = ''
        Adds the following ADB commands to Android Studio and Intellij:
        
            ADB Uninstall App
            ADB Kill App
            ADB Start App
            ADB Restart App
            ADB Clear App Data
            ADB Clear App Data and Restart
            ADB Start App With Debugger
            ADB Restart App With Debugger
            ADB Grant/Revoke Permissions
            ADB Enable/Disable Wi-Fi
            ADB Enable/Disable Mobile Data
        
        
        There are two basic ways to invoke a command:
        
            Through the Tools-&gt;Android-&gt;ADB Idea menu
            By searching for "ADB" in "Find Actions" (osx: cmd+shift+a, windows/linux: ctrl+shift+a)
      '';
    };
  }) {};

  adb-uninstall = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ADB-Uninstall";
    plugname = "ADB Uninstall";
    plugid = "com.vv.adbuninstall";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7326/105935/ADB-Uninstall-1.1.4.zip";
      sha256 = "1lajzzbsy04wihjpk119kv2zrgwmzfqhpx1a8q477g9hw8x7vvps";
      name = "ADB-Uninstall-1.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Ghedeon/ADB-Uninstall";
      license = lib.licenses.asl20;
      description = ''
        Android Studio/Intellij IDEA plugin which provides simple visual uninstalling support for android applications.
      '';
    };
  }) {};

  adb-wi-fi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ADB-Wi-Fi";
    plugname = "ADB Wi-Fi";
    plugid = "dev.polek.adbwifi";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14969/106000/ADB_Wi-Fi-1.2.1.zip";
      sha256 = "113balybf37diz2p30zm46msrhyjvrvqqmkvib82zw4xz36x2b8h";
      name = "ADB-Wi-Fi-1.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/y-polek/ADB-Wi-Fi";
      license = lib.licenses.asl20;
      description = ''
        This plugin simplifies the usage of ADB's "Connect over Wi-Fi" feature.
      '';
    };
  }) {};

  adb-wifi-connect = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ADB-WiFi-Connect";
    plugname = "ADB WiFi Connect";
    plugid = "dk.appdictive.adbwificonnect";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9717/38249/ADBWiFiConnect-1.7.zip";
      sha256 = "13kd8gfsxcrf8fl59phj8mjpfz0sdaaarhb142f4y07kvm8jp1d1";
      name = "ADB-WiFi-Connect-1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/appdictive";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/appdictive/ADBWiFiConnect/blob/master/README.md";
        free = false;
      };
      description = ''
        ADB WiFi Connect enables you to ADB connect to your Android devices over WiFi to run and debug your Android apps without needing a USB cable (except for initial connect).&lt;\br&gt; The window shows you a live updated list of Android devices connected to the computer - including their Android version name and SDK levels. For each USB connected Android device you can connect to it over WiFi and then save the connection for future use so next time you won't even need the cable at all! After establishing connection over WiFi you can unplug the USB cable and continue developing and debugging wirelessly.
      '';
    };
  }) {};

  adbhelper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ADBHelper";
    plugname = "ADBHelper";
    plugid = "cn.xhuww.ADBHelper";
    version = "1.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14333/92960/ADBHelper-1.1.6.zip";
      sha256 = "0cc1ixn97yf2s4c9nwn6sp2r78vj46h3wdl82r4kkcax2y35yiib";
      name = "ADBHelper-1.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.xhuww.cn";
      license = lib.licenses.asl20;
      description = ''
        A plug-in based on ADB, the main functions :
        
            Get app information
            Get device information
            Get app start time
            Quickly clear debug app data
            Quickly start the app settings page
            Get current activity and fragment information of the app
            UrlScheme Test Helper
      '';
    };
  }) {};

  adncode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ADNCode";
    plugname = "ADNCode";
    plugid = "net.stateful.jetbrains.ADNCode";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7492/19497/ADNCode-1.3.zip";
      sha256 = "0xx27mmqfbylh7wna9390298bp671yfg70z4vz57cpjmx0bw2avp";
      name = "ADNCode-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mgrimes/adncode";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mgrimes/ADNCode/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Posts selected code to App.net. (Requires an App.net account) 
Uploads image of text selection to App.net w/post text (code comment?).
      '';
    };
  }) {};

  aem-ide = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AEM-IDE";
    plugname = "AEM IDE";
    plugid = "co.nums.intellij.aem";
    version = "2020.3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9269/102350/aem-ide-2020.3.4-dist.zip";
      sha256 = "0hhphblhp5dnjlr7m0wm9pxjdhkf2y820l6yfp0zsyy7z28460lh";
      name = "AEM-IDE-2020.3.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://aemide.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://aemide.com/eula/";
        free = false;
      };
      description = ''
        AEM IDE - Intellij Platform plugin for Adobe Experience Manager
        More information is available at https://aemide.com.
        
            Features:
            
                Rich HTL/Sightly support
                    
                        syntax validation and highlighting
                        auto-completion (including Java classes and members)
                        inspections (including XSS-related)
                        references and refactoring support
                        documentation support (including detailed examples for HTL blocks, options, etc.)
                    
                
                Sling references support (in Java/HTL/XML/JSON)
      '';
    };
  }) {};

  aem-script-console = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AEM-Script-Console";
    plugname = "AEM Script Console";
    plugid = "com.github.davidjgonzalez.intellij.aemscriptconsole";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12320/61682/intellij-plugin__aem-script-console.zip";
      sha256 = "0gd1jwwf2hm7d0d9p9ms2y6ipmg1cq2lw4fsa2zykf7w60cw38ld";
      name = "AEM-Script-Console-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/davidjgonzalez";
      license = lib.licenses.asl20;
      description = ''
        AEM Script Console is an IntelliJ run configuration that sends the active IntelliJ document to AEM which using ACS AEM Tools executes the file as a script and returns the output to IntelliJ's console view.
      '';
    };
  }) {};

  aem-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AEM-Support";
    plugname = "AEM Support";
    plugid = "de.victorsaar.intellij.aem";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9863/104386/intellij-aem-1.3.1.zip";
      sha256 = "0ss8vhq5bxb5qi5950nrp1k6j1w28zyp0lamx9mi0k78ks89lv1l";
      name = "AEM-Support-1.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://intellij-aem.gitlab.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://intellij-aem.gitlab.io/eula.html";
        free = false;
      };
      description = ''
        Plugin that adds various features supporting development for Adobe Experience Manager (AEM). Check out the
        Documentation section for a guide on how to get started.
        Features
        Take a look here for a comprehensive list of provided Features.
        
            Jackrabbit FileVault - Custom language support, code completion and inspections
            AEM/Sling Components - Code completion, navigation and refactoring support
            Direct integration with AEM - Code completion and content export
            OSGi Components and Configuration
                
                    Custom language support for OSGi config files
                    Code completion, inspections, navigation and refactoring support for OSGi configuration properties
                    Integration of deployed OSGi bundles into project for advanced debugging and code completion
      '';
    };
  }) {};

  aem-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AEM-Tools";
    plugname = "AEM Tools";
    plugid = "com.aemtools";
    version = "0.9.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9397/52800/aemtools-0.9.0.1.zip";
      sha256 = "1xrkk9rawijd6mc32pfi7bpfc29js6a5w0g0b8ky8zvqqbg0jgca";
      name = "AEM-Tools-0.9.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aemtools/aemtools";
      license = lib.licenses.gpl3Only;
      description = ''
        AEM Tools is an IntelliJ Platform plugin that provides set of
        Adobe Experience Manager related extensions and features
       
        HTL(Sightly) support:
            
                Syntax Highlighting
                Code Completion
                Code Navigation
                Rename Refactoring
                Quick Documentation (ctrl+q)
                Java Use API support (Sling Models &amp; Use Classes)
            
            
            Note: to make the completion work, AEM dependencies should be present in
            project's POM, the project should be indexed
            
        

        OSGi
            
                Resolves OSGi configs (Felix)
                Resolves OSGi properties (Felix)
            
        
        dialog.xml completion for Classic UI
        HTL &amp; OSGi &amp; AEM Inspections
        Implementation of
            
            Cognifide AEM Rules for SonarQube as IntelliJ inspections
      '';
    };
  }) {};

  alm-octane = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ALM-Octane";
    plugname = "ALM Octane";
    plugid = "com.hpe.adm.octane.ideplugins.intellij";
    version = "2020.2-15.1.40.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9540/104333/Octane_IntelliJ_Plugin-2020.2-15.1.40.7.zip";
      sha256 = "1r4ya6wqz67ib8ggybidpfzs8xdhp29zkif57j2mqspd906g2368";
      name = "ALM-Octane-2020.2-15.1.40.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.microfocus.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/MicroFocus/octane-intellij-plugin/master/LICENSE";
        free = false;
      };
      description = ''
        Enables integration with ALM Octane.
        Compatible with ALM Octane version 12.53.20 and above.
        For a better experience rendering the backlog item detail views, please install the JavaFX Runtime for Plugins plugin.
      '';
    };
  }) {};

  alittlescript = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ALittleScript";
    plugname = "ALittleScript";
    plugid = "as.alittleide.com";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12058/64887/ALittleScript.jar";
      sha256 = "0jpjpzlyaj0avm7rbmvb4iqd87fkp5ahq8z6y8yp5g1iqffy8srf";
      name = "ALittleScript-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alittlesail/ALittleScript-IntelliJ.git";
      license = lib.licenses.gpl3Only;
      description = ''
        Both typed and dynamic languages
    Auto Generate:
    
         Lua 
         JavaScript 
    
    Features:
    
        class, struct, enum, extends
        Syntax highlighting
        Code completion
        Find usages
        Go to definition
        Go to symbol
        Go to class
        Parameter name hints
        Comment based type/class annotation
        Structure view
        Comment in/out
        Method override line marker
    
    Library:
    
        ALittle across Standard Library/API
        LuaJIT 5.1 Standard Library/API
    
    中国朋友可以加QQ群629311504交流及反馈BUG
      '';
    };
  }) {};

  ansi-highlighter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ANSI-Highlighter";
    plugname = "ANSI Highlighter";
    plugid = "com.alayouni.ansiHighlight";
    version = "1.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9707/40899/ansi-highlighter.jar";
      sha256 = "14q2n5rk7q0zjqrgwp0fpi1ghxyhbrcny73bpmi3x6m63z6i2scp";
      name = "ANSI-Highlighter-1.2.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Donate 
This plugin supports the rendering of the most common ANSI graphic rendition sequences under IntelliJ editor. The following features are available: 
 
  Configurable 'ANSI Aware' file extensions: 
   
   Go to Preferences | Editor | File Types 
   Under 'Recognized File Types' select 'ANSI Aware' 
   Under 'Registered Patterns' add your custom 'ANSI Aware' file name patterns, *.log is added by default 
   Press 'Apply' 
    
  Switch between Preview and Plain mode: 
   
   Right click on the editor 
   Press 'Switch to Plain/Preview Mode' 
   Alternatively use the shortcut 'ctrl meta A' while on the editor 
    
  Only the below graphic rendition codes are supported: 
   
   Reset code (0) 
   Bold code (1) 
   Italic code (3) 
   Single Underline code (4) 
   All text foreground color codes (30-37) 
   All text background color codes (40-47) 
    
  Customize ANSI colors: 
   
   Go to Preferences | Editor | Colors &amp; Fonts | Console Colors 
   Expand 'ANSI Colors' 
   Customize the following foreground/background colors: 
     
     Black 
     Red 
     Green 
     Yellow 
     Blue 
     Magenta 
     Cyan 
     White 
     Other colors are only supported by the console (not by the editor). 
      
   Press 'Apply'
      '';
    };
  }) {};

  antlr-v4 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ANTLR-v4";
    plugname = "ANTLR v4";
    plugid = "org.antlr.intellij.plugin";
    version = "1.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7358/108410/antlr-intellij-plugin-v4-1.16.zip";
      sha256 = "1z3a543qwb3k08ry3rkxnn3z814m5g1ww5cn9cl4idxhwbn26jbs";
      name = "ANTLR-v4-1.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/antlr/intellij-plugin-v4";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/antlr/intellij-plugin-v4/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin is for ANTLR v4 grammars and includes ANTLR 4.9.1. It works with
      2016.2-2020.3.  It should work in other JetBrains IDEs.
     

     
      syntax highlighting
      syntax error checking
      semantic error checking
      navigation window
      goto-declaration
      find usages
      rename tokens
      rename rules
      comment grammar rule lines with meta-/ (1.7)
      save parse trees as svg/jpg/png; right click in parse tree view (1.9)
      grammar/comment folding (1.7)
      generates parser code; shortcut (ctrl-shift-G / meta-shift-G) but it's in Tools menu and popups.
      code completion for tokens, rule names;
      finds tokenVocab option for code gen if there is a tokenVocab option, don't warn about implicit tokens.
      handles separate parsers and lectures like TParser.g4 and TLexer.g4 (1.7)
      Parse tree nodes show the alternative number the parser chose to match that node. (1.7)
      has live grammar interpreter for grammar preview. Right click on rule and say "Test ANTLR Rule".
      view parse trees in hierarchy (sideways tree) view. (1.8)
      can view parse trees for input matched in more than one way (ambiguities) (1.7)
      can view lookahead trees to show how input directed ANTLR to match a particular alternative (1.7)
	 changes to grammar seen in parse tree upon save of grammar.
	 works with all JetBrains IDEs (1.8)
	 refactoring: extract rule, inline rule (1.8), dup rule to make refs unique
     

      Generates code in /gen/package/YourGrammarRecognizer.java
      unless you override in the configuration dialog.
      Shortcut to generate parsers is ctrl-shift-G / meta-shift-G but it's in Tools menu, popups.

      Code completion for tokens, rule names. finds tokenVocab option for code gen
          if there is a tokenVocab option, don't warn about implicit tokens.
          shortcut conflicted with grammar-kit plugin. Has live grammar interpreter
          for grammar preview. Right click on rule and say "Test ANTLR Rule".
          Changes to grammar seen in parse tree upon save of grammar.
  
          You can configure the ANTLR tool options per grammar file; right-click
          in a grammar or on a grammar element within the structured view.
          When you change and save a grammar, it automatically builds with ANTLR
          in the background according to the preferences you have set.  ANTLR
          tool errors appear in a console you can opened by clicking on a button
          in the bottom tab.
  
          You can use the ctrl-key while moving the mouse and it will show you
          token information in the preview editor box via tooltips.

  
          Errors within the preview editor are now highlighted with tooltips
          and underlining just like a regular editor window. The difference
          is that this window's grammar is specified in your grammar file.

See README.md
for more details.


For really big files and slow grammars, there is an appreciable delay when displaying the parse tree or profiling information.


Github source
      '';
    };
  }) {};

  api-proposal-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "API-Proposal-Support";
    plugname = "API Proposal Support";
    plugid = "com.skritskiy.api.proposals";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11299/51876/ApiProposalsPlugin.jar";
      sha256 = "0d5x7pq4bka7ksr9lv67yas4ybg3ym08ccc7xbgvkzi87jxqg96w";
      name = "API-Proposal-Support-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Api Proposals support.
      '';
    };
  }) {};

  apksearch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "APKSearch";
    plugname = "APKSearch";
    plugid = "com.sire.plugin.apk.search";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14561/89721/APKSearch.zip";
      sha256 = "0vhz1c1q22nyfky03dbqcgrivv8ig8bl6y1dvs0cibrccshdz918";
      name = "APKSearch-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SireA";
      license = lib.licenses.asl20;
      description = ''
        A tool used to search special string in APK,and display them in a file list.A search method string like 'com.jetbrains.Test#test'.A search  class string like 'com.jetbrains.Test'.Use quick keys 'control alt F F' to open input pan .You will get result file under project directory.
      '';
    };
  }) {};

  aql-arangodb-query-language = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AQL-ArangoDB-Query-Language";
    plugname = "AQL (ArangoDB Query Language)";
    plugid = "com.arangodb.intellij.aql";
    version = "1.0.5-2019.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11397/71099/aql-1.0.5.zip";
      sha256 = "1vh4bhmh1ajcr19akw44ypzkj8zghn5dcrb0h6hrlib1sbcam8km";
      name = "AQL-ArangoDB-Query-Language-1.0.5-2019.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.machak.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ArangoDB-Community/aql-intellij-plugin/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        AQL  ArangoDB Query Language support
      
        Syntax highlighting
        Find usages
        Refactorings
        Quick docs
        Go to usages
        Execute queries
      '';
    };
  }) {};

  arouter-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ARouter-Helper";
    plugname = "ARouter Helper";
    plugid = "arouter-roadsign";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11428/53182/arouter-idea-plugin.zip";
      sha256 = "0ya55nd45f1sw6aisjxmaqq5q5lw1gqhxzqwbqgk2353wkaih1g6";
      name = "ARouter-Helper-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.alibaba.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/alibaba/ARouter/master/LICENSE";
        free = false;
      };
      description = ''
        Support to track navigation target.
      '';
    };
  }) {};

  arouter-navigate-function-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ARouter-Navigate-Function-Generator";
    plugname = "ARouter Navigate Function Generator";
    plugid = "com.helloyuyu.plugin.arouternavigatefunctiongenerator";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11937/57809/ARouterPageStartFunctionGeneratorPlugin.jar";
      sha256 = "0290n3b7jy6warvg7zcizxcb0r1alzqpayjnbnb2jhlqxcwax54x";
      name = "ARouter-Navigate-Function-Generator-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Plugin to generate start activity functions.
      '';
    };
  }) {};

  asj-dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ASJ-Dark-Color-Scheme";
    plugname = "ASJ Dark Color Scheme";
    plugid = "color.scheme.ASJ Dark";
    version = "0.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14769/96812/ASJ_Dark.jar";
      sha256 = "0icay4hzyjy02h46gzxr7hccz12qxlj988jj8b8zkcx6b3yq1a63";
      name = "ASJ-Dark-Color-Scheme-0.22.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/14769-asj-dark-color-scheme/";
      license = lib.licenses.gpl3Only;
      description = ''
        Dark Theme, inspired by Honeybee theme
      '';
    };
  }) {};

  asm-bytecode-outline = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ASM-Bytecode-Outline";
    plugname = "ASM Bytecode Outline";
    plugid = "ASM Bytecode Outline";
    version = "0.3.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5918/18619/asm-bo-0.3.5.zip";
      sha256 = "01lsbx6cz7ywx5b7nlcbm4gmqw0arw175iq03wdgh3fvxym58kcd";
      name = "ASM-Bytecode-Outline-0.3.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Displays bytecode for Java classes and ASMified code which will help you in your class generation.
      '';
    };
  }) {};

  asm-bytecode-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ASM-Bytecode-Viewer";
    plugname = "ASM Bytecode Viewer";
    plugid = "ASM Bytecode Viewer";
    version = "7.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10302/65971/asm-bytecode-intellij-7.2.zip";
      sha256 = "00z8kp8v9qhvx5dvii5sffwvz3nw6q8gzmszs153bp8jxg3vrl2z";
      name = "ASM-Bytecode-Viewer-7.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/elitegit/asm-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Displays bytecode for Java classes and ASMified code which will help you in your class generation.
      '';
    };
  }) {};

  asm-bytecode-viewer-support-kotlin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ASM-Bytecode-Viewer-Support-Kotlin";
    plugname = "ASM Bytecode Viewer Support Kotlin";
    plugid = "ASM Bytecode Viewer Support Kotlin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14860/94366/asm-intellij-plugin-1.0.zip";
      sha256 = "0y2bdai3p46w80x8i7lcj4653fxllf0qx1bhdq9g013nbpl6fbmh";
      name = "ASM-Bytecode-Viewer-Support-Kotlin-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/qinhehu/asm-bytecode-viewer-kotlin";
      license = lib.licenses.asl20;
      description = ''
        Displays bytecode for Java or Kotlin classes and ASMified code which will help you in your class generation.
        Usage: 
        - Open ASM Bytecode Viewer from NavBar &gt; code &gt; ASM Bytecode Viewer
      '';
    };
  }) {};

  atg-inspections = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ATG-Inspections";
    plugname = "ATG Inspections";
    plugid = "ATG Inspections";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2702/5485/ATG_Inspections_5485.jar";
      sha256 = "0xpbbnvl1did4bxbk6a32jrlx4mkc37ryhi35dplam2ddcspi9jb";
      name = "ATG-Inspections-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Provides inspections specific to ATG environment.
      '';
    };
  }) {};

  atg-toolkit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ATG-Toolkit";
    plugname = "ATG Toolkit";
    plugid = "atg-toolkit";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10951/86212/ATG-Toolkit-1.5.zip";
      sha256 = "0vqx4zrrbmr837v7layk6y278hdhry33mi5lgj3krwxv4xyv95ip";
      name = "ATG-Toolkit-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chivaler/ATG-Toolkit";
      license = lib.licenses.asl20;
      description = ''
        Plugin simplifies development of Oracle Commerce modules (former ATG)
      Available navigation and  suggestions for Nucleus IoC components
      '';
    };
  }) {};

  aws-tail = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AWS-Tail";
    plugname = "AWS Tail";
    plugid = "tech.central.ai.awstail";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10342/60115/plugin-1.5.zip";
      sha256 = "1vmfxhx429xl0hq3syln9fajvyifm0ga52yw2rhgvwac9zlcv10x";
      name = "AWS-Tail-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "github.com/godzsa";
      license = lib.licenses.mit;
      description = ''
        A simple way to see your Amazon CloudWatch Logs without closing your IDE :)
     File issues, bugs, requests here

    Before using the plugin set up credentials at the Settings menu. See the README

    !!! This is still a work in progress !!!

    Features:
        
            Tail CloudWatch logs with follow option
            Filter by group names (comma separated keywords)
            Since - Until filter
            Output logs from every stream
            Searchable output(IntelliJ native)
            Setup from: Profiles (credentials file), Environment variables or custom
            Handles Assumed Roles
            Settings per project (see the CloudWatch Logs relevant to the project you are working on)
      '';
    };
  }) {};

  aws-toolkit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AWS-Toolkit";
    plugname = "AWS Toolkit";
    plugid = "aws.toolkit";
    version = "1.22-203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11349/104287/aws-jetbrains-toolkit-1.22-203.zip";
      sha256 = "116qs7qxj2fps9597g8g16s4dwglqv3ivrxcd8vlmyahfb23nsm1";
      name = "AWS-Toolkit-1.22-203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aws/aws-toolkit-jetbrains";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/aws/aws-toolkit-jetbrains/blob/master/LICENSE";
        free = false;
      };
      description = ''
        The AWS Toolkit for JetBrains makes it easier to write applications built on Amazon Web Services.
If you come across bugs with the toolkit or have feature requests, please raise an
issue on our GitHub repository.



See the user guide for how to get started, along
with what features/services are supported.


Features:


    
       Authentication - Connect to AWS using static credentials, credential process, or AWS SSO.
    

    
        Resource Explorer - View and manage AWS resources
    

    
        Run/Debug Local Lambda Functions - Locally test and step-through debug functions in a
        Lambda-like execution environment provided by the AWS SAM CLI. Supports Java, Python, Node.js, and .NET Core.
    

    
       Deploy SAM-based Applications - Package, deploy &amp; track SAM-based applications
    

    
        CloudWatch Logs - View and search CloudWatch log streams
    

    
        S3 Explorer - Manage S3 buckets, and upload to/download from S3 buckets
    

    
        See the user guide for a full list of services and features supported
      '';
    };
  }) {};

  abacus-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Abacus-Plugin";
    plugname = "Abacus Plugin";
    plugid = "ABACUS Plugin";
    version = "4.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9378/105031/AbacusPlugin-4.5.zip";
      sha256 = "1p3ki18yiikd1d0ydvj3llfqzjab5ybyyj7lggnizpy9rgv91mj7";
      name = "Abacus-Plugin-4.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://wiki.abacus.ch/display/DEV/Abacus+Plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://classic.abacus.ch/downloads-page/lizenzbestimmungen/";
        free = false;
      };
      description = ''
        This plugin provides Abacus-specific functionality, mainly:
    
        NLS translation
        VCS Merge
        AbaCheck integration
    
    For instructions on how to download, install, and use the features of the plugin, refer the
      Abacus plugin documentation.
      '';
    };
  }) {};

  accelerator-market = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Accelerator-Market";
    plugname = "Accelerator Market";
    plugid = "com.pwc.accelerator.market";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12554/63945/AcceleratorMarketPlugin.zip";
      sha256 = "0wr56c7947idjgpfvdbcyi22l2ywvy6lmmjk5n5407j8mhgjay3m";
      name = "Accelerator-Market-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.pwc.com";
      license = lib.licenses.epl20;
      description = ''
        This plugin is used to retrieve or install available Guidewire accelerators.
      '';
    };
  }) {};

  accessors-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Accessors-Plugin";
    plugname = "Accessors Plugin";
    plugid = "Accessors Plugin";
    version = "0.9.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1298/5165/Accessors_Plugin_5165.jar";
      sha256 = "18sklbz5hb6rq6914jb3nfg1wjrwdps9ql0w7j86qbh36agsjbmf";
      name = "Accessors-Plugin-0.9.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1298/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1298/sourceCode.zip";
        free = false;
      };
      description = ''
        The Accessor Plugin provides two intention action which can be used to
   replace direct accesses of a property of a class with a suitable getter or
   setter method.
      '';
    };
  }) {};

  accurev-integration-for-intellij = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AccuRev-Integration-for-IntelliJ";
    plugname = "AccuRev Integration for IntelliJ";
    plugid = "AccuRev";
    version = "2018.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10372/48683/accurev_plugin_for_intellij_2018.2-bin.zip";
      sha256 = "12kh8w85bcxpvd5pcijvcz813f1n88z9gy32iwja1d37jiscf3ms";
      name = "AccuRev-Integration-for-IntelliJ-2018.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://supportline.microfocus.com/websync/productupdatessearch.aspx";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.microfocus.com/documentation/accurev/accupluginintellij-2018.1/";
        free = false;
      };
      description = ''
        AccuRev is the leading provider of process-centric software configuration management (SCM) with a
        best-of-breed approach to application lifecycle management (ALM). This approach enables unlimited, adaptable,
        and compliant process models, offering customers maximum flexibility and control.
      '';
    };
  }) {};

  acejump = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AceJump";
    plugname = "AceJump";
    plugid = "AceJump";
    version = "3.6.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7086/89679/AceJump.zip";
      sha256 = "14xip6qk8j9lpx3hni9lzi6nyfjsyg12zib6spihmrypfpy77j22";
      name = "AceJump-3.6.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/acejump/AceJump";
      license = lib.licenses.gpl3Only;
      description = ''
        AceJump allows you to quickly navigate the caret to any position visible in the editor.
    See a demo of AceJump in action!
    Simply hit "ctrl+;", type a character, then type the matching character to Ace Jump.
      '';
    };
  }) {};

  acejump-lite = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AceJump-Lite";
    plugname = "AceJump-Lite";
    plugid = "me.ihxq.acejump.lite";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9803/80118/AceJump-Lite.jar";
      sha256 = "15fxdw8ba2z9hb91s0hxspr5jsi7yfhxn99wrldvbw12v2an586w";
      name = "AceJump-Lite-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http:/www.ihxq.me";
      license = lib.licenses.asl20;
      description = ''
        Press ALT + M (default hot key) to active AceJumpChar
      Press ALT + M twice to active AceJumpWord
      '';
    };
  }) {};

  acme-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Acme-Theme";
    plugname = "Acme Theme";
    plugid = "net.bialon.acmeTheme";
    version = "0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14748/98222/intellij-acme.jar";
      sha256 = "1p1zgvk213vi63q7sn9ygxwx0sa3453y34prjcr7cmqdjjaqh2cy";
      name = "Acme-Theme-0.4.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bialon.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mbialon/intellij-acme/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Acme is a light theme for IntelliJ-based IDEs. It's inspired by the Acme text editor.
      '';
    };
  }) {};

  actview = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ActView";
    plugname = "ActView";
    plugid = "com.hzm.act";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12002/58504/actviewer.jar";
      sha256 = "10mqz1x4ffgnnga1ncj3857ayax659cj8clglmd26aaqlsyx7nhh";
      name = "ActView-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://me.csdn.net/hzmming2008";
      license = lib.licenses.bsd2;
      description = ''
        Which activity is alive. Which fragment is alive. 辅助开发人员快速定位到当前App正在显示的Activity及Fragment。
      '';
    };
  }) {};

  actinidia = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Actinidia";
    plugname = "Actinidia";
    plugid = "org.example.actinidia";
    version = "7.5-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14283/95957/actinidia-7.5-SNAPSHOT.zip";
      sha256 = "03pnwx1m35g413cyg7vn04wra35ran7spr8jyy7ws3ick63qrj20";
      name = "Actinidia-7.5-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.alibaba-inc.com";
      license = lib.licenses.asl20;
      description = ''
        Actinidia a tool for case run on commnd 'httpj'.new result and old result will be diffed .keep output
        json format
      '';
    };
  }) {};

  action-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Action-Tools";
    plugname = "Action Tools";
    plugid = "github.zgqq.intellij-enhance";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12605/68310/intellij-enhance-1.5.0.jar";
      sha256 = "1wpvhyz1vyvcpa94753249nafy4j7phqc715xa25wpilkzjxjgg3";
      name = "Action-Tools-1.5.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zgqq/intellij-enhance";
      license = lib.licenses.mit;
      description = ''
        Add some useful actions to Intellij IDEA, such as ChangeArgument, DeleteMethod,
        GotoMethodName, GotoClassName and so on.
      '';
    };
  }) {};

  action-tracker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Action-Tracker";
    plugname = "Action Tracker";
    plugid = "org.jetbrains.action-tracker";
    version = "0.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7641/85105/action-tracker-0.3.2.zip";
      sha256 = "0ga2vzwlgaj8r5sf11qs9nygslz1vqvygazkqli90j1azbwy5kkw";
      name = "Action-Tracker-0.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Allows to record actions performed by user in IntelliJ IDEs. Use Tools | 'Start Tracking' action to start recording,
      and Tools | 'Stop Tracking...' to show the recorded data.
      '';
    };
  }) {};

  actions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Actions";
    plugname = "Actions";
    plugid = "com.gitlab.lae.intellij.actions";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11019/92734/intellij-actions-0.6.zip";
      sha256 = "1njjyh0b2d15hklsw67dig4cizbh3ypl1w5yinj2wfsm81l8sylk";
      name = "Actions-0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/lae/intellij-actions";
      license = lib.licenses.asl20;
      description = ''
        You can invoke these actions via IntelliJ's "Find Action" or "Search Everything"
    functionality, you can also assign keyboard shortcuts to them under
    Preferences | Keymap | Plug-ins | Actions.

    
    Case conversion
    
        Upcase Region or to Word End
        Downcase Region or to Word End
        Capitalize Region or to Word End
    

    
    Rectangular selection
    
        Create Rectangle: Create a rectangular selection between the start and end position of the current multiline selection.
        Delete Rectangle: Delete text within the rectangle between the start and end position of the current multiline selection.
    

    
    Key simulations
    
    When invoked these actions simulate their corresponding keyboard events,
    so they should work in more places than the built-in IntelliJ ones when
    you invoke them via custom keyboard shortcuts.
    
        Escape
        Enter
        Up
        Down
    

    
    Misc
    
        Use "CamelHumps" Words in Current Editor
        No Space: Delete spaces and tabs around cursor.
        One Space: Replace spaces and tabs around cursor with one space.
      '';
    };
  }) {};

  actions-java = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Actions-Java";
    plugname = "Actions Java";
    plugid = "com.gitlab.lae.intellij.actions.java";
    version = "0.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12912/95361/intellij-actions-java-0.4.3.zip";
      sha256 = "0fia24xfyyir7a8rj3mv2w6r5i5lisc4v1yc4iaklrvcv7d98cyk";
      name = "Actions-Java-0.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/lae/intellij-actions-java";
      license = lib.licenses.asl20;
      description = ''
        You can invoke these actions via IntelliJ's "Find Action" or "Search Everything"
    functionality, you can also assign keyboard shortcuts to them under
    Preferences | Keymap | Plug-ins | Actions.

    
    Structural editing:
    
        Kill to Code End: Kill from caret offset to the end of the code block, statement, method etc.
      '';
    };
  }) {};

  actions-tree = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Actions-Tree";
    plugname = "Actions Tree";
    plugid = "com.gitlab.lae.intellij.actions.tree";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11076/91669/intellij-actions-tree-0.4.zip";
      sha256 = "19dkwv61aw6ljrqjn71x71pcsmyiki70jv0ha0fh9jjz65sh140g";
      name = "Actions-Tree-0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/lae/intellij-actions-tree";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows you to define a list of actions to show in a popup, an
    action in the list can be a further action list to show when invoked, or an
    ordinary IDE action. Each action in the list can be assigned a keyboard
    shortcut that is local to the list, doesn't conflict with other global
    shortcuts. This allows simulation of Emacs like prefix keys (n-level deep), so
    you are not restricted to IntelliJ keymap's maximum of two key strokes.
    
    Configuration is done via a JSON file, see here for more details.
      '';
    };
  }) {};

  active-intellij-tab-highlighter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Active-Intellij-Tab-Highlighter";
    plugname = "Active Intellij Tab Highlighter";
    plugid = "com.tobszarny.activetabhighlighter.plugin.id";
    version = "1.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9562/44997/ActiveTabHighlighterPlugin.jar";
      sha256 = "1c3h6g8z616wz8n3izqcn6sjj26lqq94ryccr5f2q34zgha0lpzc";
      name = "Active-Intellij-Tab-Highlighter-1.4.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tobszarny";
      license = lib.licenses.asl20;
      description = ''
        Active Tab Highlighter Plugin for IntelliJ family IDEs
      '';
    };
  }) {};

  activity-stack-view = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Activity-Stack-View";
    plugname = "Activity Stack View";
    plugid = "com.cheng.plugins.activitystackview";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12293/61314/Activity_Stack_View-1.0.0.zip";
      sha256 = "106nna00ybnsrrqpspbff07ayij5ql2iyrh6407dhmzmwb0h3nlq";
      name = "Activity-Stack-View-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chengzhicao";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/chengzhicao/AndroidActivityStackView/blob/master/LICENSE";
        free = false;
      };
      description = ''
        View the stack and properties of the Android Activity in the form of a tree
      '';
    };
  }) {};

  activity-tracker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Activity-Tracker";
    plugname = "Activity Tracker";
    plugid = "Activity Tracker";
    version = "0.1.11-beta";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8126/83839/activity-tracker-plugin.zip";
      sha256 = "15kvn0jm0mij9yw2kij42d2198fszg7zrnqr2x2vg8kjihjrj4bj";
      name = "Activity-Tracker-0.1.11-beta.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/activity-tracker";
      license = lib.licenses.asl20;
      description = ''
        This is a proof-of-concept plugin for tracking and recording IDE user activity.
        Currently the main feature is recording user activity into csv files.
        To use the plugin see "Activity tracker" widget in IDE statusbar.

        The main idea is to mine recorded data for interesting user or project-specific insights,
        e.g. time spent in each part of project or editing/browsing ratio.
        If you happen to use the plugin and find interesting way to analyze data, get in touch on
        twitter or
        GitHub.
        

        For more details see project page on github.
      '';
    };
  }) {};

  activity-watcher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Activity-Watcher";
    plugname = "Activity Watcher";
    plugid = "fr.mary.olivier.aw-watcher";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11361/67316/aw-watcher-1.0.8.zip";
      sha256 = "0wa2yr40hw6mjpgggngzffjvdm9shs0kz7r3iavk20c2qgklz0p9";
      name = "Activity-Watcher-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/OlivierMary";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/OlivierMary/aw-watcher-jetbrains/master/LICENSE.md";
        free = false;
      };
      description = ''
        This extension allows the open source tracking tool ActivityWatch to keep track of the projects and coding languages you use in jetbrains IDEs.
      '';
    };
  }) {};

  activity-createintent-inspection = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Activity-createIntent-Inspection";
    plugname = "Activity createIntent Inspection";
    plugid = "com.github.shiraji.createintentinspection";
    version = "0.1.0";
    src = fetchurl {
      url = "https://github.com/shiraji/create-intent-inspection/releases/download/v0.1.0/create-intent-inspection.jar";
      sha256 = "1ss33y0xvs02gg53k2xdjwaw889yi5ddzpn3r8r86m5161fwvzd3";
      name = "Activity-createIntent-Inspection-0.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/shiraji/create-intent-inspection/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin add a custom inspection that checks Activity implements a public static method of creating its Intent. If Activity is abstract, it won't warn to implement the method.
      '';
    };
  }) {};

  activity-kreateintent-inspection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Activity-kreateIntent-Inspection";
    plugname = "Activity kreateIntent Inspection";
    plugid = "com.github.shiraji.kreateintentinspection";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8424/27664/Activity_kreateIntent_Inspection-1.1.0.zip";
      sha256 = "1k8lvwkvq1xdjqdpimpgq5gcmy037n8qqqfmq7h3vnxb6vx01ksk";
      name = "Activity-kreateIntent-Inspection-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/kreate-intent-inspection/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin add a custom inspection that checks Activity implements a companion object method that creates its Intent. If Activity is abstract, it won't warn to implement the method. This plugin is for Kotlin. For Java user, please use "Activity createIntent Inspection".
      '';
    };
  }) {};

  activitylauncher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ActivityLauncher";
    plugname = "ActivityLauncher";
    plugid = "io.xnc.plugins.androidActLauncher";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11263/53669/androidActivityLauncher-1.1.0.zip";
      sha256 = "0787alc4vnyb11piqh9rbsfz1dfd7qvi1088q64mr9hs36giw0rk";
      name = "ActivityLauncher-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xncHung/intelij_activity_launcher_plugin";
      license = lib.licenses.asl20;
      description = ''
        Android debug activity launcher that you can launch any activity with params

ActivityLauncher is an android debug plugin for intellij idea which you can launch or debug any activity directly with it,

 you also can pass any primitive 、non-parameterized parcelable or serializable args to an activity.

UseGuide

    in your app build.gradle file , add the anchor lib dependency with debugRuntimeOnly, like this:
        debugRuntimeOnly 'io.xnc.intellij.plugin:launchanchor:1.0.2'
    
    
        sync the gradle and install debug variant on your debug device
    
    
        configure the activity route that you want launch.Enjoy your debugging!
      '';
    };
  }) {};

  ada = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ada";
    plugname = "Ada";
    plugid = "com.adacore.Ada-IntelliJ";
    version = "0.6-dev";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11931/57997/Ada-IntelliJ-0.6-dev.zip";
      sha256 = "1bbll7rmlnb3pyrzdiadk13qd5yc5ll4fsmp7yfnwfqfm6dvr8yy";
      name = "Ada-0.6-dev.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.adacore.com";
      license = lib.licenses.asl20;
      description = ''
        Support for the Ada and SPARK languages, and GPR project files.
      '';
    };
  }) {};

  adb-input = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Adb-Input";
    plugname = "Adb Input";
    plugid = "com.master.studio.plugin.adb_input";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13758/77280/AdbInput.zip";
      sha256 = "019gsb4hgrqikrdsryjmkmx7m2p798v1six935vnhx42gz06mr82";
      name = "Adb-Input-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://pankaj89.github.io";
      license = lib.licenses.asl20;
      description = ''
        Adds capability to type to EditText in devices directly from Android Studio
      '';
    };
  }) {};

  adbcommander-for-android = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AdbCommander-for-Android";
    plugname = "AdbCommander for Android";
    plugid = "com.remoterapp.adbremote.plugin.id";
    version = "0.1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7578/24193/adbcommanderplugin.zip";
      sha256 = "03pk80x2acdqa52jzs6xk3ynycwxk9lyvpn3sbhh0h13cby0rf8d";
      name = "AdbCommander-for-Android-0.1.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Simple tool for helping with handling connected android devices or emulators. 
NEW! Dynamic macros. Now is possible have macros more dynamic.  
Example. We have got macro named &quot;my_email&quot;, type &quot;input text&quot; with value &quot;my.email@email.com&quot;.  For some reason is nice to have option change email on fly.  In this case we must little bit edit macro content. For params which can be replaced just add ''$ as first letter of value. my.email@email.com &gt; $my,email@email.com - that's it. Now in shell tab is possible call macro with its name $my_email and new value &gt; $my_email new.email@email.com and press execute.  Origin value from macro will replaced with new value and macro will execute.  If you don't add value or you will run dicro direct will used value witouth first $ char. Also is possible do chain of macros execute as they're added into shell tab or mix shell commands and macros in one.  
 For more news follow me either on twitter @speedy2222 or on G+ as +RobSlama  
Open Plugin via menu: View &gt; Tool Windows &gt; ADBRemoter or from Tool Buttons at lower right side of the IDE How it works 
The first step is to map the adb executable file. The first panel shows all devices currently connected to ADB (via usb or remote). The second panel contains 3 tabs: 
 
 input text - is for input text (text is sent to all selected devices in first panel) 
 macros - here you can add often-used commands (ie your email address, open wifi settings) and press the run icon to send to all selected devices 
 shell - encapsulates shell commands (ie. ls -la) and the output from each selected device is opened in output text console 
 
 
The third panel contains virtual keys - the command is sent again to all selected devices in the first panel
 
The fourth panel is a simple option remap path to your executable ADB file.
      '';
    };
  }) {};

  add-to-gitignore = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Add-to-gitignore";
    plugname = "Add to gitignore";
    plugid = "com.euphoricity.gitignore";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10550/65859/com.euphoricity.addtogitignore.jar";
      sha256 = "1vk7pck5b2k3bnyrwb9m6656pyf9lslrrwynbw2hj7qzi5bl1x5g";
      name = "Add-to-gitignore-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fallenprogrammr/addtogitignore";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/fallenprogrammr/addtogitignore/master/LICENSE";
        free = false;
      };
      description = ''
        Add a file or directory to gitignore in IntelliJ by right clicking it in project view.
      '';
    };
  }) {};

  adroitlogic-ultraesb-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AdroitLogic-UltraESB-Integration";
    plugname = "AdroitLogic UltraESB Integration";
    plugid = "org.adroitlogic.idea.plugin";
    version = "2.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7396/21757/AdroitLogic_IDEA14_Plugin_new.zip";
      sha256 = "1wc2k1jc0js1x86vg8w5m78h17szsmsw772qyvhks7993sx9zfcg";
      name = "AdroitLogic-UltraESB-Integration-2.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.adroitlogic.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7396/license.txt";
        free = false;
      };
      description = ''
        AdroitLogic UltraESB Integration plugin has integrated the following features into IntelliJ IDEA.
 
 
 Creating a UltraESB Multi-Module Project 
 Creating Deployment Units 
 Language injection and code generation 
 File templates 
 For more information visit http://docs.adroitlogic.org/display/esb/IntelliJ+IDEA+Plugin
      '';
    };
  }) {};

  advanced-java-folding = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Advanced-Java-Folding";
    plugname = "Advanced Java Folding";
    plugid = "com.intellij.bigdecimal-folding";
    version = "0.9.9.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9320/40409/AdvancedExpressionFolding.jar";
      sha256 = "1yyjq14m2905jl9g6rrxiwiz5a32ffa913jyyz4cngqymqrg7phi";
      name = "Advanced-Java-Folding-0.9.9.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.asl20;
      description = ''
        Modern JVM languages such as Kotlin, Groovy, Scala and some others offer many language features that let you
        write code in a more concise and expressive manner. These features include type inference, properties,
        interpolated string, range and tuple literals, enhanced operators, clojures, implicits, smart casts and many more.

      This plugin extends the IDE’s folding features to emulate some of these modern languages’ features helping
        fight verbosity.
      
      For more information, read the blog post.

      To get access to experimental features, go to Settings |
      Plugins | Browse Repositories | Manage Repositories and
      add https://plugins.jetbrains.com/plugins/EAP/com.intellij.bigdecimal-folding
      as a custom plugin repository URL.

      For more clarity, you may try to adjust your color scheme: go to Settings | Editor |
      Colors &amp; Fonts | General, select Folded text,
      uncheck the Background color, and change the
      Foreground color to #000091 for the default scheme and #7CA0BB for Darcula.

      To disable certain types of folding, go to Settings | Editor |
      General | Code Folding.
      '';
    };
  }) {};

  aegis-code-check = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Aegis-Code-Check";
    plugname = "Aegis Code Check";
    plugid = "com.wuhao.code.check";
    version = "1.4.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10667/74816/aegis-code-plugin.jar";
      sha256 = "0icdhjklh6d0p03yn1l7lbff6mw33fxxz0a0iw7hbs3xci0fkjlv";
      name = "Aegis-Code-Check-1.4.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wuhao000/idea-code-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wuhao000/idea-code-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Introduction
      The contents following are written in Chinese and translated by google translate.
      This project is an Intelli IDEAJ plugin
        Initially created for the company's unified programming specification, it mainly submits some code checks that
        IDE failed to provide, as well as some convenient development features. It also includes support for Java and
        Kotlin, as well as support for the front-end framework VueJS.
      
      The functions contained in the project may be somewhat complicated and cannot be reflected in the project name,
        so a name is casually used.
      
      This project was originally used for internal use by the company. The main purpose of open source is to let
        everyone provide some questions for inspection and suggestions.
      
      Features
      Mandatory style
      
        Some mandatory presets for code styles at project startup, including indentation and encoding
        Forced code rearrangement
        Write some file templates by default (Kotlin)
      
      Encoding Check
      
        Check the file encoding is UTF-8 or not.
      
      Indent check
      
        Indent check for checking code style configuration of IDE, included languages are java, kotlin, javascript,
          typescript, vue etc.
        
        Normal indentation is set to 2 spaces, and continuous indentation is twice as long as normal indentation. It
          is 4
          spaces.
        
      
      
        Java &amp; Kotlin related
      
      
        The line count of a .java file or .kt file is limited to 800 lines.
        
        The line count of java method or kotlin function is limited to 100 lines.
        
        The class must add a document comment with @author and @since tags.
        The interface method must add a document comment.
        Direct use of numbers as arguments is forbidden(check for numbers great than 10), provided code correction
          function can extract parameters as variables
        
        Added space check and fix
        Increase the sorting of fields and methods of java classes and blank line corrections
        Completely new kotlin code rearrangement function.
        Options for organizing import and code rearrangement when the formatting code is turned on by default when
          starting the project (Java language) v1.2.6
        
        Except for the JUnit test class, it is not allowed to use "System.out.println" or "System.err.println" or
          "println"
          in kotlin for console output. The output should always uses the log and provides the repair function. The
          default is
          to use slf4j.
        
        
          Automatically add comments to interface methods when formatting code. [1.3.8]
        
      
      Spring Framework Related
      
        When using the "@Value" annotation in a class to import spring's environment variables, code hints are given
          for
          the contents of spring boot's default configuration file application.yml (temporarily not supporting
          properties file).
        
        Use the "@Value" annotation in the class to introduce spring's environment variable, you can use the find
          statement to jump to the corresponding configuration item in application.yml
        
      
      Front End Related
      
        When the .vue file is formatted, the label attributes in the template are reordered, one line per
          attribute.
        
        When the .vue file is formatted, the label property in the template starts with v- or: and the property
          value is
          formatted.
        
        The length of the template part (template tag part) in the .vue file must not exceed 150 lines.
        .vue file template, if the property value is a complex expression, can be extracted as a calculated
          property.
        
      
      Build
      Copy the project code to the local, open the project using idea, configure the IntelliJ Platform Plugin SDK,
        and add the following in the Classpath configuration of the SDK:/Applications/IntelliJ
        IDEA.app/Contents/plugins/JavaScriptLanguage/lib/javascript-openapi.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/JavaScriptLanguage/lib/JavaScriptLanguage.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/Kotlin/lib/kotlin-plugin.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/Spring/lib/spring.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringBoot/lib/spring-boot.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringSecurity/lib/SpringSecurity.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringMvc/lib/spring-mvc-api.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringMvc/lib/SpringMvc.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringBoot/lib/spring-boot-cloud.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringBoot/lib/spring-boot-config-yaml.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringBoot/lib/spring-boot-initializr.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringBoot/lib/spring-boot-mvc.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/SpringBoot/lib/spring-boot-run.jar
        /Users/wuhao/Library/Application Support/IntelliJIdea2018.1/vuejs/lib/vuejs.jar
        /Applications/IntelliJ IDEA.app/Contents/plugins/yaml/lib/yaml.jar
      
      Then select Build - Prepare Plugin Module For Deployment. After the build is completed, a zip file will be
        generated in the project directory. The file is the installation file for the idea plug-in.
      
      
        Note that the VueJS plugin is located in the user plugin installation directory instead of the IDEA
          installation
          directory. For Mac users, the plugin directory is in path of "~/Library/Application Support/Intellij IDEA/".
      '';
    };
  }) {};

  agilecodewriter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AgileCodeWriter";
    plugname = "AgileCodeWriter";
    plugid = "cn.agilecode";
    version = "1.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13528/74596/AgileCodeWriter-1.1.6.zip";
      sha256 = "1p0ivfv3iyfhsnaiz8kfv5w2xrpf45p8cm2ss5n8v330gq8anfwi";
      name = "AgileCodeWriter-1.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zongchuanyu/idea-plugin-jpa-support";
      license = lib.licenses.asl20;
      description = ''
        Generate entity/repository class for JPA/Lombok/Spring Data JPA.
      Support internationalization. Currently supported languages are English, 简体中文.
      Support multiple types of databases. Currently supported database are Mysql, PostgreSQL.
      Mac: Command + N or Windows: Alt + Insert and select Jpa Entities
      README
      '';
    };
  }) {};

  aijokerfindview = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AiJokerFindView";
    plugname = "AiJokerFindView";
    plugid = "com.joker.find.view";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9631/34280/JokerFind.jar";
      sha256 = "0lqdwz66n9pkh1d42zz7nlljshpmwlaj8cvc7y4l4x9nywvksn9f";
      name = "AiJokerFindView-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This if plugin for find view by 
kotterknife .
 
most HTML tags may be used
      '';
    };
  }) {};

  aixcoder-code-completer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AiXcoder-Code-Completer";
    plugname = "AiXcoder Code Completer";
    plugid = "com.nnthink.aixcoder";
    version = "2.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13574/100638/aiXcoder-2.5.1.zip";
      sha256 = "0cl0pba0r5p30rf5576npwkamb7rnsm2wakwhibk83bdhqimrfw0";
      name = "AiXcoder-Code-Completer-2.5.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.aixcoder.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.aixcoder.com/help/agreement_en.html";
        free = false;
      };
      description = ''
        AiXcoder Code Completer &amp; Code Search Engine
        AiXcoder is a powerful code completer &amp; code serach engine based on state-of-the-art deep learning technology. It has the potential of recommending you a full line of code, which will help you code faster. AiXcoder also provides a code search engine to help you search for API use cases on GitHub.
        
        
        Requirements
        
            IntelliJ/PyCharm 2018.1+
            JRE 1.8+
            Around 500 MB of free memory.
            More than 300 MB of free disk space in your home directory.
        
        Features
        
            Java/JavaScript/TypeScript is supported now. More languages supports (Python/C++/PHP/Go) are on the way...
            Completely works offline. Your code is safe in your hand.
            Long completion result with length up to a full line.
            Rearrange completion items in a likelyhood probability descending order.
            AiXcoder provides similar functionalities like Codota and Tabnine.
        
        Troubleshooting
        
            AiXcoder code completer will be launched automatically when you begin to type code.
            When you start using aiXcoder on a new project, an indexing process is required for aiXcoder to parse your code. AiXcoder will provide more accurate completions after that.
            
                The service is running as several processes, including "aix-node(.exe)". You can safely kill the process(es) at any time. The executables are located in /aiXcoder/installer/localserver/current/server/. Removing the folder and then restart IDE will force this plugin to re-download the service.
      '';
    };
  }) {};

  aion4j-avm-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Aion4j-AVM-Integration";
    plugname = "Aion4j AVM Integration";
    plugid = "org.aion4j.avm";
    version = "0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12047/71194/aion4j-idea-pugin-0.4.0.zip";
      sha256 = "0m9wgcjpwh3mn0hf7bdbdmj69km7in3ijgd9aphm3sw78fknz72g";
      name = "Aion4j-AVM-Integration-0.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bloxbean/aion4j-idea-plugin/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/bloxbean/aion4j-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Intellij IDEA plugin for development on AVM, a java based VM for Aion blockchain.
      '';
    };
  }) {};

  alabaster = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Alabaster";
    plugname = "Alabaster";
    plugid = "edu.cmu.cs.alabaster";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10983/48487/alabaster.zip";
      sha256 = "0zdw7379624mwbhimp5rjxivr609vchrwaavb7hj3ssjzwrib8yv";
      name = "Alabaster-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.cs.cmu.edu/~NatProg/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/fvoichick/alabaster/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Alabaster (Autocomplete Letting Apache Beam Applications Succeed Through Exploration Rapidly)
      is a PyCharm plugin designed to improve code completion in Apache Beam. It allows users to see
      Beam transforms as they're typing, making exploratory programming more feasible.
      '';
    };
  }) {};

  aladdin-logcat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Aladdin-Logcat";
    plugname = "Aladdin Logcat";
    plugid = "com.aladdin.debugger.idea.plugin";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14008/82253/aladdin-idea-plugin.zip";
      sha256 = "0f0l1safi3r99x1kpcx1cbk6qfmhndm51jj2ibhbxh4wb7jkh9y7";
      name = "Aladdin-Logcat-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zdstly/aladdin";
      license = lib.licenses.asl20;
      description = ''
        adds support for logcat
      '';
    };
  }) {};

  algo = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Algo";
    plugname = "Algo";
    plugid = "com.algo";
    version = "1.0.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14749/108100/aplugin.zip";
      sha256 = "1bvc87vmaxvghk68cf17glh763bxsxgrbqhw8x6hj90v8pq187rf";
      name = "Algo-1.0.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://algo.id/";
      license = lib.licenses.asl20;
      description = ''
        A one-click solution to secure code authorship via blockchain technologies:
• Monetization if other developers use your code.
• Establishes code provenance/authorship for potential future copyright disputes.
• A secure and independent decentralized blockchain network guarantees complete data integrity.
• Easy to use and provides an instant solution to copyright code.
      '';
    };
  }) {};

  algodea-algorand-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AlgoDEA-Algorand-Integration";
    plugname = "AlgoDEA Algorand Integration";
    plugid = "com.bloxbean.algodea";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15300/104452/algodea-0.2.0.zip";
      sha256 = "0w9a0ri0crpx27nqvih3d2m2v62rzafsg2c8mz1ab696v752ia76";
      name = "AlgoDEA-Algorand-Integration-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bloxbean/algodea/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/bloxbean/algodea/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Intellij IDEA plugin for Smart Contract development on Algorand blockchain
      '';
    };
  }) {};

  alibaba-cloud-toolkit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Alibaba-Cloud-Toolkit";
    plugname = "Alibaba Cloud Toolkit";
    plugid = "com.alibabacloud.intellij.toolkit-intellij";
    version = "2020.9.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11386/97600/external1";
      sha256 = "1sfpxw6fy1xjqingj9m0l9k9xvsm37nl0x5mp6xhgy0ipm2vq1ic";
      name = "Alibaba-Cloud-Toolkit-2020.9.1";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.alibabacloud.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://toolkit.aliyun.com/idea/license";
        free = false;
      };
      description = ''
        Alibaba Cloud Toolkit is a plugin for IDEs such as Eclipse or IntelliJ IDEA. Help developers develop more efficiently , test, diagnose, and deploy applications that are suitable for cloud operations.
Why use Alibaba Cloud Toolkit?

    Zero cost：Free for all developer
    Extremely efficient：Get rid of past recurring deployment methods, plug-in automated deployment

Three use scenarios, simple and convenient, get started quickly

    Deploy to ECS.There is no need to switch between Maven, Git, and other O&amp;M scripts and tools, and developers can configure it on a graphical interface to deploy applications to ECS in a sustainable and convenient manner.
    Deploy to EDAS.Enterprise Distributed Application Services EDAS is a PaaS platform for applications and microservices that offers a wide range of application delivery and lightweight microservice solutions. For Alibaba Cloud EDAS developers, local applications and cloud deployments have been opened on the plugin.
    Deploy to Kubernetes.Container Services Kubernetes Edition provides high-performance, scalable container application management capabilities that support full lifecycle management of enterprise-class Kubernetes containerized applications. For Alibaba Cloud Kubernetes developers, local applications and cloud deployments have been opened on the plugin.
      '';
    };
  }) {};

  alibaba-java-coding-guidelines = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Alibaba-Java-Coding-Guidelines";
    plugname = "Alibaba Java Coding Guidelines";
    plugid = "com.alibaba.p3c.smartfox";
    version = "2.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10046/95159/external1";
      sha256 = "16qiicvbglgnmd0k8jx5y4qymb7gcb7m9zpl1yrsik5k414npcaj";
      name = "Alibaba-Java-Coding-Guidelines-2.1.0";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alibaba/p3c";
      license = lib.licenses.asl20;
      description = ''
        Alibaba Java Coding Guidelines plugin support.
      '';
    };
  }) {};

  alibaba-java-coding-guidelinesxenoamess-tpm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Alibaba-Java-Coding-GuidelinesXenoAmess-TPM";
    plugname = "Alibaba Java Coding Guidelines(XenoAmess TPM)";
    plugid = "com.alibaba.p3c.xenoamess";
    version = "2.1.0.3x";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14109/105548/Alibaba_Java_Coding_Guidelines-2.1.0.3x.zip";
      sha256 = "14f4007l4993zsjhbirpaili9sv3bd1fwqm8qbf3pg8d7634lbk8";
      name = "Alibaba-Java-Coding-GuidelinesXenoAmess-TPM-2.1.0.3x.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/XenoAmess";
      license = lib.licenses.asl20;
      description = ''
        Alibaba Java Coding Guidelines plugin support.(XenoAmess TPM)

Third-party maintenance by XenoAmess.

This Third-party maintenance(TPM) here is forked from original [alibaba/p3c](https://github.com/alibaba/p3c)

Follows Apache license described in [license](https://github.com/XenoAmess/p3c/blob/xenoamess_maintain_fork/license.txt)

Sources can be found https://github.com/XenoAmess/p3c

Releases can be found at https://plugins.jetbrains.com/plugin/14109-alibaba-java-coding-guidelines-xenoamess-tpm-

This TPM aims to help maintain alibaba/p3c, fix bugs, and add improvements, as the original developer is too busy to handle them.

This TPM is NOT created, or maintained, or controlled by any alibaba employee, in other words it is not a TPM, not an official branch.

TPM maintainer XenoAmess is not interested in changing the grammar/rules in p3c guidelines (by now).

TPM maintainer XenoAmess have no knowledge with eclipse plugin development.

TPM maintainer XenoAmess suggest you only create pr for module idea-plugin and p3c-pmd, unless you really have a strong reason.
      '';
    };
  }) {};

  align-environment-property-files = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Align-Environment-Property-Files";
    plugname = "Align Environment Property Files";
    plugid = "Align Environment Property Files";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14086/82866/align-environment-property-files-plugin-1.0.0.zip";
      sha256 = "18y3akbzy13c868bn9nkqk4pb9wwy3cv6dg8xggkzs51g8agcp07";
      name = "Align-Environment-Property-Files-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dbulla/gradle-align-environment-properties-plugin";
      license = lib.licenses.asl20;
      description = ''
        This is a plugin for Intellij IDEA which takes a series of property files (one per environment, plus an optional existing `application.properties`), and
puts all the common and non-secret stuff in `application.properties` (if that doesn't exist, it's created), and then only environment-specific stuff
(dev is different from qa, for instance) and secret stuff (passwords, etc) are in the per-environment files.

The idea behind this is to help unclutter property files, which are often edited by hand, with lots of duplication and opportunities to
accidentally get one environment different from teh others when they're supposed to be the same.

Full docs in the repo at https://github.com/dbulla/align-environment-properties-plugin
      '';
    };
  }) {};

  aligner-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Aligner-Plugin";
    plugname = "Aligner Plugin";
    plugid = "Aligner Plugin";
    version = "0.9.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/197/900/Aligner_Plugin_900.jar";
      sha256 = "1fqaixd58bkzjifk0ldwxwhv79cwzms2lp47xn2cim5g6whvwbgg";
      name = "Aligner-Plugin-0.9.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The Aligner Plugin moves the cursor in the current editor to the right
    until it is aligned with the next word of the line above.
      '';
    };
  }) {};

  alipay-devtools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Alipay-DevTools";
    plugname = "Alipay DevTools";
    plugid = "com.alipay.antcloud.ide";
    version = "1.0.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11158/67997/1_0_13.zip";
      sha256 = "1s95wazarr8v0wwcmg7c8sm3rw31sk1g9gkbm70vyyrz1lclr3vn";
      name = "Alipay-DevTools-1.0.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://tech.antfin.com";
      license = lib.licenses.asl20;
      description = ''
        蚂蚁开发者一站式服务化套件 - Alipay DevTools
      
          蚂蚁开发者一站式服务化套件，是一款由蚂蚁金服开放平台、研发效能部、金融科技联合推出的微服务开发套件。
          该套件集成了开发、测试、部署、运维等功能。帮助开发者快速高效地完成创建应用后的操作
      
      更多信息，请访问：蚂蚁开放平台 | SOFABoot
      
      Alipay DevTools is a plugin for IntelliJ platform helping developers work with Alipay Openhome platform
      '';
    };
  }) {};

  all-format = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "All-Format";
    plugname = "All Format";
    plugid = "com.damoguyansi.all-format";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10962/103526/com.damoguyansi.all-format-1.1.1.zip";
      sha256 = "0f9wi22qaf5b5iqcff462wqyj5k7jhpx51xza8q54ihhazl3cky8";
      name = "All-Format-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://damoguyansi@163.com";
        free = false;
      };
      description = ''
        AllFormat 是一个全功能格式化插件，让开发者进行任何数据格式化，方便阅读的软件，会持续更新增加新功,也欢迎提出新功能，发邮件给我！
        Features:
            
                格式化JSON字符串。
                格式化日志打印字符串，按大括号小括号逗号进行格式化，方便阅读。
                格式化HTML文本。
                格式化SQL语句。
                MD5值生成。
                二维码生成，识别二维码图片。
                Base64值生成与解密。
                Unicode值生成与转换。
            
        
        all-format，JSON格式化JSON字符串，XML格式化XML字符串，HTML格式化HTML字符串和map.toString()打印的字符串!
        新增加SQL格式,MD5生,QRCODE二维码生成,Unicode转换,Base64生成转换.
      '';
    };
  }) {};

  allure-ee-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Allure-EE-Support";
    plugname = "Allure EE Support";
    plugid = "allure-ee-idea";
    version = "3.13.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12513/103735/allure-ee-idea-3.13.1.zip";
      sha256 = "1ldk4mxl2ipw0bd1m0fj8yrd4wa6asgvxawnw980kwcraxml7kws";
      name = "Allure-EE-Support-3.13.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://qameta.io";
      license = lib.licenses.asl20;
      description = ''
        Support for sync tests with Allure Enterprise
      '';
    };
  }) {};

  allure-to-testrail-exporter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Allure-to-TestRail-exporter";
    plugname = "Allure to TestRail exporter";
    plugid = "test-rail-plugin";
    version = "1.5.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13322/83801/Allure_to_TestRail_exporter_plugin-1.5.3.zip";
      sha256 = "1zsjpbral359v7zn8xkv2lsrrv33r8682yxbikcnzz4i6fgm5wvf";
      name = "Allure-to-TestRail-exporter-1.5.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://legionivo.github.io";
      license = lib.licenses.mit;
      description = ''
        A plugin that exports test cases from Intellij Idea to TestRail using Allure @Step annotations.
Plugin was build to work only with the following libraries:
    
        Junit 5
        Allure
    
How to use:
    
        Set up valid credentials in plugin settings under Tools - TestRail exporter plugin
        Check that connection is successful
        Open file with tests
        Select desired test by putting a cursor on a test name - IMPORTANT
        Push Alt - Insert combination
        Select "Export to TestRail" menu item
        TmsLink with testCase ID should be added
    

Plugin does update existing test case in TestRail - no need to delete it manually and export again!

            Code requirements:
            
                @DisplayName annotation is mandatory - test case title is created from it
                @Feature annotation on a test or class level is mandatory - TestRail section is linked to it
                @Link is not mandatory, but strongly advised
                If you want to see nice test case - write nice @Step annotations
            
        Have fun with it!
      '';
    };
  }) {};

  altn8 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AltN8";
    plugname = "AltN8";
    plugid = "Alt n 8";
    version = "2.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1475/24903/altn8.jar";
      sha256 = "1c5rh619kfmji3jdbm8vmcalps4mfxys36axa4gg2zzj7cl3730w";
      name = "AltN8-2.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/minman/altn8";
      license = lib.licenses.asl20;
      description = ''
        Open Alternate File: i.e. jump from source to test file, maven resource, html file, properties file, etc... configured using regular expressions.
 
 Usage: Just use [ALT][8] to popup all matching files (Mac OS: [CMD][ALT][8]).
 
 Thanks to LeapingFrogs.com for the original plugin.
      '';
    };
  }) {};

  altostra = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Altostra";
    plugname = "Altostra";
    plugid = "org.altostra.designer";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14976/96042/AltostraDesignerPlugin-1.0.2.zip";
      sha256 = "0j7b19c408i30s6qxj2kd91dl4p6cq5j24wp4lv0imyx1yf11k5s";
      name = "Altostra-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "/plugin/14976-altostra/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.altostra.com/terms-of-service";
        free = false;
      };
      description = ''
        Design, Develop and Deploy cloud applications.
      '';
    };
  }) {};

  always-open-tabs-on-the-right = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Always-Open-Tabs-On-The-Right";
    plugname = "Always Open Tabs On The Right";
    plugid = "com.hbt.tabs.placement";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11463/53593/intellij-plugin-always-open-tab-on-the-right.jar";
      sha256 = "1n53g9rxaw3ic55vkdnqg8cb3kv49hq7w9nsb20szygwy5i7aag9";
      name = "Always-Open-Tabs-On-The-Right-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hbt/intellij-plugin-always-open-tab-on-the-right";
      license = lib.licenses.mit;
      description = ''
        Always Open Tabs On The Right
      '';
    };
  }) {};

  amdatu = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Amdatu";
    plugname = "Amdatu";
    plugid = "org.amdatu.idea";
    version = "2.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10639/68534/amdatu-idea-2.2.1.zip";
      sha256 = "18dbz3dgj5vbj8djrrj7qwh20gxi4fa3dgwnv7562vqn58z86f00";
      name = "Amdatu-2.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/amdatu/amdatu-idea";
      license = lib.licenses.asl20;
      description = ''
        The Amdatu IntelliJ plugin adds support for OSGi workspaces using the bnd workspace model.
      '';
    };
  }) {};

  amethyst = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Amethyst";
    plugname = "Amethyst";
    plugid = "org.illyasviel.amethyst";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12731/104729/amethyst-1.1.4.zip";
      sha256 = "0n28s5rligy64lxq301zjyz63lwbp931mkmjmi9m89vyrrpqrk70";
      name = "Amethyst-1.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/illyasviel/amethyst";
      license = lib.licenses.epl20;
      description = ''
        Clean Clojure Namespace Declarations With An Opinionated Style Guide.
    
        Eliminate :use clauses in favor of refer :all.
        Sort required libraries, imports and vectors of referred symbols
        Remove any duplication in the :require and :import form.
      '';
    };
  }) {};

  amphibian-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Amphibian-Editor";
    plugname = "Amphibian Editor";
    plugid = "org.cacticouncil.amphibian";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15716/106766/Amphibian-v1.0RC.zip";
      sha256 = "14027q9v2pj9pgr2jvbbkjgcjb1g0flrhiwz7anmhc7b49fl6nyn";
      name = "Amphibian-Editor-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://cacticouncil.org";
      license = lib.licenses.mit;
      description = ''
        Amphibian is a dual-modality editor for source code that currently supports the Java language.
    Amphibian is designed for new programmers and adds a tab that allows the user to display a blocks-based
    representation of the current source code via Droplet in the vein of Pencil Code and Scratch. Like these
    environments, the user can build programs in the blocks mode by dragging and dropping puzzle-piece-style blocks. At
    any time, the user can return to test mode.
    (See Amphibian in Action)
      '';
    };
  }) {};

  analyze-multiple-stack-traces = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Analyze-multiple-stack-traces";
    plugname = "Analyze multiple stack traces";
    plugid = "com.github.michalszynkiewicz.analyze-multiple-stacktraces";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9355/31129/stack-viewer-intellij-plugin.zip";
      sha256 = "1xn2yghah1naryfw226zr8dpgnhngzydwvjjxinrxy1485l2q7iw";
      name = "Analyze-multiple-stack-traces-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/michalszynkiewicz";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/michalszynkiewicz";
        free = false;
      };
      description = ''
        A simplistic plugin that allows you to grep processes by name/substring of the ps -aux output and open stack traces of all grepped processes. WARNING: works on systems which provide `ps aux`, i.e. doesn't work on windows
      '';
    };
  }) {};

  android-api-level = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-API-Level";
    plugname = "Android API Level";
    plugid = "com.github.droibit.plugin.androidapilevel";
    version = "0.1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8121/49257/androidapilevel-plugin-0.1.8.zip";
      sha256 = "1v29966rzgarx1fcp7ryvq6imwkqdi03jkwp2wn1268szhjjmcnd";
      name = "Android-API-Level-0.1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/droibit";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/droibit/androidapilevel-plugin/blob/develop/LICENSE";
        free = false;
      };
      description = ''
        Plugin to show Android API level and version name.
      '';
    };
  }) {};

  android-airplane = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-Airplane";
    plugname = "Android Airplane";
    plugid = "com.sqlandroid.airplane";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10617/44965/AndroidAirplane.jar";
      sha256 = "0f0rwx4rwwxf3a40ppg7qjbsqxnxkyzfr6aa418djph1phw6mz4r";
      name = "Android-Airplane-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.sqlandroid.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.sqlandroid.com";
        free = false;
      };
      description = ''
        Change Airplane mode on/off on your device or emulator 
 
 You can change between Airplane mode on and off using toolbar icons: 
 
 
 
 
 Or through action dialog and shortcuts:
      '';
    };
  }) {};

  android-builder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Builder";
    plugname = "Android Builder";
    plugid = "android.platform.builder";
    version = "1.90.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8216/24805/AndroidBuilder-1.90.7.zip";
      sha256 = "1dqqksdnx03c967968wqgfmdp6m6x2vjjh59mvm44sdl9qwmibs4";
      name = "Android-Builder-1.90.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ganadist/AndroidPlatformBuilder";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ganadist/AndroidPlatformBuilder";
        free = false;
      };
      description = ''
        Build &amp; Flash your own Android ROM with IntelliJ IDEA or Android Studio
 The following features are available: 
 
 Support AOSP or CyanogenMod build system 
 Show available build configuration on your android platform sources. 
 Prints on Build console with link for source codes that have errors. 
 Support full or partial build. 
 Java compiler can be selected via module Sdk. 
 Flash ROM image on your devices with fastboot or adb
      '';
    };
  }) {};

  android-butterknife-injections-support-kotlin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-ButterKnife-Injections-Support-Kotlin";
    plugname = "Android ButterKnife Injections (Support Kotlin)";
    plugid = "com.github.parfoismeng.plugin.butterknife";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12012/59303/Android-ButterKnife-Injections.jar";
      sha256 = "0r04fpjkx0achmqidsjg0w5rnsrdrwx2blj0fl4n7bymix9d9r3v";
      name = "Android-ButterKnife-Injections-Support-Kotlin-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ParfoisMeng";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ParfoisMeng/Android-ButterKnife-Injections/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Android ButterKnife Injections (Support Kotlin)
            
            English Description:
            Applicable when the parent class is a kt file and the child class is a java file.
            The original plugin could not be used, and I have not found a plugin that meets my needs. Simply self-clone the "android-butterknife-zelezny" source code, modify the adjustment to make this plugin.
            
            Function:
            
                Includes all features of Android ButterKnife Zelezny v1.6.0.
                Add function allows you to choose whether to initialize the butterKnife in activities/fragments.
                Add function allows you to choose whether to use ButterKnife in Lib (about R or R2).
                In the Android Studio settings interface, you can set the default value of the function.
                
            

            
            

            中文说明：
            适用于父类为kt文件，子类为java文件的情况。
            原插件不能正常使用，我也没有找到能满足需求的插件。我克隆了“android-butterknife-zelezny”的源码，在其基础上修改调整后，发布了这个插件。
            
            功能：
            
                包含Android ButterKnife Zelezny v1.6.0的所有功能。
                可选是否初始化ButterKnife(避免原版本使用插件即自动在onCreate中添加ButterKnife.bind(this)，适用于在基类中初始化)。
                可选是否在Lib中使用(使用R2替换R，onClick中使用if-else)。
                2、3可在Android Studio设置页配置默认值。
            

            
            

            Source code: GitHub Page
      '';
    };
  }) {};

  android-butterknife-zelezny = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-ButterKnife-Zelezny";
    plugname = "Android ButterKnife Zelezny";
    plugid = "eu.inmite.android.plugin.butterknifezelezny";
    version = "1.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7369/33627/android-butterknife-zelezny.jar";
      sha256 = "1r4s9msjhh54izkqq5fd6sc3n7sncjhk9ln4jjylvrk8fsn3cxqv";
      name = "Android-ButterKnife-Zelezny-1.6.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/avast";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/avast/android-butterknife-zelezny/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Plugin for generating ButterKnife injections from selected layout XMLs in activities/fragments/adapters.
      '';
    };
  }) {};

  android-butterknife-viewbindgenerate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-ButterKnife-viewbindgenerate";
    plugname = "Android ButterKnife viewbindgenerate";
    plugid = "com.cttrip.viewgenerate";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11588/54409/findView.jar";
      sha256 = "1lc9b50skzdd4a35ccmric2kwny1qv914png4pfmgy1pa4ff302b";
      name = "Android-ButterKnife-viewbindgenerate-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/avast";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin for generating ButterKnife injections from selected layout XMLs in activities/fragments/adapters.
      '';
    };
  }) {};

  android-clean-architecture-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Clean-Architecture-Generator";
    plugname = "Android Clean Architecture Generator";
    plugid = "com.him.core.generator";
    version = "2.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12213/61962/Android_Clean_Architecture_Generator-2.4.0.zip";
      sha256 = "1sccnzc7gjdsfb01ccq66janzm58gsis03rlgxl6rqba2fmqvd8i";
      name = "Android-Clean-Architecture-Generator-2.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/arohim/eddga";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/arohim/eddga/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This is an internal plugin but openly to use, I make for using very specific Android Clean Architecture [https://github.com/bufferapp/android-clean-architecture-boilerplate] 
        this can be make you more productive

           The road map of this project is generate the whole things from plain JSON all the way through to Domain Layer and this plugin will be extended to generate android UI template
        Features.
          - Domain POJO from JSON 
          - Data POJO from JSON
          - Cache POJO from JSON
          - Remote POJO from JSON
          - Remote/Cache/Data mapper from JSON
          - Remote/Cache/Data mapper unit testing from JSON
          - Remote/Cache/Data/Domain Factory from JSON
          - View/Presentation/Domain/Cache/Data/remote template
          - Multi POJOs, Mappers and its Unit testing
          - Auto generate implement and unit testing classes for domain/data/remote/cache and rogue2

          This project is on top of https://github.com/robohorse/RoboPOJOGenerator 
          Thank you to Vadim Shchenev to make me easier to extend.
      '';
    };
  }) {};

  android-code-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Code-Generator";
    plugname = "Android Code Generator";
    plugid = "com.morcinek.android.codegenerator.plugin.intellij";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7595/23761/android-codegenerator-plugin-intellij.zip";
      sha256 = "080zh4m6wijjpq2da6gxxi3jgbp9mqds2n7r1l0bh5km2i9v1qri";
      name = "Android-Code-Generator-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://tmorcinek.github.io/android-codegenerator-plugin-intellij/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tmorcinek/android-codegenerator-plugin-intellij/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Android Code Generator Author Author of this plugin is 
Tomasz Morcinek. 
 Public 
github profile: 
https://github.com/tmorcinek. Repository Project on github 
android-codegenerator-plugin-intellij Description Plugin parses xml file, and retrieves data about all the views that contain android:id attribute. 
 Plugin collects information about view's type and id. Based on that, plugin generates fields, assignment, imports and methods. 
 Full project description on 
github's information page. Features 
There are several very useful features some of them are: 
 
 generating Activity Class code from layout 
 generating Fragment Class code from layout 
 generating Adapter Class code from item layout 
 generating Menu code from menu xml 
 creating files from code 
 preview screen with generated code that can be modified before creation of file 
 detection of project package 
 
Compiled with Java 1.6
      '';
    };
  }) {};

  android-color-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Color-Manager";
    plugname = "Android Color Manager";
    plugid = "com.github.shiraji.colormanager";
    version = "1.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8583/33858/Android_Color_Manager-1.1.6.zip";
      sha256 = "0i5k0am8pwc1fm2kvw613h9k0z9j0fw3acx27cm663d88isqz0k3";
      name = "Android-Color-Manager-1.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/8583";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/color-manager/blob/master/LICENSE";
        free = false;
      };
      description = ''
        The plugin that manages Android colors. This plugin create a tool windows.  
Open "Color Manager" tool window. You will see all colors listed 
 Drag and Drop 
From v1.1.0, this plugin support drag and drop feature. 
 
 Select a file where you want to drop 
 Drag the color panel 
 Drop where you want to copy the color name/tag 
 
If the selected file is not xml file, then the drop text format is R.color.color_name 
 
If the selected file is xml, then the drop text format is @color/color_name 
 
At this moment, there is no way to detect drop target file's type. So, if you select a xml file and drop text to a Java file, this plugin pastes @color/color_name not R.color.color_name Copy 
Right click a color listed on the tool window 
 
Click "Copy R.color.whatever_color_name" or "Copy @color/whatever_color_name" 
You can also copy color name ("R.color.whatever_color_name" style) by cmd+c (or ctrl+c) after selecting the color panel Move to the color definition 
Same as Copy. Right click and click "Go to R.color.whatever_color_name" 
Or just double click an item Edit the color code 
Click "Edit R.color.whatever_color_name" and choose new color 
 Delete a color 
Same as Copy and move. Right click and click "Delete R.color.whatever_color_name" 
It will show confirmation dialog before deleting the color tag. Search 
Just start typing after focusing tool window 
 Show all colors 
As default, this plugin filter library's color because there are a lot. 
 
You can un-filter those by clicking "Filter" icon (It takes a few second to show all colors) 
 Sort by color name 
You can sort by color name by clicking sort icon
      '';
    };
  }) {};

  android-data-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Data-Tools";
    plugname = "Android Data Tools";
    plugid = "dev.mpp.android-data-tools";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10819/47126/Android_Data_Tools-1.0.2.zip";
      sha256 = "1vqhmhb11dyvyc65yv2rv0fgcwmrvnc6j1hgycshbmk7qs929xxm";
      name = "Android-Data-Tools-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://ddmd.pythonanywhere.com/android-data-tools-license";
        free = false;
      };
      description = ''
        Android Data Tools
    
    Plugin for review and edit android app data.
    
    Features:
    
        pull / push app shared preferences(not working on some devices, root maybe can help)
        inbox shared preferences editor
        backup / restore app data(some app's have allowBackup="false" attribute)
        extract / pack 'Android Backup' file, with password too
    
    
    How to use?
    Use double click on preferences file for edit.
    
    There are two ways to edit preferences:
    
    * Pull/Push (sometimes this method need root)
    
    
        Press "pull" to get preferences files
        Edit something
        Press "push" and open/restart an app
    
    
    * Backup/Restore (this method does not work for apps with allowBackup="false" attribute in Manifest)
    
    
        Press "backup" and confirm on device
        Press "unpack"
        Edit something
        Select dir that contains "apps" backup's dir
        Press "restore" and confirm on device
    
    
    Open plugin page
      '';
    };
  }) {};

  android-database-debugger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Database-Debugger";
    plugname = "Android Database Debugger";
    plugid = "com.godwin.android_debugger";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12228/60733/debugger-1.0.1.zip";
      sha256 = "1q7g07vwa1xffkpzv9aya4lamvfg0cr1kylwf0937xrcg7kvyry7";
      name = "Android-Database-Debugger-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/godwinjk/Debugger-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Exporting database from an Android phone and using an extra tool to debug is a heavy task, isn't it?
    Why don't you use  Android Database Debugger, that will help that task inside Android Studio?
    Android Database Debugger is a simple lightweight plugin for IntelliJ IDE and Android Studio.
    This will improve the time for debugging database. Install and spread the word :)
      '';
    };
  }) {};

  android-deeplink-starter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-DeepLink-Starter";
    plugname = "Android DeepLink Starter";
    plugid = "de.jensklingenberg.ads";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13810/79084/Android_Deeplink_Starter-1.0.1.jar";
      sha256 = "158khbyh9l8l6q31iiwljlbi08vgxw9spv13zqpkx1nqmn85xmkf";
      name = "Android-DeepLink-Starter-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jensklingenberg.de";
      license = lib.licenses.asl20;
      description = ''
        This plugin adds an alternative UI to start Android deeplinks
    

    Features

    The deeplink starter

    
        
    

    DeeplinkValue
   Here you can insert your deeplink. When this view gets opened from the Manifest file or navigation navgraph, this gets prefilled.
    For every word that surrounded by curly brackets, an extra textfield will be added where you can insert the value, e.g. see the {noteId} above.



    Reload UI
        When you change the text in "DeeplinkValue", you can use this to reload the starter view.
    
    Launch Flags
        Here you can insert additional flags to the deeplink
    


    How to open the starter

    Tools menu

    
        
    

     You can find the "Android Deeplink Starter" inside the Intellij Tools Menu

    Android Manifest

    
        
    

    When you have declared deeplinks  in your AndroidManifest xml, this plugin will add a deeplink icon next to the line with the data-Tag.
        When you click on it, the deeplink starter will open filled with the contents of "android:host","android:pathPrefix" and "android:sheme"

    Android Navigation Component Navgraph 

    
        
    

    When you are using the Android Navigation Component and have the deeplinks declared in your navgraph xml, this plugin will add a deeplink icon next to the line.
        When you click on it, the deeplink starter will open filled with the content of "app:uri"
      '';
    };
  }) {};

  android-drawable-preview = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Drawable-Preview";
    plugname = "Android Drawable Preview";
    plugid = "com.mistamek.drawablepreview.drawable-preview";
    version = "1.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10730/99994/drawable_preview-1.1.5.zip";
      sha256 = "0jpvc0xxh882g76lr5bn0ypwixlw8l4c4vszr8a6wv3rv2vq30hf";
      name = "Android-Drawable-Preview-1.1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mistamek/Android-drawable-preview-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mistamek/Android-drawable-preview-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Render drawable instead of default icon. Supports binary and vector images
      '';
    };
  }) {};

  android-external-plugin-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-External-Plugin-Support";
    plugname = "Android External Plugin Support";
    plugid = "com.zxy.idea.plugin.external-plugin-support";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10900/57617/external-plugin-support-1.2.jar";
      sha256 = "15s81bqg52fsnpz8an1vhjx5fgx64vk76cn9si15vgrnlpcg5yp6";
      name = "Android-External-Plugin-Support-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Sunzxyong";
      license = lib.licenses.asl20;
      description = ''
        Show the source code [Groovy、Java、Class] for Android Gradle Plugin and Custom Gradle Plugin. Such as External Libraries.
Support Android Studio 3.1.0+
      '';
    };
  }) {};

  android-findviewbyid-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-FindViewById-Support";
    plugname = "Android FindViewById Support";
    plugid = "com.zxy.idea.plugin.findViewById-support";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11204/60582/findViewById-support-1.6.jar";
      sha256 = "0bgfb664ln3ccwkjv7h98xbasybwmnyycbpjxq3f8p61zw9pb34i";
      name = "Android-FindViewById-Support-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Sunzxyong";
      license = lib.licenses.asl20;
      description = ''
        Generate findViewById code automatic. Support Java and Kotlin.UsageSelect the layout resource file and open "Generate" dialog from the [Code] menu at IDEA and click [Generate...] button, or use the shortcut key [Command + N].
Support Android Studio 3.0.0+
      '';
    };
  }) {};

  android-folder-opener = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-Folder-Opener";
    plugname = "Android Folder Opener";
    plugid = "com.illuzor.afo";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11506/54299/afo-1.0.2.jar";
      sha256 = "1hy9n4xipkmz26i4plihb2i4d36hj9kjv586kmq7dpdamh71j7rf";
      name = "Android-Folder-Opener-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/illuzor/Android-Folder-Opener";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/illuzor/Android-Folder-Opener/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Quick actions for open project folders:
        
            APK
            APK Release
            APK Debug
            Bundle
            Bundle Release
            Bundle Debug
            Mapping
            Reports
            Test Results
            Logs
        
        
        Available from "Tools/Android Folder Opener" and from search via Ctrl+Shift+A / ⇧⌘A
      '';
    };
  }) {};

  android-icon-editor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-Icon-Editor";
    plugname = "Android Icon Editor";
    plugid = "com.fissionlabs";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8084/27212/AndroidIconEditor.jar";
      sha256 = "03psmdl0wmq0byindrhz4kgzfj1ncsccdsjb9p0bjkbzxprv5m0v";
      name = "Android-Icon-Editor-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.fissionlabs.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/fission-labs/AndroidIconEditor/master/LICENSE";
        free = false;
      };
      description = ''
        Edit Color: Using this you can change selected icon color to any color.
 1. Add or Drag icon to image area.
 2. And then click anywhere on icon to get that color of the pixel.
 3. Now enter color you want to replace with.
 4. Or you can set color using color chooser also.
 5. Repeat steps 2,3,4 until you get the icon in required colors.
 6. If you not satisfied with the changes just click 
Reset button and try again.
 7. To save your changes open 
File menu and click 
Save.
 
NOTE: 
 Some times some pixels are in still old color, this will make your image dirty.
 So observe carefully before save your image.
 Click on those pixels and apply color changes.

 
Remove Alpha: Using this you can change selected area of icon to fully transparent.
 1. Add or Drag icon to image area.
 2. Open Edit menu and click on 
Remove Alpha.
 3. It opens a new window with more options.
 4. You can select area of icon by drawing Rectangle or Ellipse or simply a Line.
 5. Click 
Apply button then the entire selected area will be converted to transparent.
 6. There is one more options 
Select Color.
 7. For example if icon contains red color and you want remove that color from icon.
 8. Then simply click on that color and it will converts all red color areas to transparent.

 
Edit Size: Using this you can change icon size.
 1. Add or Drag icon to image area.
 2. Open Edit menu and click 
Edit Size.
 3. Give width and height and click ok button.
 4. If you not satisfied with the changes just click Reset button and try again.
 5. To save your changes open File menu and click Save.
 
NOTE: 
 Resizing the small size icon into large size may give blurred icon.
 So we set limitations for height and width.
      '';
    };
  }) {};

  android-input = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-Input";
    plugname = "Android Input";
    plugid = "com.ntilde.androidinput";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10188/59031/AndroidInput_1.3.2.jar";
      sha256 = "1d79jdhvynlh5hr097sdz1x0pdfpnnmrk0ifilaas7n3s8r1rqc3";
      name = "Android-Input-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.ntilde.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.sqlandroid.com/eula.html";
        free = false;
      };
      description = ''
        Android Input allows you to input text into Android device or emulator easily.
    
    
    It remember last used device, so you don't need to select it every time you use it.
    It also remember last sended text, but it select it all by default, so you can send or write without using your mouse.
    Press enter and send text without using mouse
    If you don't want to send anything you can press ESC key to close the dialog.
    
    I hope you enjoy this plugin as much I have enjoyd developing it.
      '';
    };
  }) {};

  android-intent-sender = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Intent-Sender";
    plugname = "Android Intent Sender";
    plugid = "com.weezlabs.intentSender";
    version = "0.10.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7945/106049/Android_Intent_Sender-0.10.0.zip";
      sha256 = "124qa003y6z3hdwdw8a228307kwbiz762b84lm83wrjwzhvr3gsn";
      name = "Android-Intent-Sender-0.10.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://distillery.com";
      license = lib.licenses.asl20;
      description = ''
        Android Intent Sender is a plugin which allows you to send intents with specified data and extras to android devices or emulators with adb command
"broadcast", "startactivity", "startservice".
Full readme: here
      '';
    };
  }) {};

  android-localizationer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Localizationer";
    plugname = "Android Localizationer";
    plugid = "com.westlinkin.androidLocalizationer";
    version = "0.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7629/22140/AndroidLocalizationer.zip";
      sha256 = "1p43m24mkcyknlr8h697kc03r0pi1x9pr20zrc98q79z7xsb2w63";
      name = "Android-Localizationer-0.1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/westlinkin/AndroidLocalizationer";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/westlinkin/AndroidLocalizationer/master/License";
        free = false;
      };
      description = ''
        Translate all your strings in your 
string resources(e.g. strings.xml) to your target languages automactically.
 Help developers localize their Android app easily, with just one click.

 Use multiple Translation APIs to translate 
strings into other languages.

 See more at 
GitHub Page.
      '';
    };
  }) {};

  android-mvvm-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-MVVM-Generator";
    plugname = "Android MVVM Generator";
    plugid = "com.ishow.plugin.mvvm";
    version = "1.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15408/106652/mvvm-1.1.5.jar";
      sha256 = "033jqn0mn201fgdms7vv3ycga2jmvczzy51iybkj57dmzzyf4x1z";
      name = "Android-MVVM-Generator-1.1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Android MVVM Generator
      ⇪ + ⌃ + A， can be auto generated XXXActivity、XXXViewModel and a_xxx.xml(databind layout) after entering keywords
      ⇪ + ⌃ + F， can be auto generated XXXFragment、XXXViewModel and a_xxx.xml(databind layout) after entering keywords
      Also you can modify Template code in Preference =&gt; Other Settings =&gt; Android MVVM Generator
      Source Code
      GitHub:https://github.com/HiTools/plugin-AndroidMVVM
      Gitee:https://gitee.com/hitools/plugin-AndroidMVVM
      '';
    };
  }) {};

  android-methods-count = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Methods-Count";
    plugname = "Android Methods Count";
    plugid = "xyz.marcato.ideaplugin.methodscount";
    version = "1.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8076/25267/MethodsCountIdeaPlugin.zip";
      sha256 = "0c0pb8cn138ljrgpdzgxpj8cxi7g5nagajfgjlrf3jvxx3figwvz";
      name = "Android-Methods-Count-1.1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.methodscount.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.methodscount.com";
        free = false;
      };
      description = ''
        A plugin to get information about the number of methods on Android libraries.
      '';
    };
  }) {};

  android-nr-bundle-builder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-NR-Bundle-Builder";
    plugname = "Android NR Bundle Builder";
    plugid = "com.imuxuan.core.builder";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10805/66073/NRBundleBuilder.jar";
      sha256 = "09fcbw4ibmpsgh56i9gah0f8plwgijrm1ivfwq7psvvcypqwn69a";
      name = "Android-NR-Bundle-Builder-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://imuxuan.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.imuxuan.com";
        free = false;
      };
      description = ''
        Use builder build bundle.
        Kill Method Overload!
      '';
    };
  }) {};

  android-orm-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-ORM-Tool";
    plugname = "Android ORM Tool";
    plugid = "cn.ieclipse.aorm.as";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9873/37408/Android-ORM-ASPlugin.jar";
      sha256 = "1pcsz7xs2b8rxgkq07dh3n7fj1pa82dl2w125jv8kl1cq4dnzr88";
      name = "Android-ORM-Tool-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Jamling/Android-ORM-ASPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Jamling/Android-ORM-ASPlugin";
        free = false;
      };
      description = ''
        The Android ORM (AORM) plugin, help Android developers to add ORM capability with AORM quickly.
 
Main function 
 
 
 Add AORM annotation 
 Add ContentProvider template
      '';
    };
  }) {};

  android-package-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Package-Helper";
    plugname = "Android Package Helper";
    plugid = "com.pixelperfect.android-package-helper";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15456/104869/android-package-helper-1.0.0.zip";
      sha256 = "00jvlkq8fla54hynq06hlx7r4s8sn2gk381vx06nnzp9jl59d2iq";
      name = "Android-Package-Helper-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Find Android apps package, common intents to interact with popular apps.
        Features are available from the "Tools" tab, then "Android Package Helper"

        Two options:
        - Android Package Finder: search apps by name and by all the info, package name, author, category, reviews, etc.
        - Common Package: Get prebuild intents to interact with common app like app facebook profile, share story on Instagram, or access phone settings
      '';
    };
  }) {};

  android-postfix-completion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Postfix-Completion";
    plugname = "Android Postfix Completion";
    plugid = "com.kogitune.intellij.androidPostfixCompletion";
    version = "2.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7775/27007/Android_Postfix_Completion-2.0.3.zip";
      sha256 = "1bbph382hlgk9dmg74cy4p56kym3nri5arv0lk5cnkw1gms51jp8";
      name = "Android-Postfix-Completion-2.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/takahirom/android-postfix-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/takahirom/android-postfix-plugin";
        free = false;
      };
      description = ''
        Postfix completion templates for Android

 
Available templates:

 
 
  .toastCreate and show ToastToast.makeText(context, expr, Toast.LENGTH_SHORT).show(); 
 
 
  .logLogLog.d("log", expr); 
 
 
  .logdIf BuildConfig.DEBUG is true, Log message.Log.d("log", expr); 
 
 
  .findTyped FindView(ViewType) findViewById(expr); 
 
 
  .isempisEmptyTextUtils.isEmpty(expr); 
 
 
  .vg? View.VISIBLE : View.GONE; (expr) ? View.VISIBLE : View.GONE;
      '';
    };
  }) {};

  android-quick-switch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-Quick-Switch";
    plugname = "Android Quick Switch";
    plugid = "com.tencent.warningwang";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11326/52798/QucikSwitch.jar";
      sha256 = "1sq5j8y03zyyx3mazc9sbm99gzz79vwm4yxbymr8phmwlb2vd4id";
      name = "Android-Quick-Switch-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.free;
      description = ''
        This plugin can quickly open the following switches.
      Show layout bounds
      Debug GPU overdraw
      Profile GPU rendering
      '';
    };
  }) {};

  android-resource-usage-count = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-Resource-Usage-Count";
    plugname = "Android Resource Usage Count";
    plugid = "com.niorgai";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9885/38271/ResourceCount.jar";
      sha256 = "074h20zsr2jbdmpb5xyda677a0ql8ivk6yd2f1r8wgpz7vv1ldiy";
      name = "Android-Resource-Usage-Count-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/niorgai/Android-Resource-Usage-Count";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/niorgai/Android-Resource-Usage-Count/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Count for android resource usage and show in each line. 
 
 0 - grey color 
 1 - blue color 
 other - red color 
 
 If count not show 
 Try to edit / reopen it
      '';
    };
  }) {};

  android-run-on-multiple-devices = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Run-On-Multiple-Devices";
    plugname = "Android Run On Multiple Devices";
    plugid = "com.bungabear.AndroidRunOnMultipleDevices";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14710/105402/AndroidRunOnMultipleDevices-1.2.zip";
      sha256 = "0qnd77knhf3ijwpdjxpq7v5mzj8ysvcr7g2lk6pf4ws7x64wiw5x";
      name = "Android-Run-On-Multiple-Devices-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bungabear/RunOnMultipleDevices-Plugin";
      license = lib.licenses.mit;
      description = ''
        You can "Run on Multiple Devices" popup with Ctrl+Shift+F10
    If not work, Please issue on my github https://github.com/bungabear/RunOnMultipleDevices-Plugin
      '';
    };
  }) {};

  android-scala = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-Scala";
    plugname = "Android Scala";
    plugid = "com.github.akiomik.ideaAndroidScala";
    version = "0.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7693/20022/idea-android-scala.jar";
      sha256 = "0iwi5x85yybyyb87cx3g2biik09ryymk6j7076ppimh7zz36w84q";
      name = "Android-Scala-0.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/akiomik";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/akiomik/idea-android-scala/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for Android development with Scala
      '';
    };
  }) {};

  android-securefactor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-SecuRefactor";
    plugname = "Android SecuRefactor";
    plugid = "com.secure.refactor";
    version = "1.0.20";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13736/93666/Secure_refactor-1.0.20.zip";
      sha256 = "00hj0zkjjchi1jzgyzr4mxjmdxpbh46xyw2zlgkp4i96hpp2kbmg";
      name = "Android-SecuRefactor-1.0.20.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/dllewellyn";
      license = lib.licenses.asl20;
      description = ''
        Refactor your Android app to add security settings
      '';
    };
  }) {};

  android-selector = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-Selector";
    plugname = "Android Selector";
    plugid = "importre.intellij.android.selector";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7909/22264/android-selector-intellij-plugin.jar";
      sha256 = "1p54kyz14dfwz2vpqb3cbdd6cfwf081i1zqiq1h9ib208sh0qsjw";
      name = "Android-Selector-0.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://import.re";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/importre/android-selector-intellij-plugin/blob/master/license";
        free = false;
      };
      description = ''
        Generate selectors for background drawable 
 You can use `colorButtonNormal` simply, 
 but make easily touch feedback of normal `View`s as well as `Button`s with this plugin. 

 1. Set your colors(in `res/values/colors.xml`). 
 2. Select `New -&gt; Android Selector(or Ctrl/Cmd + N)` on your `res` directory. 
 3. Select filename, color, pressed and pressed-v21 respectively. 

 - ripple drawable is generated in drawable-v21 directory.
 - normal drawable is generated in drawable directory.

 Dependency 
 - com.android.support:appcompat-v7:22.+
      '';
    };
  }) {};

  android-sorter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Sorter";
    plugname = "Android Sorter";
    plugid = "com.cuongloveit.androidsorter";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11410/53051/kotlincodesort-1.0.1.zip";
      sha256 = "06qhq4zf6r2mdw8whyfxndlqd5f1iqy85azggdzi8n088dly8iar";
      name = "Android-Sorter-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cuongloveit";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/cuongloveit/AndroidSorter/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Android Sorter Plugin
- Group and Sort code
- Only support Kotlin
&nbsp;Option + Command + K&nbsp;(MacOS) or&nbsp;Ctrl + Alt + K (Windows) to sort your code
Order:
- Variable (Properties, sort by alphabet)
- Override Functions (Properties)
- Declared Functions:
• Public Functions (sort by alphabet)
• Private Functions (sort by alphabet)
      '';
    };
  }) {};

  android-string-manager = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-String-Manager";
    plugname = "Android String Manager";
    plugid = "com.easylokal.stringResourceHelper";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15460/103969/easylokal_plugin-0.0.2.jar";
      sha256 = "1k71nscf6shi9pykb5ksp5gw50g5krxdwr11c7yn5jndhcj34viv";
      name = "Android-String-Manager-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://easylokal.com";
      license = lib.licenses.asl20;
      description = ''
        Support for extracting hardcoded strings. This plugin looks for all the hardcoded strings in the project and replaces them with android default resource implementation.

How To:

All you need to do is to provide the prefix to add before all the strings keys and the name of the custom application class(click here to know how to make a custom application class).

After providing these two things, a list of all hardcoded strings will be on the screen where you just need to select the needed ones.

Features:


	Provide custom context
	Automatically imports the necessary classes
	Allow to select/deselect the strings
	You can add a prefix to append before all keys


This plugin is best to use with EasyLokal Android SDK.

Created and Supported by EasyLokal
Github Page
      '';
    };
  }) {};

  android-string-remover = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-String-Remover";
    plugname = "Android String Remover";
    plugid = "com.dongwuamon.androidstringremover";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13350/74435/RemoveAndroidStrings.jar";
      sha256 = "05a032rk0yrwdmm5rq47hc30hby0vcfghx9zd2vcn6cbfyqf74ff";
      name = "Android-String-Remover-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dongwuamon";
      license = lib.licenses.asl20;
      description = ''
        Android plugin for deleting strings in batch.
      Click on the GitHub link to see how to use:
      https://github.com/dongwuamon/android-string-remover
      '';
    };
  }) {};

  android-strings-xml-to-csv-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Strings.xml-To-CSV-Converter";
    plugname = "Android Strings.xml To CSV Converter";
    plugid = "com.pandawarrior.androidXMLConverter";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7782/35306/new-plugin.zip";
      sha256 = "17540639ryxihi8qvywgdnpdgabw5y0qn1h784625ylk2i4phd4h";
      name = "Android-Strings.xml-To-CSV-Converter-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pandawarrior91";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/LiewJunTung/Android-strings-xml-csv-converter/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Android XML to CSV converter.
 
Allows you to translate strings.xml, arrays.xml, plurals.xml into different languages in spreadsheet form, and vice versa. 
NOTE
 You can access the plugin from the "Tools" menu at the IDE toolbar  Changelog  2.0.1 Support more rows of data Bug fixes and improves stability GitHub
      '';
    };
  }) {};

  android-talkback-enabler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-TalkBack-Enabler";
    plugname = "Android TalkBack Enabler";
    plugid = "com.joer.TalkBackPlugin";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14229/85778/TalkBackPlugin-1.6.zip";
      sha256 = "1zksjr6hdwkgybzmbirqjxc6xlzxhhlxwv647sjw1y5b4y5cmn8w";
      name = "Android-TalkBack-Enabler-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://joetr.com/";
      license = lib.licenses.asl20;
      description = ''
        Enables Android TalkBack from within the Tools menu. Assumes that you already have TalkBack installed on your emulator / device.
      '';
    };
  }) {};

  android-templates-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-Templates-Manager";
    plugname = "Android Templates Manager";
    plugid = "com.bytedance.jedi.templatemanager";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12414/62538/jedi-boot-1.0.3.zip";
      sha256 = "1cgfb223zkd0aqn01669lx8fgvprpab9kyglxvvzs5vxsb00bhlj";
      name = "Android-Templates-Manager-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bytedance.com";
      license = lib.licenses.mit;
      description = ''
        Android Templates Manager which support to download android template from https://github.com/bytedance-template/template  
        any question call wangzhongjie@bytedance.com
      '';
    };
  }) {};

  android-wifi-adb = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-WiFi-ADB";
    plugname = "Android WiFi ADB";
    plugid = "com.github.pedrovgs.androidwifiadb";
    version = "2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7983/28028/AndroidWiFiADB-2.4.zip";
      sha256 = "16nzhjdn1dnbfl29nmw9zy75jlhab7wx7bmxsvk545gs3cirh4rr";
      name = "Android-WiFi-ADB-2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pedrovgs";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/pedrovgs/AndroidWiFiADB/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Provides an action which allow you quickly connect your Android device over WiFi to install, run and debug your applications without a USB connected by pressing one button. 
 Connect your device using a USB cable and press the Android WiFi ADB button. Once the device be connected over WiFi you'll see an IntelliJ/Android Studio notification. Now you can disconnect your USB cable and enjoy deploying, running and debugging your applications over WiFi. 
 The version 2.0 enables a window to check which of your devices are connected or not and connect/disconnect it manually if needed.
      '';
    };
  }) {};

  android-wifiadb = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Android-WiFiADB";
    plugname = "Android WiFiADB";
    plugid = "com.dengzii.plugin.adb";
    version = "3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13156/107814/WiFiADB.jar";
      sha256 = "1phlp0x23rjhcd3sqris8d5yd380jqc0hh358rap21jkmsm2gxwg";
      name = "Android-WiFiADB-3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dengzii/WiFiADB";
      license = lib.licenses.mit;
      description = ''
        A plugin use for connect android device by WiFi.

Usage: 
- Please ensure your computer was configured adb in PATH.
    verify it by typing command 'adb' in the terminal or cmd.
    more about adb -&gt;
    Android Debug Bridge
- Open WiFiADB tools from NavBar &gt; Tools &gt; WiFiADB, or use keyboard-shortcut Ctrl+Alt+2
- Connecting your Android device to compute by USB, click Refresh button, you will see your device in table.
    click connect, it will remember your device next time.
- If you does not find your device, you can lookup the reason from MenuBar Tools &gt; Log 

Contribute
Using WiFi connect android device help us get rid of the usb cable.
    I had tried other similar tool, but they are not faultless, hope this tool will bring convenience to your work.
GitHub : WiFiADB
Issue : if you have any questions, please  create issue.

Screenshot
      '';
    };
  }) {};

  android-xml-to-csv-export = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Android-XML-to-CSV-Export";
    plugname = "Android XML to CSV Export";
    plugid = "com.juanlondono.androidXMLExport";
    version = "1.7.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11586/74165/androidXMLExport-1.7.4.zip";
      sha256 = "1d01jxjgamyz18fxmr28si3734syh15dd3l8lpbpxw6r53brydqh";
      name = "Android-XML-to-CSV-Export-1.7.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/juanes30";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/juanes30/android-xml-export/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Android XML to CSV Export
      Allows you to translate strings.xml into different languages in spreadsheet form, and vice versa.
      NOTE
      You can access the plugin from the "Tools" menu at the IDE toolbar
      
      GitHub
      '';
    };
  }) {};

  androidaccessors = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AndroidAccessors";
    plugname = "AndroidAccessors";
    plugid = "com.jonathonstaff.androidaccessors";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7496/16497/AndroidAccessors.jar";
      sha256 = "1ymm4lic9sqzvi5s2lq50k3nwil2glnizqippx27qq93gq61yq4f";
      name = "AndroidAccessors-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jonathonstaff.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jonathonstaff.com";
        free = false;
      };
      description = ''
        AndroidAccessors is designed to generate getters and setters for Android projects. It removes leading m's from field names so the external methods are cleaner.
 For more details, look at the repo on GitHub:
 
https://github.com/jonstaff/AndroidAccessors
      '';
    };
  }) {};

  androidgodeye = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AndroidGodEye";
    plugname = "AndroidGodEye";
    plugid = "cn.hikyson.godeye.ideaplugin";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12114/77710/android-godeye-idea-plugin.jar";
      sha256 = "13lrlpvi2hw5hzzshw2h7xhf89wl5rysvr5p2igzkmm8jk0qyqwf";
      name = "AndroidGodEye-1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Xiangxingqian";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Kyson/AndroidGodEye/blob/master/LICENSE";
        free = false;
      };
      description = ''
        AndroidGodEye
       
       https://github.com/Kyson/AndroidGodEye
      '';
    };
  }) {};

  androidlocalize = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AndroidLocalize";
    plugname = "AndroidLocalize";
    plugid = "com.github.airsaid.androidlocalize";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11174/82454/AndroidLocalizePlugin.zip";
      sha256 = "0yxkz7gnjr0ifq00lnpnc1926laqnvbxnkx5n6nms6c5nw6pqlkx";
      name = "AndroidLocalize-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Airsaid/AndroidLocalizePlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Airsaid/AndroidLocalizePlugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Android localization plugin. Support multiple languages, No need to apply for key.
      1. Select the values/strings.xml.
      2. Right-click and select Convert to other languages.
      3. Select the language to be translated.
      4. Click ok.
      '';
    };
  }) {};

  androidlocalizewithbaiduapi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AndroidLocalizeWithBaiduApi";
    plugname = "AndroidLocalizeWithBaiduApi";
    plugid = "com.wjp.AndroidLocalizePlugin";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13290/71816/AndroidLocalization-1.0.0.zip";
      sha256 = "01q4i3c7fxzjjqqvwbx15cn250i9bqf86z736y4dzmi4mrp7d4v6";
      name = "AndroidLocalizeWithBaiduApi-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "wjploop.github.io";
      license = lib.licenses.asl20;
      description = ''
        Android localize plugin, with this plugin you can translate the string.xml to other
    languages
    You can choose to use the API key you applied for to avoid the failure caused by the number of requests exceeding the number of times you share a key
    
    Use Baidu Translate Service
      '';
    };
  }) {};

  androidmvp = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AndroidMVP";
    plugname = "AndroidMVP";
    plugid = "com.wkp.android.mvp";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10380/42449/AndroidMVP.jar";
      sha256 = "0k06j2kz5w1z2pvg9adc6a1p1bj5qia0nfzh2xyrdwcavkj2ss4m";
      name = "AndroidMVP-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wkp111";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wkp111";
        free = false;
      };
      description = ''
        Plugin to create MVP for Android.
      '';
    };
  }) {};

  androidproguard-pro = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AndroidProGuard-Pro";
    plugname = "AndroidProGuard Pro";
    plugid = "com.zhw.tgnet.android.AndroidProGuard";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10130/40577/AndroidProguardPlugin.zip";
      sha256 = "1kkgy8bpicn0410rmiqgyafd7qkhaab86b7qql33flnk6a31qi6x";
      name = "AndroidProGuard-Pro-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://zhonghanwen.xyz";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://zhonghanwen.xyz";
        free = false;
      };
      description = ''
        OneKey Android Studio generate Android proguard codes.
      '';
    };
  }) {};

  androidsourceviewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AndroidSourceViewer";
    plugname = "AndroidSourceViewer";
    plugid = "com.apkfuns.androidsourceviewer";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10187/71993/AndroidSourceViewer-1.2.1.zip";
      sha256 = "1bfgbs56hgkinlh2148hrvp8i639m87dcazhp9zjk08zy8qpz1li";
      name = "AndroidSourceViewer-1.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pengwei1024/AndroidSourceViewer";
      license = lib.licenses.asl20;
      description = ''
        Android Source Viewer Plugin for Android Studio
      '';
    };
  }) {};

  androidstringstool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AndroidStringsTool";
    plugname = "AndroidStringsTool";
    plugid = "com.fz.strings.plugin.id";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14444/97427/AndroidStringsTool.zip";
      sha256 = "1nik1vmjsgncslwmx2dblam209l141bkl2brr0zbg4a5pvfa1cj5";
      name = "AndroidStringsTool-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/peihua8858";
      license = lib.licenses.asl20;
      description = ''
        AndroidStringsTool is plugin  for Convert android multilingual to excel or convert excel to android multilingual.
      '';
    };
  }) {};

  androidstudio-template-update-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AndroidStudio-Template-Update-Plugin";
    plugname = "AndroidStudio Template Update Plugin";
    plugid = "com.shanbay.template";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9959/38133/TemplatePlugin.jar";
      sha256 = "1mw9bg1h2yclvvjrd7583jzqa8i96cqg6m9wc0mlf0fji1wadg6r";
      name = "AndroidStudio-Template-Update-Plugin-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shanbay.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.shanbay.com";
        free = false;
      };
      description = ''
        Android Studio Template Update Plugin
      '';
    };
  }) {};

  androidxmlsorter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AndroidXmlSorter";
    plugname = "AndroidXmlSorter";
    plugid = "org.roana0229.android-xml-sorter";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8223/47451/android-xml-sorter.jar";
      sha256 = "1y5jyjk1wmv8475xz7lqkdxnqarajfsa2215gh1qk6krrxa7ssfz";
      name = "AndroidXmlSorter-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/roana0229/android-xml-sorter";
      license = lib.licenses.asl20;
      description = ''
        Android Studio &amp; IntelliJ Plugin for sort xml by name="xxx".
      'Editor &gt; PopupMenu(Right Click) &gt; Refactor &gt; Sort Xml By Name'

      Options
      - Insert space between difference prefix
      - Insert version and encoding
      - Delete comment
      - Code indent number
      '';
    };
  }) {};

  androidzer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AndroidZer";
    plugname = "AndroidZer";
    plugid = "cn.com.lasong.plugin.idea";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15200/100599/AndroidZer-1.0.0.zip";
      sha256 = "1ng796i7bv7hax1bsfjjjxmvmbwkdj1z1q3h1vb5yhh0d6rjklfs";
      name = "AndroidZer-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.lasong.com.cn";
      license = lib.licenses.asl20;
      description = ''
        A decompilation tool for .jar &amp; .apk, the commands like this:
      
      
        JarModify
        Apk2Smali
      
      
      For jar way:
      
        select .jar file -&gt; Right Click -&gt; AndroidZer -&gt; JarModify
        
      
      
      For apk way:
      
        select .apk file -&gt; Right Click -&gt; AndroidZer -&gt; Apk2Smali
      
      
      一个用于jar与apk文件的反编译工具, 可用的命令如下:
      
      
        JarModify
        Apk2Smali
      
      
      用于jar的方式:
      
        选择jar文件 -&gt; 右键 -&gt; AndroidZer -&gt; JarModify
      
      
      用于apk的方式:
      
        选择apk文件 -&gt; 右键 -&gt; AndroidZer -&gt; Apk2Smali
      '';
    };
  }) {};

  angular-cli-quickswitch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Angular-CLI-QuickSwitch";
    plugname = "Angular CLI QuickSwitch";
    plugid = "patrick.kelleter.angular-cli-quick-switch";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10587/51675/angular-cli-quick-switch-1.3.zip";
      sha256 = "0bay8li4x91vjq7kpqbizwdygvmc6ln2zi26259sgd7lw7flbnn5";
      name = "Angular-CLI-QuickSwitch-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pkelleter/angular-cli-quick-switch-plugin";
      license = lib.licenses.asl20;
      description = ''
        Angular CLI QuickSwitch allows you to switch amongst files of one component efficiently, by just using one shortcut (default Alt + S). Supported extensions are js, ts, html, php, haml, jade, pug, slim, css, sass, scss, less, styl.
      '';
    };
  }) {};

  angular-component-folding = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Angular-Component-Folding";
    plugname = "Angular Component Folding";
    plugid = "com.xrath.plugin.fold";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10090/77181/angular-folding.jar";
      sha256 = "1x5ncicif5d4jjappm8364iwzz5avhq282n0q3r6jvq4py0mjds0";
      name = "Angular-Component-Folding-1.5.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rath/angular-folding";
      license = lib.licenses.mit;
      description = ''
        This plugin groups files which have same name and different extensions.
      For instance, app.component.ts, app.component.css, app.component.html, app.component.spec.ts will be grouped a virtual folder named app.component.
      '';
    };
  }) {};

  angular-conventional-commit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Angular-Conventional-Commit";
    plugname = "Angular Conventional Commit";
    plugid = "com.github.lppedd.idea-conventional-commit-angular2";
    version = "0.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13405/98541/idea-conventional-commit-angular2-0.2.5.zip";
      sha256 = "02s3iyjjcpyc30l01hwx4naninf1znq7n06f79cg7g574yih15rk";
      name = "Angular-Conventional-Commit-0.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lppedd/idea-conventional-commit-angular2";
      license = lib.licenses.mit;
      description = ''
        This plugin extends the functionality of
    Conventional Commit
    in Angular (2+) contexts.



    Angular commit message guidelines
    are followed for providing additional commit types, and projects are searched for NgModule
    annotated classes to provide additional commit scopes.



    Read additional details
    here at GitHub.
      '';
    };
  }) {};

  angular-material-2-flex-layout-1-teradata-covalent-1--material-icon-live-templates = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Angular-Material-2-Flex-layout-1-Teradata-Covalent-1--Material-icon-live-templates";
    plugname = "Angular Material 2, Flex layout 1, Teradata Covalent 1 & Material icon live templates";
    plugid = "in.oneton.contrib.plugin.angular.material";
    version = "0.11.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9490/39906/intellij-0.11.0.zip";
      sha256 = "0g43yn3c4r9bxz742azscgicv2x9siad0l7nj2vn0g39vlfgklkq";
      name = "Angular-Material-2-Flex-layout-1-Teradata-Covalent-1--Material-icon-live-templates-0.11.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/1tontech/material2-snippets";
      license = lib.licenses.mit;
      description = ''
        Angular Material 2, Flex layout 1, Teradata Covalent 1 &amp; Material icon live templates 
 
 
Documentation can be found here 
 
Have a problem, raise an issue here 
 
Follow us on Twitter: @1tontech
      '';
    };
  }) {};

  angular-templates = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Angular-Templates";
    plugname = "Angular Templates";
    plugid = "com.hasintech.intellij.angularTemplates";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7930/21105/angular-templates.jar";
      sha256 = "1mxnd1g7d5xbvnqr8fib656qzbdrdshqp307p4y6kjgj41fqxvki";
      name = "Angular-Templates-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://hasin.ir/";
      license = lib.licenses.mit;
      description = ''
        Adds a bunch of live templates for different angular snippets. They are all grouped inside 
Angular Template group.
      '';
    };
  }) {};

  angulardart-folding = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AngularDart-Folding";
    plugname = "AngularDart Folding";
    plugid = "com.volitic.plugin.ngdartfolding";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10799/58983/AngularDart_Folding-1.0.2.zip";
      sha256 = "11b7336xr1br70pdvvrcm3s2srwv6ylfgbh62zsf396zrazpafmd";
      name = "AngularDart-Folding-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.volitic.com";
      license = lib.licenses.asl20;
      description = ''
        A plugin that folds AngularDart components in the project file tree with their respective supporting files. For
    example foo_component.html and foo_component.css will be folded into a group under foo_component.dart.
      '';
    };
  }) {};

  anime-memes = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Anime-Memes";
    plugname = "Anime Memes";
    plugid = "io.unthrottled.amii";
    version = "0.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15865/108526/Anime+Memes.0.5.1.zip";
      sha256 = "1hf3bf8626yc7q8f1cwgsx0x738vbjdsrfximw1cf2abls2w6ajs";
      name = "Anime-Memes-0.5.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Unthrottled/AMII";
      license = lib.licenses.asl20;
      description = ''
        Give your IDE more personality and have more fun programming with the Anime Meme IDE Integration! (AMII)
Upon installation, our Meme Inference Knowledge Unit (or MIKU for short)
will begin interact with you as you build code.
MIKU knows when your programs fail to run or tests pass/fail.
Your new companion has the ability to react to these events.
Which will most likely take the form of an anime meme of your: waifu, husbando, and/or favorite character(s)!
      '';
    };
  }) {};

  annietools-translate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AnnieTools-Translate";
    plugname = "AnnieTools-Translate";
    plugid = "me.yundongis.AnnieTools-Translate";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13364/106860/translate-tool.jar";
      sha256 = "03d3drsjxrdaan55dcah0ivcr0c73dsq1xbg31lcfbj1g5rccrv5";
      name = "AnnieTools-Translate-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/yundongzhang";
      license = lib.licenses.mit;
      description = ''
        Mini translation
      '';
    };
  }) {};

  ansible = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ansible";
    plugname = "Ansible";
    plugid = "ir.msdehghan.plugins.ansible";
    version = "0.92";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14893/102178/AnsiblePlugin-0.92.zip";
      sha256 = "0drj7m8a9awnmkr4vn2skcmcnjs001m20k5ys6df5zz2k4x1kirc";
      name = "Ansible-0.92.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MSDehghan/AnsiblePlugin";
      license = lib.licenses.gpl3Only;
      description = ''
        Helps writing and working with ansible playbooks and roles. 
        This plugin can auto-complete all play and task fields. 
        Not only Ansible modules are recognized but also all of them have full documentation, right in your IDE.
        
        
        To report bugs and feature requests you can create a Github issue. For code contribution you can create pull requests.
        Any type of contribution is highly appreciated. 
        GitHub link
        
        
        We are actively developing new features. Some of them are listed below:
        Features in progress:
        
            Suggest inventory variables
            Go to variable
            Go to play
            Ansible FQCN support
      '';
    };
  }) {};

  ansible-vault-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ansible-Vault-Editor";
    plugname = "Ansible Vault Editor";
    plugid = "ru.sadv1r.ansible-vault-editor-idea-plugin";
    version = "1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14278/107476/Ansible_Vault_Editor-1.9.zip";
      sha256 = "12rgw4g6cmy5k6javb2jm58cxy7jwhh0p2597ld2bpj7qqw02i89";
      name = "Ansible-Vault-Editor-1.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://sadv1r.ru";
      license = lib.licenses.mit;
      description = ''
        Helps you create and edit Ansible Vaults


GitHub |
Issues


Features

    Create vault in empty file
    Edit existing vault with auto encryption and decryption
    Encrypted YAML properties modification
    Decrypted yml files syntax highlight
    Remember vault password
      '';
    };
  }) {};

  ansible-vault-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ansible-Vault-Integration";
    plugname = "Ansible Vault Integration";
    plugid = "com.github.timo_reymann.ansible_vault_integration";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14353/86868/Ansible_Vault_Integration-1.0.0.dirty.zip";
      sha256 = "0g6lj4vmvdybfq8r5hf16f82js4lmcgfll7dwdqs0c5favn3y674";
      name = "Ansible-Vault-Integration-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/timo-reymann/idea-ansible-vault-integration";
      license = lib.licenses.mit;
      description = ''
        Integrate the ansible vault directly into IntelliJ IDEA with context actions for vaulting and unvaulting secrets.
     This makes working with ansible-vault a breeze!
      '';
    };
  }) {};

  ansible-vault-crypter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ansible-vault-crypter";
    plugname = "Ansible vault crypter";
    plugid = "com.company.dontcare.ansible.vault.crypter";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11333/52976/ansible-vault.zip";
      sha256 = "11w22qryzkrbap0bjx7rqg8xgcp2jb8aynlbgrq6zlgzccajzisa";
      name = "Ansible-vault-crypter-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/captainju/ansible-vault";
      license = lib.licenses.asl20;
      description = ''
        For encrypting/decrypting file using ansible-vault.
      '';
    };
  }) {};

  ansiblehelper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AnsibleHelper";
    plugname = "AnsibleHelper";
    plugid = "com.github.mutl3y.ansiblehelper";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15877/108401/ansibleHelper-0.0.3.zip";
      sha256 = "158hxy55xzghpm5n7jxqgmbrrq9qhb50c3akk8dxfl1fxh3vv7rx";
      name = "AnsibleHelper-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mutl3y/ansibleHelper";
      license = lib.licenses.mit;
      description = ''
        This IntelliJ Platform Plugin provides live templates for Ansible 2.9 and 2.10 versions

IDEA versions 2020.2 or later
      '';
    };
  }) {};

  ant-build-generation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ant-Build-Generation";
    plugname = "Ant Build Generation";
    plugid = "com.intellij.antbuild";
    version = "203.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14169/105546/generate-ant-203.2.zip";
      sha256 = "0cv50pkwz0bq4v39qafj2b20br5c4jck5hmv07crwhzxk8d3slh6";
      name = "Ant-Build-Generation-203.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-obsolete-plugins/tree/master/generate-ant";
      license = lib.licenses.asl20;
      description = ''
        Supports generating an Ant build file out of an IntelliJ IDEA project
      '';
    };
  }) {};

  ant-debugger-v1-2-0 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Ant-Debugger-v1.2.0";
    plugname = "Ant Debugger v1.2.0";
    plugid = "com.handyedit.ant.AntDebugger";
    version = "1.3.0";
    src = fetchurl {
      url = "https://github.com/opticyclic/antdebugger/releases/download/v1.3.0/ant-debugger-1.3.0.jar";
      sha256 = "1i43fr83gzs04kfrw0d9rj2hp4k9435gs7qmqpdbn438wy1x7bzj";
      name = "Ant-Debugger-v1.2.0-1.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/opticyclic/antdebugger/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/opticyclic/antdebugger/";
        free = false;
      };
      description = ''
        Ant Debugger enables Apache Ant build script debugging: 
 
 Open build file in editor 
 Set debug breakpoints (screenshot 1) 
 Right click on editor to show context menu (screenshot 2) and select the &quot;Debug&quot; menu item to launch Ant debugger 
 Wait until the Ant debugger stops on breakpoint then use step or resume debugger commands, investigate Ant variables and execution stack (screenshot 3) 
 
 You can add Ant debug configuration from the Edit configurations dialog (screenshot 4). Then you select Ant file, Java SDK for debugging session (screenshot 5).  
Note. Plugin requires Java SDK to launch Ant: plugin uses build file module, project or any SDK for JDK list (the plugin searches for Java SDK in this order and uses first found). 
Installation: use IDEA plugins manager:
 
 Open Settings &gt; plugins 
 Wait until the plugin list loads 
 Right-click on Ant Debugger plugin and select install / update from the context menu 
 Restart IDEA 
 
 
Supported IDEA versions: IDEA 13.x (Community and Ultimate Editions). 
Please write to opticyclic@gmail.com or post an issue on GitHub if there are errors / problems when using Ant debugger 
See https://github.com/opticyclic/antdebugger/ for v1.2.0+ and http://handyedit.com/antdebugger.html for earlier versions.
      '';
    };
  }) {};

  ant-tracer-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Ant-Tracer-Plugin";
    plugname = "Ant Tracer Plugin";
    plugid = "Ant Tracer Plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1192/2988/Ant_Tracer_Plugin_2988.jar";
      sha256 = "152apndjkjyhjgxs9irqiy1grhrqcnlip3i5zp10carybqvnkwd2";
      name = "Ant-Tracer-Plugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1192/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1192/sourceCode.zip";
        free = false;
      };
      description = ''
        Displays a side by side view of the ant log and the matching build artifacts.
      '';
    };
  }) {};

  anti-indulged = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Anti-Indulged";
    plugname = "Anti-Indulged";
    plugid = "org.example.anti-indulged";
    version = "0.0.1-514";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15266/104475/anti-indulged-0.0.1-514.zip";
      sha256 = "0f06a9jm6nswz2nsjj4bv8qxk883aar20g389hjndbm992c72vdy";
      name = "Anti-Indulged-0.0.1-514.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/HoshinoTented";
      license = lib.licenses.gpl3Only;
      description = ''
        turn_off();
    turn_off();

    turn_off().unwrap();

    if ! video_game.turned_off() {
        children.future = Future::new(/* beauty = */ false);
        children.money_path = None;
        country.FreezeColdMaterial = None;
    }
      '';
    };
  }) {};

  antmove = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Antmove";
    plugname = "Antmove";
    plugid = "Antmove";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13216/71845/antmove_idea03.jar";
      sha256 = "12ivcl31v92ff1qm5qciwcvngzcf4dc6nwa6y1s8zkjkad9y0prq";
      name = "Antmove-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ant-move.github.io/website/";
      license = lib.licenses.asl20;
      description = ''
        小程序转换器，小程序跨端轻量级解决方案。
    github：https://github.com/ant-move/Antmove
      '';
    };
  }) {};

  any2dto = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Any2dto";
    plugname = "Any2dto";
    plugid = "com.moilioncircle.intellij.any2dto";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15680/107107/any2dto-1.1.1.zip";
      sha256 = "0pkfw3l2jff6v95c86gn7ih5mp3yzhrl6cvm7qnq1i3b4467cqvy";
      name = "Any2dto-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.moilioncircle.com";
      license = lib.licenses.asl20;
      description = ''
        Commonly using generated Pojo to SELECT * is a bad practice. the better way
is SELECT ONLY, WHAT, YOU, NEED and generate the exact DTO automatically.

Generate DTO code by selected JavaCode, DbColumn, SqlResult, ValuedText.

Right click the selection in JavaEditor, SqlConsole or DatabaseView,
and choose Any2Dto in the popup menus, then, the DTO code will
be Generated to clipboard or package with pre-configured rules.

JooqCode - select Jooq's Fields in DSL, StrongTypeSqlResult - right click query Result View, MappedTypeDatabase - select columns in Database ToolWindow, MappedTypeValuedText - select any Non-Java-Word separated values, GuessTypeSql2DSL - simple mysql select to jooq DSL in wings style

for more detail usage, go to github any2dto
      '';
    };
  }) {};

  anybaridea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AnyBarIdea";
    plugname = "AnyBarIdea";
    plugid = "com.github.denofevil.anyBarIdea";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8371/26508/AnyBarIdea-0.2.zip";
      sha256 = "0h8qkvddddp0n620cq7m1pk2pf6i3401snxcfaxpb6m0s8dqyhy1";
      name = "AnyBarIdea-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/denofevil/AnyBarIdea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/denofevil/AnyBarIdea";
        free = false;
      };
      description = ''
        This plugin provides integration with 
AnyBar OS X menubar status indicator
      '';
    };
  }) {};

  aop-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Aop-Helper";
    plugname = "Aop Helper";
    plugid = "net.afpro.idea.aophelper";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11172/53324/AopHelper-1.2.jar";
      sha256 = "18xfcgi2zrf776jdmswy5852ymifviqanznyx7b3d6xzdyxbq544";
      name = "Aop-Helper-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://afpro.net";
      license = lib.licenses.mit;
      description = ''
        Aop helper.
    With modified method tag.

    Support: Lancet
      '';
    };
  }) {};

  apache-avro-idl-schema-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Apache-Avro-IDL-Schema-Support";
    plugname = "Apache Avro IDL Schema Support";
    plugid = "net.sf.opk.avro-schema-support";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15728/107251/avro-schema-support-0.2.0.zip";
      sha256 = "10680k42x0r7b754szmxlvdizvv1qvxbn9zdsnik2lhgcjk5959r";
      name = "Apache-Avro-IDL-Schema-Support-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/opwvhk/avro-schema-support";
      license = lib.licenses.mit;
      description = ''
        A plugin to support Avro schema files in IDL format (.avdl).
	Features include:
		Full parsing of Avro .avdl files, including new logical types like local_timestamp_ms
		Syntax highlighting &amp; formatting
		Code completion based on syntax and supported references
		
			Some semantic checks, like unknown symbols, invalid identifiers, and values for @namespace, @aliases
			and @order annotations
		
		Rename support for schema names (i.e. renaming records/errors, enums and fixed types also updates its references)
		Recognizes .avsc and .avpr files as JSON5 (i.e. with comments) and supplies JSON schemas for them
      '';
    };
  }) {};

  apache-avro-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Apache-Avro-support";
    plugname = "Apache Avro™ support";
    plugid = "claims.bold.intellij.avro";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7971/39374/intellij-avro-0.3.1.zip";
      sha256 = "1pmjfccv28vz69jw93xr7vw433d63m169g7a8jvhi1b581s43k4s";
      name = "Apache-Avro-support-0.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AbigailBuccaneer/intellij-avro";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/AbigailBuccaneer/intellij-avro/master/LICENSE";
        free = false;
      };
      description = ''
        A plugin adding support for Apache Avro™.
      '';
    };
  }) {};

  apache-camel-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Apache-Camel-IDEA-Plugin";
    plugname = "Apache Camel IDEA Plugin";
    plugid = "org.apache.camel";
    version = "0.5.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9371/52635/camel-idea-plugin-0.5.6.zip";
      sha256 = "0fzpqv99c95qy5chlrjzc36q7xzrq74qsyw6dba31b62478krlwz";
      name = "Apache-Camel-IDEA-Plugin-0.5.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/camel-idea-plugin/camel-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Plugin for Intellij IDEA to provide a set of small Apache Camel related capabilities to the code editor.

      The plugin includes:
      
        Code completion for Camel endpoints in Java, XML, properties or yaml files (ctrl + space)
        Code completion for Camel property placeholders (cursor after {{)
        Code completion for bean methods inside Camel bean DSL
        Endpoint options filtered to only include applicable options when used as consumer vs producer only mode
        Quick navigation to other Camel routes routing to this route by clicking the Camel icon in the gutter
        Intention to add new Camel endpoint (alt + enter in empty string)
        Quick documentation for Camel endpoints and external link to Camel component opening in web browser (ctrl + j and shift-F1)
        Show endpoint information in tooltip when hovering mouse over from/to etc in Java route builders
        Supports 3rd party Camel components (if they have been properly built with Camel JSon schema metadata)
        Attempts to use same version as camel-core dependency from the loaded project (may require download over internet)
        Real time validation for Camel endpoints in Java, XML (underline errors in red)
        Real time validation for Camel simple &amp; jsonpath languages in Java and XML (underline errors in red)
        Inspection (analyze code) to validate Camel endpoints and simple &amp; jsonpath languages in Java and XML
        Quick navigation to bean method from Java DSL
        Preference page to customize property ignore list from property completion
        Preference page to exclude property/yml files from property completion
        Supports Maven, Gradle, and SBT based projects
      '';
    };
  }) {};

  apache-equals-hashcode-and-tostring-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Apache-Equals-HashCode-and-ToString-generator";
    plugname = "Apache Equals HashCode and ToString generator";
    plugid = "com.shankh.intellij.plugin.apache.eht";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7283/14278/ApacheEqualsHashCodeToString.jar";
      sha256 = "1027klf2vcddqx99kzk5kgqf29rn4csnmzhv7ahmfpldmpn2vy0b";
      name = "Apache-Equals-HashCode-and-ToString-generator-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shankh.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.shankh.com";
        free = false;
      };
      description = ''
        Generates equals() and hashCode() and toString() using the Apache Commons lang3 library.
 Usage:
 
 
 On Windows/Linux use ALT + INSERT -&gt; Apache equals() and hashCode(), Apache toString() 
 On Mac use CTRL + N -&gt; Apache equals() and hashCode(), Apache toString() 
 Don't forget to put the commons-lang3 jar on your classpath. Alternatively you can import it from maven
 
 &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt;  

 For more information on Apache equals, hashCode and toString builders follow the links 
 
 http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html 
 http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html 
 http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/ToStringBuilder.html
      '';
    };
  }) {};

  apache-felix = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Apache-Felix";
    plugname = "Apache Felix";
    plugid = "apache-felix-plugin";
    version = "1.3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5910/11491/apache-felix-plugin-1.3.4.zip";
      sha256 = "03n420kxi8hd0hscmkrfw1pln1w0gwscafpikxr52wblnpgcd0qv";
      name = "Apache-Felix-1.3.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/arikkfir/Apache-Felix-IntelliJ-Plugin";
      license = lib.licenses.asl20;
      description = ''
        Apache Felix Integration for IntelliJ IDEA 10 &amp; 11 
This plugin provides native IntelliJ IDEA support for developing, running and debugging OSGi projects developed using Apache Felix and the Apache Felix Maven Bundle Plugin.  
Using this plugin, developers can run and debug OSGi applications using the Apache Felix OSGi container. The plugin allows the user to choose bundles and modules for deployment, updates installed bundles in a running container whenever they are built (e.g. hot-deploy), etc.  
The plugin provides a new type of run configuration: Apache Felix run configuration. The configuration of this run configuration allows the developer to choose which bundles to deploy, The list of available bundles for deployment is comprised of all modules with packaging of &quot;bundle&quot;, and their dependencies. Non-Maven modules (or Maven modules not of packaging &quot;bundle&quot;) are ignored.  
NOTE: This plugin contains code snippets copied from Apache Felix's Maven Bundle Plugin. These were because there was no easy way to directly invoke the Maven plugin. It is the intention of this plugin writer to contact Apache Felix and work together to refactor the code so that it is easily invokable from outside the Maven execution context (e.g. in IDEA's Maven support context), and to eventually contribute the code to the Apache Felix project umbrella. 
Developed by Arik Kfir at Infolinks Inc.
      '';
    };
  }) {};

  apache-config--htaccess = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Apache-config-.htaccess";
    plugname = "Apache config (.htaccess)";
    plugid = "com.intellij.apacheConfig";
    version = "138.872";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6834/16475/apacheConfig-138.872.zip";
      sha256 = "1zy6p2hzag68mnff8s0fj47phcg9c9yswrslx3mjx5a862mv5d33";
      name = "Apache-config-.htaccess-138.872.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Adds support for editing Apache config (.htaccess) files
      '';
    };
  }) {};

  api-debugger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Api-Debugger";
    plugname = "Api Debugger";
    plugid = "me.fingerart.idea.apidebugger";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9199/40140/ApiDebugger.zip";
      sha256 = "0g17bf71klncgg95y26abikydvf0m0dqkaqaxyf73f62b7z1i77m";
      name = "Api-Debugger-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://fingerart.me";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://fingerart.me";
        free = false;
      };
      description = ''
        A plugin to help you easily complete the API debugging.
 
Like this plugin? Give it a star at GitHub and spread the word!
      '';
    };
  }) {};

  api-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Api-Generator";
    plugname = "Api Generator";
    plugid = "site.forgus.plugins.api-generator";
    version = "2020.09.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12785/96657/api-generator.zip";
      sha256 = "1lv0v9w71gpiq68062vip0bxhvwh0lda5g06vsplbiw1ki5rj8p4";
      name = "Api-Generator-2020.09.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Forgus/api-generator";
      license = lib.licenses.asl20;
      description = ''
        Api开发利器，接口文档自动生成
      Features：
      
      Javadoc-based analysis,no additional annotations.
      Supporting field filtering, automatically ignoring the analysis of filtering fields.
      Automatically identify classes, generate markdown documents or upload to Yapi.
      Support list, set, collection and other data structures, and support nested generic parsing.
      Support the parsing of common annotations such as @NotNull and @ResponseBody, and generate Yapi documents based on json5.
      
      Usage：
      Locate the cursor to the method area or class name, right-click Generate Api.
      Support annotations：
      javax.validation.constraints.Min
      javax.validation.constraints.Max
      javax.validation.constraints.NotNull
      javax.validation.constraints.NotBlank
      javax.validation.constraints.NotEmpty
      javax.validation.constraints.Size
      org.hibernate.validator.constraints.Length
      org.hibernate.validator.constraints.Range
      org.springframework.web.bind.annotation.Controller
      org.springframework.web.bind.annotation.RestController
      org.springframework.web.bind.annotation.RequestMapping
      org.springframework.web.bind.annotation.GetMapping
      org.springframework.web.bind.annotation.PutMapping
      org.springframework.web.bind.annotation.DeleteMapping
      org.springframework.web.bind.annotation.PatchMapping
      org.springframework.web.bind.annotation.PathVariable
      org.springframework.web.bind.annotation.RequestBody
      org.springframework.web.bind.annotation.RequestParam
      org.springframework.web.bind.annotation.ResponseBody
      特性：
      
      基于javadoc解析，无代码入侵
      支持字段过滤，自动忽略过滤字段的解析
      自动识别类，生成markdown文档或上传到YApi
      支持List、Set、Collection等数据结构，支持嵌套泛型解析
      支持@NotNull、@ResponseBody等常用注解的解析，基于json5生成YApi文档
      
      用法：
      将光标定位到方法区域或者类名，鼠标右键单击"Generate Api".
      自定义配置项：
      Preferences —&gt; Other Settings —&gt; Api Generator Setting
      
        
          配置项
          含义
        
        
          Exclude Fields
          过滤字段（多个字段以","分隔）
        
        
          Save Directory
          markdown文档保存目录（绝对路径）
        
        
          Indent Style
          二级字段缩进前缀
        
        
          Overwrite exists docs
          是否覆盖同名markdown文档
        
        
          Extract filename from doc comments
          是否从javadoc抽取文件名
        
        
          YApi server url
          YApi部署服务器地址
        
        
          Project token
          项目token
        
        
          Default save category
          默认保存分类
        
        
          Classify API automatically
          是否自动分类
        
      
      Compatible IDE versions:
      2019.1.4+ 
      GitHub
      |&nbsp;Issues
      '';
    };
  }) {};

  api-generator-plus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Api-Generator-Plus";
    plugname = "Api Generator Plus";
    plugid = "site.forgus.plugins.api-generator-plus";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15425/107702/api-generator-plus_v1.0.7.zip";
      sha256 = "0nl48cr49rc31v2ndrh5rgnildibgnxix4n7pdh44mvnccgy18bj";
      name = "Api-Generator-Plus-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Api development tool, YApi api automatic generation; support Copy as cURL,
        Features：
        
          Javadoc-based analysis,no additional annotations.
          Supporting field filtering, automatically ignoring the analysis of filtering fields.
          Automatically identify classes, generate markdown documents or upload to Yapi.
          Support list, set, collection and other data structures, and support nested generic parsing.
          Support the parsing of common annotations such as @NotNull and @ResponseBody, and generate Yapi documents based on json5.
          
        
        
        Usage：
        
          Locate the cursor to the method area or class name, right-click Generate Api Plus.
        
        
        Support annotations：
        javax.validation.constraints.Min
        javax.validation.constraints.Max
        javax.validation.constraints.NotNull
        javax.validation.constraints.NotBlank
        javax.validation.constraints.NotEmpty
        javax.validation.constraints.Size
        org.hibernate.validator.constraints.Length
        org.hibernate.validator.constraints.Range
        org.springframework.web.bind.annotation.Controller
        org.springframework.web.bind.annotation.RestController
        org.springframework.web.bind.annotation.RequestMapping
        org.springframework.web.bind.annotation.GetMapping
        org.springframework.web.bind.annotation.PutMapping
        org.springframework.web.bind.annotation.DeleteMapping
        org.springframework.web.bind.annotation.PatchMapping
        org.springframework.web.bind.annotation.PathVariable
        org.springframework.web.bind.annotation.RequestBody
        org.springframework.web.bind.annotation.RequestParam
        org.springframework.web.bind.annotation.ResponseBody
        特性：
        
          基于javadoc解析，无代码入侵
          支持字段过滤，自动忽略过滤字段的解析
          自动识别类，生成markdown文档或上传到YApi
          支持List、Set、Collection等数据结构，支持嵌套泛型解析
          支持@NotNull、@ResponseBody等常用注解的解析，基于json5生成YApi文档
        
        
        用法：
        
          将光标定位到方法区域或者类名，鼠标右键单击"Generate Api Plus".
        
        
        自定义配置项：
        Preferences —&gt; Other Settings —&gt; Generate Api Plus Setting
        
          
            配置项
            含义
          
          
            Exclude Fields
            过滤字段（多个字段以","分隔）
          
          
            Save Directory
            markdown文档保存目录（绝对路径）
          
          
            Indent Style
            二级字段缩进前缀
          
          
            Overwrite exists docs
            是否覆盖同名markdown文档
          
          
            Extract filename from doc comments
            是否从javadoc抽取文件名
          
          
            YApi server url
            YApi部署服务器地址
          
          
            Project token
            项目token
          
          
            Default save category
            默认保存分类
          
          
            Classify API automatically
            是否自动分类
          
          
            Is Multiple Module Project
            是否是多模块项目
          
          
            Is Use Default Token
            是否使用默认token
          
        
        
        Copy as cURL
        Features：
        
          right-click generator curl command
        
        特性：
        
          Generate the curl command with a key from the interface method, which can be executed on CMD /bash. Headers can be customized
        
        Compatible IDE versions:
        2019.1.4+ 
        
          Api Generator:&nbsp;
          GitHub
          |&nbsp;Issues
        
        
          Api Generator Plus:&nbsp;
          GitHub
          |&nbsp;Issues
      '';
    };
  }) {};

  apicloud = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Apicloud";
    plugname = "Apicloud";
    plugid = "com.apicloud.plugin";
    version = "3.19";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10710/73985/ApicloudPlugins.zip";
      sha256 = "0avi5lnpwkghxxy8ziy4p505a6avicgr2rmc6bq3sll7c7qdaz34";
      name = "Apicloud-3.19.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/695137400/ApicloudPlugins";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/695137400/ApicloudPlugins/blob/master/README.md";
        free = false;
      };
      description = ''
        本插件是为了方便开发Apicloud
                    This plugin is for the convenience of developmentApicloud
                    本插件是在官方公布在github上的源码进行编写，不涉及版权
                    According to the source code to modifygithub
                    本插件是第二次更新版本，第一次版本更新发布在Apicloud官方论坛
                    one version posted inApicloud
                    控制台代码参考mybatis-log-plugin如果有侵犯原作者版权的地方，请联系本人销毁
                    the console code referencemybatis-log-plugin
                    IDEA支持同一个Project下创建多个Module，这个时候你可以选中其中一个Module的根目录或者这个Module中的任意一个文件来运行USB或者WIFI
                    控制台可以看到很多日志，在您开启WIFI之后，第一次链接USB的时候会开启USB调试，如果控制台打印出日志（例如：chrome-devtools://devtools/bundled/inspector.html?ws=***），这个时候您可以拔掉USB直接使用无线调试，
                    调试也非常简单，直接把地址拷贝，粘贴到谷歌浏览器的地址栏，然后回车就可以，加入您不会使用Chrome DevTools ，还是建议您去学习这方面的知识
                    
                        本插件目前实现功能：
                        Functional description：
                        
                        创建Apicloud工程
                        Create  Apicloud to a project
                        USB运行同步到手机
                        USB to mobile the project
                        官方基本API代码快速提示
                        the code The official templates
                        输出日志到自定义控制台
                        WIFI 同步到手机
                        WIFI to mobile the project
                        console message
                        其它均采用官方代码修改
                        插件源代码已经公布在github,详细见地址：Apicloud Plugin
                        github：Apicloud Plugin
      '';
    };
  }) {};

  apollo-conf = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Apollo-Conf";
    plugname = "Apollo Conf";
    plugid = "io.github.newhoo.apollo-conf";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13202/70910/apollo-conf-intellij-plugin-1.0.0.zip";
      sha256 = "0ww7nz0kp8an6qla433dbxmq228h36skjanl1c5pi5plp2f7jn74";
      name = "Apollo-Conf-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/newhoo/apollo-conf-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        find Apollo conf and open it in browser
    
    快速打开Apollo配置中心
      '';
    };
  }) {};

  appdynamics-android-agent-installer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AppDynamics-Android-Agent-Installer";
    plugname = "AppDynamics Android Agent Installer";
    plugid = "com.appdynamics.androidstudioplugin";
    version = "1.1.38";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9516/53738/android-studio-plugin-1.1.38.zip";
      sha256 = "166vd5k82nh31s74sy9z7ffbaz3mjqy7bbkw7753i8jq7fknzjwn";
      name = "AppDynamics-Android-Agent-Installer-1.1.38.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.appdynamics.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://legal.appdynamics.com/appdynamics_tool_and_utility_license.pdf";
        free = false;
      };
      description = ''
        Introduction
      AppDynamics Mobile Real User Monitoring (RUM) enables you to optimize and gain greater visibility
      into the end-user experience of your mobile application.
      
      Using Mobile RUM you can:
      
       Track mobile user sessions in real-time and understand the business impact of mobile app performance on your KPIs.
       Identify and resolve crashes and errors quickly and efficiently.
       Gain accurate user insights and visibility into every user and their mobile application activity.
       Discover business transactions to provide mobile application to back-end application dependencies by using Mobile RUM with AppDynamics APM.
       Observe and analyze the network requests from your mobile app.
      

      About the Plugin
      This plugin is a lightweight utility employing a wizard to obtain the basic information needed
      to instrument your application and then injects changes to your Gradle build configuration and
      instrumentation initialization into your application code.

      When Not to Use the Plugin
      If you have already instrumented your application, don’t use the plugin. Instead, consider
      customizing your instrumentation with the Android SDK.

      Learn More
      For general information about our Mobile product, see
      Mobile Real-User Monitoring.
      For explicit instructions on installing and using the Android plugin, see the
      Android Agent Plugin tutorial.
      '';
    };
  }) {};

  appium-studio = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Appium-Studio";
    plugname = "Appium Studio";
    plugid = "com.intellij.STAintellij.intellij_plugin";
    version = "20.12.201";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13850/107347/experiJ-20.12.201.zip";
      sha256 = "0a1p0sx9la8nfd7jsbl8fhvlxkl641p8kvl99nix80yxwry9ib0g";
      name = "Appium-Studio-20.12.201.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.experitest.com";
      license = lib.licenses.gpl3Only;
      description = ''
        Easily develop, execute, analyze and debug your tests on remote physical devices
End-to-end mobile test automation from IntelliJ
Perform test development, automation project development, and test execution on remote devices in the Digital Device Lab with a single tool with rich views and editors fully embedded in IntelliJ for digital test automation.
&nbsp;
Immediate visual feedback Easily create robust and maintainable tests with a dynamic device reflection that provides immediate visual feedback on all actions. Project development is further streamlined with code snippets and automatically generated IntelliJ framework assets such as properties &amp; configuration files.
Powerful object identification Enjoy powerful object identification and management, that identify objects by their native/web properties, including image/OCR and customized UI. Write scripts with drag and drop script editor.
Create stable automation Leverage pre-configured IntelliJ project framework assets for mobile including code snippets, properties &amp; configuration files to reduce errors and easily create stable projects.
Maximize your test coverage rates Achieve high coverage rates by testing outside of your app (SMS, network, settings, Facebook) and 3rd party integrations for complex use cases such as code scanning or fingerprint authentication. Guaranteed rapid version and beta support.
Seamlessly integrate with any testing &amp; CI environment Create Appium and&nbsp;Selenium&nbsp;test automation, and integrate with any IntelliJ plug-in such as Python or Ruby. Integrate with any continuous integration environment to trigger continuous testing as part of the CI process.
Parallel test execution Intelligent grid execution management allows you to see executions in the real-time view of all executions. Dynamically schedule tests, executions, and distribution. Run multiple CI projects in parallel (multiple applications).
&nbsp;
Appium Studio for IntelliJ allows you to develop and execute tests on remote devices located in the SaaS Digital Assurance Lab. The Digital Assurance Lab provides access to hundreds of browsers &amp; mobile devices&nbsp;hosted in Experitest data centers, from anywhere at any time. Register to the Digital Assurance lab for free.
      '';
    };
  }) {};

  applescript-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AppleScript-Support";
    plugname = "AppleScript Support";
    plugid = "com.intellij.plugin.applescript";
    version = "0.119";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8149/65788/AppleScript_Support-0.119.zip";
      sha256 = "0p1mlg9xf9dxk72nl00gym8qz89199zj8jszi36zxrnq8flbz0z8";
      name = "AppleScript-Support-0.119.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/ant_druha";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/ant-druha/AppleScript-IDEA/master/LICENSE";
        free = false;
      };
      description = ''
        Provides support for writing and executing scripts with
            AppleScript.
            For applications with legacy dictionary formats requires installed Xcode for dictionary file
            generation.
        Wiki: How to AppleScript
        
        Plugin page: https://plugins.jetbrains.com/plugin/8149
      '';
    };
  }) {};

  arc-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Arc-Theme";
    plugname = "Arc Theme";
    plugid = "io.gitlab.zlamalp.arc-theme-idea";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12451/98797/arc-theme-idea-light.jar";
      sha256 = "15iqxw6hyjvqwldclr4ahp4ccq7pl8nfrx250aiv4qqp7vc5lym7";
      name = "Arc-Theme-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/zlamalp/arc-theme-idea";
      license = lib.licenses.mit;
      description = ''
        Arc light look alike visual theme for Intellij IDEA. Default accented color is blue or orange.
  
  For version 2019.3 and above.
      '';
    };
  }) {};

  arc-theme-dark = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Arc-Theme-Dark";
    plugname = "Arc Theme Dark";
    plugid = "io.gitlab.zlamalp.arc-theme-idea-dark";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15175/98798/arc-theme-idea-dark.jar";
      sha256 = "00ppmzry86ib569c6zgdbqlc7qwb2wdp7sxjxn222vdfah17hfpw";
      name = "Arc-Theme-Dark-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/zlamalp/arc-theme-idea";
      license = lib.licenses.mit;
      description = ''
        Arc dark look alike visual theme for Intellij IDEA. Default accented color is blue or orange.
  
  For version 2019.3 and above.
      '';
    };
  }) {};

  archive-browser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Archive-Browser";
    plugname = "Archive Browser";
    plugid = "com.github.b3er.idea.plugins.arc.browser";
    version = "0.23";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9491/105156/idea-archive-browser-0.23.zip";
      sha256 = "1v47rahj7bqw3n3zn4fb1gikbipd9xqhrrq36w75na6ldfm5qssr";
      name = "Archive-Browser-0.23.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/b3er/idea-archive-browser";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows you to browse most archives like folders in IDEA.
        Supported archives (most of 7-zip supports): 7z, XZ, BZIP2, GZIP, TAR, ZIP, WIM, AR, ARJ, CAB, CHM, CPIO, CramFS, DMG, EXT, FAT, GPT, HFS, IHEX, ISO, LZH, LZMA, MBR, MSI, NSIS, NTFS, QCOW2, RAR, RPM, SquashFS, UDF, UEFI, VDI, VHD, VMDK, WIM, XAR and Z
      '';
    };
  }) {};

  argus-cit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Argus-CIT";
    plugname = "Argus-CIT";
    plugid = "org.argus.cit.intellij";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9186/29555/argus-cit-plugin.zip";
      sha256 = "0r500yw5f8z0kyvj51nl7gnykmrdp5rlzs3z90c0zyyx6xxvsfrv";
      name = "Argus-CIT-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://fgwei.arguslab.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eclipse.org/legal/epl-v10.html";
        free = false;
      };
      description = ''
        Argus CIT plugin provides Jawa language support, and integrates Argus products (eg., Argus-SAF, jawa2java, etc) for Android APK analysis.
      '';
    };
  }) {};

  arkapiupload = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ArkApiUpload";
    plugname = "ArkApiUpload";
    plugid = "ArkApiUpload";
    version = "1.8.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15621/107236/YapiIdeaUploadPlugin_20_.zip";
      sha256 = "1rn4b48fd6fqmxykiqhaszg6q4bw625nqyq9vp64d17ynqrvyxxl";
      name = "ArkApiUpload-1.8.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.syman.cn/";
      license = lib.licenses.asl20;
      description = ''
        ArkApiUpload,Automatic generation of interface documents
     Characteristics: 
     
     Support class level classification definition
     Automatically identify the class and upload it to footmonkey
     It supports collection and basic data types, supports nested generic parsing, and does not support arbitrary generic T
     Support @ requestmapping @ getmapping @ postmapping @ putmapping @ deletemapping @ patchmapping
                 @RequestBody @RequestParam @RequestHeader @RequestAttribute @PathVariable @JSONField
                 @ApiOperation @ApiModelProperty @ApiParam @Api
                 @NotNull @NotEmpty @NotBlank @HttpServletRequest @HttpServletResponse
                 @Deprecated
      
      Usage: 
      Locate the cursor to the method area or class name, and right-click "arkapiupload". The first upload will pop up a login dialog box,
      Enter the email address of your arkshare account and the URL of foulmonkey (that is, the domain name of foulmonkey). Click to get the list of items (the letter will be sent
      Write the information to the. Idea folder misc.xml In the pop-up item list), select a specific item, double-click to pop up all lists under the item, and you can select new item
      Add or double-click the upload interface;
      特性：
      
      支持类级别 分类定义
      自动识别类，并且上传到FoolMonkey
      支持集合和基本数据等类型，支持嵌套泛型解析，不支持任意泛型T
      支持 @RequestMapping @GetMapping @PostMapping @PutMapping @DeleteMapping @PatchMapping
        @RequestBody @RequestParam @RequestHeader @RequestAttribute @PathVariable  @JSONField
        @ApiOperation  @ApiModelProperty @ApiParam @Api
        @NotNull @NotEmpty @NotBlank @HttpServletRequest @HttpServletResponse
        @Deprecated
      
      用法：
      将光标定位到方法区域或者类名，鼠标右键单击"ArkApiUpload"，第一次上传会弹出一个登录对话框，
      输入你的arkshare账户的邮箱，以及FoolMonkey的url(也就是FoolMonkey的域名)，点击获取项目列表(会把信
      息写到.idea 文件夹下的misc.xml中),弹出项目列表，选择具体项目双击，弹出该项目下的所有列表，可以选择新 
      增或者双击上传接口；
      '';
    };
  }) {};

  arma-intellij-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Arma-IntelliJ-Plugin";
    plugname = "Arma IntelliJ Plugin";
    plugid = "com.kaylerrenslow.plugin.armaplugin.id";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9254/47078/Arma_Intellij_Plugin_v2.0.2.zip";
      sha256 = "0n4bh405fvrhnwfxbqjlsam5pm928i5wqdpwr6pjjbq6r94gav1y";
      name = "Arma-IntelliJ-Plugin-2.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kayler-renslow/arma-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/kayler-renslow/arma-intellij-plugin/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        NOTICE: this plugin is not intended for C/C++ Development.
			
			
			Arma IntelliJ Plugin provides support for the SQF scripting language used in the video game Arma 3.
			Some of the most notable plugin features are:
			
			Full command syntax analysis
			Type checking
			Config function auto-completion
			Code and file templates
			Syntax highlighting
			Arma Addon Indexing Support
			
			
			Arma IntelliJ Plugin is also bundled with Arma Dialog Creator.
			You can launch it via Tools-&gt;Arma Dialog Creator
      '';
    };
  }) {};

  armory = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Armory";
    plugname = "Armory";
    plugid = "com.visprogramming.armory";
    version = "1.54";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7897/108105/Armory.jar";
      sha256 = "11hkdb69hw87jfcj3wggmaylbfg2w02lfr4hcjkxy122jbhq516d";
      name = "Armory-1.54.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.visprogramming.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.visprogramming.com/eula.html";
        free = false;
      };
      description = ''
        Advanced navigation tool with multiple project trees support.

      Key features
      
        Multiple Project Views
        Grouping elements without changing the structure of code
        Custom sorting schemes
        Code secluding (hiding or muting outer code)
        Easy switching between projects
      
      For more information see Armory Features page
      '';
    };
  }) {};

  artifact-finder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Artifact-Finder";
    plugname = "Artifact Finder";
    plugid = "com.birbit.artifactfinder";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13320/72279/ideplugin.zip";
      sha256 = "0l110idn3cfs2lsk6wkjznb68c0rschs8c2d3skmn5gdkkqx5giv";
      name = "Artifact-Finder-0.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        An Android Studio plugin which allows you to find Maven artifacts by class name, kotlin global
        methods or kotlin extension functions.
      '';
    };
  }) {};

  artifactgen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ArtifactGen";
    plugname = "ArtifactGen";
    plugid = "me.serce.artifactgen";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9284/46771/ArtifactGen-0.4.zip";
      sha256 = "1b2h2p4y1jfls2bikz9kjfi2vw100rz9arrhclny56xxkybi8i0p";
      name = "ArtifactGen-0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://serce.me";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows you to recreate artifact on every module structure change
      '';
    };
  }) {};

  asciidoc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AsciiDoc";
    plugname = "AsciiDoc";
    plugid = "org.asciidoctor.intellij.asciidoc";
    version = "0.32.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7391/106830/asciidoctor-intellij-plugin-0.32.7.zip";
      sha256 = "1sf6b1bzgp5v838rpcjdk0dc43ixib78x565wxbyyzz1psgaldbc";
      name = "AsciiDoc-0.32.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://intellij-asciidoc-plugin.ahus1.de/";
      license = lib.licenses.asl20;
      description = ''
        Homepage |
    Quick start |
    User Guide |
    FAQ |
    Issue tracker

AsciiDoc language support for IntelliJ platform.
AsciiDoc is a text document format, similar to formats like Markdown, for writing notes, documentation, articles,
    books, ebooks, slideshows, web pages, man pages and blogs. AsciiDoc files can be translated to many formats
    including HTML, PDF, EPUB, man page. AsciiDoc is, in contrast to Markdown, highly configurable: both the AsciiDoc
    source file syntax and the backend output markups (which can be almost any type of SGML/XML markup)
    can be customized and extended by the user.
This plugin includes support for Antora and
    Spring REST Docs.

    Sponsor:
    
    Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from inside your IDE while using jump-to-definition, your keybindings, and other IDE favorites. Learn more
To support the authors of Asciidoctor, please consider supporting us via
    OpenCollective.

    For better legibility in the JavaFX preview, this package includes DejaVu fonts.
    See here for the free fonts license.
      '';
    };
  }) {};

  asciidoclet = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Asciidoclet";
    plugname = "Asciidoclet";
    plugid = "org.asciidoctor.intellij.asciidoclet";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14696/100965/asciidoclet-intellij-plugin.zip";
      sha256 = "11nrj3q00yvrwqv20x5fpbf201qkcyc9j4hx30diay3akflsmg9f";
      name = "Asciidoclet-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://intellij-asciidoc-plugin.ahus1.de/";
      license = lib.licenses.asl20;
      description = ''
        Homepage |
    Quick start |
    User Guide |
    FAQ |
    Issue tracker



    Adding support for Asciidoclet when writing JavaDoc.


    It is a companion of the AsciiDoc plugin.
      '';
    };
  }) {};

  asiimov-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Asiimov-Theme";
    plugname = "Asiimov Theme";
    plugid = "io.joy.theme.asiimov";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15700/106574/asiimov.jar";
      sha256 = "135bdahnqpa601jvlww4fnpi3ha9wn2lxngpr131p26bdz6lk9gd";
      name = "Asiimov-Theme-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Asiimov Theme,Designed to pay tribute to Isaac Asimov, the greatest science fiction writer.
      二西莫夫配色主题,旨在向最伟大的科幻小说家艾萨克·阿西莫夫（Isaac Asimov）致敬.
      '';
    };
  }) {};

  aspectj-weaver = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AspectJ-weaver";
    plugname = "AspectJ weaver";
    plugid = "AspectJ weaver";
    version = "3.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1127/12448/AspectJ-plugin-3.0.0.zip";
      sha256 = "0y3f22s549sikgssi0v5j5gx1z0bzi7pxdn5i8qxkdpw81plp0bf";
      name = "AspectJ-weaver-3.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://intellij.expertsystems.se/aspectj.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://intellij.expertsystems.se/aspectj.html";
        free = false;
      };
      description = ''
        Post-compile AspectJ weaving
      '';
    };
  }) {};

  aspectwerkz-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AspectWerkz-plugin";
    plugname = "AspectWerkz plugin";
    plugid = "AspectWerkz plugin";
    version = "1.02";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/628/2853/IntelliJAW-1.02.zip";
      sha256 = "0qvkcx49ag9wqx68as8ccdh1v5ds7brldz8c03wf9npkz76r4fby";
      name = "AspectWerkz-plugin-1.02.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://intellij.expertsystems.se/aspectwerkz.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://intellij.expertsystems.se/aspectwerkz.html";
        free = false;
      };
      description = ''
        Post-compile AspectWerkz weaving
      '';
    };
  }) {};

  assembly-string = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Assembly-string";
    plugname = "Assembly string";
    plugid = "com.guiwang.plugin.AssemblyPlugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10588/44682/idea-plugin-editor.jar";
      sha256 = "0l59lq0wnbkfbyibx37ym3nbgd1y1qhc7w2ik76ijhgxsb0ny4n3";
      name = "Assembly-string-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        e.g.: `SELECT U.* FROM USER U` to `buf.append("SELECT U.* FROM USER U");`
      '';
    };
  }) {};

  assertj-postfix-completion-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AssertJ-Postfix-Completion-Plugin";
    plugname = "AssertJ Postfix Completion Plugin";
    plugid = "me.geso.assertj_postfix_plugin";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8093/82720/assertj-postfix-plugin-0.0.4.zip";
      sha256 = "19fagk8vaxn49c9y8mpn0nvlwc6qlzs7bdwpsvldwsd3cka4z0h2";
      name = "AssertJ-Postfix-Completion-Plugin-0.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://64p.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tokuhirom/assertj-postfix-plugin";
        free = false;
      };
      description = ''
        This plugin adds postfix completion template for assertj.
      '';
    };
  }) {};

  assertions2assertj = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Assertions2Assertj";
    plugname = "Assertions2Assertj";
    plugid = "com.chainstaysoftware.assertions2assertj";
    version = "1.0.05";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10345/105650/Assertions2Assertj.zip";
      sha256 = "1vnz62hxq575zyg4gi8v33xyh5r5l7ihgpywnay339vqjs1iiaac";
      name = "Assertions2Assertj-1.0.05.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ricemery/Assertions2AssertJ";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Assertions2Assert2
      Helper plugin to convert Junit and Hamcrest Assertions to AssertJ. The plugin
      will aid in the conversion of assert statements, but does not support conversion
      of all Hamcrest and Junit asserts scenarios. Some manual intervention may be needed.


Dependencies

  Note that AssertJ must be included in the IntelliJ project classpath for
the Plugin to successfully complete.


Usage

  
  Select an item from within the Refactor -&gt; Convert Assertions to AssertJ menu.
  Note that the "Convert current file" and "Convert Module" items will
  only be enabled if a file is selected within the editor.
  


Limitations

  The plugin does NOT convert Hamcrest assertions included in Mockito
verify statements
  The plugin does NOT convert all assertions that utilize matchers embedded
within other matchers (e.g. anyOf(equalTo(1.0), equalTo(2.0))).
  When a file contains both assertions that are converted, and assertions that
are ignored, the Hamcrest imports will still be deleted.
  Does not support the following Hamcrest matchers
    
      allOf
      anything
      everyItem
      hasXPath
      samePropertyValueAs
    
  
  Does not support the following Junit Asserts
    
      assertTimeout
      assertTimeoutPreemptively
      '';
    };
  }) {};

  atsoundtrack = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AtSoundtrack";
    plugname = "AtSoundtrack";
    plugid = "biz.paluch.atsoundtrack";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7783/31483/atsoundtrack-jetbrains-plugin-1.2.1.zip";
      sha256 = "1p6xd43rbk3cmw2lfwdagnwqcyr3svr8qiglrmvz0a4wipbvsqxl";
      name = "AtSoundtrack-1.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.paluch.biz";
      license = lib.licenses.asl20;
      description = ''
        AtSoundtrack
     

      GitHub |
      Issues

      Plugin that provides @soundtrack using iTunes and Spotify. This plugin works only if you use a Mac.
      @soundtrack can be used either with code completion or as variable in the file templates.
      
      To setup @soundtrack in your templates: Open Preferences go to Editor -&gt; File and Code Templates -&gt; Includes and select "File Header"
      
      Add the following code:
      
#if (''${soundtrack} &amp;&amp; ''${soundtrack} != "")
 *  @soundtrack ''${soundtrack}
#end

Language support

CoffeeScript
CSS
HTML
Java
JavaScript
Kotlin
PHP
Python
Ruby
Scala (and ScalaScript)
SQL
XML



Compiled with Java 1.8.
      '';
    };
  }) {};

  atom-material-icons = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Atom-Material-Icons";
    plugname = "Atom Material Icons";
    plugid = "com.mallowigi";
    version = "29.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10044/99267/Atom_File_Icons_IDEA-29.0.zip";
      sha256 = "06h0dqahcf792hj01iy6k6nqy45fw2js6v7sydx31yvnx7vd8vvv";
      name = "Atom-Material-Icons-29.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mallowigi";
      license = lib.licenses.mit;
      description = ''
        Atom Material File Icons
        Custom File and IDE Icons for improved visual grepping
        
            
        
        
        This plugin is a port of the Atom File Icons and the icons
            of the Material Theme UI plugin.
            
        
        
        Chrome Extension
        https://chrome.google.com/webstore/detail/atom-file-icons-web/pljfkbaipkidhmaljaaakibigbcmmpnc
        
        Features
        
            Replaces file icons with their relevant logo icons
                
                    According to their extension (Java, PHP, Ruby...)
                    According to the framework (Android, NPM, RSpec...)
                    According to the program used with (Babel, Docker, CircleCI...)
                
            
            Replaces directories:
                
                    With a common pattern: src, main, app, img, docs...
                    With a specific pattern: node_modules, .vscode, .git...
                
            
            Replaces the PSI (Program Structure Interface) icons:
                
                    Classes, Interfaces, Enums, Abstract...
                    Methods, Lambdas, Inherits, Overrides...
                
            
            Replaces the UI Icons:
                
                    Toolbar icons (actions)
                    Gutter icons (debugger)
                    Node icons (folders)...
                
            
            Monochrome filter: Set a monochrome filter to the whole UI
                
                    Ability to select the color
                
            
            Arrows Style: Customize the look of the arrows in Tree components
                
                    Material: Chevron-like arrows
                    Darcula: Regular triangle arrows
                    Plus-Minus: Plus and Minus signs
                    Arrows: Simple Arrows
                    None: No arrows
                
            
            Hollow Folders: Add custom decorations on folders contianing opened files
            Accent Color: Change the color of specific icons
                
                    Closing tab button
                    Highlighted arrows
                    Loading indicator...
                
            
            Customizability: Custom Settings
                
                    Settings Pages
                    Toolbar Action Buttons
                
            
            Custom File and Directory associations (NEW): Customize your own associations
                
                    File associations by Regex
                    Folder associations
                    Preview default icons
                
            
        


        
        Donate
        This theme is backed up by OpenCollective.
            If you like this plugin, don't hesitate to give it a star or donate via Paypal or OpenCollective
        Sponsors
        This plugin is sponsored by CodeStream and Codota
        
            
        Discuss, review, and share code with your team in your JetBrains IDE. Integrates with Slack, Jira, Trello,
            Github and more. Try
                it free!
        
            
        
        Code faster and smarter using code completions learned from millions of programs directly in IntelliJ,
            Android Studio or Eclipse. Get
                Codota
      '';
    };
  }) {};

  atom-one-dark-by-mayke = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Atom-One-Dark-By-Mayke";
    plugname = "Atom One Dark By Mayke";
    plugid = "com.mfwebstudio.atomonedark.plugin.id";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13016/68825/IntelliTheme.jar";
      sha256 = "0d2s3sl7xpj7spzi798zldrj8850rzk6m4mjmgmx7jr5v6vl10q4";
      name = "Atom-One-Dark-By-Mayke-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mfwebstudio.dev";
      license = lib.licenses.gpl3Only;
      description = ''
        An Atom One Dark Plugin for Intellij IDEs with custom UI colors.

     Are you enjoying this plugin? Please help me maintain it doing some donation:
     Donate

     TIPS:
     
     Install the Atom Material Icons Plugin.

     TIPS FOR MAC USERS:
     
     Change the IDE font to Lucida Grande and font size to 14px.
      '';
    };
  }) {};

  atom-one-dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Atom-One-Dark-Color-Scheme";
    plugname = "Atom One Dark Color Scheme";
    plugid = "color.scheme.Atom One Dark";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12311/61512/Atom_One_Dark.jar";
      sha256 = "1fb4ln21846lm4mpvxsnlnjc4ncp9s8hsxgzag6h3dh6bd61j89l";
      name = "Atom-One-Dark-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.yisen614.top";
      license = lib.licenses.asl20;
      description = ''
        
      '';
    };
  }) {};

  atom-one-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Atom-One-Theme";
    plugname = "Atom One Theme";
    plugid = "atom-one";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14799/95463/atom-one-jetbrains.jar";
      sha256 = "16a5c2yg3nn8gg25q7ny7ifmrjg4kam44k8hz7w8pvmz78v8lbn3";
      name = "Atom-One-Theme-0.3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://subtheme.pro";
      license = lib.licenses.mit;
      description = ''
        The Atom One theme, adapted for JetBrains by Subtheme. Both dark and light themes are included.
      
      Contribute with GitHub: https://github.com/subtheme-pro/atom-one
      '';
    };
  }) {};

  atom-onedark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Atom-OneDark-Theme";
    plugname = "Atom OneDark Theme";
    plugid = "github.cweijan.test-theme";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12178/61123/atom-onedark-theme.jar";
      sha256 = "1ydx335d31xw1yznd4gvkmd029nd4pdyfjw2g27qlsqsvrjd5bhv";
      name = "Atom-OneDark-Theme-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/cweijan/atom-onedark-theme";
        free = false;
      };
      description = ''
        Atom One Dark Theme 
    Modernize The Intellij Idea
    Recommend with plugin decorate usage
      '';
    };
  }) {};

  attachme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AttachMe";
    plugname = "AttachMe";
    plugid = "com.attachme";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13263/75815/plugin-0.0.5.zip";
      sha256 = "06m39w8bc8vidh6bz8d548wkvnb5rp50yz7bs6qyipcyfr36xf01";
      name = "AttachMe-0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/samvel1024/attachme";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        A plugin that improves the way IntelliJ debugger attaches to java processes.
        Supports auto-attaching to newly forked child JVMs and JVMs started outside of IntelliJ.
        Read the instructions to be able to use the
        plugin.
      '';
    };
  }) {};

  aurora-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Aurora-Support";
    plugname = "Aurora Support";
    plugid = "com.hand.ide.plugin.aurora-support";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11468/54286/aurora-support-1.0.3.zip";
      sha256 = "07vmf56vr3ci6ly0id03l4y953m5qxnfl6sigmp3c5vh21zyfknv";
      name = "Aurora-Support-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.xuzhao.xin";
      license = lib.licenses.asl20;
      description = ''
        Supports the development of Aurora applications with IntelliJ IDEA.
    
    
    donation
      '';
    };
  }) {};

  auto-dark-mode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Auto-Dark-Mode";
    plugname = "Auto Dark Mode";
    plugid = "com.github.weisj.darkmode";
    version = "1.5.2-2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14076/104891/auto-dark-mode-plugin-1.5.2-2020.3.zip";
      sha256 = "1mky1h2nkw62snxy048l7ih8lz36ck9b49c59fsmwfi8p548s07n";
      name = "Auto-Dark-Mode-1.5.2-2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/weisJ/";
      license = lib.licenses.mit;
      description = ''
        Automatically change IDEA theme according to OS settings (dark/light/high contrast).
        Currently works on Windows, macOS and Linux (Gnome only).

        You can change the default theme used in the plugin settings under "Other Settings"-&gt;"Auto Dark Mode".

        Note: When using the plugin on Catalina in "Auto" mode at least one restart is needed for dark mode detection to
        work properly.
      '';
    };
  }) {};

  auto-exclude = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Auto-Exclude";
    plugname = "Auto Exclude";
    plugid = "be.jeroendruwe.auto-exclude";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9598/33862/auto-exclude.jar";
      sha256 = "10mxiaydswj5i9firam6dxiacpm6vrmpni4f753rllxs5g1xj48j";
      name = "Auto-Exclude-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jeroendruwe.be/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://jeroendruwe.be/";
        free = false;
      };
      description = ''
        Plugin that can be used to exclude all dist folders in the project. (multi-module supported).
      '';
    };
  }) {};

  auto-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Auto-Generator";
    plugname = "Auto Generator";
    plugid = "com.fishy.plugin.idea.auto";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7918/25722/AutoGenerator-1.1.0.zip";
      sha256 = "1xrazwrdrs1j8psf1qn52awfng9ghr9j6dd4b5fz7ahxivd0x0z0";
      name = "Auto-Generator-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://weibo.com/dxkkk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://weibo.com/dxkkk";
        free = false;
      };
      description = ''
        Auto Generator 

It's a tool for auto generate Data Persistence Layer by Create Table SQL. 

What is "Data Persistence Layer", just contain DO, Query, DAO, Manager, And sqlmap ... 

I designed it just for java and scala . other languages maybe later ... 

The generate code will use ibatis and 
tddl to access database. 

If you don't like, change it your self. of course, you also can send other framework to me . 

This tool will appeared at "Tools" menu and "Go To" menu, shortcut key is: ctrl+shift+\ 

jdk1.7 for 1.0.0, jdk1.6 for 1.0.1 and later. 

If you download slow here, please go 
https://github.com/i17c/AutoGenerator/tree/master/releases 
 
 
Auto Generator 

本工具根据建表语句自动创建数据持久层. 

数据持久层包含DO, Query, DAO, Manager, sqlmap 等 

本工具只设计为生成java和scala代码, 也许以后也会有更多的代码支持 

生成的代码默认使用了ibatis和
tddl, 如果你不喜欢, 请自行生成后替换. 

当然, 也可以反馈给我, 其他更好的建议. 

本工具将在"Tools"菜单中和"Go To"菜单中会出现, 快捷键: ctrl+shift+\ 

jdk1.7 for 1.0.0, jdk1.6 for 1.0.1 and later. 

如果你觉得下载很慢, 可以去
https://github.com/i17c/AutoGenerator/tree/master/releases
      '';
    };
  }) {};

  auto-switch-input-source-in-ideavim-mode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Auto-Switch-Input-Source-In-IdeaVim-Mode";
    plugname = "Auto Switch Input Source In IdeaVim Mode";
    plugid = "AutoSwitchIm";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9711/41780/AutoSwitchIm-1.4.3.zip";
      sha256 = "0qgf25j54qd7y1c6wgdprirh44100bqvnz1djhzl71sywbgxanzm";
      name = "Auto-Switch-Input-Source-In-IdeaVim-Mode-1.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://rieon.cn";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/rieonke/idea-auto-switch-im/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Auto Switch Input Source In IdeaVim Mode For MAC Only An plugin for auto switching input method while using IdeaVim plugin FOR MAC ONLY
 
Auto switch to specified IME while in normal/visual mode 
Auto switch to specified IME while returning back insert mode 
Auto switch to specified IME while leaving idea  
Auto switch to specified IME while idea re-focused Author and the project page  
Follow this link to Github 
 
 ??MAC?? ?IdeaVim????????
 
?normal/visual ???????????? 
??????????????????????? 
?idea??????????????? 
???idea????????? ??????? 
???GitHub
      '';
    };
  }) {};

  auto-sync = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Auto-Sync";
    plugname = "Auto Sync";
    plugid = "com.demonwav.autosync";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9509/42127/Auto_Sync-1.3.zip";
      sha256 = "1lh72chqvia7x9a8vbimv06ns475bjk6p0fccvxplp840p4l0frh";
      name = "Auto-Sync-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DemonWav/autosync";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/DemonWav/autosync/blob/master/license.txt";
        free = false;
      };
      description = ''
        This automates the action of right clicking on a project and clicking synchronize. This can be useful if you need to turn off the IDE's "Auto Synchronize on Frame Activation" due to using network mounted file systems.
      '';
    };
  }) {};

  auto-transform-encoding = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Auto-Transform-Encoding";
    plugname = "Auto Transform Encoding";
    plugid = "zhengkuan.yzk.auto.transform.encoding";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10937/85810/auto.transform.encoding.zip";
      sha256 = "0y3k2szd40z9wids3k8nlgicyrvi85hmzavsn4rkcsgdcw8hhqpl";
      name = "Auto-Transform-Encoding-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/YangZhengkuan/auto.transform.encoding";
      license = lib.licenses.bsd3;
      description = ''
        Auto Transform Encoding
      Identify the encoding of the current file in the editor, and transform the file encoding to the identified encoding automatically.
      Get rid of the the cumbersome steps you need to click the file encoding menu.

      文件编码自动转码插件
      自动识别文件的编码，并进行转码显示
      摆脱需要在右下角编码菜单点击选择的繁琐步骤
      '';
    };
  }) {};

  auto-add-or-remove--jsonproperty-and-apimodelproperty = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Auto-add-or-remove--JsonProperty-and-ApiModelProperty";
    plugname = "Auto add or remove  JsonProperty and ApiModelProperty";
    plugid = "cn.mycommons.auto";
    version = "0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11606/54622/JsonPropertyAndApiModelProperty-0.5.jar";
      sha256 = "1d4fmszjiqz2jx0x1zsjjghg5fk1bywgvvzh0j4xladhgyvvljyq";
      name = "Auto-add-or-remove--JsonProperty-and-ApiModelProperty-0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://#";
      license = lib.licenses.bsd2;
      description = ''
        Auto add or remove  JsonProperty and ApiModelProperty.
      '';
    };
  }) {};

  auto-filling-java-call-arguments = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Auto-filling-Java-call-arguments";
    plugname = "Auto filling Java call arguments";
    plugid = "de.kontext_e.idea.plugins.autofill";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8638/28624/AutoFillingCallArguments.jar";
      sha256 = "1lx0mzncamliakw522cn2rk0vb50yin1drnxhm5xmpnnzrw0hksl";
      name = "Auto-filling-Java-call-arguments-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.kontext-e.de/";
      license = lib.licenses.asl20;
      description = ''
        In source code, create a method or constructor call and place the cursor into the empty braces. Open the intentions drop down menu and select the "Auto fill call parameters"
      '';
    };
  }) {};

  autocode-for-java = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AutoCode-for-Java";
    plugname = "AutoCode for Java";
    plugid = "BrewJava";
    version = "2.1.20";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10904/103043/AutoCodeForJava-2.1.20.zip";
      sha256 = "0mfdcj92nb7gsx2smi14w8qqxm178j99s1p63p7biy48w28za03f";
      name = "AutoCode-for-Java-2.1.20.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://textuploader.com/1oz40";
        free = false;
      };
      description = ''
        AutoCode for Java is a plugin for automating programming and for exploring Java codebases.
  The AutoCode tool window provides a GUI for programming Java, it can also be used to navigate through packages and learn more about the classes your project currently uses.
  AutoCode will automatically invoke code completion upon clicking the code completion window, this allows for a faster and more efficient way to program.
  The AutoCompletion window is upgraded with a quick code toolbar that allows one click code automation.
Features:
  Single Click Code Completion - Click items in auto-completion window once to select. Right click items to select and add . at the end.
  Package Navigation - Look through packages and see all the classes within. Right click buttons to get documentation and view the source code.
  Member Organization - Get access to every import, field, method and local variable/paramater in your file.
  Code Generation - Click buttons to insert code, click dots to access properties.
  Quick Templates - Generate loops and conditional statements faster with buttons like for, if, and switch.

    (Caret must be inside a method to get its params/local variables. Customize Toolwindow height to your liking.)
      '';
    };
  }) {};

  autodimens = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AutoDimens";
    plugname = "AutoDimens";
    plugid = "cn.eli.dimens";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14155/84133/AutoDimens.jar";
      sha256 = "01pg77zv71g87g9ih8z5yyscg6pav0b1z05a52q7cczgdxz4blf0";
      name = "AutoDimens-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://blog.csdn.net/xiaojinlai123";
      license = lib.licenses.asl20;
      description = ''
        Use smallest width qualifier automatically create dimens.xml files,For Android screen adaptation.
              This plug-in is mainly used for the adaptation of font value sp.
              Usage:https://blog.csdn.net/xiaojinlai123/article/details/105445077
      '';
    };
  }) {};

  autogradle = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AutoGradle";
    plugname = "AutoGradle";
    plugid = "com.jiangyy.auto-gradle";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12061/72654/AutoGradle.zip";
      sha256 = "0j71skbpslm19crdfpwzjd0rr6d935jwxpbz0l75q0ww0c5ixaka";
      name = "AutoGradle-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/jyygithub/AutoGradle";
      license = lib.licenses.asl20;
      description = ''
        AutoGradle
      
      
      
      GitHub |
      Issues |
      
      
      
      A auto import gradle project plugin.
      
      Usage:
      
      
        Ctrl + Alt + 5
        Right Click Menu
        Tool -&gt; AutoGradle
        Click the button below
      
      
      
      
      The following figure is the operation interface
      
      
      
      The settings interface
      
      
      Send feedback
      '';
    };
  }) {};

  autojson = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AutoJson";
    plugname = "AutoJson";
    plugid = "com.jack.plugin.autojson";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11600/80220/AutoJson.zip";
      sha256 = "1xa0klmmmpjhyymxp3v3diadvd4wrlr6bcam7iayh90kqn8mrqkk";
      name = "AutoJson-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LuodiJackShen/AutoJson/tree/main";
      license = lib.licenses.asl20;
      description = ''
        Automatically generate the code needed for json_serializable and jaguar_serializer and automatically run the flutter pub run build_runner build -delete-conflicting-outputs command. Makes developing flutter even easier!
      Usage:
      Open the dart entity class file, right click the mouse, or just use the shortcut key: `Control+Enter` (Windows:`Alt+Insert`),
      You can click on AutoJson's support for five three options, which have the following meanings:
        
        
            Menu
            Function Description
            Note
        

        
            AJ-Build Only
            Only run the command: `flutter pub run build_runner build --delete-conflicting-outputs`
            It is supported from 1.8 and only supports Android Studio 4.+ 
        

        
            AJ-Generate Only
            Only generate the code needed for `JaguarSerializer` or `json_serializable`
            &nbsp;
        

        
            AJ-Generate and Build
            Generate the code needed for `JsonSerializable` or `json_serializable`, and run the `flutter Pub run build_runner build --delete-conflicting-outputs` command
            It is supported from 1.8 and only supports Android Studio 4.+
        
      
      
      Compatible with version 2.x user habits:
      You can also click on 'Code' -&gt; 'AutoJson' in the Android Studio menu bar, and you will find that AutoJson supports five menu options, which are as follows:
      
        
            Menu
            Function Description
            Note
        

        
            AutoJson-Terminal
            Only run the command: `flutter pub run build_runner build --delete-conflicting-outputs`
            It is supported from 1.8 and only supports Android Studio 4.+
        

        
            JaguarSerializer-Terminal
            Generate the code needed for `JaguarSerializer`, and run the `flutter Pub run build_runner build --delete-conflicting-outputs` command
            It is supported from 1.8 and only supports Android Studio 4.+
        

        
            JaguarSerializer
            Only generate the code needed for `JaguarSerializer`
            &nbsp;
        

        
            JsonSerializable-Terminal
            Generate the code needed for `JsonSerializable`, and run the `flutter Pub run build_runner build --delete-conflicting-outputs` command
            It is supported from 1.8 and only supports Android Studio 4.+
        

        
            JsonSerializable
            Only generate the code needed for `JsonSerializable`
            &nbsp;
        
      

      
      See README.md for more details
      '';
    };
  }) {};

  autolink = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AutoLink";
    plugname = "AutoLink";
    plugid = "com.star.intellij.console.link";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11201/50720/star-autolink.jar";
      sha256 = "1awj7ml4ic05g7m6j98mh012rnb68f0l69sn9qd4nx60wrgrjsdx";
      name = "AutoLink-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Auto makes links in your console.
      '';
    };
  }) {};

  autotransfer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AutoTransfer";
    plugname = "AutoTransfer";
    plugid = "cn.fishy.plugin.idea.auto.transfer";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8260/62430/autoTransfer.jar";
      sha256 = "0kmmsf8qz8x184g568pycq9xzrjznq5pf9q80qq3sp4filyy6v2g";
      name = "AutoTransfer-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://weibo.com/dxkkk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://weibo.com/dxkkk";
        free = false;
      };
      description = ''
        generate hard code for transfer object to object.
      '';
    };
  }) {};

  autovalue-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AutoValue-plugin";
    plugname = "AutoValue plugin";
    plugid = "com.afcastano.intellij.autovalue";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8091/36252/AutoValuePlugin.jar";
      sha256 = "0sy24bmw6p2043sgkqd4ify0ja6bbnxh8kj8gdmsivvqvgb8b8kn";
      name = "AutoValue-plugin-1.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/afcastano/AutoValuePlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/afcastano/AutoValuePlugin/master/LICENSE.md";
        free = false;
      };
      description = ''
        Provides context menu options, generate menu options and code intentions to generate and manipulate the builder method and/or create method on classes annotated with @AutoValue. -- Also works with @AutoParcel and @AutoParcelGson annotations.
      '';
    };
  }) {};

  autoyapi = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "AutoYApi";
    plugname = "AutoYApi";
    plugid = "AutoYApi";
    version = "1.0.32";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13451/106650/lemon-autoyapi.jar";
      sha256 = "1310vxf3fsz7xmlqrryqimdlars9lp5smy6lmlx72hy3qy74nk2v";
      name = "AutoYApi-1.0.32.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.autohome.com";
      license = lib.licenses.asl20;
      description = ''
        upload api to yapi
      Update the interface document to YAPI with one key
      '';
    };
  }) {};

  autohome-code-check = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Autohome-Code-Check";
    plugname = "Autohome Code Check";
    plugid = "cn.com.autohome.tuan.plugins";
    version = "1.08";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12299/74216/cn.com.autohome.tuan.plugins.codecheck.jar";
      sha256 = "172h32j7xazwgaqagl7ngc34b0sqa32b27cgcc0hjx3d5ymkvyqs";
      name = "Autohome-Code-Check-1.08.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.autohome.com.cn";
      license = lib.licenses.asl20;
      description = ''
        This plugin helps you check some common problems before commit.
    include:
    
        Non-https url to static file
        Invalid href attribute. Like href="#"
        Invalid config in online file. Like f2.x / f3.x / f1.x
        check pom.xml: Whether the number of configurations in each environment is consistent
      '';
    };
  }) {};

  autohome-db-check = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Autohome-DB-Check";
    plugname = "Autohome DB Check";
    plugid = "com.autohome.lemon.dbcheck";
    version = "1.0.68";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13478/74196/dbCheck.zip";
      sha256 = "02vivhdj2jvr2a25kpivk3spkphdmav8ma5pd3iz3yziywi8z2jv";
      name = "Autohome-DB-Check-1.0.68.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.autohome.com.cn";
      license = lib.licenses.asl20;
      description = ''
        Autohome Database Guidelines plugin support. 
          Support for custom Guidelines
          Support for Mysql and Sql Server
      '';
    };
  }) {};

  autoscroll-save = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Autoscroll-Save";
    plugname = "Autoscroll Save";
    plugid = "com.steve.plugins.autoscroll";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7575/17465/autoscroll-plugin.jar";
      sha256 = "1ikw3d97mhpinm2hmlaaah5wm7aq7nhzw652x9frglx4gr541p5i";
      name = "Autoscroll-Save-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        At last, a handy way to save your Autoscroll to/from Source settings :)
 
 Toggle &quot;Autoscroll to Source&quot;: Crtl-Alt-Shift PAGE UP
 Toggle &quot;Autoscroll from Source&quot;: Crtl-Alt-Shift PAGE DOWN
 Save &quot;Autoscroll to/from Source&quot; settings: Crtl-Alt-Shift END
 
 Use the toggle actions to quickly enable / disable autoscroll settings in the active project.
 
 Save the autoscroll settings to apply them to currently open projects and all projects opened or created in future.
 
 The key bindings can be re-assigned via Settings -&gt; Keymap -&gt; search for &quot;autoscroll&quot;.
 
 Saved settings can be disabled in the &quot;autoscroll.xml&quot; file located in config/options, if needed.
      '';
    };
  }) {};

  autovalueconvert = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AutovalueConvert";
    plugname = "AutovalueConvert";
    plugid = "cn.mycommons.autovalueconvert";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9319/78200/AutoValueConvert-1.0.zip";
      sha256 = "1avr7mbb31x01iqvkqfb97gaylg2cqzn1vrrk39ajgvzz2r5z317";
      name = "AutovalueConvert-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LiushuiXiaoxia/AutoValueConvert";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/LiushuiXiaoxia/AutoValueConvert/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Convert normal java model or pojo or entry to auto value model.

      一个简单的Android Studio插件 ，把一个普通的Java Model转化成AutoValue的形式。
      '';
    };
  }) {};

  avaje-metrics-enhancer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Avaje-metrics-enhancer";
    plugname = "Avaje metrics enhancer";
    plugid = "org.avaje.metric.enhancer";
    version = "8.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7816/90472/avaje-metrics-plugin-8.4.zip";
      sha256 = "1i96z2wnm75jk1z12ncy6nniycds0aw5ymnvvnj8j94l9rnr47hl";
      name = "Avaje-metrics-enhancer-8.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://avaje.io/metrics";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/avaje-metrics/metrics-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        avaje metrics enhancement
    
        Uses metrics-agent to perform enhancement for @Timed.
    
    &nbsp;

    Enable per project
    
    
      
        Enabled per project via Build menu
      
      
        
        &nbsp;
      
    
    
    
       &nbsp;
      '';
    };
  }) {};

  aviatorscript = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "AviatorScript";
    plugname = "AviatorScript";
    plugid = "AviatorScript";
    version = "5.2.2-2021.01.15-IDEA.203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15303/107779/aviatorscript-ideaplugin-5.2.2-2021.01.15-IDEA.203.zip";
      sha256 = "086bf3i6bw85dz30ga9xc0i2rwj81ka57f66m63f32dchkbmzcny";
      name = "AviatorScript-5.2.2-2021.01.15-IDEA.203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.321zou.com";
      license = lib.licenses.asl20;
      description = ''
        Aviator is a lightweight, high performance scripting language hosted on the JVM. It compiles script to java byte code and evaluate it on the fly.
       

       Feature Intro:
       
       Support number,string, boolean and regular expression etc. basic types, support all java operators and their priorities.
       Function is first-class, supports closure and functional programming.
       Supports bigint/decimal for big integer and big decimal operations, using normal arithmetic operators +-*/ by operator overloading.
       Full-featured scripting language syntax, such as multi statements, conditional statement, for/while loop, lexical scope and exception handling.
       Processing collections/array conveniently by sequence abstract and functional programming.
       Lightweight module system.
       Call Java methods conveniently, supports Java Scripting API.
       A wide range of customization options to be used as a secure runtime scripting sandbox or full-featured scripting language.
       Lightweight and high performance.
       
       

       Links:
       
        GitHub: AviatorScript
        GitHub: AviatorScript IDEA plugin
      '';
    };
  }) {};

  avro-and-parquet-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Avro-and-Parquet-Viewer";
    plugname = "Avro and Parquet Viewer";
    plugid = "uk.co.hadoopathome.intellij.avro.intellijavroviewer";
    version = "2.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12281/107473/intellij-avro-parquet-viewer-2.3.0.zip";
      sha256 = "03vfjwxhkwsc77d0708z558xx6s761f9lvqfsywddjazgnwa828v";
      name = "Avro-and-Parquet-Viewer-2.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/benwatson528";
      license = lib.licenses.asl20;
      description = ''
        A Tool Window for viewing Avro and Parquet files and their schemas
      '';
    };
  }) {};

  awesome-console = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Awesome-Console";
    plugname = "Awesome Console";
    plugid = "awesome.console";
    version = "0.1337.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7677/107202/intellij-awesome-console.jar";
      sha256 = "0bfgj99n480454d7ykfxrkysnmyd4k6v1zx0lx1pj3146pxh85hs";
      name = "Awesome-Console-0.1337.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/anthraxx/intellij-awesome-console";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/anthraxx/intellij-awesome-console/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Finally a plugin that makes links in your console and terminal at least 200% more awesome!
		
		With this plugin all files and links in the console and terminal will be highlighted and can be clicked. Source code files will be opened in the IDE, other links with the default viewer/browser for this type.
		Now you just need to configure your favorite Logger to include the file name (and optionally a line number) and you can instantly jump to that file that throws this stupid error.
      '';
    };
  }) {};

  awesome-kotlin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Awesome-Kotlin";
    plugname = "Awesome Kotlin";
    plugid = "AwesomeKotlin";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11357/71135/AwesomeKotlin-1.0.3.zip";
      sha256 = "1ma24nk2919jg97dag9ijyscc18akjz34d043c925rdi3gq2lkvf";
      name = "Awesome-Kotlin-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alex-yh99";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/alex-yh99/AwesomeKotlinPlugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Awesome Kotlin - A Collection of awesome Kotlin related stuff
      
          Show content from Awesome Kotlin inside IDE ToolWindow
          Search / checkout projects from GitHub repo
          Custom content sources &amp; dynamic KotlinScript loading is supported
      
      More Info: Plugin | Issues
      '';
    };
  }) {};

  awesome-pojo-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Awesome-Pojo-Generator";
    plugname = "Awesome Pojo Generator";
    plugid = "com.test.jinesh.json.to.pojo";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9856/37112/Json2Pojo.zip";
      sha256 = "140gias15a9ajg7ih95fp1jc25mgpg4k8p7fn8n3czh24i51jmrc";
      name = "Awesome-Pojo-Generator-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jineshfrancs";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jineshfrancs";
        free = false;
      };
      description = ''
        Plugin to generate Pojo classes from json.
 
Source code Avilable here.
      '';
    };
  }) {};

  axml-of-dingtalk = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Axml-Of-DingTalk";
    plugname = "Axml Of DingTalk";
    plugid = "cn.mofada.axml.plugin";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11332/58912/AxmlPlugin-2.0.zip";
      sha256 = "1rx3nr86js6qi6wxfr0xrhlrsazsssy2kzj1076plvqhvryhnyg5";
      name = "Axml-Of-DingTalk-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.mofada.cn";
      license = lib.licenses.asl20;
      description = ''
        open source project url : https://github.com/mofada/AxmlPlugin

Axml file plugin for DingTalk E application
Support all tags of DingTalk xml, as well as code hints
1. Support almost all label views, swiper, scroll-view, image.... No custom components are supported at the moment, there will be warnings, please ignore them.
2. Support almost all attributes of the tag, support enumeration type
3. The attribute will be verified, and if the verification fails, an error will be given.
4. Click on the attribute name to have a message.
5. I am currently using it myself, I will update it when I find the problem.



项目开源地址 : https://github.com/mofada/AxmlPlugin

钉钉AXML文件支持!
支持所有的钉钉标签, 并且会有代码提示。
1.支持几乎所有的标签, 例如view / swiper / scroll-view / iamge ... 目前不支持自定义组件，会有警告，请忽略它们。
2.支持几乎所有标签属性，支持枚举类型。
3.将验证属性，如果验证失败，将给出错误。
4.单击属性名称以显示消息。
5.我现在正在使用它，当我发现问题时，我会更新它。
      '';
    };
  }) {};

  axon-framework-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Axon-Framework-Plugin";
    plugname = "Axon Framework Plugin";
    plugid = "org.axonframework.intellij.axonplugin";
    version = "0.3.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7506/32516/axonframework.intellij.ide-0.3.9-plugin.zip";
      sha256 = "0jr11634clc4lrjhblm060waaqck4dliwkmqqiqcymz8xh6ypqpp";
      name = "Axon-Framework-Plugin-0.3.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.axonframework.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.axonframework.org/";
        free = false;
      };
      description = ''
        This plugin helps to navigate from and to the axon framework event handler annotations. Axon Framework helps build scalable, extensible and maintainable applications by supporting developers apply the Command Query Responsibility Segregation (CQRS) architectural pattern. Please report issues at http://issues.axonframework.org
      '';
    };
  }) {};

  ayu-dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Ayu-Dark-Color-Scheme";
    plugname = "Ayu Dark Color Scheme";
    plugid = "color.scheme.Ayu Dark";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13888/79965/Ayu_Dark.jar";
      sha256 = "0d5ficr59p8a7c3cvrkhigjvpwz2p7lb41qq580i3bi8y6jgnpd6";
      name = "Ayu-Dark-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nzer0nz/intellij-ayu-dark";
      license = lib.licenses.mit;
      description = ''
        Ayu Dark Colorscheme for IntelliJ Product (Go Programming Language)
      '';
    };
  }) {};

  azure-devops = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Azure-DevOps";
    plugname = "Azure DevOps";
    plugid = "com.microsoft.vso.idea";
    version = "1.161.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7981/108316/com.microsoft.vso.idea-1.161.1.zip";
      sha256 = "0a4p8w69b3yfn41v1ljpf8nldcqa2xiszpj4g4d78wih8dy1228m";
      name = "Azure-DevOps-1.161.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/microsoft/azure-devops-intellij";
      license = lib.licenses.mit;
      description = ''
        Azure DevOps is a plugin to enable working with Git and TFVC repositories on Azure DevOps Services or Team Foundation Server (TFS) 2015+.
      
      GitHub | Documentation | Issues | Twitter @AzureDevOps
      
      
      Features
      
      
        Supports authenticating with Azure DevOps Services and TFS 2015+ to work with source code in Git and TFVC repositories.
        Checkout code from Git and TFVC repositories on Azure DevOps Services and TFS 2015+.
        Git specific features:
        
            Import IntelliJ projects into Git repositories on Azure DevOps Services and TFS 2015+.
            Create pull requests and view your active pull requests.
            Create a new branch and associate it with the work item you are working on.
            Quickly browse to file history or commit details on the web from the IDE.
        
        TFVC specific features:
        
            Execute all basic version control actions such as add, delete, rename, move, etc.
            View local changes and history for your files.
            Lock and unlock files and directories.
            Add labels to files and directories.
            Create, view, manage, and edit a workspace.
            Supports using a TFS proxy.
            Local workspace support only.
        
        View work items based on queries and select one or more work items to associate with your commits or checkins.
        Check the build status of your repository and queue a new build if desired.
        Supports proxy settings configured in the IDE's System Settings section.
        Edit cached project information through configuration management.
      
      
      
      Compiled with Java 8
      
      Compatible with IntelliJ Ultimate and Community editions versions 2019.1 and later and Android Studio 3.5 and later
      
      
      End User License Agreement &amp; Privacy Policy
      
      By installing this plugin, you agree to our end user license terms and privacy policy. For information about our privacy policy, please view the Microsoft Privacy Statement
      Note: When using the TFVC support, this plugin will pass your Team Foundation credentials securely to the TF command line tool. That tool is installed separately and it is up to the user to verify that it is in a secure location on disk and has not been tampered with.
      '';
    };
  }) {};

  bfi-language = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BFI-Language";
    plugname = "BFI Language";
    plugid = "org.example.bfi-language-plugin";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14021/84162/bfi-language-plugin-1.2.zip";
      sha256 = "0mkbnpjh41sacdva5jgzdgwvj2lm6fip71nl2lrjsamkdg3v1ffh";
      name = "BFI-Language-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.tuke.sk/wps/portal";
      license = lib.licenses.mit;
      description = ''
        BFI Language support
        
        This plugin supports development in the BFI (Backend frontend interface) software framework,
        which is developed within the framework of the diploma thesis of the Technical University in Kosice.
        This work deals with generating web applications based on data model in domain-specific BFI language.
        
        

        Features
        BFI models (*.bfi)
        
            spell checking
            syntax highlighting
            keyword autocompletion
        
        
        BFI config (*.bfi.yaml)
        
            spell checking
            syntax highlighting
            autocompletion
        
        
        Launching generators
        
            automated generators downloading into %APPDATA%/.bfi
            launching generators by gutter icon
            printing output in tool window
      '';
    };
  }) {};

  bsfconsole = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BSFConsole";
    plugname = "BSFConsole";
    plugid = "BSFConsole";
    version = "0.8.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6/12948/BSFConsole-0.8.2-bin.zip";
      sha256 = "06hadm7pby503ywgk8x2p8lv5z7xgim2yrkk06zyqq6zv1x90was";
      name = "BSFConsole-0.8.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/eprst/BSFConsole";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/eprst/BSFConsole";
        free = false;
      };
      description = ''
        BSF and JSR-223 scripting console, also includes Ant console.
      '';
    };
  }) {};

  bucp = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "BUCP";
    plugname = "BUCP";
    plugid = "com.github.lonre.bucp";
    version = "20.08.21";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14925/95069/bucp-20.08.21.jar";
      sha256 = "0ha9gbyvsa0ckh9r1d0mvs1r3h86j96n8l4mzy2lsvw7ykq5dnf5";
      name = "BUCP-20.08.21.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lonre/BUCP";
      license = lib.licenses.mit;
      description = ''
        BUCP generates boilerplate codes for copying bean properties, BYE BeanUtils.copyProperties
      '';
    };
  }) {};

  babelnet-searcher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BabelNet-Searcher";
    plugname = "BabelNet Searcher";
    plugid = "it.stefan.babelnet-search-plugin";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15899/108597/babelnet-search-plugin-1.0.3.zip";
      sha256 = "19qn5p9q0qxdvjj9szly00w0w3hmy5w4ixlggd3kpb7dvvq1r3xf";
      name = "BabelNet-Searcher-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andreim14";
      license = lib.licenses.asl20;
      description = ''
        With this plugin you can search a synset or a term on BabelNet.org.
    Select the term or synset ID (bn:00016606n) that you want to search, click right and in the context menu click on Search on BabelNet.
    A browser with your search results will be opened.
      '';
    };
  }) {};

  background-image-by-url = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Background-Image-By-URL";
    plugname = "Background Image By URL";
    plugid = "com.notime.intellijPlugin.backgroundImageByURL";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14028/82086/backgroundImageByURL.jar";
      sha256 = "06jfy9i3bfri65326a15jh29ka1iw1qccsglvr10psnqa60bdxfc";
      name = "Background-Image-By-URL-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nautics889/backgroundImageByURL";
      license = lib.licenses.mit;
      description = ''
        Set the editor background to a random picture from a file with image URLs.
      It may be more convenient rather than storing images on you disk.
      So images can be stored on your cloud, the only requirement: every link has to refer to an image directly.
      Plugin loads links line by line so each row must represent a single link.

      Forked from https://github.com/HNUHell/backgroundImagePlus.
      '';
    };
  }) {};

  background-image-from-bing = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Background-Image-From-Bing";
    plugname = "Background Image From Bing";
    plugid = "com.saturn.intellijPlugin.backgroundImageFromBing";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14257/85906/BackgroundImageFromBing.jar";
      sha256 = "08j0s5j4fcm9nr1wzwgb0zr9fda19y6cb2dr8a4025n9ply58n5v";
      name = "Background-Image-From-Bing-1.2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Saturnluohao/backgroundImagePlus.git";
      license = lib.licenses.asl20;
      description = ''
        Set the editor background to picture from Bing.
      Forked from https://github.com/HNUHell/backgroundImagePlus.
      '';
    };
  }) {};

  background-image-plus = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Background-Image-Plus";
    plugname = "Background Image Plus";
    plugid = "co.notime.intellijPlugin.backgroundImagePlus";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8502/35058/backgroundImagePlus.jar";
      sha256 = "1cynhfprhywwqf6qba1xw8p6sr8wqnx9zrj1ghik2z0vq7hjac0c";
      name = "Background-Image-Plus-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/lachlankrautz";
      license = lib.licenses.mit;
      description = ''
        Set the editor background to a random picture from a folder.
      '';
    };
  }) {};

  background-image-plus- = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Background-Image-Plus-+";
    plugname = "Background Image Plus +";
    plugid = "com.notime.intellijPlugin.backgroundImagePlus";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11247/97343/backgroundImagePlus.jar";
      sha256 = "036vmz66zksmv88is5d0dryifpv7ah20gdi89bklis3ivjk2xgfr";
      name = "Background-Image-Plus-+-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/HNUHell/backgroundImagePlus";
      license = lib.licenses.mit;
      description = ''
        Set the editor background to a random picture from a folder.
      Forked from https://github.com/lachlankrautz/backgroundImagePlus.
      But optimized for change function.
      reference fork:
            https://github.com/godfather1103/backgroundImagePlus
            https://github.com/zhanglanzhu521/backgroundImagePlus
      '';
    };
  }) {};

  background-image-rotation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Background-Image-Rotation";
    plugname = "Background Image Rotation";
    plugid = "com.muyun.intellij.plugin.background.image.rotation";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14929/106246/background-image-rotation-1.1.1.zip";
      sha256 = "0mzxryf5kir8sdb91j4szgcpm6c47wlqhnac52ssml3a13mwfdk6";
      name = "Background-Image-Rotation-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/     DevilSoul/background-image-rotation";
      license = lib.licenses.mit;
      description = ''
        Set the editor background to a random picture from a folder.
      Forked from https://github.com/HNUHell/backgroundImagePlus.git.
      But optimized for change function.
      reference fork:
            https://github.com/lachlankrautz/backgroundImagePlus
            https://github.com/godfather1103/backgroundImagePlus
            https://github.com/zhanglanzhu521/backgroundImagePlus
      '';
    };
  }) {};

  backgroundimage = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "BackgroundImage";
    plugname = "BackgroundImage";
    plugid = "BackgroundImage";
    version = "0.10.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/72/9675/BackgroundImage_9675.jar";
      sha256 = "0n5qdcvnnnns4qlqfdnsmr0vxncmfnjr4r5igipvkh8p5fyywn2k";
      name = "BackgroundImage-0.10.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Plugin that loads a background image into editors
      '';
    };
  }) {};

  backlog-git-page = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Backlog-Git-Page";
    plugname = "Backlog Git Page";
    plugid = "kimzo.BacklogPlugin";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12386/64086/BacklogPlugin-1.0.5.zip";
      sha256 = "1c2zclmsd0idrdl8cxgqb2q98bb8q644f88rrfjfpl11zc9f0z7m";
      name = "Backlog-Git-Page-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kimzo/intellij_backlog";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Backlog git page integration plugin. Open file / Create PullRequest on Backlog. https://backlog.com
      '';
    };
  }) {};

  backtick = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Backtick";
    plugname = "Backtick";
    plugid = "com.github.lppedd.idea-backtick";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13817/78817/idea-backtick-1.0.2.zip";
      sha256 = "11zqjhw23axw0ldh6s0xnw7zmsiqi2l7c6jyakdhrqh4fsa6wr3c";
      name = "Backtick-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lppedd/idea-backtick";
      license = lib.licenses.mit;
      description = ''
        This plugin allows wrapping and unwrapping text in backticks (`) via
    intention actions, while also supporting multiple carets.
    The idea was born because of the inaccessibility of the backtick symbol in
    Windows using the Italian keyboard configuration. That means one has to re-map the
    keyboard or has to copy-paste the symbol each time.


The plugin supports

    Wrapping via intention action
    
        Unwrapping via intention action,
        and via Code &gt; Unwrap/Remove (for plain text and many languages)
    



    Read additional details
    here at GitHub.
      '';
    };
  }) {};

  bad-pacman = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Bad-Pacman";
    plugname = "Bad Pacman";
    plugid = "Bad Pacman";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/116/494/Bad_Pacman_494.jar";
      sha256 = "06vpn604cdw4rd6rjd4ljm65k5zmlacds2xbarljx8lmb7ysrrj1";
      name = "Bad-Pacman-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Name says it all. Try at your own risk. (Ctrl+Alt+Shift+P)
      '';
    };
  }) {};

  ballerina = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ballerina";
    plugname = "Ballerina";
    plugid = "io.ballerina";
    version = "1.2.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9520/95751/ballerina-intellij-idea-plugin-1.2.8.zip";
      sha256 = "1ii6dkn7v1x1f5f33gah58viyybnlha3vs8ly7vsrlj6wjsja8fr";
      name = "Ballerina-1.2.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ballerina.io/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The Ballerina IntelliJ plugin provides the Ballerina development capabilities
      in IntelliJ IDEA.
      For instructions on how to download, install, and use the features of the plugin, refer the
      Ballerina IntelliJ plugin Guide.
      '';
    };
  }) {};

  bamboo-soy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bamboo-Soy";
    plugname = "Bamboo Soy";
    plugid = "com.google.bamboo.id";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9841/95630/bamboo-soy.zip";
      sha256 = "1xz39c9hlsfv5l30i9ycrlgr76dnynyyhh34pf6x4r5paiyx2zbg";
      name = "Bamboo-Soy-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/google/bamboo-soy";
      license = lib.licenses.asl20;
      description = ''
        Syntax highlighting, autocompletion, static analysis and more for your closure template files.
      '';
    };
  }) {};

  bas-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Bas-Tools";
    plugname = "Bas Tools";
    plugid = "dev.bas.bas-tools";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15420/103664/bas-tools-2.1.jar";
      sha256 = "1z84551cpz6mlrkwj6sr6qlaqy3fapzrsxcwx38g4q9vcrk4svvm";
      name = "Bas-Tools-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bas.dev";
      license = lib.licenses.mit;
      description = ''
        Enhances the IDE with three new themes and a few utility functions.
    

    

    
        Themes
    
    
        Dark
        Black
        White
    

    

    
        Code Shot
        Take shots of your code and share them by pasting it in any application as an image. Code
        shot is available as an action in the toolbar on the right.
    

    

    
        Arrange Json Properties
        Sort JSON properties alphabetically with just one click.
    

    

    
        Quick Actions
        Quickly pick a color with the color pipette and color picker actions in the toolbar.
      '';
    };
  }) {};

  base16-monokai = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Base16-Monokai";
    plugname = "Base16 Monokai";
    plugid = "com.base16.shiromm.shiromm.monokai";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14399/106269/base16-jetbrains-ide-monokai.jar";
      sha256 = "0fldxbn9f4apmwd59wnhnk3gf1y0g77cpsc30nwi54al99i6bqh7";
      name = "Base16-Monokai-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shirommakkad.com";
      license = lib.licenses.mit;
      description = ''
        This is a full IDE Monokai theme that uses the original Sublime Text colors. This doesn't use shades of pink like many other Monokai/Monokai Pro themes. Instead, it's true to the original colors.
  
  ---------------
  
  Theme made using base16(https://github.com/chriskempson/base16). Theme generated by Shirom Makkad (https://github.com/ShiromMakkad/base16-jetbrains-ide)
      '';
    };
  }) {};

  base64-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Base64-Helper";
    plugname = "Base64 Helper";
    plugid = "com.mnr.java.intellij.idea.plugin.base64helper";
    version = "2.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7372/74805/base64-helper-2.0.3.zip";
      sha256 = "1i154djf8ddrsxn0j7jan1vw3078j9jzpyz2xmh3g95jzx57c6w2";
      name = "Base64-Helper-2.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://plugins.jetbrains.com/plugin/7372?pr=idea";
      license = lib.licenses.asl20;
      description = ''
        It's a plugin to encode/decode [hex]string, based on Base64 algorithm.
      '';
    };
  }) {};

  base64-for-idea-and-storm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Base64-for-IDEA-and-Storm";
    plugname = "Base64 for IDEA and Storm";
    plugid = "Base64 for IDEA and Storm";
    version = "1.1b";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6030/9436/Base64_for_IDEA_and_Storm_9436.jar";
      sha256 = "0cvkigzpxhbkgkgi23b9czyqa786f7qjfa70h6j05m2ap2bikpa9";
      name = "Base64-for-IDEA-and-Storm-1.1b.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This version also supports PhpStorm and WebStorm. Adds Base64 encoding and decoding support. Decode and Encode Action available in Edit Menu. Please configure your keymap after installation.
      '';
    };
  }) {};

  base64-image-encoder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Base64-image-encoder";
    plugname = "Base64 image encoder";
    plugid = "ru.mobiledev.plugins.uigd";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8263/99395/GraphicTools-1.2.zip";
      sha256 = "03n4dlxiqmayqvah1jpbcfdav6c5ba110ksspix7cia1kabcr812";
      name = "Base64-image-encoder-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Allows to view image as base64-encoded for using in CSS/HTML.
      Available as new button in image editor toolbar.
      '';
    };
  }) {};

  base64-url-safe-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Base64-url-safe-helper";
    plugname = "Base64 url safe helper";
    plugid = "com.petyonwu.base64.id";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10963/48204/Base64.jar";
      sha256 = "0fm98vgr4dv62b5c4qpz9gks5rfcmh5rhzkz6rhd9x4f8p728590";
      name = "Base64-url-safe-helper-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jianshu.com/u/8f35e2799e50";
      license = lib.licenses.bsd2;
      description = ''
        It is a plugin provide a dialog to decode and encode text with base64.
      most HTML tags may be used
      '';
    };
  }) {};

  basic-cocomo-calculator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Basic-COCOMO-calculator";
    plugname = "Basic COCOMO calculator";
    plugid = "com.nelchael.idea.projectcost";
    version = "2019.04.04";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7508/60462/projectcost.zip";
      sha256 = "1p6vfk0i4bymlk5agl5jdsvd8z0d5crc48adzr8vvm1bm74y71x7";
      name = "Basic-COCOMO-calculator-2019.04.04.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7508/license.txt";
        free = false;
      };
      description = ''
        Plugin allows calculation of Basic COCOMO (Constructive Cost Model) estimates.
      Following classes of software projects are supported:
      
      	Organic
      	Semi-detached
      	Embedded
      
      To ignore files in some directory create .cocomoignore file and add a prefix per line. Valid
      prefixes need to start with "/", for example: add "/target/" to ignore Maven output directory.
      '';
    };
  }) {};

  batch-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Batch-Generator";
    plugname = "Batch Generator";
    plugid = "Batch Generator";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1027/2892/Batch_Generator_2892.jar";
      sha256 = "1pjzxfi4nq6j9yxh0qcm1i695jw778bij4wp483g7i94bzh480y2";
      name = "Batch-Generator-1.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1027/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1027/sourceCode.zip";
        free = false;
      };
      description = ''
        Simple plug-in enables developers to easily generate batch files to run Java applications
      '';
    };
  }) {};

  batch-scripts-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Batch-Scripts-Support";
    plugname = "Batch Scripts Support";
    plugid = "Batch Scripts Support";
    version = "1.0.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/265/72010/idea-batch-1.0.12.zip";
      sha256 = "1092hvmx6h4n8p9i66izpvx73bi2dwbl7kagskgs3j6rwcmqsb1r";
      name = "Batch-Scripts-Support-1.0.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aefimov/idea-batch";
      license = lib.licenses.mit;
      description = ''
        Windows Batch Scripts support for IntelliJ IDEA. Supports syntax highlighting, run configurations
        that can run any command, also empty configurations. Empty run configurations are useful when
        you want to execute an external tool through a run configuration.
      '';
    };
  }) {};

  batchgit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "BatchGit";
    plugname = "BatchGit";
    plugid = "om.wuba.bsb";
    version = "2.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15281/100860/BatchGit.jar";
      sha256 = "1pp68vhi09c7rnxyv0gm5rd9rb8x1y0xw8hxzp6g6jjh0pci3kzk";
      name = "BatchGit-2.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.58.com";
      license = lib.licenses.asl20;
      description = ''
        BatchGit
      
      BatchGit provides batch Git version management for multiple sub-projects.
      
      
      Features
      
        Batch clone of sub-projects
        Multi-project branch batch switch
      
      
      
      Usage
      
        
          Batch clone of sub-projects
          1. To configure, open Settings/Preferences -&gt; Tools -&gt; BatchGit, Enter sub-projects repositories address information.
          2. To batch clone sub-projects, open Tools -&gt; Batch Clone, after selecting the sub-projects, click the ok button to clone.
        
        
          Multi-project branch batch switch
          In parallel development, multiple branches are often switched, and only some sub-projects are changed. At this time, we can open Tools -&gt; Batch Checkout, enter the first branch and the second branch and click the ok button to switch the batch branch。
      '';
    };
  }) {};

  batslog = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Batslog";
    plugname = "Batslog";
    plugid = "cn.com.pism.batslog";
    version = "21.01.13.2217-Release";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15301/107644/batslog-21.01.13.2217-Release.zip";
      sha256 = "0s1qgqjxflcjynsdn7qh51mjcrdqx7pyl7n97lklznwiaa5jxchi";
      name = "Batslog-21.01.13.2217-Release.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/PerccyKing";
      license = lib.licenses.mit;
      description = ''
        batslog

Mybatis SQL format plug-in mybatis log format plug-in

the function

Select SQL to format SQL
Automatically read the printed SQL log and format the output
Copy the formatted SQL directly to the clipboard
Support multiple databases (mysql, Oracle, sqlserver...)
Support external log format





mybatis sql 格式化插件 mybatis log 格式化插件

功能

选取SQL格式化SQL
自动读取打印的SQL日志，并格式化输出
直接复制格式化后的SQL到剪贴板
支持多种数据库（MySQL、Oracle、SqlServer……）
支持外部日志格式化
      '';
    };
  }) {};

  battery-status = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Battery-Status";
    plugname = "Battery Status";
    plugid = "lermitage.intellij.battery.status";
    version = "1.14.201";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12321/98592/Battery_Status-1.14.201.zip";
      sha256 = "03sjp3w5nra7i6mbs3f1k6h2mn3lqnzkns290d53w2gd7nhp4zq1";
      name = "Battery-Status-1.14.201.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jonathanlermitage";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/jonathanlermitage/intellij-battery-status-plugin/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Display battery status in the Status Bar (updated every 90 seconds, configurable in File &gt; Settings... &gt; Appearance &gt; Battery Status).
      Useful if you run IDE in full screen.
      Requirements:
      
        Windows: plugin should work as it.
        Linux: you must be able to invoke acpi -b. Be sure ACPI is installed: on Debian or Ubuntu, type sudo apt install acpi.
        MacOS: plugin should work as it. You must be able to invoke pmset -g batt.
      '';
    };
  }) {};

  beagle-sdk-live-preview = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Beagle-SDK-Live-Preview";
    plugname = "Beagle SDK Live Preview";
    plugid = "br.com.zup.beagle-intellij-plugin";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14575/91118/beagle-intellij-plugin-core-1.0.1.zip";
      sha256 = "0a4lil5wpz158graiqiqf5bbzz6yhmpvb5w46gh9x510hv5blk2z";
      name = "Beagle-SDK-Live-Preview-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.zup.com.br";
      license = lib.licenses.asl20;
      description = ''
        Live preview web socket server for Beagle SDK
      '';
    };
  }) {};

  bean-converter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Bean-Converter";
    plugname = "Bean Converter";
    plugid = "com.jiaqi.converter";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13638/83950/BeanConverter.jar";
      sha256 = "0y6wyzxqc9x4j6488c91k4lcv1z4h6bm17vgmwkzm6px5qcfhsiv";
      name = "Bean-Converter-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/GodMoonLight";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/GodMoonLight/bean-converter/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Bean Converter
      
      GitHub
      
      Custom plugin for generating the converter method by matching setters and getters of given classes.
      Plugin generates the converter method (code) for you in your class.
      
      
      Usage:
       Converter method
      
        Put the caret in any place within the class, press Alt+Ins or Command + n
        select "Converter method" in menu or use the shortcut Ctrl+Alt+G.
        In the dialog select the Class you want to convert To and select the class you want to convert From.
        Press "Ok" and converter method will be added to your current class.
        Plugin also writes in comments list of fields, that were not mapped (appropriate setter or getter is missing or different types).
       

       Converter to method
         
        Put the caret in any place within the class, press Alt+Ins or Command + n
        select "Converter to method" in menu 
        In the dialog select the Class you want to convert To.
        Press "Ok" and converter method will be added to your current class.
        Plugin also writes in comments list of fields, that were not mapped (appropriate setter or getter is missing or different types).
       

       Converter from method
         
        Put the caret in any place within the class, press Alt+Ins or Command + n
        select "Converter From method" in menu 
        In the dialog select the Class you want to convert From.
        Press "Ok" and converter method will be added to your current class.
        Plugin also writes in comments list of fields, that were not mapped (appropriate setter or getter is missing or different types).
      '';
    };
  }) {};

  bean-invoker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bean-Invoker";
    plugname = "Bean Invoker";
    plugid = "io.github.newhoo.bean-invoker";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13203/106098/bean-invoker-intellij-plugin-1.0.2.zip";
      sha256 = "0m7jgy84qylx5pq4fmmfrh1bin2m2rl2p9qrrc1k4rmgh8j2c2vn";
      name = "Bean-Invoker-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/huzunrong/bean-invoker";
      license = lib.licenses.mit;
      description = ''
        Invoke spring bean method conveniently
        
        快速调用Spring bean方法
      '';
    };
  }) {};

  beanconverter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "BeanConverter";
    plugname = "BeanConverter";
    plugid = "me.wbean.plugin.bean.converter";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11960/58095/BeanConverter.jar";
      sha256 = "18jj5mb80qcyqgfdy8d0xsawbsaza793pq2i6kvmh1lz0yi9f8wy";
      name = "BeanConverter-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.wbean.me";
      license = lib.licenses.gpl3Only;
      description = ''
        convert current bean to another.
      a code generate tools.
      generate code trans between DataObject, DomainObject, model, TransObject .et 
      

      step 1: open SomeBean1.java as source bean
      step 2: click ToolBar-&gt;BeanConverter button
      step 3: choose target Bean
      step 4: paste generate code to wherever you want
      step 5: check code
      '';
    };
  }) {};

  beanshell-box = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BeanShell-Box";
    plugname = "BeanShell Box";
    plugid = "BeanShell Box";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1022/2450/BeanShell_Box_2450.zip";
      sha256 = "1z3k9b8lbgc6cvmyh8g5jmqnid6740xyklmjsqjmpzgd5kakhwxr";
      name = "BeanShell-Box-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1022/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1022/sourceCode.zip";
        free = false;
      };
      description = ''
        Adds a BeanShell toolbox allowing you to write snippets of both Java and BeanShell code. See http://www.beanshell.org for a complete description of the BeanShell language.
      '';
    };
  }) {};

  belarus-lives-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Belarus-Lives-Progress-Bar";
    plugname = "Belarus Lives Progress Bar";
    plugid = "keipa.plug";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15168/98720/NyanProgressBar_exp.jar";
      sha256 = "1iihh2ff5zksvslb36yh4kzcilad5dh2d9fw6af8dkdvi92mkjf0";
      name = "Belarus-Lives-Progress-Bar-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Pretty progress bars with pogonya for IJ based IDEs.
      '';
    };
  }) {};

  better-comments = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Better-Comments";
    plugname = "Better Comments";
    plugid = "org.igu.plugins.bettercomments";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10850/47116/intellij-better-comments.jar";
      sha256 = "1i90157crnc3nvl0pgz6h5bsfydw05iz26bw6w3qp7xhs6fz6gxf";
      name = "Better-Comments-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        The Better Comments plugin will help you create more human-friendly comments in your code.
      With this plugins, you will be able to categorise your annotations into Alerts, Queries Highlights ...
      '';
    };
  }) {};

  better-sticky-selection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Better-Sticky-Selection";
    plugname = "Better Sticky Selection";
    plugid = "io.github.takc923.better-sticky-selection";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11375/52504/better-sticky-selection-0.1.zip";
      sha256 = "0n6rbijlmizhg82hfv92gk93s1mjn9sd6idljsdhzhclvg6lcpc6";
      name = "Better-Sticky-Selection-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/takc923";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ's original sticky selection doesn't support multi-carets.
    This Better Sticky Selection plugin supports it.
    Default keymap is
    
      C-;
    
    Please change it on your preference.
      '';
    };
  }) {};

  bettermnemonics = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BetterMnemonics";
    plugname = "BetterMnemonics";
    plugid = "io.github.markusmo3.BetterMnemonics";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14653/96788/BetterMnemonics-1.0.2.zip";
      sha256 = "08krvj9pcv9xmav8xbxjw387z8ngax1qvy0q9aik6x69s3yfi4l6";
      name = "BetterMnemonics-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/markusmo3/better-mnemonics";
      license = lib.licenses.mit;
      description = ''
        Adds a fully configurable popup menu to provide better keyboard-only interaction in Jetbrains IDEs.
  Use your own custom mnemonics instead of hand-contorting shortcuts.
      '';
    };
  }) {};

  bigquery-query-size-estimator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BigQuery-query-size-estimator";
    plugname = "BigQuery query size estimator";
    plugid = "net.chakmidlot.jetbrains.bigquery.plugin";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15884/108366/bigquery_estimator-0.1.2.zip";
      sha256 = "1c0j6blvhcax1m80flcc8afd63c8nhr3qv5dca14djz2x17gh6fl";
      name = "BigQuery-query-size-estimator-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Shows BigQuery query scanned data estimation and approximate cost.
      
      
        Your GCP service account key is used only to send 'dry run' requests to Google cloud API
        and not sent anywhere else
      '';
    };
  }) {};

  bilibili-live-danmaku-assistant = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bilibili-Live-Danmaku-Assistant";
    plugname = "Bilibili Live Danmaku Assistant";
    plugid = "org.ice1000.bililive.danmaku";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14187/85123/intellij-bililive-1.2.zip";
      sha256 = "1c85177n8vy37p0d7kfxj28xskqxxk6pms8lwciaphg71k1s3nx6";
      name = "Bilibili-Live-Danmaku-Assistant-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ice1000.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ice1000/intellij-bililive/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Bilibili Live Danmaku Support for IntelliJ-based IDEs.
Special thanks to Charlie Jiang.
      '';
    };
  }) {};

  bined---binaryhexadecimal-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BinEd---BinaryHexadecimal-Editor";
    plugname = "BinEd - Binary/Hexadecimal Editor";
    plugid = "org.exbin.deltahex.intellij";
    version = "0.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9339/93362/bined-intellij-plugin-0.2.3.zip";
      sha256 = "1rdjvykvglvwla2jq6wi8l377igz5wa6445l8asy5ixdaslns7jn";
      name = "BinEd---BinaryHexadecimal-Editor-0.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bined.exbin.org/intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Binary/hexadecimal editor plugin based on BinEd library.
Use "Open as Binary" action in main "File" menu or in project files context menu.
Use "View as Binary" action in context menu in variables/debug window.
Associate file extension with Binary File file type in Options/Editor/File Types

Preview


Features
Visualize data as numerical (hexadecimal) codes and text representation
Codes can be also binary, octal or decimal
Support for Unicode, UTF-8 and other charsets
Insert and overwrite edit modes
Searching for text / hexadecimal code with found matches highlighting
Support for undo/redo
Support for files with size up to exabytes
Show debug variables as binary data

License
Apache License, Version 2.0

Links
Homepage: https://bined.exbin.org/intellij-plugin/
Sources: https://github.com/exbin/bined-intellij-plugin
      '';
    };
  }) {};

  bitbucketissueviewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BitbucketIssueViewer";
    plugname = "BitbucketIssueViewer";
    plugid = "net.orekyuu.bitbucketissues";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7842/20588/IntelliJBitbucketIssues.zip";
      sha256 = "1bp8qngaj42dmid9yx0pk02q3f0v70cidmfydv5qjj4lcm4dyd2v";
      name = "BitbucketIssueViewer-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.orekyuu.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://blog.orekyuu.net";
        free = false;
      };
      description = ''
        BitbucketIssueViewer
      '';
    };
  }) {};

  biu = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Biu";
    plugname = "Biu";
    plugid = "net.avenwu.tools.biu";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9788/41615/Biu-0.2.0.zip";
      sha256 = "010w0rqm8v39lp70jx2s7rs9pa85msd8ghq3mzcs9g7im1d4ahby";
      name = "Biu-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://avenwu.github.io/biu";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://avenwu.github.io/biu";
        free = false;
      };
      description = ''
        An IntelliJ IDEA plugin which makes PNG compression much more convenient.
 It's powered by the well known pngquant library and API from tinypng.
      '';
    };
  }) {};

  blackconnect = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BlackConnect";
    plugname = "BlackConnect";
    plugid = "me.lensvol.blackconnect";
    version = "0.4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14321/108403/intellij-blackconnect-0.4.4.zip";
      sha256 = "0r0hpl6317f7m08dwp4nla5w6w7skdx2jbn9vf83ra5aj2iy7q1x";
      name = "BlackConnect-0.4.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lensvol/intellij-blackconnect";
      license = lib.licenses.mit;
      description = ''
        Connect to blackd and format your Python
    code without creating a new black process!
    
    Avoid overhead of starting a new black process on each file save by making a quick
    HTTP call to blackd instead.
    

    Features supported:
    
    
      –&nbsp;Automatic Python type stub (.pyi) detection.
      –&nbsp;Configurable options: hostname, port, preferred line length, etc.
      –&nbsp;Trigger automatically when saving changed files.
      -&nbsp;Ability to reformat only selected code fragment.
      –&nbsp;Support for [tool.black] section in pyproject.toml.
      –&nbsp;Rough support for "Jupyter" file type.
    
    

    Steps to use:
    
      pip install black[d]
      Start blackd daemon.
      Press "Alt + Shift + B" to reformat your code......or enable "on file save" option.
      Enjoy!
      '';
    };
  }) {};

  blackbird-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Blackbird-Theme";
    plugname = "Blackbird Theme";
    plugid = "com.deadsilly.blackbird.theme";
    version = "0.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14858/105881/blackbird-jetbrains.jar";
      sha256 = "074pdlrhd97idqg2gjbc528g248g3qi5i91zmdhlqimwksfsigd4";
      name = "Blackbird-Theme-0.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nickcernis/";
      license = lib.licenses.mit;
      description = ''
        The high-contrast dark theme for spellcasters.
      
      - High readability with a contrast ratio of 7:1 or better for editor text.
      - A simple palette to reduce visual overload.
      - Good default font settings.
      - Reduced distractions with stripe marks for errors only.
      - Text editor looks with a unified background.
      - Lightweight implementation as a pure theme with no plugin requirements.
      
      Learn more in the Blackbird theme GitHub repo.
      '';
    };
  }) {};

  blade-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Blade-Scheme";
    plugname = "Blade Scheme";
    plugid = "com.dmitryshamin.blade";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15741/107515/blade_scheme.jar";
      sha256 = "04xaz1csarnnp17r2qm9ypg5jsm6aikrrwrjwsrnl86yp80rr0z0";
      name = "Blade-Scheme-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dyadyavasya/blade_scheme";
      license = lib.licenses.mit;
      description = ''
        Blade is the dark color scheme for the PHPStorm IDE.
      '';
    };
  }) {};

  bloc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bloc";
    plugname = "Bloc";
    plugid = "com.bloc.intellij_generator_plugin";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12129/92470/intellij_generator_plugin-2.0.0.zip";
      sha256 = "1lc2babljq9v1jp0n834mnb4kv08gyr4h7f85w8c1892nc8yg834";
      name = "Bloc-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/felangel/bloc/tree/master/extensions/intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/felangel/bloc/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Bloc Library Tools for effectively creating blocs and cubits for both Flutter and AngularDart apps.
      '';
    };
  }) {};

  bob-the-builder-of-beans = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BoB-the-Builder-of-Beans";
    plugname = "BoB the Builder of Beans";
    plugid = "com.atlassian.idea.bob";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12032/83838/bob.zip";
      sha256 = "14bnv8wd5md0x0iqm5irf7yjp0dj7bpcvd51c2l2yvf0453cf7ag";
      name = "BoB-the-Builder-of-Beans-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/atlassianlabs/bob-the-builder-of-beans";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://bitbucket.org/atlassianlabs/bob-the-builder-of-beans/raw/master/license.txt";
        free = false;
      };
      description = ''
        BoB the Builder of Beans is a plugin that
    allows you to generate Java boilerplate code effortlessly! BoB allows you to specify just fields of a Java class
    and then generate a patterned class with standard getters, hashcode and equals, and of course a builder.

It is perfect for generated JSON serialisation classes or data transfer objects.

It is similar in some sense to Scala “case classes” or “Lombok” where you just declare the parts of the object you
    want and code is generated for you.
    However, BoB is different in that there is no build time magic. You control when the class definition is
    generated.

You can use it to kick start a class definition and then hand maintain it from there or you can use BoB to fully
    maintain a standard generated bean
    shape as it evolves. It's your choice and you are in control.

Please note that this plugin is not officially supported by Atlassian.

How to use in IntelliJ

    Go into any simple class definition and press ctrl+enter - "Generate...".
    Select the "BoB the Builder of Beans" menu item.
    Your class will be re-generated into a full bean with all the standard bean "awesome-sauce".


Features


    Support for Java 6, 7, and 8. The plugin automatically detects your Java version and generates code
        accordingly.
    

    Fields annotated with @Nullable have getters that return Optionals.

    Collections in constructors are copied defensively.

    If available in the project, classes from Guava or fugue may be used to make the generated code nicer and more
        efficient, or to make up for features missing in the current Java version.
    

    Things above the marker comment won’t be regenerated if you re-invoke BoB, which allows you to have additional
        methods in your class, for example: static factory methods.
    

    Classes annotated with @JsonAutodetect or containing fields annotated with
        @JsonProperty are generated as proper JSON beans with Jackson annotations.
    

    If a class already has an inner static builder, then a builder will be generated no matter how many fields are
        currently specified (normally, you need to have 4 or more fields to get a builder).
    

    Getters or setters that implement a superclass method are annotated with @Override.

    Methods for deprecated fields are annotated with @Deprecated.


Configuration

BoB can be configured by putting bob.properties files in your project. The file placed lower in the
    directory (or package)
    tree will overwrite the configuration from above. It’s advised to have one global configuration in the project root
    and only overwrite
    it if needed for some specific packages.



BoB properties


    fieldCountToRequireBuilder (number, default: 4) – the minimum number of fields that will trigger
        the generation
        of a builder instead of just a constructor. Default is “4” which means the builder will be generated if your
        class have 4 or more fields.
        If a builder already exists for the current class, BoB will generate a new builder regardless of the number of
        fields.
    
    generateComment (boolean, default: true) – whether to separate the content generated by BoB with a
        comment.
    
    isGetterForBooleans (boolean, default: true) – whether to prefix getters for boolean fields
       with is instead of get.
      '';
    };
  }) {};

  boebot = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BoeBot";
    plugname = "BoeBot";
    plugid = "com.AvansTI.Boebot";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11323/101172/TI1.2-Boebot-IntelliJ-Plugin.zip";
      sha256 = "1p04cwlzn84an1xk99dzm76502rr2fbypgrmhmkkxyv995jp92jk";
      name = "BoeBot-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/avansti";
      license = lib.licenses.bsd3;
      description = ''
        A small plugin to upload code to your BoeBot. This plugin is made to facilitate the course "Hardware Interfacing", and allows students to easily upload code to a raspberry pi based BoeBot
      '';
    };
  }) {};

  bolt-toolkit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bolt-Toolkit";
    plugname = "Bolt Toolkit";
    plugid = "eu.bolt.toolkit.intellij-plugin";
    version = "1.8.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15411/108161/BoltToolkitPlugin-1.8.0.zip";
      sha256 = "16y1bqcl4392x7ph17aqnwfhzixpib0vi6sznihrakr6yn5dz12y";
      name = "Bolt-Toolkit-1.8.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://bolt.eu";
      license = lib.licenses.mit;
      description = ''
        Extends Bolt Android developers IDE capabilities.
      Available features:
      
      Create new RIB. Use right click to access action item New -&gt; New RIB
      Visualize current RIBs hierarchy. Open Ribs scheme tool window in the right part of IDE
      Inspect newer library versions in dependencies.gradle file
      View bug button logs within IDEA. Locate Log Viewer button in the bottom right part of IDE
      '';
    };
  }) {};

  bookmark-actions = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Bookmark-Actions";
    plugname = "Bookmark Actions";
    plugid = "net.berla.intellij.bookmarkactions";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11595/54724/bookmark-actions.jar";
      sha256 = "0mlnb57a2b0w1g126sm0aaa367p3qdrg54qd95dpmj5a5wzn11hh";
      name = "Bookmark-Actions-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/berlam/bookmark-actions";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/berlam/bookmark-actions/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Adds actions for better bookmark management.
      '';
    };
  }) {};

  bootstrap-3 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Bootstrap-3";
    plugname = "Bootstrap 3";
    plugid = "nl.jworks.intellij.bootstrap3";
    version = "4.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7572/45070/bootstrap3.jar";
      sha256 = "1p3i35aykh7jrpdzjn7j577pawyqrhkaxkrjambmry12slfxjv9d";
      name = "Bootstrap-3-4.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bodiam/intellij-bootstrap";
      license = lib.licenses.mit;
      description = ''
        Bootstrap 3 and Bootstrap 4 live templates / snippets. 
 
Documentation / list of snippets 
 
Follow me on Twitter: @epragt
      '';
    };
  }) {};

  bootstrap-4-font-awesome-4-font-awesome-5-free--pro-live-templatessnippets = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bootstrap-4-Font-awesome-4-Font-Awesome-5-Free--Pro-live-templatessnippets";
    plugname = "Bootstrap 4, Font awesome 4, Font Awesome 5 Free & Pro live templates/snippets";
    plugid = "in.thekalinga.snippet.intellij";
    version = "6.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9341/59306/intellij-6.1.0.zip";
      sha256 = "0hcsmk0hqbpi36vzbwaarvj152bxyl8sp5k57qxv0s2spcjlmyld";
      name = "Bootstrap-4-Font-awesome-4-Font-Awesome-5-Free--Pro-live-templatessnippets-6.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/1tontech/bootstrap4-snippets";
      license = lib.licenses.mit;
      description = ''
        Bootstrap 4, Font awesome 4, Font Awesome 5 Free &amp; Pro live templates/snippets
      
      
      Documentation can be found here
      
      Release notes can be found here
      
      Have a problem, raise an issue here
      
      
      You can find my personnel blog at https://thekalinga.in
      
      You can connect me with at linkedin @ 
      
      Follow me on Twitter: @1tontech
      '';
    };
  }) {};

  bracesucks = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BraceSucks";
    plugname = "BraceSucks";
    plugid = "org.ice1000.braceSucks";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10579/44623/BracesSucks-0.0.1.zip";
      sha256 = "12rhyw78i9yljbg8ksqwsd72pgl5a4qx25r2r4ycf97cd1w3jpx0";
      name = "BraceSucks-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ice1000.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ice1000/BracesSucks/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Fold 
} as 
end and hide 
{. Give up braces from now on. You shouldn't limit yourself with braces. 
 
end is justice. Let's live with 
ends.
      '';
    };
  }) {};

  bracket-selection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bracket-Selection";
    plugname = "Bracket Selection";
    plugid = "com.jeno.bracket-selection";
    version = "1.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11322/107044/bracket-selection-1.6.1.zip";
      sha256 = "0w31aak0230xhlhzgxhlzv9yqx8xb31a90bhw4gx07h8sz3z0r43";
      name = "Bracket-Selection-1.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JenoDK/bracket-selection";
      license = lib.licenses.asl20;
      description = ''
        Bracket Selection

    IntelliJ IDEA plugin for selecting content between brackets.

    There are three possibilities:

    
        
            Select everything from the first found opening brace to the matching closing brace (default mouse shortcut: alt button1 doubleclick or hold alt -&gt; double left click anywhere in between brackets in human terms)
            
        

        
            Select everything from the first found opening brace to current cursor (not bound by default)
            
        

        
            Select everything from the current cursor to to the first found closing brace (not bound by default)
      '';
    };
  }) {};

  branch-in-window-title = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Branch-in-Window-Title";
    plugname = "Branch in Window Title";
    plugid = "io.wisetime.plugins.window.branch";
    version = "0.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9675/83670/branch-window-title-0.6.1.zip";
      sha256 = "0pi6dxcg1dxcgr1lwc6vfnnfx9mgwmwcyb4sbhnjl82k26b3f00r";
      name = "Branch-in-Window-Title-0.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wisetime-io/intellij-branch-in-window-title";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wisetime-io/intellij-branch-in-window-title/blob/master/LICENSE";
        free = false;
      };
      description = ''
        If a git repository is detected in the parent directory of a module, the current branch name is appended to the
      project name in the window title. If no git repository is present, the default behaviour / project name is used.
      This can be used to automate time allocation to ticketing systems via window managers such as WiseTime.
      '';
    };
  }) {};

  breakpoint-exporterimporter-with-variable-information = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Breakpoint-ExporterImporter-with-variable-information";
    plugname = "Breakpoint Exporter/Importer with variable information";
    plugid = "Breakpoint-Exporter-Importer";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14974/96173/breakpoint-save-to-file.zip";
      sha256 = "0wlr66jky4sscbrmm0ad5v1sdr46v5ldp308rw06qazaywlncg4f";
      name = "Breakpoint-ExporterImporter-with-variable-information-1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csabagabor";
      license = lib.licenses.gpl3Only;
      description = ''
        Tutorial


This plugin lets you save variable information(variable names + values) and stack trace information from a breakpoint event
 to a file which can be loaded later and you can navigate
the stack frames and see variable values just like in a normal debugging session

Also you can send the file to your colleagues and they can load it into their IDEs and they can see all the breakpoint's information
 without going through the same debugging session as you.


Manual (Help):

When a breakpoint is hit just press the "File" icon next to the "Evaluate Expression" button and select a path,
 also select some options which are used to save the breakpoint

To load an existing breakpoint from a file, go to Tools -&gt; Load Breakpoint From File


Credits:
Icons made by Freepik from  www.flaticon.com

Variable extraction is based on the code provided by https://github.com/cnhguy/FootPrint
      '';
    };
  }) {};

  breakpoints-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Breakpoints-Manager";
    plugname = "Breakpoints Manager";
    plugid = "com.github.shiraji.breakpointsmanager";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8403/26446/Breakpoints_Manager-1.0.1.zip";
      sha256 = "0d4ir9qpc9hhcrxldgxhx0gl149bh8yg70f8lhh9rjv8p574z2f8";
      name = "Breakpoints-Manager-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/breakpoints-manager/blob/master/LICENSE";
        free = false;
      };
      description = ''
        The IntelliJ plugin that helps share/save breakpoints
      '';
    };
  }) {};

  breath-of-colors = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Breath-of-Colors";
    plugname = "Breath of Colors";
    plugid = "com.malbul.idea.theme.breath";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13132/71279/idea-breath-theme.jar";
      sha256 = "0w9xjw0vmyciy029izm5j3kvi2d4hn7w8v4y5m5yn3711hbb5g8m";
      name = "Breath-of-Colors-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/malbul";
      license = lib.licenses.mit;
      description = ''
        The theme for IntelliJ IDEA for comfortable code writing.
      The theme was created for personal purposes, but later on, I decided to share it.
      '';
    };
  }) {};

  breeze-dark = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Breeze-Dark";
    plugname = "Breeze Dark";
    plugid = "id.mustofa.breeze-dark";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13224/71505/breeze-dark.jar";
      sha256 = "1zdqzshs2k7lkwn886wnngw43as6vziav130irczs8wxq31rv9gc";
      name = "Breeze-Dark-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mustofa-id/breeze-dark";
      license = lib.licenses.mit;
      description = ''
        KDE Plasma Breeze Dark Theme for Intellij IDEA
      '';
    };
  }) {};

  browsewordatcaret = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "BrowseWordAtCaret";
    plugname = "BrowseWordAtCaret";
    plugid = "BrowseWordAtCaret";
    version = "3.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/201/29877/BrowseWordAtCaret.jar";
      sha256 = "1ilxsw7ydp37kwgihjqzq9n3w5sx7lz57bcmz44ksjf4cpy3dvqg";
      name = "BrowseWordAtCaret-3.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/minman/browse-word-at-caret";
      license = lib.licenses.asl20;
      description = ''
        Allows to easily browse next/previous word at caret and highlight other appearances of selected word.
 
 Usage: Browse with CTRL-ALT-UP, CTRL-ALT-DOWN (note: on default-keymap this shortcut is also for next/previous occurrence).
      '';
    };
  }) {};

  browser-search = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Browser-Search";
    plugname = "Browser Search";
    plugid = "com.raindrop";
    version = "1.1-Release";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12372/81473/BrowserSearch.jar";
      sha256 = "0gzcwh3hwmm7mnkpk628mgi6sapd7ps12xk1app6xhk0i31wbk3d";
      name = "Browser-Search-1.1-Release.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        A simple browser search jump tool, Simplify copying before pasting into the browser
        Default shortcuts: Ctrl + B + I  Bing Search 
        Default shortcuts: Ctrl + B + B  BaiDu Search 
        Default shortcuts: Ctrl + B + G  Google Search 
        Default shortcuts: Ctrl + B + D  DuckDuckGo Search 
        Default shortcuts: Ctrl + B + S  StackOverflow Search 
        The source address
      '';
    };
  }) {};

  buck-for-idea = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Buck-for-IDEA";
    plugname = "Buck for IDEA";
    plugid = "intellij.buck.plugin";
    version = "3.5.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7826/50046/ideabuck-3.5.2.jar";
      sha256 = "036y2blwhri7y0xd0hb8idddpdspj1nra339fnpyjpw92fdiilyq";
      name = "Buck-for-IDEA-3.5.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "www.facebook.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/facebook/buck/blob/master/LICENSE";
        free = false;
      };
      description = ''
        An IntelliJ plugin for the Buck build system.
      '';
    };
  }) {};

  bugkotlindocument = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BugKotlinDocument";
    plugname = "BugKotlinDocument";
    plugid = "cn.wjdghd.unique.plugin.id";
    version = "0.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9781/63995/BugKotlinDocument-0.2.5.zip";
      sha256 = "1lymmm4slbn79jjcdwwbc3h2vachjmbvf6kznyq48j08b9lzdlx4";
      name = "BugKotlinDocument-0.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zxj5470/BugKotlinDocument";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zxj5470/BugKotlinDocument/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Usage


	Just press Enter after /**




Settings in Editor | BugKotlinDocument
      '';
    };
  }) {};

  bugzilla-task-provider = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bugzilla-task-provider";
    plugname = "Bugzilla task provider";
    plugid = "org.bugzilla.tasks";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5054/8523/org.bugzilla.tasks_8523.zip";
      sha256 = "07a0fp67za5s9rascyv0f46f7ps26idkz3mxgwy22yzzvhqdr2qi";
      name = "Bugzilla-task-provider-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.mysql.com/";
        free = false;
      };
      description = ''
        Allows for access of your bugzilla tasks.
      '';
    };
  }) {};

  build-json = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Build-JSON";
    plugname = "Build JSON";
    plugid = "com.zxk.plugin.buildjson";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9693/36813/BuildJSONObject.jar";
      sha256 = "0h3cz15md7rbd02331d6wf7507yrb9jfv1s2ja35l4cps4wzzx1l";
      name = "Build-JSON-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://xinkunz.github.io";
      license = lib.licenses.asl20;
      description = ''
        Create toJson() method in java file automatically 
use alt+insert - toJson()
      '';
    };
  }) {};

  build-mybatis-file = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Build-Mybatis-File";
    plugname = "Build Mybatis File";
    plugid = "com.bhc.plugin.mybatis";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10765/53105/MybatisPlugin.zip";
      sha256 = "1pqf5h513yfc66mw7bh9w4d9ci6dzbrys5kbz7894ri74vyy3w52";
      name = "Build-Mybatis-File-1.0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/moshangren11/MybatisPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://idea.congm.in";
        free = false;
      };
      description = ''
        MybatisPlugin.zip
  Automatically generate entity, mapper, and dao files with MyBatis Generator
      '';
    };
  }) {};

  build-number-status-bar-widget = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Build-Number-Status-Bar-Widget";
    plugname = "Build Number Status Bar Widget";
    plugid = "me.artspb.idea.build.number.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14389/100105/idea-build-number-plugin-1.3.zip";
      sha256 = "0firip5g9vbjb5yj698gqqhaglxjha8g2za2iszag5s69pfszidk";
      name = "Build-Number-Status-Bar-Widget-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://artspb.me";
      license = lib.licenses.asl20;
      description = ''
        A simple plugin that brings IDEA's build number into a status bar.
      '';
    };
  }) {};

  build-file-explorer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Build-file-explorer";
    plugname = "Build file explorer";
    plugid = "com.alged.bfe";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11376/52508/Build_file_explorer.jar";
      sha256 = "0d67wgbc0nyqyh7is6ahyc1hq52c11xbgjdx6q9vgh6w4bwyzwvd";
      name = "Build-file-explorer-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Malligan/Build-file-explorer";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Malligan/Build-file-explorer/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Build File Explorer
      

      Source |
      Author
      
      

      Build File Explorer in current version is a plugin for managing some gradle build file options or preferences
      
        (useful addition)
      
      
      

      Usage
      
        1. Sync modules.
      
        2. Enable or disable needed modules.
      
        3. Apply configuration.
      
        Actual convention for modules selection editing:
       
        'modulePath' and 'modulePath/stub' selected and used for switching.
       
        Enabled module - module with 'modulePath' uncommented, module with 'modulePath/stub' commented
       
        Disable module - module with 'modulePath/stub' uncommented, module with 'modulePath' commented
      
      


      Features
      
        fast modules switching
      '';
    };
  }) {};

  buildstats = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "BuildStats";
    plugname = "BuildStats";
    plugid = "com.pedalbuild.intellij.plugins.buildstats";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9724/37104/PedalBuildStatsPlugin.zip";
      sha256 = "0sr1h3cxhrv4bmjxgmc32bkkf069ylvvbfvw8yz742j24nnzvs6r";
      name = "BuildStats-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.pedalbuild.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.pedalbuild.com";
        free = false;
      };
      description = ''
        BuildStats keeps track of your build activity and send you daily and weekly reports
      '';
    };
  }) {};

  builder-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Builder-Generator";
    plugname = "Builder Generator";
    plugid = "Builder Generator";
    version = "1.1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6585/83385/builder-generator-idea-plugin.jar";
      sha256 = "01gznkjgcm3rk8dlbda65ys9ishjqf4lgbxivhl9lm1j0cn7z3a4";
      name = "Builder-Generator-1.1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mjedynak/Builder-Generator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mjedynak/builder-generator-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Adds ability to generate builder for a class and switch between them.
         Switching between builder and source class is similar to 'Go To Test' action.
         Generated builder class does not use reflection, only setter methods or constructor.
         Usage:
          
              ALT+SHIFT+B inside a file:
              
                  creates a builder if it does not exist
                  switches between class and builder if builder exists
               
              Code | Generate menu (ALT+Insert) from a class:
              
                  creates a builder if it does not exist
                  regenerates builder if it exists
      '';
    };
  }) {};

  builder-guided-completion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Builder-Guided-Completion";
    plugname = "Builder Guided Completion";
    plugid = "net.banterly.builderguidedcompletionplugin";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15695/108405/Builder_Guided_Completion-2.0.0.zip";
      sha256 = "09mh2vnwxxblqc2y3vbazgqp9w2mwxl20s5dyyar1lydw3j5zj0p";
      name = "Builder-Guided-Completion-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/banterly91/Builder-Guided-Completion-Plugin";
      license = lib.licenses.asl20;
      description = ''
        This Intellij Plugin is designed to help you navigate the invocation of a Builder class as part of the pattern with the same name.

It allows the creator of the Builder API to specify what methods are mandatory, what methods can be invoked more than once and more!

The user of the Builder API will have a guided experience through the auto-completion popup which will mark what methods are required, optional or invalid.

The home of the project together with its documentation is at https://github.com/banterly91/Java-Builder-Guided-Completion-Intellij-Plugin.
      '';
    };
  }) {};

  builderpojogenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "BuilderPojoGenerator";
    plugname = "BuilderPojoGenerator";
    plugid = "com.wlh.builder.generator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10732/45843/BuilderPojoGenerator.jar";
      sha256 = "00f8ya2l4fb1ypyvbqahblmfbjma9c92wqbs130ibh5slj7wx6wi";
      name = "BuilderPojoGenerator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/FSilence/BuilderPojoGenerator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/FSilence/BuilderPojoGenerator";
        free = false;
      };
      description = ''
        a plugin for idea(android studio) to generate java code for builder mode
      '';
    };
  }) {};

  builderberg = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Builderberg";
    plugname = "Builderberg";
    plugid = "com.burkett.builderberg";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10665/62658/builderberg-plugin-1.2.0.zip";
      sha256 = "1nhy5yn63kk00fnrs6q0k0zdxvzvfg4ai78mz3g97fjbrwf1m6n1";
      name = "Builderberg-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://davidburkett.github.io/";
      license = lib.licenses.mit;
      description = ''
        Generates an inner builder class to assist with backward-compatibility for immutable classes.
    See Item 2 of "Effective Java" by Joshua Bloch.
      '';
    };
  }) {};

  built-value-snippets = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Built-Value-Snippets";
    plugname = "Built Value Snippets";
    plugid = "com.giancarlocode.built-value-snippets";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13786/79737/built-value-snippets.zip";
      sha256 = "0mqzl1r67mwgdy01wdrwzpmvy0pfglknfljf8rqzn5j8mqia0p52";
      name = "Built-Value-Snippets-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/GiancarloCode/built-value-snippets";
      license = lib.licenses.mit;
      description = ''
        This plugin contains code snippets for built_value Dart package.
      List of snippets and Repository.
      '';
    };
  }) {};

  bulmacss-bootstrap-4-font-awesome-4-and-5 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "BulmaCSS-Bootstrap-4-Font-awesome-4-and-5";
    plugname = "BulmaCSS, Bootstrap 4, Font awesome 4 and 5";
    plugid = "in.bulma.snippet.intellij";
    version = "6.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15154/99279/intellij-6.2.3.jar";
      sha256 = "0i8vjdikr655qh1li1plbjxc0rxwrvl1rz0jkhyji9ipaxa4xqzw";
      name = "BulmaCSS-Bootstrap-4-Font-awesome-4-and-5-6.2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/1tontech/bootstrap4-snippets";
      license = lib.licenses.mit;
      description = ''
        BulmaCSS, Bootstrap 4, Font awesome 4, Font Awesome 5 Free &amp; Pro live templates/snippets
      This plugin is based upon the work done by the original company 1Ton Technologies
      '';
    };
  }) {};

  bunch-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bunch-Tool";
    plugname = "Bunch Tool";
    plugid = "org.jetbrains.bunch.tool.idea.plugin";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12615/98361/bunch-tool-idea-plugin-1.1.0.zip";
      sha256 = "00zk5hn5q9zb3xzsf36fs3a4hg33226xaw8ly45gdc3fzq6rq5k5";
      name = "Bunch-Tool-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.asl20;
      description = ''
        Support for bunch files when Bunch Tool is used in the project.
    
    
        Switch action from the UI (Tools -&gt; Bunch Tool -&gt; Switch)
        Basic highlighting for bunch files (Kotlin files are unsupported for now)
        
          Action (Tools -&gt; Bunch Tool -&gt; Compare with main file) and shortcut for comparing bunch file with
          the main file (no need to select two files anymore)
        
        A special view for forgotten bunch files with navigation to problem files in pre-commit check
        Apply non-conflicting changes to all bunch files (Tools -&gt; Bunch Tool -&gt; Apply changes to all)
        UI for reduce command (Tools -&gt; Bunch Tool -&gt; Reduce)
        UI for cleanup command (Tools -&gt; Bunch Tool -&gt; Cleanup)
      '';
    };
  }) {};

  bundle-handler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bundle-Handler";
    plugname = "Bundle Handler";
    plugid = "com.nd.sdp.indexed.bundle.handler";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13139/70213/indexed-bundle-handler-plugin.zip";
      sha256 = "1m0clhrznld7pa3zpgwqnda75wzrb8dl7kiq18h1krzpwnb2ijnb";
      name = "Bundle-Handler-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.netdragon.com/";
      license = lib.licenses.mit;
      description = ''
        A toolkit for indexed bundle of React Native.
      '';
    };
  }) {};

  bundle-sort = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bundle-Sort";
    plugname = "Bundle Sort";
    plugid = "ch.namlin.plugin.bundlesort";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11107/88617/BundleSort-1.2.zip";
      sha256 = "0fc2khlxakwapmgp3sg6jq7c4x6nrs0h8zbv64y9mv8xcns7gal1";
      name = "Bundle-Sort-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/arpic-nam/BundleSort";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        Sort Java resources bundles alphabetically.
      '';
    };
  }) {};

  bunyan-pretty-print = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Bunyan-Pretty-Print";
    plugname = "Bunyan Pretty Print";
    plugid = "BunyanConsole";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8526/28005/BunyanConsole.jar";
      sha256 = "1iwzkvilg9q1bwdg6prq2qjvqa3xl71jas4ah0sq81s40y6np85g";
      name = "Bunyan-Pretty-Print-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/complyue/BunyanConsole";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/complyue/BunyanConsole";
        free = false;
      };
      description = ''
        Plugin for IntelliJ IDEs to pretty print JSON log through Bunyan.
 
You'll need globally installed bunyan command line tool (npm install -g bunyan) for this plugin to work.
      '';
    };
  }) {};

  burnt-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Burnt-Theme";
    plugname = "Burnt Theme";
    plugid = "com.proteo.intellij.burnt";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14889/105361/burnt.jar";
      sha256 = "0p2yav59wbcl5vvajd0aa11rfznc7sbrxp9bypfldbg28gvhvq3d";
      name = "Burnt-Theme-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/proteo";
      license = lib.licenses.mit;
      description = ''
        About
      Burnt is a dark theme for JetBrains IDEs (2019.1+) with the right visual clues to assist you in your long coding journeys. The accompanying color scheme features a rich, vibrant palette, carefully tuned to help you stay focused and productive.
      
      Why the Burnt theme?
      Because other dark themes are not dark or good enouhg for my taste. This is a really dark theme, crafted with great attention to the detail, and trying to cover the whole IDE to provide a comprehensive coding experience. It's main purpose is to let you focus on what matters: the code.
      
      Hope you enjoy it as much as I do!
      
      
      
      
      
      Contribute
      On GitHub:
      
      https://github.com/proteo/burnt
      
      Found a bug or have a suggestion? Let me know in the issue tracker:
      
      https://github.com/proteo/burnt/issues
      '';
    };
  }) {};

  butterknife-inspections = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ButterKnife-Inspections";
    plugname = "ButterKnife Inspections";
    plugid = "dk.erikzielke.android.butterknife.inspections";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7735/19795/butterknife_inspections.jar";
      sha256 = "1z7csn6f40w5kba5m47j049f6m8yv0g1pfcr3mx78yhvyf1kf378";
      name = "ButterKnife-Inspections-0.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/erikzielke/butterknife_inspections";
      license = lib.licenses.mit;
      description = ''
        This plugin detect shows inspections for common mistakes using ButterKnife. For now the problems detected are: 
 
 No call to ButterKnife.inject 
 That a field exists in all layouts or is optional 
 That the type of the field matches in all views 
 
The detection for which layouts to check for matching ids is based on the following: 
 
 Each setContentView call in onCreate of an activity 
 Each inflate in onCreateView in a Fragment 
 Each inflate in each constructor in a View 
 Trying to figure out for ViewHolders by data flow analysis and find usages
      '';
    };
  }) {};

  bytecode-disassembler = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Bytecode-Disassembler";
    plugname = "Bytecode Disassembler";
    plugid = "23.bytecode-disassembler";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11566/70310/bytecode-disassembler-1.0.8-all.jar";
      sha256 = "1qgd27a94c917hpwrk61c5yqi9j0v24lz4dpryygiqbk054h6pvk";
      name = "Bytecode-Disassembler-1.0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/OPAL-Project/intellijintegration";
      license = lib.licenses.bsd2;
      description = ''
        OPAL Framework integration for IntelliJ IDEA.
      '';
    };
  }) {};

  bytecode-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Bytecode-Editor";
    plugname = "Bytecode Editor";
    plugid = "com.github.pshirshov.bytecodeeditor";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8461/40299/bytecode-editor.zip";
      sha256 = "1fxbhfpc81mca0hzn1avjzi3qwh0fch09fmkgfjkyfhzcqlhm385";
      name = "Bytecode-Editor-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pshirshov/idea-bytecode-editor";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/pshirshov/idea-bytecode-editor";
        free = false;
      };
      description = ''
        Provides View | Edit Bytecode action for those who learns JVM internals. 
 Based on ByteCode Viewer by JetBrains but is better: 
 
 it uses an editor tab instead of a popup 
 it allows you to edit bytecode assembler and assemble edited code back into .class files 
 it provides default hotkey for bytecode analysis: Ctrl+K, Ctrl+B 
 
 
Based on ASM6. 
It's a very gloomy tool. WIP. 
TODO: 
 
 Support for ASM Textifier representation 
 Support for ASM Textifier representation assembling 
 Check Jasmin compatibility with recent class file versions and rework it if required 
 Representation switching 
 Krakatau integration (maybe, I'm not sure) 
 Refactor all that shit! 
 Patches are welcome...
      '';
    };
  }) {};

  bzr4intellij = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Bzr4IntelliJ";
    plugname = "Bzr4IntelliJ";
    plugid = "bzr4intellij";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3961/7617/bzr4intellij_7617.jar";
      sha256 = "18b3s8s1d0bs5zdwbnii329b7a7q51cahh18zbfsv7j7kkas7gsf";
      name = "Bzr4IntelliJ-2.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://launchpad.net/bzr4j";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/3961/license.txt";
        free = false;
      };
      description = ''
        IntelliJ IDEA plugin for Bazaar VCS integration.
  
  System Requirements:
  
    IntelliJ IDEA 10+ (Ultimate or Community)
    Java 5+
    Bazaar 2.0+
    
      xmloutput plugin
      '';
    };
  }) {};

  c-to-java = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "C-to-Java";
    plugname = "C# to Java";
    plugid = "person.jianglong.plugins.cs2java";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15020/102018/C_2JavaPlugin.jar";
      sha256 = "1zqi0wl8c88h0v4772aqdrb8rczfshnqs1s79xjxw2jsk5c8djn9";
      name = "C-to-Java-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/atalent/Cs2JavaPlugin4Idea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.mozilla.org/en-us/mpl/2.0/";
        free = false;
      };
      description = ''
        C# to Java
        This plug-in converts C# code into Java code through syntax translation
        Like the {get;set;} we see in C#, in Java is replaced by ;
        The string in C# is replaced by String in Java
        The virtual in C# is replaced with null in Java
        The const in C# is replaced by final in Java
        If you have other additions, you can git clone the source code
        https://gitee.com/atalent/Cs2JavaPlugin4Idea
        
		Usage：Menu-Tools-C#2Java
        
		C#转Java
		本插件通过语法翻译将C#代码转为java代码
		比如我们在C#中常见的{ get; set; }在java中替换为;
		C#中的string在java中替换为String
		C#中的virtual在java中替换为空
		C#中的const在java中替换为final
		如果大家有其他补充，可以git下源码
		https://gitee.com/atalent/Cs2JavaPlugin4Idea
		
		使用方法：菜单-工具-C#2Java
      '';
    };
  }) {};

  cbt = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CBT";
    plugname = "CBT";
    plugid = "darthorimar.cbt";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10482/43666/intellij-cbt.jar";
      sha256 = "1xdmjc65wrm2cbiiwvi02gfzg53hanan3vahkxcld6cadczjbaxj";
      name = "CBT-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/darthorimar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/darthorimar";
        free = false;
      };
      description = ''
        CBT build tool support for Scala programming language
      '';
    };
  }) {};

  ccd-code-generate-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CCD-Code-Generate-Plugin";
    plugname = "CCD Code Generate Plugin";
    plugid = "com.jared.plugin.id";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11111/49815/CCDCodeGenerate.jar";
      sha256 = "1k3zlqiyg0prk26dw2a18fsvp2rpf8qc3rj5vxzjvawd7ia6phn4";
      name = "CCD-Code-Generate-Plugin-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        For generate Android MVP, Dagger Code with the template files, You just only Input author name, module name and function name
      '';
    };
  }) {};

  cclines = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CCLines";
    plugname = "CCLines";
    plugid = "2017031807130000";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9596/34009/computer_code_lines.zip";
      sha256 = "1kn3jk5shvyy422xb1kcg0fy00lkxvniwdifbr5ipliq619hvsv1";
      name = "CCLines-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cbchena/CCLines";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/cbchena/CCLines";
        free = false;
      };
      description = ''
        统计代码行数，允许在设置界面添加用户自定义统计类型。(Statistics the number of lines of code, allowing the user to add a custom statistical type in the settings interface.)
      '';
    };
  }) {};

  cfr-decompile = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CFR-Decompile";
    plugname = "CFR Decompile";
    plugid = "org.objectweb.asm.idea";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11035/53213/asm-bytecode-intellij.zip";
      sha256 = "06bl2zrkvdaan9q09z69v1w4qr2j0v9a75c056xddmlq4c35a01q";
      name = "CFR-Decompile-1.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mrdear/asm-bytecode-intellij";
      license = lib.licenses.mit;
      description = ''
        use cfr decompile Java classes tools base on asm-bytecode-intellij-plugin
      '';
    };
  }) {};

  chelper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CHelper";
    plugname = "CHelper";
    plugid = "CHelper";
    version = "4.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7091/48163/chelper.zip";
      sha256 = "0ag45qcpc43x2lyp3n285wm8v69sj2n0g4bd3ix5y2dk1fffmpvj";
      name = "CHelper-4.4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/EgorKulikov/idea-chelper";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/licenses/lgpl.html";
        free = false;
      };
      description = ''
        Inlines library code and provides testing framework
      '';
    };
  }) {};

  cmd-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CMD-Support";
    plugname = "CMD Support";
    plugid = "CMD Support";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5834/18875/cmdsupport.zip";
      sha256 = "04zdhdiiv2dzrv0w0bhb40cyng3r9pnl0rkvpb4f42z5ba3h90h7";
      name = "CMD-Support-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/t3hnar/CmdSupport";
      license = lib.licenses.asl20;
      description = ''
        CMD support plugin for Intellij Idea 
 
Sources | 
Issues 
 
 
Features 
 
 Enables highlighting 
 Adds new actions 
 
 
Compiled with Java 1.6
      '';
    };
  }) {};

  cmake-plus = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CMake-Plus";
    plugname = "CMake Plus";
    plugid = "artsiomch.cmake.plus";
    version = "203.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12869/104514/CMake-plus-203.0.2.jar";
      sha256 = "1iaqczhxqrcfwkkqp7is10mv98gh28in95b0yf04d71zl7fbgvc3";
      name = "CMake-Plus-203.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/ArtsiomCh/CMake";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=sxdyd6dqkkdgmu5owbdwzfnvj4qxfcaf";
        free = false;
      };
      description = ''
        Extend CMake language support in the IDE's Editor:
     - Variables navigation (Go to definition / Find usages) and renaming(*see Notes). 
     - User variables definition/reference completion added (no scopes, very little semantic checks yet). 
     - Folding regions for functions, macros, if/for/while blocks and: 
            * Multiline brackets comments; 
            * Consequent single-line comments;  
            * Multiline function's arguments. 
     - "Comment with Line / Block Comment" (`Ctrl + /` and `Shift + Ctrl + /`) actions added. 
     - Structure View (for the current file) with:  
            * Function/Macros declarations; 
            * Variable (re)definitions; 
            * Filtering by Functions, Macros, Variables and Sorting alphabetical; 
            * Navigation in both directions (Structure View &lt;-&gt; Editor). 
     - Quick Documentation for CMake commands, modules, policies, properties, and variables. 
     - Syntax and Operation inspections: 
            * Variable is set but never used; 
            * Builtin commands should be used in lowercase; 
            * End-of-block commands (else, endif, etc.) should not take arguments. 
      

     Require CMake simple highlighter to be installed! 
     

     Plugin became paid for all IntelliJ IDEs (both commercial and community) starting from 2019.3.1 (193.5662) 
     JetBrains Marketplace Licensing Support plugin
     should automatically prompt to be installed if CMakePlus is installed from Marketplace. In case of installing CMakePlus from the disk you'll need to install
     JetBrains Marketplace Licensing Support plugin from the disk first. 
     

     *Note: Variable's scope of visibility is not implemented yet, i.e. all variables withing Project are shown as global. Variable's rename refactoring (Shift+F6) works fine for variables with single declaration. For multi declared (re-defined, amended) variables rename refactoring works only from variable declaration side (i.e. caret should be on variable declaration, not reference) and will change all visible references and only current declaration. Use with caution.
      '';
    };
  }) {};

  cmake-simple-highlighter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CMake-simple-highlighter";
    plugname = "CMake simple highlighter";
    plugid = "artsiomch.cmake";
    version = "203.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10089/104513/CMake-simple-highlighter-203.0.2.jar";
      sha256 = "13v69phlq3gx3fd7yziab15cjd6zkyml85kj3i7m4ic8f7zncca0";
      name = "CMake-simple-highlighter-203.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/ArtsiomCh/CMake";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin for CMake syntax highlight support.
     - It provides(extends) syntax highlight for IntelliJ IDEA, Android Studio, CLion, etc. 
     - Highlighting styles are customisable at Settings -&gt; Editor -&gt; Color Scheme -&gt; CMake [additional syntax]. 

     Please consider CMake Plus plugin for more functionality:
     - Variables navigation (Go to definition / Find usages) and renaming(*see Notes). 
     - User variables definition/reference completion added (no scopes, very little semantic checks yet). 
     - Folding regions for functions, macros, if/for/while blocks and: 
            * Multiline brackets comments; 
            * Consequent single-line comments;  
            * Multiline function's arguments. 
     - "Comment with Line / Block Comment" (`Ctrl + /` and `Shift + Ctrl + /`) actions added. 
     - Structure View (for the current file) with:  
            * Function/Macros declarations; 
            * Variable (re)definitions; 
            * Filtering by Functions, Macros, Variables and Sorting alphabetical; 
            * Navigation in both directions (Structure View &lt;-&gt; Editor). 
     - Quick Documentation for CMake commands, modules, policies, properties, and variables. 
     - Syntax and Operation inspections: 
            * Variable is set but never used; 
            * Builtin commands should be used in lowercase; 
            * End-of-block commands (else, endif, etc.) should not take arguments.
      '';
    };
  }) {};

  cmakeassistant = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CMakeAssistant";
    plugname = "CMakeAssistant";
    plugid = "io.rangaofei";
    version = "0.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10980/48848/CMakeAssistant.jar";
      sha256 = "1falsm0j2w7f7gl7bysjdqi0ibn0am7pbygpi0n2jg7iscwq9ln1";
      name = "CMakeAssistant-0.0.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://rangaofei.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        a simple cmake assistant,comment
      '';
    };
  }) {};

  cnd-language--jahia-framework = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CND-Language--Jahia-Framework";
    plugname = "CND Language / Jahia Framework";
    plugid = "fr.tolc.jahia.intellij.plugin";
    version = "2.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9221/86400/IntelliJ_Jahia_plugin_v2.0.4.jar";
      sha256 = "0hksnk8w21bksi9i0sd542y73cgwg9niwj5g0ly81prclyhjb1f4";
      name = "CND-Language--Jahia-Framework-2.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Tolc/IntelliJ_Jahia_plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/Tolc/IntelliJ_Jahia_plugin/master/LICENSE";
        free = false;
      };
      description = ''
        CND Language / Jahia Framework


definitions.cnd files syntax highlighting, code completion, and other amazing stuff.



Compatible with Jahia versions 6.6.x &amp; 7.x
Java 8 needed

See the plugin Github project for detailed features list.

Features



CND Language



    Syntax highlighting
    Syntax checking and error highlighting
    Code completion
    Code formatting
    Find usages
    Go to declaration
    Refactoring
    File icon 
    Line markers    
    Code folding
    Brace matching
    Commenter




Jahia Framework


Compatible with Jahia versions 6.6.x &amp; 7.x


CND files features:

    Helpers/Quickfixes (alt+enter on nodetype name)
        
            Create nodetype and nodetype properties translations
            Create new view
        
    
    Nodetype folders icon in Project View 
    
    View files grouping 
    
    Completion and other features on Jahia nodetypes (embedded Jahia base and main modules .cnd files)


Other files/languages features:

    JSP / Java / XML
        
            Nodetypes usages highlighting &amp; line markers
            Nodetypes completion
            Go to nodetype declaration
            Unknown nodetype error highlighting
            Create nodetype quickfix
        
    
    Properties (resource bundles)
        
            Translations keys syntax highlighting &amp; line markers for namespaces, nodetypes and properties
            Translations keys nodetypes and properties completion
            Go to namespace, nodetype or property declaration from translations keys (ctrl-click/cmd-click)
            Error message if adding translations for a choicelist on a non-choicelist property
        
    


This plugin is neither official nor endorsed by Jahia in any way.
I am just a guy who loves this CMS and wanted to make working with it easier for everyone (or at least everyone using IntelliJ, duh).
      '';
    };
  }) {};

  cola-tests = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "COLA-Tests";
    plugname = "COLA Tests";
    plugid = "com.github.bmsantos.idea.cola";
    version = "0.5.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7700/25137/cola-idea-plugin-0.5.5.zip";
      sha256 = "04v4n4f9h3a3pa8vlbnlmzy85f5n1z1bzs1a8mx65bqg187p1hbf";
      name = "COLA-Tests-0.5.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bmsantos/cola-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        COLA Tests is a small framework designed to facilitate the usage of JUnit tests with Gherkin stories/scenarios. It is much simpler to use than any other similar framework because it injects the stories directly in the JUnit POJO and, due to this nature, it does not require a JUnitRunner.
      '';
    };
  }) {};

  cpen-221-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CPEN-221-Plugin";
    plugname = "CPEN 221 Plugin";
    plugid = "ca.ubc.ece.cpenn221.plugin";
    version = "2.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11074/96377/cpen221_plugin-2.1.0.zip";
      sha256 = "0bpliifnpbja0sa86131h9ma90j0rz7gl79vdn2s3hlf3liyb4y2";
      name = "CPEN-221-Plugin-2.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.ece.ubc.ca/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "afl-3.0";
        free = false;
      };
      description = ''
        A tool to visualize the call stack and objects on the heap (as a box and
      pointer diagram) while debugging Java applications.
      '';
    };
  }) {};

  cpu-usage-indicator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CPU-Usage-Indicator";
    plugname = "CPU Usage Indicator";
    plugid = "krasa.CpuUsageIndicator";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8580/100992/CpuUsageIndicator.jar";
      sha256 = "0fjn3mmfrazf6rqjyhrk8y4zbnccszn4c1xp4labsdbbyyczglq7";
      name = "CPU-Usage-Indicator-1.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/CpuUsageIndicator";
      license = lib.licenses.asl20;
      description = ''
        CPU Usage Indicator in the status bar, just like the Memory Indicator.
      Also contains actions for performance problems diagnostics.
      - left click on the panel generates a thread dump (useful when the IDE is doing something on the background and you want to know what).
      - configuration GUI for Performance Watcher (IDE's bundled automatic thread dumper for frozen UI). 
      You can configure it to dump even for shorter freezes than is the default: 5 second.  
      
      Note:
      -it is painted in a background thread, not EDT, so it will update even when the GUI is stuck
      -getting the process usage is a quite expensive operation :(
      '';
    };
  }) {};

  crx-cleaner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CRX-Cleaner";
    plugname = "CRX Cleaner";
    plugid = "com.github.mateusz512.crxcleaner";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15576/105480/CRX-cleaner-0.0.1.zip";
      sha256 = "0s77m6g6xl0nw9rpk7vlv49cwvj6p8b4qzgcd2wa6azlcx8j4q0v";
      name = "CRX-Cleaner-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This plugin takes care of manually removing obsolete XML tag properties for JCR content.


Simply hit that Ctrl + Alt + L and watch the magic happen.





Can be:
used on filesused on directoriesadded as pre-commit step


List of removed properties (inspired by Gradle AEM Plugin):

jcr:lastModified.*
jcr:created.*
jcr:isCheckedOut
cq:lastReplicat.*
cq:lastModifi.*
dam:extracted
dam:assetState
dc:modified
.*_x0040_.*
jcr:uuid



Source code can be found in this repository.
      '';
    };
  }) {};

  cs-61b = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CS-61B";
    plugname = "CS 61B";
    plugid = "edu.berkeley.cs61b.plugin";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9423/96799/61b_plugin.zip";
      sha256 = "106gshs6xzwc02mzr98bjd50z71zzhsbmkqajcsqdc80n819gff9";
      name = "CS-61B-2.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://datastructur.es";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Berkeley-CS61B/intellij-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for CS 61B at UC Berkeley.
      Includes a style checker (Checkstyle).

      This plugin no longer includes the Java Visualizer: it has been split off into
      a separate plugin: https://plugins.jetbrains.com/plugin/11512-java-visualizer
      '';
    };
  }) {};

  cs-61b-snaps = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CS-61B-Snaps";
    plugname = "CS 61B Snaps";
    plugid = "es.datastructur.61bsnaps";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14971/108052/61bsnaps-1.8.zip";
      sha256 = "0nyxcvy01s7jjhqphbg5h2mq90i5mzjxjq2ymlqz106s0rhdnj12";
      name = "CS-61B-Snaps-1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://datastructur.es";
      license = lib.licenses.asl20;
      description = ''
        Plugin to track student project development for CS 61B at UC Berkeley 2020.
      '';
    };
  }) {};

  csdn-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CSDN-tools";
    plugname = "CSDN tools";
    plugid = "csdn.tools";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15205/102519/csdn_idea_tools-1.3.1.zip";
      sha256 = "03fbh4m7zjgn70wf93xfrdf11ix7sjkyvr96hz9vdv7m0gjkzapm";
      name = "CSDN-tools-1.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugin.csdn.net/idea.html";
      license = lib.licenses.asl20;
      description = ''
        A set of development tools, providing the daily development of high frequency used plug-ins, simple and convenient
    such as:JSON format | Time transform and format | Search tools | and so on...
    
    How to use
    
      use ctrl+shift+I start
      open the plug-in in the Tools toolbar or right click
      please enter the help command in the plug-in to see the guidelines
      使用ctrl+shift+I 唤起插件
      打开Tools工具栏或右键唤起插件
      请在输入框里输入命令help查看使用指引
      '';
    };
  }) {};

  csv-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CSV-Plugin";
    plugname = "CSV Plugin";
    plugid = "net.seesharpsoft.intellij.plugins.csv";
    version = "2.14.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10037/99252/intellij-csv-validator-2.14.3.zip";
      sha256 = "040352s23ahl9vfwyx2p2n7z3h2v98kcnnfm852y4alk28d0x9jv";
      name = "CSV-Plugin-2.14.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SeeSharpSoft/intellij-csv-validator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/SeeSharpSoft/intellij-csv-validator/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Lightweight plugin for editing CSV/TSV/PSV files with a flexible Table Editor, syntax validation, structure highlighting, customizable coloring, new intentions and helpful inspections.
        
        Features:
        
            support for CSV/TSV/PSV file extensions
            customizable Table Editor
            customizable text editor
            customizable column coloring
            customizable line comment
            syntax validation
            syntax highlighting
            content formatting
            quick fix inspections
            intentions (Alt+Enter), e.g. Quote/Unquote (all), Shift Column Left/Right
            balloon help &amp; spell checker
            structure view (header-entry layout)
            support for ',', ';', '|' or '↹' as value separator
            support for '"' or '\' as escape character
            support line comments (# by default, customizable)
            highlight of active column values
            tab (↹) separator highlighting
        
        

        
        TSV/PSV file support: TSV/PSV files are recognized as such but treated as a variant of CSV files, the same syntax highlighting and code style settings are applied.
        
        Code formatting: Default code formatting is 'Tabularize'. Can be changed in Settings -&gt; Editor -&gt; Code Style -&gt; CSV/TSV/PSV
        
        For more detailed information please have a look at the README.
        
        Thanks to @royqh1979, @egoisticalgoat, @sabi0, @ptahchiev, @ghost, @MarkJeronimus, FineVisuals and others for supporting me and the project!
        
        
        
        
            IntelliJ IDEA Ultimate/PhpStorm/DataGrip/etc.: The plugin is fully compatible with the 'Edit as Table...' functionality.
      '';
    };
  }) {};

  csv-translator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CSV-Translator";
    plugname = "CSV Translator";
    plugid = "com.zalesskyi.csv_translator";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13041/69546/csv_translator-1.0.2.zip";
      sha256 = "0632k3m9m2b4y8z19crma18mxh6kz122396zq3zkll23l30vjyb1";
      name = "CSV-Translator-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zalesskyi";
      license = lib.licenses.asl20;
      description = ''
        Android CSV Translator.
      Allows you to add translations for different locales by loading a CSV file.
      NOTE
      You can access the plugin from the "Tools" menu at the IDE toolbar
        
        1.To add translations you must specify: 
        1.1. Path to CSV-file with translations;
        1.2. Path to the module "res" directory where you want to upload translations.
        
        2.Your CSV-file must:
        2.1. Have UTF-8 encoding;
        2.2. Use semicolon (;) as separator;
        2.3. Have the structure as shown in the screenshot.
        
      Changelog
      Version: 1.0.2
      GitHub
      '';
    };
  }) {};

  csharp = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CSharp";
    plugname = "CSharp";
    plugid = "in.xiv.cs";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7902/20871/idea-csharp.jar";
      sha256 = "1f90xjdyf79456dp5g66224vmr6m9c1ipckxb7bzwha5biy234am";
      name = "CSharp-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://s.xiv.in/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://s.xiv.in/";
        free = false;
      };
      description = ''
        CSharp language support.
 
very experimental state
Right now only syntax support and grammar validation
      '';
    };
  }) {};

  cuba = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CUBA";
    plugname = "CUBA";
    plugid = "CUBA";
    version = "15.1-202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7249/105050/cuba-studio-15.1-202.zip";
      sha256 = "1zv21bjlnkl6d7rm9xjbn88wxc73mx9ks300dsga2bkydl0lgky9";
      name = "CUBA-15.1-202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.cuba-platform.com/commercial-software-license";
        free = false;
      };
      description = ''
        CUBA Studio is a specialized tool for CUBA Platform – an open source JVM framework for business applications. Studio is a full featured Rapid Application Development tool offering extensive code generation, visual designers, smart prompts and convenient code navigation.
    Develop enterprise-grade solutions with comfort and high productivity!
    Documentation:
    Studio User Guide | Developer’s Manual
    See also:
    Quick Start | Forum | GitHub | Issues
      '';
    };
  }) {};

  cvs = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CVS";
    plugname = "CVS";
    plugid = "CVS";
    version = "203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10746/104877/cvs-203.0.zip";
      sha256 = "1rlhf41hayhcmn7p4qfa7vnmrxhni1x9bih83bw0fzv0gfkbics9";
      name = "CVS-203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Allows working with CVS version control system.
      The following features are available:
        
        Dedicated page under the Version Control node in the Settings/Preferences dialog.
        When CVS is not enabled, it is still possible to browse, check out sources from and import into the available CVS repositories.
        When CVS is enabled, the CVS node appears on the VCS menu, and on the context menu of the editor.
      '';
    };
  }) {};

  cvs-info-plug-in = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CVS-Info-Plug-In";
    plugname = "CVS Info Plug-In";
    plugid = "de.bewalt.intellij.plugin.cvsinfo";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7169/12568/CVSInfo.jar";
      sha256 = "00gh1hrvw58xc06ph534di5wjcry7vgcgh9n2d9wda4k0bicnls4";
      name = "CVS-Info-Plug-In-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bewalt.de";
      license = lib.licenses.asl20;
      description = ''
        This Plugin shows CVS sticky tags in the project view as known from the Eclipse workbench. 
 Known problems: 
 
 After a CVS update not in every case the sticky tags are updated immediately. You have to synchronize the module manually or reopen the project.
      '';
    };
  }) {};

  cvs-revision-graph-plus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CVS-Revision-Graph-Plus";
    plugname = "CVS Revision Graph Plus";
    plugid = "CVS Revision Graph Plus";
    version = "2.42";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6325/13834/CVSRevisionGraphPlus.zip";
      sha256 = "0smx3hflrqw071wcpvdik9fr4sjn8gffi2d4xq4cwqxa3pywzwa8";
      name = "CVS-Revision-Graph-Plus-2.42.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zielu/CVSRevisionGraphPluginPlus";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zielu/CVSRevisionGraphPluginPlus";
        free = false;
      };
      description = ''
        Draws a graph of all revisions of the current CVS controlled file. The graph can be zoomed in and out to better manage large revision graph history. Not all CVS servers support merge history so if you follow a convention of adding &quot;Merge From: [branchName]&quot; and &quot;Revision: [revisionNumber]&quot; in your commit message when you check in a merged file, the revision graph will draw red merge arrows showing the merge graphically. Right click editor and choose Revision Graph... from within the CVS menu. Offers the ability to add and remove tags to specific revisions in the graph regardless of what is in the sandbox. Provides simple management of merge tags based on a configurable merge tag naming convention. Allows retrieval of any selected revision into your current working copy. Selecting an edge connecting two revisions will automatically perform a comparison. The revision graph can be configured in the configuration dialog to not show tags at all or to filter in or out specified tags based on a regular expression. It can also be configured to filter in or out specified branches. The tag and branch filters can also be dynamically changed while viewing the revision graph. The configuration dialog also contains a revision date filter and the graph can be dynamically filtered with dates. 
Based on Shawn Castrianni's excellent plugin and modified to run with Idea 10+. 
Uses Fugue Icons
      '';
    };
  }) {};

  cvs-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CVS-bar";
    plugname = "CVS bar";
    plugid = "CVS bar";
    version = "0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/80/3677/CVS_bar_3677.jar";
      sha256 = "0jdfayn9ipkaw3pkbhap8rshn8x834jfizy18fhj7adra019m2hn";
      name = "CVS-bar-0.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Plugin creates quick access buttons for using CVS
      '';
    };
  }) {};

  cvstoolbox = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CVSToolBox";
    plugname = "CVSToolBox";
    plugid = "CVSToolBox";
    version = "1.4.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5934/17443/CVSToolBox.zip";
      sha256 = "0l2w4b1dd03932swj64alydikvkq0x5lc50z3zgr5rfc9kfmhnr0";
      name = "CVSToolBox-1.4.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zielu/CVSToolBox";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zielu/CVSToolBox";
        free = false;
      };
      description = ''
        Expands CVS integration by providing additional operations: 
 
 'Create multiple tags' - context and after commit action 
 'Create/Move branches' - context action 
 'Delete tags' - context action 
 
 You might also like CVS Revision Graph Plus  
 This plugin uses FAMFAMFAM Silk Icons
      '';
    };
  }) {};

  cxa-dev-platform = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CXA-Dev-Platform";
    plugname = "CXA Dev Platform";
    plugid = "com.ibm.cxa.plugin";
    version = "1.0.0.32";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10363/101550/CXAPlugin-1.0.0.32.jar";
      sha256 = "11z0jvk6lpvz848lqaqfgf6kxcyicrgmjfshr3y1khy1w2k4bqjr";
      name = "CXA-Dev-Platform-1.0.0.32.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://acoustic.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ibm-watson-cxa/Android_Maven/tree/master/Licenses";
        free = false;
      };
      description = ''
        Acoustic Tealeaf is a customer behavioral analytics SDK as documented here. 
      License files can be read here.
      CXA Plugin Description.
      '';
    };
  }) {};

  cacher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cacher";
    plugname = "Cacher";
    plugid = "io.cacher.intellij";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12743/82576/cacher-intellij.zip";
      sha256 = "1542wppjxlwd7g0zrd67mnh89712bzq0zvqvmnmlxi2ddzi2ypj2";
      name = "Cacher-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.Cacher.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.cacher.io/terms";
        free = false;
      };
      description = ''
        The code snippet organizer for pro developers.
      Cacher is a cross-platform, cloud-based app used to curate a snippet library for you and your team.
      This plugin lets you quickly create and insert personal/team snippets without leaving your IDE.

      Plugin Features

      
          Sync code snippets with Cacher -- across web, desktop clients and IDEs.
          
          Quickly find and insert snippets while you're coding.
          Create snippets from files and code selections.
          Enjoy the same code editing experience as your IntelliJ-based IDE.
          Collaborate on project code with your teammates, regardless of IDE/editor preference.
      

      Getting Started

      
          Sign up for a Cacher account at: app.cacher.io
          
              To install the Cacher plugin for your IntelliJ IDE:
              
                  Open your IDE preferences.
                  Select Plugins from the side menu.
                  Click on the Marketplace tab.
                  Search for Cacher.
                  Click the Install button for the Cacher plugin.
              

              
              
              
          
          You will be prompted to setup Cacher by entering your API token and key. You can find them here.
                  
                  
              
              
              
              
          
          Cacher will then load your snippets and make your code available to search.
      

      Finding Snippets

      Via the ToolWindow

      
          Cacher adds an entry to the bottom toolbar of your IDE. Click on it to open the Cacher
                  ToolWindow.
          From here, select a library and/or enter a search query to filter your snippets.
          Double-click the snippet item in the list or use the Insert button on a snippet file to
              insert
              the code into your active editor.
      

      
      
      

      Via Find Snippet Dialog

      Default shortcut: Cmd/Ctrl+Alt+F

      
          Click the Cacher Main Menu item or use the keyboard shortcut.
          From the Find Snippet Dialog, select a library and/or enter a search query to filter your
              snippets.
          Double-click the snippet item in the list or use the Insert button on a snippet file to
              insert
              the code into your active editor.
      

      

      Creating Snippets

      Default shortcut: Cmd/Ctrl+Alt+C

      Via Create Snippet Dialog

      
          Without selecting any text, click the Cacher Main Menu item and select Create
                  Snippet... to open the create snippet dialog.
          Enter a Title and an optional Description.
          Enter a Filename with a file extension (used for syntax highlighting).
          From the footer, select a Library and an optional Label.
          If your team enforces code reviews,
              you'll also need to pick a Code Reviewer.
          Click Save.
      

      

      Via text selection

      
          With text selected in your active editor, right-click the selection to bring up the
              context menu.
          Select Create Snippet from Selection....
          Follow steps 4-6 from the Via Create Snippet Dialog instructions above.
      

      
      
      

      Via active editor tab

      
          With file open and no selected text, right-click the file's editor tab to open up the
              context menu.
          Select Create Snippet from File....
          Follow steps 4-6 from the Via Create Snippet Dialog instructions above.
      

      
      
      

      Refresh Snippets

      Reload your Cacher snippets once you've made a change to your snippets outside of your IDE. You can do this:

      
          Via the Cacher Main Menu.
          Or by clicking on the Refresh button in the Cacher ToolWindow.
      

      
      
      

      Sign in as different user

      To sign-out from the current Cacher user and in as a different user.

      
          Click the Cacher Main Menu item.
          Select Setup...
      

      Change Keyboard Shortcuts

      You can modify the shortcuts for the Find Snippet and Create Snippet commands
          to
          suit your personal needs. Configure them using the IntelliJ Keymap
              preferences.

      Requirements

      The Cacher for IntelliJ plugin is available for registered users on a Pro/Team plan. For a 14-day free trial of
          the
          Team plan, sign up at app.cacher.io. To compare Cacher plans, visit our pricing page.

      Getting Help

      Visit the user guide for
          the plugin to view always up-to-date documentation.

      Find help articles and file support tickets at support.cacher.io.
      '';
    };
  }) {};

  cafebabe = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CafeBabe";
    plugname = "CafeBabe";
    plugid = "CafeBabe";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1810/25507/cafebabe-idea-plugin.zip";
      sha256 = "0d8k3sw92f21izp2kkysax643mri681kh44wassv26ibkw3s4znb";
      name = "CafeBabe-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shvets/cafebabe-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shvets/cafebabe-idea-plugin";
        free = false;
      };
      description = ''
        This plugin integrates CafeBabe Bytecode editor with Intellij IDEA.
      '';
    };
  }) {};

  caiyuntranslationreplace = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CaiyunTranslationReplace";
    plugname = "CaiyunTranslationReplace";
    plugid = "com.zbk.plugin.TranslateAction";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12921/67856/TranslationPlugin.zip";
      sha256 = "06kq4sm8ipmwkz9bvms9r5p7fa76w0g91hm5l4gaq0n7w65q1avr";
      name = "CaiyunTranslationReplace-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ZbkSou";
      license = lib.licenses.asl20;
      description = ''
        Named variables will not spell switch to translation software copy the word cumbersome, directly one-click replacement of English
     Select English and press the shortcut key to prompt for Chinese translation
     Selecting Chinese and pressing the shortcut key will replace it with English
      //todo Multi-word selection in Chinese translation
      '';
    };
  }) {};

  cakestorm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CakeStorm";
    plugname = "CakeStorm";
    plugid = "com.vexus2.cakestorm";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7277/13785/cake-storm.jar";
      sha256 = "167l5safsnhyda1dwaninbysjnw1bki5dsj010a3rlab0376dv6m";
      name = "CakeStorm-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vexus2";
      license = lib.licenses.mit;
      description = ''
        CakeStorm is a PHPStorm plugin for CakePHP developers. 
Provides the ability to easily jump between files. 

 
 
 Ctrl+B(Ctrl+Click) - Go to declaration 
 Ctrl+; S - CakePHP SmartJump 
 Ctrl+; V - CakePHP SmartJump with Vertical Tab 
 Ctrl+; H - CakePHP SmartJump with Horizontal Tab 
 For more details please visit GitHub page 
https://github.com/vexus2/cake-storm
      '';
    };
  }) {};

  call-graph = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Call-Graph";
    plugname = "Call Graph";
    plugid = "call-graph";
    version = "0.1.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12304/90532/call-graph.zip";
      sha256 = "1sw1kwypzxfndp1ly42kx1qgnxvdnp4ja7rd6p31k4ss57n513j3";
      name = "Call-Graph-0.1.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/12304-call-graph";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        A plugin to visualize function call graph of any codebase for IDEs based on the IntelliJ platform.
      The goal is to make codebase extremely easy to understand, necessary for code navigation and debugging.
      Currently it only supports Java. If you want a similar tool for Typescript, Javascript, or Python, I highly recommend Codemap, another tool I built.
      See also:
      
        
          Source code: pull requests are welcome!
        
        
          Demo video: a quick glance of its features.
        
        
          Love this plugin? Please leave a review, or consider
          donation
          to support the developer.
      '';
    };
  }) {};

  camel-case = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Camel-Case";
    plugname = "Camel Case";
    plugid = "com.oboom.plugin.camelcase";
    version = "2020.12.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15417/103710/camel-case.jar";
      sha256 = "1c9j2wa7xjd93i5vdm87s2jxwc0wdxsnjdymi298dnspif8mjffn";
      name = "Camel-Case-2020.12.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/organization/abc";
      license = lib.licenses.gpl3Only;
      description = ''
        Easily convert various cases into the assign case.
Like: foo_bar, fooBar, FooBar, FOO_BAR.
Support custom shortcut keys.
Support multiple block selection.


Recommended plugin: ★Toolset★
A plugin for the IntelliJ-based IDEs, Which can help coding and contains various tools to improve development efficiency.


  ★Plugins★ |
  Manual |
  Issues |
  Email
      '';
    };
  }) {};

  camelcase = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CamelCase";
    plugname = "CamelCase";
    plugid = "de.netnexus.camelcaseplugin";
    version = "3.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7160/98528/camelcaseplugin.jar";
      sha256 = "0dvf5lhwgr91f8pn4cf4kyqw2hl5r8p3mmmfjbh63qill3r3kj4c";
      name = "CamelCase-3.0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://netnexus.de?src=camelCase";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/netnexus/camelcaseplugin";
        free = false;
      };
      description = ''
        Switch easily between kebab-case, SNAKE_CASE, PascalCase, camelCase, snake_case or space case. See Edit menu or use ⇧ + ⌥ + U / Shift + Alt + U.

      Allows to disable some conversions or change their order in the preferences.
      '';
    };
  }) {};

  camelcase-pascalcase-converter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CamelCase-PascalCase-Converter";
    plugname = "CamelCase PascalCase Converter";
    plugid = "com.unique.plugin.CamelCasePascalCaseConvert";
    version = "1.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10968/48135/CamelCasePascalCaseConverter.jar";
      sha256 = "1nvd3wdchgalzfyqr0cv55895bgm4fklyzzs4vgsv1sidd5ascn3";
      name = "CamelCase-PascalCase-Converter-1.01.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/markhuang19994/CamelCasePascalCaseConverter";
      license = lib.licenses.mit;
      description = ''
        CamelCase PascalCase Convert Plugin
      
      Instruction:
            1.If selected text contains "_", text convert to pascal case, else convert to camel case.
            2.How to trigger: ctrl + shift + alt + Y or Code -&gt; Convert name style.
            3.Example: camelCase =&gt; Camel_Case, Pascal_Case =&gt; pascalCase
            4.Complex Example: a12B3C =&gt; A_12_B_3_C, A_12_B_3_C =&gt; a12B3C
      '';
    };
  }) {};

  cameltoggle = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CamelToggle";
    plugname = "CamelToggle";
    plugid = "com.puyixiaowo.cameltoggle";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10764/47596/CamelToggle-1.0.1.jar";
      sha256 = "03i828361rlvrd4lsz705jrcc9nvpvw1zbcc98smxrjfss0mj66s";
      name = "CamelToggle-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ysdxz207/CamelToggle";
      license = lib.licenses.asl20;
      description = ''
        Toggle camel case with CTRL + SHIFT + X.
      '';
    };
  }) {};

  candykai-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Candykai-Color-Scheme";
    plugname = "Candykai Color Scheme";
    plugid = "color.scheme.Candykai";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14418/87692/Candykai.jar";
      sha256 = "19lv8aqsmfvidqcizczm9w9vdf04fyxgn9mxwm4pya7j9imik633";
      name = "Candykai-Color-Scheme-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://anewlevelmedia.com";
      license = lib.licenses.asl20;
      description = ''
        This is a mashup of two other popular color schemes: Dark Candy &amp; Monokai Pro.
      '';
    };
  }) {};

  carbon = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Carbon";
    plugname = "Carbon";
    plugid = "com.fernandojimenez.mattecarbon.theme";
    version = "3.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12280/75301/CarbonTheme.jar";
      sha256 = "12w324lzxi2glw7yknigfw6w3icdj9yc6mzkv3p15ka9dxci0nxh";
      name = "Carbon-3.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/luisfer0793";
      license = lib.licenses.asl20;
      description = ''
        A minimalist dark theme using comfortable UI colors.
      '';
    };
  }) {};

  cargo-watch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Cargo-Watch";
    plugname = "Cargo Watch";
    plugid = "cargowatch";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10992/48494/cargowatch.jar";
      sha256 = "1faj714n4v0z1f96rg3xa03f3qfly3qvjxzslmxl9mf86i9garar";
      name = "Cargo-Watch-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vxx1";
      license = lib.licenses.mit;
      description = ''
        Run `cargo watch`
      '';
    };
  }) {};

  casbin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Casbin";
    plugname = "Casbin";
    plugid = "io.github.will7200.plugins.casbin";
    version = "0.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14809/105557/casbin-idea-plugin-0.1.3.zip";
      sha256 = "1q4xwaa39lwnjxrp3ph3pc5vajqg0is9cilrlff7q65c9ajy6hvc";
      name = "Casbin-0.1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/will7200";
      license = lib.licenses.bsd3;
      description = ''
        Support for Casbin models and evaluating policies.
    
    Features
Coding assistance for Casbin Models (highlighting, completion, formatting, refactorings, etc.)
Goto declaration support for object attributes
Support for parsing Casbin CSV Policy Definitions
Tool Window for interactive evaluation of policies. Auto reloads interactive model on file changes.
      '';
    };
  }) {};

  case-conversion = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Case-conversion";
    plugname = "Case conversion";
    plugid = "me.laria.code.idea_caseconv";
    version = "0.7.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10985/98661/idea_caseconv-0.7.1.jar";
      sha256 = "1yhw1i8kdym4wrgcfbx5345kfmb4sy5b9a813mvycq8rn11dfx79";
      name = "Case-conversion-0.7.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.laria.me";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://git.laria.me/idea_caseconv/plain/license";
        free = false;
      };
      description = ''
        Convert between cases.
      The Plugin provides actions to convert to the following cases:
      
        snake_case
        dash-case
        camelCase
        PascalCase
        SCREAMING_SNAKE_CASE
        UPPER CASE
        lower case
        fLIP cASE
        Title Case
        Sentence case
        dot.case
      
      How to use:
      Select the text you want to convert and then invoke the desired action. There are multiple ways to do this:
      
      Use the menu bar: The actions of this plugin can be found in “Edit” &gt; “Convert Case”
      Use the Find Action feature: Bring up the “Find Action” search dialog (default keyboard shortcut is Ctrl+Shift+A) and type the name of the desired convert action (or type “Convert Case” to see all actions). Tip: This search uses fuzzy matching so you can just type “camcas” for “Convert Case: camelCase”.
      Create a keyboard shortcut: Open Settings &gt; Keymap and search for “Convert Case” and create a keyboard shortcut for the desired action.
      
      You can configure how newlines should be treated: Go to "Settings" &gt; "Tools" &gt; "Case conversion". The setting "Treat newline as" has these two options:
      
        White space
        Treat newline like other whitespace (i.e. as a word separator)

        Record separator
        Treat newline as a record separator. This converts every line individually
      '';
    };
  }) {};

  celestial = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Celestial";
    plugname = "Celestial";
    plugid = "re.bizar.celestial";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14630/90497/celestial.jar";
      sha256 = "168q6vgr46jfkkcmcmib2yyff96spvr320kmgb13nm12y7q3kmxp";
      name = "Celestial-0.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bizarre";
      license = lib.licenses.asl20;
      description = ''
        Jetbrains IDE theme for all the people who love to code in deep dark spaces.
      '';
    };
  }) {};

  cell-dark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Cell-Dark-Theme";
    plugname = "Cell Dark Theme";
    plugid = "ru.paracells.cell.theme";
    version = "1.02.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15022/96739/CellDarkTheme.jar";
      sha256 = "0rhq9nzapmc8cf5kg30n6h6ryys0rbgr9x94dzkqzq452wz9xxq7";
      name = "Cell-Dark-Theme-1.02.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Paracells/celldarktheme";
      license = lib.licenses.asl20;
      description = ''
        About
    
    Simple Dark Theme, inspired Plane Theme, Godot Theme
      '';
    };
  }) {};

  certificate-decoder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Certificate-Decoder";
    plugname = "Certificate Decoder";
    plugid = "dev.johnwatts.CertificatePlugin";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13623/107422/CertificatePlugin-1.0.4.zip";
      sha256 = "0zh8yzm7jsyx4ds99j0fp7ls6a0z5rsvf3q38wqzqfdi9x4pfrnz";
      name = "Certificate-Decoder-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.johnwatts.dev";
      license = lib.licenses.mit;
      description = ''
        Decodes Base64 X509 Certificates and displays some of the information contained in the certificate.
    First tries to decode any selected text; if that fails:
    Looks in the editor window for a PEM formatted cert to decode
    Also checks whether encryption / decryption works for a given key pair.
      '';
    };
  }) {};

  ceylon-ide = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ceylon-IDE";
    plugname = "Ceylon IDE";
    plugid = "org.intellij.plugins.ceylon.ide";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8625/38028/CeylonIDEA.zip";
      sha256 = "0vc35wwg5d134n7rw8irsvswd1d39f2zma2n2qz1qazsbpy07f54";
      name = "Ceylon-IDE-1.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ceylon-lang.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ceylon/ceylon-ide-intellij/blob/master/LICENCE";
        free = false;
      };
      description = ''
        Provides support for the Ceylon programming language
      '';
    };
  }) {};

  change-list-eclipse-code-formatter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Change-List-Eclipse-Code-Formatter";
    plugname = "Change List Eclipse Code Formatter";
    plugid = "eclipse-code-formatter-on-change-list";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6566/11472/eclipse-code-formatter-on-change-list.jar";
      sha256 = "0h8qddlngd8wyjp3p4q9rynx2zas4vhzwfib2nlpas4bafk3b403";
      name = "Change-List-Eclipse-Code-Formatter-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/eclipse-code-formatter-on-change-list";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/eclipse-code-formatter-on-change-list";
        free = false;
      };
      description = ''
        Invokes (external) Eclipse code formatter on affected files from VCS changelist.
      '';
    };
  }) {};

  changelist-action = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Changelist-Action";
    plugname = "Changelist Action";
    plugid = "changelist-action";
    version = "1.8.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5015/9317/changelist-action_9317.jar";
      sha256 = "01mcpb66241g9hh0v4q8ndvqpsv57xnacg71rlnxxy900jdp37nl";
      name = "Changelist-Action-1.8.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/changelistaction";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/changelistaction";
        free = false;
      };
      description = ''
        Invokes (external) user action on affected files from VCS changelist.
      '';
    };
  }) {};

  changelist-organizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Changelist-Organizer";
    plugname = "Changelist Organizer";
    plugid = "de.achimonline.changelistorganizer";
    version = "1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9216/105912/changelistorganizer-1.9.zip";
      sha256 = "1sjsxj9gi8izsplh9hvxhnwf9ai2zmr466c7c56d9bns9x8m75pa";
      name = "Changelist-Organizer-1.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/space/index?pr=idea&lg=4ch1m";
      license = lib.licenses.gpl3Only;
      description = ''
        Automatically organizes your modified files by moving them into predefined changelists.
      '';
    };
  }) {};

  changelist-popup = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Changelist-Popup";
    plugname = "Changelist Popup";
    plugid = "com.kablemonck.idea.plugins.ChangeListPopup";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13737/76906/switch-changelist.jar";
      sha256 = "1d8d1f5sfkzdi3l4wa38fwapliiak98p603wh09d7iylm73g548y";
      name = "Changelist-Popup-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/KableM/ChangelistPopup";
      license = lib.licenses.asl20;
      description = ''
        A popup and status bar widget to quickly manage version control changelists.
      Activate via the default keyboard shortcut control + alt + F3 (Mac: command + option + F3)
      '';
    };
  }) {};

  character-browser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Character-Browser";
    plugname = "Character Browser";
    plugid = "Character Browser";
    version = "0.3.0-Demetra";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/203/915/Character_Browser_915.zip";
      sha256 = "0wywwmgvrjc4jsalshhjfy2lyw3b489whsmr0zaxgkipwki10x27";
      name = "Character-Browser-0.3.0-Demetra.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin allows you to browse and search characters and parts of the Unicode" character set. Insert
        characters into an editor in one of 10 forms. Decodes coded characters at the cursor position.
      '';
    };
  }) {};

  charj = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Charj";
    plugname = "Charj";
    plugid = "com.phodal.charj";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15119/104758/Charj-0.1.1.zip";
      sha256 = "0icwmklacvm88bgvpzppj72wx6l722znv5fnhp1wk97facbv80yj";
      name = "Charj-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        The languages plugins for Charj language. It can highlight code, generate stucture, and others.
      '';
    };
  }) {};

  chdapisearch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ChdApiSearch";
    plugname = "ChdApiSearch";
    plugid = "com.dxy.platform.plugin.chd.api.search";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13656/93993/ChdApiSearch.jar";
      sha256 = "0q0qd4vaqixbdpzv5qvbcqrsni0v228d2jfbamc1fxbzg1npmkib";
      name = "ChdApiSearch-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mama.dxy.com/app";
      license = lib.licenses.mit;
      description = ''
        A chd-api navigation plugin.
	        Features:
            
            ChdRestAnnotation support
              
                @PlatformRestGet
                @PlatformRestPost
                @PlatformRestGetPost
      '';
    };
  }) {};

  check-in-policies-for-tfs-team-foundation-server = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Check-In-Policies-for-TFS-Team-Foundation-Server";
    plugname = "Check-In Policies for TFS (Team Foundation Server)";
    plugid = "Check-In Policies for TFS (Team Foundation Server)";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9985/38250/TFSCheckinPolicies.jar";
      sha256 = "1cwizdhq7vqjyg12fskvyw30cy7c1n06bzkfhp9qf3zlnh4y0c54";
      name = "Check-In-Policies-for-TFS-Team-Foundation-Server-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin implements the following TFS Check-In Policies: 
 
 
 CheckForCommentsPolicy.CheckForComments 
 Microsoft.TeamFoundation.VersionControl.Controls.WorkItemPolicy 
 
 It provides a more "Out of the box" experience for the work with the TFS Integration Plugin
      '';
    };
  }) {};

  check-my-vars = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Check-My-Vars";
    plugname = "Check My Vars";
    plugid = "Check My Vars";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3711/6152/Check_My_Vars_6152.jar";
      sha256 = "0pbm23l5zb084mv1swbksw2mqakki486if8v5g8ykpqq2b7jgq95";
      name = "Check-My-Vars-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/idea-check-my-vars";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/idea-check-my-vars";
        free = false;
      };
      description = ''
        Generate code according to Annotation
        
        Configure template to generate code depending on annotation and
        type of parameter.
        For example, code like:
        public void minMaxNumber(@MinMax(min = 1, max = 5)int nb) {
        }
        
        Can generate this:
        public void minMaxNumber(@MinMax(min = 1, max = 5)int nb) {
            if (nb  5) {
                throw new IllegalArgumentException("nb value must be between 1 and 5 (inclusive)");
            }
        }
        
        
        
        Action is available under "Generate..." menu.
        On first use, the plugin will ask you to generate a sample if it found nothing to generate.
        
        
        Future release will include a support for javadoc tag as an alternative to Annotation,
        so JDK 1.4 or earlier users can use this plugin
      '';
    };
  }) {};

  check-tests = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Check-Tests";
    plugname = "Check Tests";
    plugid = "com.dacatech.checktests";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7378/15019/checktests.zip";
      sha256 = "04s3gfrv62b180dkk52j5v3zs1cvhy9c03zyhcms71sndclhazqj";
      name = "Check-Tests-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/davearata/checktests";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/davearata/checktests";
        free = false;
      };
      description = ''
        Using the IntelliJ index this plugin will find usages on file(s) you have selected with right click or you are going to commit and try to find TestClasses that are being referenced. You will then be asked if you would like to run the tests.
      '';
    };
  }) {};

  check-for-dependency-updates = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Check-for-Dependency-Updates";
    plugname = "Check for Dependency Updates";
    plugid = "tarn.gradle.dependencies";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14243/104630/gradle-dependencies-checker-1.3.zip";
      sha256 = "0x01i0ab1zq1hb6f9qvmcwk98xld32m37kp7nrcxkwwjcd1mmxia";
      name = "Check-for-Dependency-Updates-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tarn2206";
      license = lib.licenses.asl20;
      description = ''
        Check gradle projects dependencies for version upgrades.
      '';
    };
  }) {};

  checkmate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CheckMate";
    plugname = "CheckMate";
    plugid = "com.thomas.checkMate";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8157/41089/CheckMate.jar";
      sha256 = "0fnrk3rw1bx9qann3j8cyz303sijlyh1xlkjaq9yw4qfql3qxmv2";
      name = "CheckMate-2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ThomasGoris/CheckMate";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ThomasGoris/CheckMate";
        free = false;
      };
      description = ''
        Alt+U (Shift+Alt+U for Mac OS X) to discover unchecked exceptions that might be thrown in the statements you selected.

 Create or update a try catch statement based on the exceptions you selected.
 Customize the search process through the settings menu (Ctrl+Alt+S: find CheckMate).
      '';
    };
  }) {};

  checkmate-security-analysis = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CheckMate-Security-Analysis";
    plugname = "CheckMate Security Analysis";
    plugid = "com.github.adedayo.intellij.checkmate-plugin";
    version = "0.1.10-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14541/96298/intellij-checkmate-plugin-0.1.10-SNAPSHOT.zip";
      sha256 = "1151qj7cv89sxy8707l3bgdbq92nyz4jx6f5azk9h0ydbgm0jdwb";
      name = "CheckMate-Security-Analysis-0.1.10-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/adedayo";
      license = lib.licenses.bsd3;
      description = ''
        A Security Analysis Plugin for the IntelliJ IDE. Find flaws in your codebase, such as hardcoded secrets
      much more quickly so you could fix them early in your software development lifecycle.
      '';
    };
  }) {};

  checkstyle-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CheckStyle-IDEA";
    plugname = "CheckStyle-IDEA";
    plugid = "CheckStyle-IDEA";
    version = "5.46.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1065/107192/CheckStyle-IDEA-5.46.0.zip";
      sha256 = "125plr4fl8xddmr44kby1pk5m653jrrvv0b3zsqpf9gq5q8l81va";
      name = "CheckStyle-IDEA-5.46.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jshiell/checkstyle-idea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jshiell/checkstyle-idea/blob/master/LICENCE";
        free = false;
      };
      description = ''
        This plugin provides both real-time and on-demand scanning
    of Java files with CheckStyle from within IDEA.


    Please note this is not an official part of Checkstyle - they neither endorse
    nor bear responsibility for this plugin. Please see the README for full details.
      '';
    };
  }) {};

  checksum-dropper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Checksum-Dropper";
    plugname = "Checksum Dropper";
    plugid = "com.mhdthasneemp.shahasher.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11464/53998/SHA_Hasher.zip";
      sha256 = "0y71fhr5zh18s07wyhrl65ga443v5560lx4y8y43aijyidm9y3rg";
      name = "Checksum-Dropper-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/thasneemp";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gist.githubusercontent.com/thasneemp/cad5a23f1dc2f576319cc5acd681fadb/raw/b7151bdc66c2a65b7cb0166a61f72488df2a2b66/licence";
        free = false;
      };
      description = ''
        md5sum is a computer program that calculates and verifies 128-bit MD5 hashes
      The MD5 algorithm is a popular hash function that generates 128-bit message digest
      referred to as a hash value, and when you generate one for a particular file,
      it is precisely unchanged on any machine no matter the number of times it is generated.
      * Checksum.
      * File size.
      * File Drag and Drop functionality.
      '';
    };
  }) {};

  chinese-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Chinese-Converter";
    plugname = "Chinese Converter";
    plugid = "org.arxing.chinese_converter";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13559/74990/ChineseConverter.zip";
      sha256 = "0ikwrpkh3gapx3z4q0yqbi9v9ig5xh2hx6w5w5pz1v85jfvy368r";
      name = "Chinese-Converter-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Arxing/Plugin-ChineseConverter-Gradle";
      license = lib.licenses.asl20;
      description = ''
        Chinese Converter is a tool for translating between Traditional Chinese and Simplified Chinese via hotkeys without any GUI, it is more convenient, simple and fast. You can translate easily in just two steps.
    
        Select a piece of text.
        Press Ctrl+Alt+1, the text you selected will be translated into Traditional Chinese, or press Ctrl+Alt+2 to translate into Simplified Chinese.
      '';
    };
  }) {};

  chinese-simplified-language-pack-- = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Chinese-Simplified-Language-Pack--";
    plugname = "Chinese (Simplified) Language Pack / 中文语言包";
    plugid = "com.intellij.zh";
    version = "203.564";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13710/108512/zh.203.564.jar";
      sha256 = "0kk5sx05x9xc0naxyh1lk481h30g654ff3rnp6l4b1hnnism1df9";
      name = "Chinese-Simplified-Language-Pack---203.564.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Adds Chinese as the IDE interface language.It’s an EAP version, we’re making it better everyday. At the moment partial localization is available.Your feedback is very much appreciated. You can submit it directly from the IDE or via YouTrack either in English or Chinese.添加中文作为 IDE 界面语言。这是一个早期试用计划（EAP）版本，我们正在逐步完善当中。目前部分的本地化内容已经完成。您的反馈至关重要。您可以直接通过 IDE 或者 YouTrack 以中文或者英文的形式提交您的反馈。
      '';
    };
  }) {};

  chinesepinyin-codecompletionhelper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ChinesePinyin-CodeCompletionHelper";
    plugname = "ChinesePinyin-CodeCompletionHelper";
    plugid = "com.github.tuchg.nonasciicodecompletionhelper";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14838/106728/ChinesePinyin-CodeCompletionHelper-0.1.4.zip";
      sha256 = "09l50ml8dbqy9dap39xqvpmvblbnqhkpa3269jysm1qid6sjrpc1";
      name = "ChinesePinyin-CodeCompletionHelper-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tuchg";
      license = lib.licenses.gpl3Only;
      description = ''
        Github | Issues


English

The original intention is that for some businesses that are not suitable for expression in English, you can use a straightforward native language instead of pinyin, and then call what is expressed in your native language as you usually write code to solve some naming difficulties 🤔

Let your IDE support Chinese programming, and enjoy the Chinese intelligent coding experience consistent with the English environment

Input pinyin completion. Chinese identifier will be shown below. Input zw and prompt 中文 [Zhong Wen].Polyphonic words complete without differenceSupport all identifiers, including variable names, function names, and class names

Compatible with all the Intellij Platform product, indiscriminate Chinese programming, Java, Kotlin, JavaScript, C#，Golang, or Haskell all support...

为啥这里会有一段不符合插件受众的别扭英文介绍💬  #issues-5

中文


初衷在于，一些业务上不太适合用英语表达的，可以用上直白的母语而非拼音，然后像平常写代码那样去调用母语所表达的东西，解决部分命名困难症🤔

让你的 IDE 支持中文编程，享受和英文环境一致的中文智能编码体验

拼音输入补全，如上下文存在 中文 标识符, 输入zw，则会补全提示中文【ZhongWen】多音字无差别补全函数名，变量名，类名 ．．．等标识符，只要能用中文标识的通通都支持支持双拼，五笔等各式输入方法（未来某版本发布✅）

兼容JB 全家桶，无差别中文编程，无论是 Java,JavaScript,Golang,Python,C#,Kotlin,C 艹 亦或者 Haskell 等等通通都支持....




提示：当提示 no ascii时，可按提示电灯泡关闭该提示

如果对您有所帮助，别忘了给本项目Github主页一颗Star😁

其他平台类似支持

中文代码快速补全 VS Code 插件
      '';
    };
  }) {};

  choose-runtime = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Choose-Runtime";
    plugname = "Choose Runtime";
    plugid = "com.jetbrains.ChooseRuntime";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12836/97390/ChooseRuntime-1.2.zip";
      sha256 = "1glfalzs844wl4crxlsm6xm5rldnc1y15szxr0f6p3lh7v93zmh8";
      name = "Choose-Runtime-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ IDEA includes JetBrains Runtime. It is recommended to run IntelliJ IDEA using JetBrains Runtime,
      which fixes various known OpenJDK and Oracle JDK bugs, and provides better performance and stability.
      But in some cases you may be required to use another Java runtime or a specific version of JetBrains Runtime.
      
        More info
      '';
    };
  }) {};

  chromaterial = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ChroMATERIAL";
    plugname = "ChroMATERIAL";
    plugid = "com.facebook.rucinskic.chromaterial";
    version = "2.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7998/41971/ChroMATERIAL.jar";
      sha256 = "1ygg32a0y5ywlzc5j0h77lmvf2ynmyb1ls69yhpm4rfs3k0p21y8";
      name = "ChroMATERIAL-2.5.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ciscorucinski/ChroMATERIAL";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ciscorucinski/ChroMATERIAL/blob/master/LICENSE";
        free = false;
      };
      description = ''
        ChroMATERIAL is a color scheme that expresses the chromatic nature of Material Design within IntelliJ and Android Studio. In particular, ChroMATERIAL focuses on syntax highlighting of code within the IDE's code editor. It's uniqueness lies in the idea of "enhance influence, not banality" 
 
 Color Schemes: Default (dark), Darcula-compatible, Darker 
 Supported Languages: Java, Kotlin, Groovy, XML, JSON, HTML, Regex, YAML 
 Supported Features: Android, Android Manifest, Android Resources, Android Native (C / C++), Gradle, Logcat, Files, Property Files, Version Control, Debugger, Diff, XSLT, XPATH, Ignore Files*, Markdown*  
 
* - via Plugin
      '';
    };
  }) {};

  chronomorph = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Chronomorph";
    plugname = "Chronomorph";
    plugid = "io.paleocrafter.chronomorph";
    version = "2020.1-1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10997/85825/Chronomorph-2020.1-1.0.1.zip";
      sha256 = "1ar68873vbfvhflddnnx354ws7vp1ajw8vzin1b442j0z28rz1m9";
      name = "Chronomorph-2020.1-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/PaleoCrafter/Chronomorph";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/PaleoCrafter/Chronomorph/blob/master/license.txt";
        free = false;
      };
      description = ''
        Automatically switches the IDE theme and color scheme based on the time of day.
      '';
    };
  }) {};

  circle-ci = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Circle-CI";
    plugname = "Circle CI";
    plugid = "com.pixelperfect.circle-ci";
    version = "1.0.4-203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15458/108001/circle-ci-1.0.4-203.zip";
      sha256 = "0vnh43rjb4g6hlcd3chh8dsv8v32vb0iw9ijxvl710i9fabi15m1";
      name = "Circle-CI-1.0.4-203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        List pipelines from your Circle CI projects. Check status, trigger pipelines and abort steps.

    Plugin is shown as a tool panel named "Circle CI".
      '';
    };
  }) {};

  circleci = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CircleCI";
    plugname = "CircleCI";
    plugid = "com.circleci.intellij";
    version = "0.0.14.135";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13690/107237/intellij-circleci-0.0.14.135.zip";
      sha256 = "04cbns69kkjj4iydwmmqi4i7vygzbbaqkhj459m895w9zswyz8vi";
      name = "CircleCI-0.0.14.135.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.circleci.com";
      license = lib.licenses.mit;
      description = ''
        Provides integration with CircleCI.
    Tries to optimize development flow by:
    
        Reducing time to notice pipeline failure
        Reducing time to get to the cause of pipeline failure
      '';
    };
  }) {};

  cirrus-tooling = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Cirrus-Tooling";
    plugname = "Cirrus Tooling";
    plugid = "dev.simplix.tooling";
    version = "1.0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15194/103557/Cirrus-1.0.11-shadow.jar";
      sha256 = "1lf6z4xj2px5g6l23xh8wk3a32s85kjb6szfx6b5rwyncrv0xyzy";
      name = "Cirrus-Tooling-1.0.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Cirrus Tooling is a plugin for IntelliJ that helps 

developers using Cirrus.

Demonstration: 




Proudly inspired by KotlinBukkitAPI-Tooling.
      '';
    };
  }) {};

  citrus-burst = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Citrus-Burst";
    plugname = "Citrus Burst";
    plugid = "com.0xPB.citrusburst.jetbrains";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15693/106449/citrus_burst.jar";
      sha256 = "1q1wxjirj0nl5gy6b1zjfmiy4gkc71qfdsircj27hmz1aq78w37p";
      name = "Citrus-Burst-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/0xPB";
      license = lib.licenses.mit;
      description = ''
        A dark color theme that aims to be easy on the eyes
      '';
    };
  }) {};

  clangformatij = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ClangFormatIJ";
    plugname = "ClangFormatIJ";
    plugid = "io.probst.idea.clangformat";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8396/45619/ClangFormatIJ.jar";
      sha256 = "05ha1iz5vw00z0m2n9qfibmdy1z3dmx0laf3jjms9l8l1zmiky48";
      name = "ClangFormatIJ-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.probst.io";
      license = lib.licenses.asl20;
      description = ''
        Runs clang-format on the statement or selection. 
clang-format is a versatile and beautiful formatter for C++, proto, Java, JavaScript, and TypeScript. 
This plugin does not contain clang-format itself, you must install it separately. clang-format is available in e.g. npm, or homebrew for Mac. This plugin also has no configuration, please use the regular .clang-format mechanism. 
If you are using Mac OS X and have trouble getting it to run, please make sure to set your PATH environment in ''$HOME/.profile. Mac OS X seems to ignore $HOME/.bash_profile for applications launched from the Finder.
      '';
    };
  }) {};

  class-breakpoint-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Class-Breakpoint-Plugin";
    plugname = "Class Breakpoint Plugin";
    plugid = "com.yourcompany.classbreaskpoints.plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7464/16124/breakpointsPlugin.jar";
      sha256 = "0kda3krs6qz66mj68rvdx0i1vzqqnrf4gc2mywzcnjwsqhrhrw48";
      name = "Class-Breakpoint-Plugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.yourcompany.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.yourcompany.com";
        free = false;
      };
      description = ''
        Enter short description for your plugin here.
 
most HTML tags may be used
      '';
    };
  }) {};

  class-decompile = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Class-Decompile";
    plugname = "Class Decompile";
    plugid = "cn.mrdear.intellij.class-decompile-intellij";
    version = "0.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13914/104571/class-decompile-intellij-0.0.8.zip";
      sha256 = "1243dindqkvy5qz01r68c6c0h4y0v39v2gsfv3w21c3vn09kkfn6";
      name = "Class-Decompile-0.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mrdear.cn";
      license = lib.licenses.asl20;
      description = ''
        use javap &amp; asm &amp; cfr decompile .class file and show.
        source code in class-decompile-intellij base on asm-bytecode-intellij
      '';
    };
  }) {};

  classcopier = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ClassCopier";
    plugname = "ClassCopier";
    plugid = "com.shumyk";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12873/67293/ClassCopier.jar";
      sha256 = "0lz0j9i6xdxgb4baxvrscpqwxg3w4brd0j02jivfy647hyz55cr8";
      name = "ClassCopier-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Shumyk";
      license = lib.licenses.mit;
      description = ''
        Helps to copy .class files into working directory of changed files.
      It checks changed files in VSC and then searches for compiled classes in compiler output folder and copies to location of changed files.
      '';
    };
  }) {};

  classes-export-one-by-one = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Classes-Export-One-By-One";
    plugname = "Classes Export One By One";
    plugid = "com.classes.export.plugin.id";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7625/18036/ClassesExportOneByOne.jar";
      sha256 = "0lmifn1yhpqvfp83hc33i7rdz0127dd1bp9ls4y19f78g04x0bjq";
      name = "Classes-Export-One-By-One-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://tonycody.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://tonycody.github.io";
        free = false;
      };
      description = ''
        Export specified class file into a specified directory, easy to project a single or multiple separate class file updates.
      '';
    };
  }) {};

  classic-icon = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Classic-Icon";
    plugname = "Classic Icon";
    plugid = "ClassicIcon";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8426/32369/ClassicIcon-1.3.zip";
      sha256 = "1iriirabif8b8l3iv3pfbbbsickd73mjw65lmm2rjsn7xg8q84mc";
      name = "Classic-Icon-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/retomerz";
      license = lib.licenses.mit;
      description = ''
        I Want The Classic IntelliJ IDEA Application Icon Back.
 Or specify a custom icon in IDEA_HOME\bin\idea.properties
 

 Unix: "classic.icon=/path/to/my/icon.png"
  Windows : "classic.icon=c:\\path\\to\\icon.png" (use two '\' as file separator)
 Supported products  
AppCode 
CLion 
DataGrip 
IntelliJ IDEA 
PhpStorm 
PyCharm 
Rider 
RubyMine 
WebStorm
      '';
    };
  }) {};

  classpath-complete = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Classpath-Complete";
    plugname = "Classpath Complete";
    plugid = "Classpath Complete";
    version = "0.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1214/3152/Classpath_Complete_3152.zip";
      sha256 = "1nazg8qbpr10pagq3bh7wfj4g7qsnjdys8z4wb6cfw8ybfmfmb3n";
      name = "Classpath-Complete-0.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1214/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1214/sourceCode.zip";
        free = false;
      };
      description = ''
        You don't have to remember which jar file contains
      which class file any more. This plugin searches all the jar files and their contents on the computer. This
      process actually takes 4-5 minutes depending on the storage capacity of the your computer.
      The plugin can add needed jar files to the classpath of the working module automatically using this
      information. 
      Bye bye "cannot resolve symbol" or "ClassNotFoundException" errors:).
      This is a beta version.
      '';
    };
  }) {};

  clean-architecture-for-flutter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clean-Architecture-for-Flutter";
    plugname = "Clean Architecture for Flutter";
    plugid = "de.tyxar.clean_architecture_plugin";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13470/74083/clean_architecture_plugin-1.1.0.zip";
      sha256 = "0m4050jp9f795cc1dqgfzmc0kmhbafgl3qs1ni8hxb81pbx8g4d5";
      name = "Clean-Architecture-for-Flutter-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://rantzen.net";
      license = lib.licenses.mit;
      description = ''
        Adds a generator to the New context menu to create the Clean-Architecture folder structure for a given feature.
      '';
    };
  }) {};

  clean-code-inspections = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Clean-Code-Inspections";
    plugname = "Clean Code Inspections";
    plugid = "me.maiyuan.cleancode";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10675/45433/CleanCodeInspections.jar";
      sha256 = "0khdvdlcsw4lpb7163xki088n9f2r0nq5z0fkyhr3xjww0bijgx9";
      name = "Clean-Code-Inspections-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.maiyuan.me";
      license = lib.licenses.mit;
      description = ''
        A few clean code inspections.
      '';
    };
  }) {};

  clean-code-method-rearranger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clean-Code-Method-Rearranger";
    plugname = "Clean Code Method Rearranger";
    plugid = "com.jucham";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11005/80772/CleanCodeMethodRearranger-0.4.zip";
      sha256 = "03r7lv81p5cf8hn1b15sfd1lpc8njda7zba8fdlg3xpcm49vg359";
      name = "Clean-Code-Method-Rearranger-0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jucham/clean-code-method-rearranger";
      license = lib.licenses.mit;
      description = ''
        Rearranges the methods in Java classes according to the Robert C. Martin's Step-down Rule.
      Features :
      
         Rearranges methods of Java classes
         Supports inner classes
      '';
    };
  }) {};

  clear-cache = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Clear-Cache";
    plugname = "Clear Cache";
    plugid = "ClearCachePlugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12173/60110/ClearCache.jar";
      sha256 = "02fd1w5v3agxa84b9brkl2ry95fzcav33rxfd6rzg2mxbb9v66z8";
      name = "Clear-Cache-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/harisudhan7889/ClearCachePlugin";
      license = lib.licenses.asl20;
      description = ''
        Your project's cache will be stored in your .gradle folder. To remove your caches you have to traverse through the folders, which is really a time consuming activity.
        An Idea to automate these process paved way for this plugin. Below are the steps to remember after installation.
        
            After installation, do not forget to restart your android studio.
            Now you would see one more item added in the tools menu named as Clear Cache.
            If you select the Clear Cache menu item a popup will be displayed.
            You will get all the packages with the package prefix given.
            Select the package/packages to delete and click delete.
            See Github for more details.
      '';
    };
  }) {};

  clear-dependencies = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Clear-Dependencies";
    plugname = "Clear Dependencies";
    plugid = "info.rayden.voldeskine.dependencies";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13859/79561/ClearDependencies.jar";
      sha256 = "1w6i8z6kcjb98ngdkrfns1vplxzfsk2algd1640kya405csy30ak";
      name = "Clear-Dependencies-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/raydenvoldeskine/clear-dependencies-plugin-kt";
      license = lib.licenses.mit;
      description = ''
        As we all know, optimal dependencies between classes, packages, components etc. are essential for the life and survival of the software product. Yet we naturally spend most of our developent time looking at code, as dependencies were barely existing. But they do, and, oh boy, how the do it. When not being taken care of, they grow and grow in count, assuring us hard hours and days spent trying to refactor.

What's in for me?

This plugin aims to reveal your dependencies during coding, so you'd get a chance to take care of them appropriately. Consider following practical cases:

Dependency that should not be there Surprising class depends on yours Cyclic dependencies considered generally evil, except for the classes in the same package 

How does it look like?

It's an additional panel you can activate:




Availability

Current version support Java Android projects only. Chances are more support follows, as far as I add some more dependencies to this project.
      '';
    };
  }) {};

  clear-ignore-this-update = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clear-Ignore-This-Update";
    plugname = "Clear Ignore This Update";
    plugid = "com.github.shiraji.clearignorethisupdate";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8350/26407/Clear_Ignore_This_Update-1.0.1.zip";
      sha256 = "0swh7lm1px0p2qmnp775y2amv3v9lrh19hvyx7i93dsz1q27g8k4";
      name = "Clear-Ignore-This-Update-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = lib.licenses.asl20;
      description = ''
        Too scaled to press "Ignore This Update" button? This is the plugin that undo pressing "Ignore This Update"
      '';
    };
  }) {};

  clear-vcs-message-on-commit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Clear-VCS-message-on-commit";
    plugname = "Clear VCS message on commit";
    plugid = "com.markotanic.deleteVCSMessage";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10966/48399/ClearVCSMessage.jar";
      sha256 = "1frcqqvhgg54qnjhnh3iwi40fgsix4jihcpv5h557hdfzisnd5a5";
      name = "Clear-VCS-message-on-commit-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/protector1990";
      license = lib.licenses.bsd2;
      description = ''
        Plugin that clears commit message from commit window after a successful commit.
	  
	  After installation, plugin will be enabled by default. To toggle it on and off, use VCS (menu) -&gt; Clear message on successful commit
      '';
    };
  }) {};

  clearcase-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ClearCase-Integration";
    plugname = "ClearCase Integration";
    plugid = "JBClearcasePlugin";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10095/45709/ClearCaseIntegration.jar";
      sha256 = "0byrqlhavfs81nx7d8wyn02m36x5fhykh9rc2py76dv70wijbsc4";
      name = "ClearCase-Integration-2.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/clearcase";
      license = lib.licenses.asl20;
      description = ''
        Allows working with 
Rational ClearCase version control system. The following features are available: 
 
 Dedicated page under the Version Control node in the Settings/Preferences dialog. 
 When ClearCase is enabled, the ClearCase node appears on the VCS menu, and on the context menu of the editor. 
 The plugin support is 
discontinued since October 17, 2017
      '';
    };
  }) {};

  clock = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clock";
    plugname = "Clock";
    plugid = "com.github.amolenaar.idea.clock";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7754/19494/idea-clock.zip";
      sha256 = "0gwx7ms0n1jnjnrhm0q9kbfc8xaymv1hbxwznlnfshcgmiyqrbv6";
      name = "Clock-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/amolenaar/idea-clock";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/amolenaar/idea-clock";
        free = false;
      };
      description = ''
        A simple clock widget for IntelliJ.
      '';
    };
  }) {};

  clock-widget = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clock-Widget";
    plugname = "Clock Widget";
    plugid = "intellij-clock";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11252/88871/clock-2.0.0.zip";
      sha256 = "0pq689wphvjhh3dcqg6x27iznpgz99i6g2b4r4j2cjj2098r04sx";
      name = "Clock-Widget-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/11252";
      license = lib.licenses.mit;
      description = ''
        A simple clock widget for IntelliJ.
        The current time is displayed in the right bottom of the IDE window.
        Especially useful when writing code in the full screen mode.
      '';
    };
  }) {};

  clojure-kit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clojure-Kit";
    plugname = "Clojure-Kit";
    plugid = "org.jetbrains.idea.clojure";
    version = "2020.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8636/85542/clojure-kit-2020.1.zip";
      sha256 = "1yikhzl02yd4c8qbbxxmhnf4bn52cnn67llah81m1vkg2dzhc3hr";
      name = "Clojure-Kit-2020.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gregsh/Clojure-Kit";
      license = lib.licenses.asl20;
      description = ''
        Clojure and ClojureScript plugin for IntelliJ-based tools
      '';
    };
  }) {};

  clojure-namespace-sort = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clojure-Namespace-Sort";
    plugname = "Clojure Namespace Sort";
    plugid = "com.namespace.sort.namespace-sort-plugin";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13222/105530/namespace-sort-plugin-1.4.zip";
      sha256 = "0zw06jxrf17a64kzapkdriw9vdxn8fqvc2xrsyyhzn6v8xkx6nbi";
      name = "Clojure-Namespace-Sort-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mustangJaro/antandre";
      license = lib.licenses.mit;
      description = ''
        Sorts required namespaces in Clojure files
      '';
    };
  }) {};

  clojure-pretty-symbol = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clojure-Pretty-Symbol";
    plugname = "Clojure Pretty Symbol";
    plugid = "zjhmale.clojure-pretty-symbol";
    version = "1.6.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8224/25502/clojure-pretty-symbol-1.6.9.zip";
      sha256 = "0bv4pa6gn52imgd66vkrw5r4lxb0w9pff6zgfclm8fjbmv5lvb6v";
      name = "Clojure-Pretty-Symbol-1.6.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zjhmale";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zjhmale";
        free = false;
      };
      description = ''
        Pretty symbols for your Clojure development with IntelliJ IDEA-based IDEs
      '';
    };
  }) {};

  clone-artifact = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Clone-Artifact";
    plugname = "Clone Artifact";
    plugid = "pl.com.andriejsoft.CloneArtifact";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10087/39433/CloneArtifact.jar";
      sha256 = "1ify8qk9rd91djmsr92krip41jps01a08rhx1xqnrai7falyix6j";
      name = "Clone-Artifact-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This is plugin to clone artifact.
      '';
    };
  }) {};

  close-editor-tabs-left-right = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Close-Editor-Tabs-Left-Right";
    plugname = "Close Editor Tabs Left Right";
    plugid = "com.github.tom-power.close-tab-left-right";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8179/27065/close-tab-left-right.jar";
      sha256 = "0759si77q3pi19djbdkhifbz6gabbl1xbxagy8zyrg2bwz01072x";
      name = "Close-Editor-Tabs-Left-Right-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tom-power/close-tab-left-right";
      license = lib.licenses.mit;
      description = ''
        IntelliJ plugin to close all open editor tabs to the left and right of your current one, includes actions and context menu items.
      '';
    };
  }) {};

  closeallx = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CloseAllX";
    plugname = "CloseAllX";
    plugid = "CloseAllX";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1390/4194/CloseAllX_4194.jar";
      sha256 = "134i6ph4bh6r9qpdldylya7sv0z24npdlvazsggh7hvwwwmaia06";
      name = "CloseAllX-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Close all open editors fitting a given description, i.e.
            
                All editors of type X, e.g. all editors containing .java files
                All editors except those of type X, e.g. all editors except ones containing .rb files
      '';
    };
  }) {};

  cloud-code = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cloud-Code";
    plugname = "Cloud Code";
    plugid = "com.google.gct.core";
    version = "21.1.1-202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8079/107884/google-cloud-code-21.1.1-202.zip";
      sha256 = "1d9nk6vjymdcmlg0d7p57dc7bkr8kkyqwraabn0xmy7mdk4bs46p";
      name = "Cloud-Code-21.1.1-202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://cloud.google.com/terms/plugins";
        free = false;
      };
      description = ''
        Cloud Code helps you write, deploy, and debug cloud native, Kubernetes, Cloud Run, and App Engine applications
quickly and easily, and adds support for many Google Cloud Platform (GCP) features. Create, update, and maintain Kubernetes resource files within
IntelliJ. Build an accelerated feedback loop between your local machine and development cluster.
Run Kubernetes wherever works best for you — whether in a local cluster or in the cloud. Deploy your Cloud Run applications to Cloud Run
fully managed or Anthos on GKE.

Use templates available with Cloud Code for IntelliJ to quickly define Kubernetes resource files.
Deploy Java back ends for your cloud apps to App Engine. Use hosted Git repos on Google Cloud
Platform with Cloud Code for IntelliJ to store source code with your deployed services.
You can also use Cloud Debugger for real-time debugging of your cloud back end.
Key Features

Kubernetes deployment in all JetBrains IDEs
Kubernetes config-free debugging for Java, Kotlin, Node.js, and Go
Kubernetes log streaming integrated with deployment and debugging
Kubernetes cluster browser
Cloud Run deployment to either Cloud Run fully managed or Cloud Run for Anthos (GKE)
Cloud Run local emulator
Cloud Run service browser
Editing support for various configuration files including Cloud Build, Kustomize, and Kubernetes
Support for Custom Resources (CRDs) such as Istio, Knative
Manage your secrets with Secret Manager support
Google Cloud API browser
Google Cloud Storage browser
Google Cloud Source Repository integration
Google Cloud Debugger integration
Automatically installs key Kubernetes CLI dependencies and the Google Cloud SDK
Automatically uses your Cloud SDK credentials

Refer to Google Cloud Code documentation for more information.
To help improve the Cloud Code plugin, feature usage statistics are collected and sent to
Google. You can opt-out at any time by visiting Settings &gt; Cloud Code &gt; Usage Tracking. Your
use of this plugin is subject to the Google Privacy Policy.
      '';
    };
  }) {};

  cloudbees-cd = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CloudBees-CD";
    plugname = "CloudBees CD";
    plugid = "com.cloudbees.idea.plugin";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14675/93970/CloudBeesCD-plugin-for-IntelliJ.jar";
      sha256 = "07xi3j38z410zfild77w6mgf9skyig57bvsj1zy0svj621vq3fsy";
      name = "CloudBees-CD-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.cloudbees.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.cloudbees.com/company/terms-of-service";
        free = false;
      };
      description = ''
        The IntelliJ CloudBees CD plugin provides the possibility to use the powerful IDE to manage these CloudBees objects:
     
         Jobs
         Pipelines
         Releases
         Workitems
         Perforce preflight execution right from the IntelliJ IDE
         DSL script edit and execution, including syntax highlighting inherited from the Groovy plugin
     
     The CloudBees CD plugin replaces the Electric Flow plugin, which is no longer supported.
     Plugin supports CloudBees CD beginning with 10.0 version
      '';
    };
  }) {};

  cloudslang-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CloudSlang-Plugin";
    plugname = "CloudSlang Plugin";
    plugid = "io.cloudslang.intellij.plugin";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9437/43088/cs-intellij-plugin-1.0.4.zip";
      sha256 = "1rha1wg7vfjmgc5rl1kcn64s5a5c1ahgy74nd9dprz5vdf8yblq3";
      name = "CloudSlang-Plugin-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://cloudslang.io";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ CloudSlang plugin 
 This plugin provides 
CloudSlang support in IntelliJ IDEA.
 CloudSlang is a flow-based orchestration tool for managing deployed applications. It allows you to rapidly automate your DevOps and everyday IT operations use cases using ready-made workflows or create custom workflows using a YAML-based DSL. 
 
 
Features 
 
 New CloudSlang project creation 
 Live templates e.g: flow, java_operation, python_operation, input, output, step, for, java_action etc. 
 Supports CloudSlang file validation and Error highlighting. 
 Completion support for CloudSlang keywords. 
 Syntax highlighting. 
 CloudSlang file type support (.sl, .sl.yaml, .sl.yml, .prop.sl)
      '';
    };
  }) {};

  clubhouse-tasks = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Clubhouse-Tasks";
    plugname = "Clubhouse Tasks";
    plugid = "to.bri.intellij.clubhouse";
    version = "0.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13698/97650/tasks-clubhouse-0.1.5.zip";
      sha256 = "05y79w3vfvpzqnx79ahnfp1cfzzpk4br0sivrm03rjl8adc7q3r6";
      name = "Clubhouse-Tasks-0.1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/pazustep/intellij-clubhouse";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/pazustep/intellij-clubhouse/raw/master/license.txt";
        free = false;
      };
      description = ''
        Task Management connector for Clubhouse stories. Fetches all stories
    available using a provided Clubhouse token.
      '';
    };
  }) {};

  cml-language-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Cml-Language-Support";
    plugname = "Cml Language Support";
    plugid = "io.github.didi.cml";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12023/58775/cml-language-support.jar";
      sha256 = "17zvm29y00dwzsvzj7m5jwlgq8hfvzp3i73j9bk32kpi064474f0";
      name = "Cml-Language-Support-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://didi.github.io/chameleon";
      license = lib.licenses.asl20;
      description = ''
        An overall solution for multi-platform development
      '';
    };
  }) {};

  co-author = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Co-Author";
    plugname = "Co-Author";
    plugid = "hu.hawser.co-author-plugin";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10952/75082/co-author-plugin.zip";
      sha256 = "0sly4rljjw722imalvq1ircp781mirngf1fql3y59g22wj1jg4ia";
      name = "Co-Author-2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hawser86";
      license = lib.licenses.mit;
      description = ''
        Attribute commits to more authors using the Co-authored-by: commit trailers based on the
    Creating a commit with
    multiple authors article.

    For detailed instructions about how to configure and use the plugin click
    here
      '';
    };
  }) {};

  cobalt-2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Cobalt-2";
    plugname = "Cobalt 2";
    plugid = "color.scheme.Cobalt 2";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10745/79103/Cobalt2-UI-Theme.jar";
      sha256 = "05l7xry8kp7f3rqn4wsqpls38w9y1rsjyy0xfgfk94zmlqgyjjlk";
      name = "Cobalt-2-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ngehlert.com";
      license = lib.licenses.mit;
      description = ''
        This is a complete UI Theme for your Jetbrains IDE. 
      After installing you can select the new theme with Preferences --&gt; Appearance &amp; Behavior --&gt; Appearance --&gt; Theme --&gt; Select "Cobalt 2"
      If you don't want to use the complete UI Theme but just the editor scheme you can select it with Preferences --&gt; Editor --&gt; General --&gt; Color Scheme --&gt; Cobalt 2
      '';
    };
  }) {};

  cobalt-beanlee-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Cobalt-Beanlee-Color-Scheme";
    plugname = "Cobalt Beanlee Color Scheme";
    plugid = "color.scheme.Cobalt Beanlee";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15463/105665/Cobalt_Beanlee.jar";
      sha256 = "1h0yswakinir1li10d5glwq0p5hv2rrzxkh88ngygjii6iyp1ha0";
      name = "Cobalt-Beanlee-Color-Scheme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/beanlee/color-scheme-cobalt-bean";
      license = lib.licenses.mit;
      description = ''
        A custom Cobalt Color Scheme Created by Beanlee. This is a custom-revised version, inspired by `Cobalt2`.
      '';
    };
  }) {};

  cobalt9 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Cobalt9";
    plugname = "Cobalt9";
    plugid = "org.pydemia.theme.cobalt9";
    version = "1.1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14645/91657/cobalt9.jar";
      sha256 = "0iw6dknzm7x5hlbhb9pqynh21yjz2zva4bdihsgpij4n453zrjxb";
      name = "Cobalt9-1.1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pydemia";
      license = lib.licenses.mit;
      description = ''
        A custom Cobalt theme Created by pydemia.
      This is a custom-revised version, inspired by `Cobalt2`.
      '';
    };
  }) {};

  cocor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CocoR";
    plugname = "Coco/R";
    plugid = "io.scheinecker.intellij.coco";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10406/108377/Coco-R-1.5.0.zip";
      sha256 = "04sd0snw7pyzvrprbx7na0908k8ijq3ygynnfbipshwp4r5qldh8";
      name = "CocoR-1.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tsalzinger/intellij-idea-coco-r-plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin adds support for Coco/R to the IntelliJ IDEA Platform. The initial version was
developed as part of a bachelor theses and the first public release was on 2018-01-25. Maintenance will be performed on
a best effort basis.
      '';
    };
  }) {};

  cocor-grammar-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CocoR-grammar-support";
    plugname = "Coco/R grammar support";
    plugid = "de.qrdn.coco_idea";
    version = "6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9457/39386/coco-plugin.v6.jar";
      sha256 = "00aqj9n2ws0yd1zk12cn928dn0v3h0gy2fdq9yz9gdzs97dxga97";
      name = "CocoR-grammar-support-6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/azrdev/coco-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/azrdev/coco-idea-plugin";
        free = false;
      };
      description = ''
        Plugin for Jetbrains IDEs to support grammar files (*.atg) of the 
Coco/R compiler generator. 
 I'm happy to getting your issues, code, feature requests or simply an "I'm using it!" stance here or on the 
projects' GitHub site.
      '';
    };
  }) {};

  codamheader = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodamHeader";
    plugname = "CodamHeader";
    plugid = "skrtks";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15156/98461/Codam_Header-1.0.2.zip";
      sha256 = "0mmyx15yswsgss3axj2imnr77b74kihhcrds75kawrka0f1m45wa";
      name = "CodamHeader-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "-";
      license = lib.licenses.asl20;
      description = ''
        Welcome to the Codam Header plugin for CLion. Add header to .c and .h files via tools &gt; Add codam header or cmd-opt-h.
      '';
    };
  }) {};

  codcut = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Codcut";
    plugname = "Codcut";
    plugid = "com.codcut";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12951/72031/codcut-idea.zip";
      sha256 = "0ca9azqvkysfhzqi93vsfqhkxvz0bqfwmns1mrp2jbvycsmwvj20";
      name = "Codcut-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://codcut.com";
      license = lib.licenses.gpl3Only;
      description = ''
        Share pieces of code to Codcut directly from your IDE.
      '';
    };
  }) {};

  code-amnesia = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Amnesia";
    plugname = "Code-Amnesia";
    plugid = "Code-Amnesia";
    version = "0.25";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3823/6332/Code-Amnesia_6332.zip";
      sha256 = "1w3wqrdc32vgdr38y630yb3m6w421z4g3nrwmz5c8g0p7wvrv3ax";
      name = "Code-Amnesia-0.25.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/3823/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/3823/sourceCode.zip";
        free = false;
      };
      description = ''
        Code-Amnesia is a context aware search tool. You search for code-snippets and other programming elements from within the IDE. Upon search, the plugin analyzes the context of the search and use this information to enhance the search query. It then submit the query to a specialized Code-Amnesia server.
For more information please visit http://www.codeamnesia.org
      '';
    };
  }) {};

  code-cleaner-with-code-climate-cli = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Cleaner-with-Code-Climate-CLI";
    plugname = "Code Cleaner with Code Climate CLI";
    plugid = "com.github.nhat-phan.codecleaner";
    version = "2019.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13306/74478/intellij-code-cleaner-2019.2.1.zip";
      sha256 = "081j9b750nhjwf4s785xknrzan76sslrnnrz5p77qd5dpbk2375n";
      name = "Code-Cleaner-with-Code-Climate-CLI-2019.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nhat-phan";
      license = lib.licenses.gpl3Only;
      description = ''
        Code Cleaner uses Code Climate CLI to analyze your source code on local machine and display
code smells, duplications in IDE.



    To use the plugin you must have the
    
        Code Climate command line tool installed
    
    .




Currently the plugin does NOT support Windows, only for Mac OS or Linux.

FAQs
1. Do I need Code Climate subscription to use this plugin?

    No, you don't need any subscription to use this plugin, all you need is the Code Climate CLI
    installed in your local machine.


2. Can I use it with my private repositories?

    Yes, you can use it with public/private repositories


3. Does the plugin send my source code to anywhere?

    HELL NO, all processes run on your local machine only, the plugin does not send your
    source-code/data to anywhere.
    
    You can checkout source code of the plugin in
    here.


4. How many programing languages are supported?

    Currently the plugin supports:
    Ruby,
    Python,
    PHP,
    JavaScript,
    Java,
    TypeScript,
    GoLang,
    Swift,
    Scala,
    Kotlin and
    C#


5. How to install Code Climate CLI locally

    Please follow this document
    to install Code Climate CLI



Demo
      '';
    };
  }) {};

  code-count = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-Count";
    plugname = "Code Count";
    plugid = "com.sc.tool";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9571/33537/sc-counter.jar";
      sha256 = "16sj7ws6c9ds7rx2li52fr08mpxckcc11xlnbvnzpvq1yyll3xab";
      name = "Code-Count-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gh351135612/sc-counter";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/gh351135612/sc-counter";
        free = false;
      };
      description = ''
        A simple source code count tool.
 Usage:Please click Tools-&gt;Code Count and select language type.
      '';
    };
  }) {};

  code-dx = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Dx";
    plugname = "Code Dx";
    plugid = "com.secdec.codedx-intellij-plugin";
    version = "3.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10052/71437/Code_Dx-3.0.2.zip";
      sha256 = "07zi16dkqrpd7k1yr23gz5d94cyia4ypv5fclbz18aw6gw4pdkmb";
      name = "Code-Dx-3.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.codedx.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://codedx.com/supported-environments/";
        free = false;
      };
      description = ''
        Code Dx is an application vulnerability correlation and management system. This IntelliJ plugin provides an integration with Code Dx.
      '';
    };
  }) {};

  code-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-Generator";
    plugname = "Code Generator";
    plugid = "me.lotabout.codegenerator";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10098/93594/CodeGenerator.jar";
      sha256 = "0yl9jrvdfhif0zdrm6fr6jmj1n4rarjdv69qpvgfrvjrw54gm78r";
      name = "Code-Generator-1.4.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://lotabout.me";
      license = lib.licenses.mit;
      description = ''
        Please backup your configurations before update!!!

  This plugin allows user to create customized velocity templates like toString or builder
  As we know, Intellij had provided useful code generators such as constructors, getter/setters, equals, hashCode,
   overrides and delegates, etc. And Intellij allows us to apply customized velocity templates for each generator.
   But we cannot add our own generators.
  Code Generator is here to help. Two types of generation are supported here
  
    Members(fields/method) based templates, such as serializers, equals, etc.
    Class based template, such as transformers, converters, etc. Normally new classes are created.
  
  I've always hoped Intellij would support this by default, but for now we have an working alternative.
  See README for more
      '';
    };
  }) {};

  code-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-Helper";
    plugname = "Code Helper";
    plugid = "com.siyueren.codehelper";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13621/75910/code-helper-v1.4.jar";
      sha256 = "15d1vh3rj5pksnf1qnaak5qj51ka01x4hibkhqsvz9lwgadc8j2n";
      name = "Code-Helper-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.siyueren.com";
      license = lib.licenses.asl20;
      description = ''
        GitHub |
    Issues
      
      Help you generate setter call automatically And Free Your Hands
      to use it, move the caret inside the variable you want to generate setters with,
       
       then click the shortcut key of the 'Show Intention Actions' or 'Show Context Actions' you set.
       
       after that choose the [Code-Helper]... and click it,
       
       finally the setters will jump on the screen.
       
      enjoy it.
       
       
      My Blog
      
       
      自动生成目标对象的方法调用，解放双手！
       
      将光标移动到你新建的对象中间，然后点击你设置的"Show Intention/Context Actions" 或者 'Show Context Actions' 的快捷键（可以在偏好设置里搜索到）
      然后在弹出的选择框中选中 [Code-Helper]...项
      你就会惊奇的发现setter方法调用全部自动生成了
       
      查看我的博客
      '';
    };
  }) {};

  code-history-mining = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-History-Mining";
    plugname = "Code History Mining";
    plugid = "CodeHistoryMining";
    version = "0.3.1-beta";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7273/25478/code-history-mining-plugin.zip";
      sha256 = "0bxbckgh45pvvk0cp7paqsyr1qaxi6giha0y2z0d41z8z940ak42";
      name = "Code-History-Mining-0.3.1-beta.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/code-history-mining";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/dkandalov/code-history-mining";
        free = false;
      };
      description = ''
        This is proof-of-concept plugin for code history visualization and analysis.
 For more details and examples of visualizations see 
GitHub page. 

 See also 
code history miner web server and CLI with similar functionality.
      '';
    };
  }) {};

  code-iris = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Iris";
    plugname = "Code Iris";
    plugid = "Code Iris";
    version = "2.3.1-beta";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7324/88224/CodeIris-2020-06-05-09-19-36.zip";
      sha256 = "0xkr3z9x1afvclfql1896w16fyiwy8fkmqd2gg12yqkiqybncsad";
      name = "Code-Iris-2.3.1-beta.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "www.codeiris.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.codeiris.com/about/license/";
        free = false;
      };
      description = ''
        This plugin visualizes the modules, packages and classes of your project.
              It's like a UML based "Google Maps" for your Source Code.
              
              Code Iris does local analysis of the sourcecode.
              Features:
              
              parsing groovy and java source code
              visualize modules and their dependencies
              visualize classes and their dependencies
              visualize packages and their classes
              filtering of classes and packages
              highlighting of classes and packages
              basic structural metrics
              manual layouting
              organic layouting based on dependencies
              navigate from and to class
      '';
    };
  }) {};

  code-navigator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-Navigator";
    plugname = "Code Navigator";
    plugid = "Code Navigator";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3202/32111/CodeNavigator2016.jar";
      sha256 = "0pkpsfpajcvdn2xfzkphnzs0v5h9wwh1308acrbs456as3gk7kb7";
      name = "Code-Navigator-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/3202/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/3202/sourceCode.zip";
        free = false;
      };
      description = ''
        Understanding other people's code or your own code in complex systems is a challenging problem in software development. This plugin supports developers in learning the dependencies and couplings in object oriented systems.   Three major plugin-functions can be used: 
 
 class cloud diagram 
 graphical navigation between dependent classes 
 creation of UML diagrams 
  The class cloud diagram should be used as a first step when trying to understand an object oriented system. It shows all project classes in a single diagram as a cloud, very similar to tag clouds known from web-applications. Some of the most important classes can such be found by using the class cloud to be further investigated by using the graphical navigator or the source code.   Graphical navigation can be used to find and understand all dependencies (using classes, used classes, extending classes and extended classes of some subject class).   As soon as the developer has understood which classes interact in which way, UML diagrams should be created that condense this knowledge. Though it is really helpful to have at least some UML diagrams, many software systems are not documented well or the existing diagrams are totally outdated. This plugin helps to create static class diagrams that always can be kept in sync with the current state of a system.   The new functions can be accessed by a new menu item in the Analyze menu of the main menu bar (
Analyze Class Cloud) and two new menu items in the project view and editor popup menus (
Show in Graphical Navigator and 
Add to UML Diagram).
      '';
    };
  }) {};

  code-notes = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Notes";
    plugname = "Code Notes";
    plugid = "com.jetbrains.plugins.code-notes-plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13028/71509/code-notes-plugin-1.3.zip";
      sha256 = "1xkqflml6pnv5y9m6ckd9zrsb4lp27gqh4hp25jnzxkv5mac2ivp";
      name = "Code-Notes-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Allows to add code notes without altering the code.
      '';
    };
  }) {};

  code-outline-2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-Outline-2";
    plugname = "Code Outline 2";
    plugid = "CodeOutline2";
    version = "0.5.4";
    src = fetchurl {
      url = "https://github.com/sitano/intellij-code-outline/raw/master/release/CodeOutlinePlugin-0.5.4.jar";
      sha256 = "162jjnglavr6nw7w2qvlzmbzp9njymhgzf1ap37kdy84ggi0236p";
      name = "Code-Outline-2-0.5.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sitano/intellij-code-outline/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/sitano/intellij-code-outline/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Shows a zoomed out &quot;outline&quot; of your code while you're editing it.
      '';
    };
  }) {};

  code-pet = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Pet";
    plugname = "Code Pet";
    plugid = "bao.li.jun";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15861/108233/code-pet.zip";
      sha256 = "10k493b3yhi0bgzcprhyz3rg28ji54b9mx43ffpymna3anpjsfmd";
      name = "Code-Pet-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Record the code you are most satisfied with.
      ctrl+alt+d Quick record.
      toolWindows is in the lower right corner.
      Version after compatibility IntelliJ IDEA Ultimate IU-182.5262.2 (2018.2.8) 
      
      记录你日常最满意的代码.
      ctrl+alt+d 快捷记录.
      toolWindows 在右下角.
      兼容之后版本 IntelliJ IDEA Ultimate IU-182.5262.2 (2018.2.8).
      '';
    };
  }) {};

  code-review = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Review";
    plugname = "Code Review";
    plugid = "Code Review";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1199/58222/Code_Review.zip";
      sha256 = "0nfkba5yprbsvdza07m0sq8jvsqqw0yrhgcdvpp2pb3ha0lbf9hq";
      name = "Code-Review-1.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://plugins.intellij.net/plugin/?id=1199";
      license = lib.licenses.asl20;
      description = ''
        Allows a developer to send a code review email that details any changes to their code compared with the
        repository. This email is sent before anything is checked in, so colleagues can have a chance to review your
        changes before they are committed.
      '';
    };
  }) {};

  code-review-for-intellij-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Review-for-IntelliJ-IDEA";
    plugname = "Code Review for IntelliJ IDEA";
    plugid = "codeReview4idea";
    version = "0.5.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7223/88873/Crucible4IDEA.zip";
      sha256 = "1g95n0yb2fsvv6h52xdlx0vs6di8w1l2nkar3lyq6wcsrz34wwd7";
      name = "Code-Review-for-IntelliJ-IDEA-0.5.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ktisha/Crucible4IDEA";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ktisha/Crucible4IDEA/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin provides IDEA integration with Code Review Tools (such as Crucible from Atlassian)
  
  Main features:
  
     Dashboard toolwindow
     View separated commits in one review item
     Show diff for commit
     Add general comments
     Add reply to general comments
     Add versioned comment (right-click)
     Add reply to versioned comment (right-click on comments list)
   
   Important note:
   Plugin works only with IDEA trunk builds
      '';
    };
  }) {};

  code-screenshots = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-Screenshots";
    plugname = "Code Screenshots";
    plugid = "one.util.ideaplugin.screenshoter";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9406/102093/screenshoter.jar";
      sha256 = "0h4fzf6fhqhpfwji8l1479zghb3h8dwnrd87pxqkglpysg67fcvw";
      name = "Code-Screenshots-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/amaembo/screenshoter/";
      license = lib.licenses.asl20;
      description = ''
        Select a code and press a hot-key (Ctrl+Alt+Shift+A by default)
      to copy it as the image (make a screenshot).
      Default hot-key can be changed in Settings|Keymap (search for "Copy as image" action)
      Additional "Save as image" action is available which allows to save PNG file
      Some plugin options are available under Editor|Copy image options
      '';
    };
  }) {};

  code-shark = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Shark";
    plugname = "Code Shark";
    plugid = "live.codeshark.plugin.codesharkjetbrains";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10977/49027/Code_Shark.zip";
      sha256 = "1bq6mff627sih45ljm7x1pd89x3l79d11k01vhisw496jzgn0kzi";
      name = "Code-Shark-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://codeshark.live/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://codeshark.live/licenses/license.txt";
        free = false;
      };
      description = ''
        Platform to improve your coding. Saving the code once to get it for future use
      '';
    };
  }) {};

  code-style-check-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Style-Check-Tool";
    plugname = "Code Style Check Tool";
    plugid = "info.woody.api.intellij.plugin.csct.CodeStyleChecker";
    version = "T.3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10798/82183/code-style-check-tool-T.3.4.zip";
      sha256 = "1dqyj9gijacr4659n45ajqr9jrdwrb1r6ybd2dx9w15zhkj1l3n1";
      name = "Code-Style-Check-Tool-T.3.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This plugin is used for code style checking. It could report code smells in your source files.
      If you want to add more customization please contact me, or checkout the CodeStyleChecker project on github.
      Note: this plugin scans the file content based on the text, but no any AST technologies are used. If some issues
      were reported inaccurately, please ignore it or leave a comment. Thanks.
      '';
    };
  }) {};

  code-style-hook = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-Style-Hook";
    plugname = "Code Style Hook";
    plugid = "com.loops101.codestyle.hook";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7477/17726/idea-codestyle-hook-plugin.jar";
      sha256 = "0j3cdfr918436cc9iv9nbsybfh4n7604jcb60ibpsvvz461zfhr4";
      name = "Code-Style-Hook-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/stephanos/idea-codestyle-hook-plugin";
      license = lib.licenses.mit;
      description = ''
        Plugin to apply the project's code style to a subset of the changed files on commit.
      '';
    };
  }) {};

  code-swap = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-Swap";
    plugname = "Code Swap";
    plugid = "com.jtschwartz.codeswap";
    version = "3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14354/86917/CodeSwap.jar";
      sha256 = "0zqvqcjclspfk19cziwpnvp3y0yk3843hcywg24dl2jsmggfc2v9";
      name = "Code-Swap-3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jtschwartz.com";
      license = lib.licenses.mit;
      description = ''
        Code Swap takes swapping code from:
			temp = a
			a = b
			b = temp
			To:
			a, b = b, a
			
			
				Code Swap simplifies copying and pasting lines of code when you are simply swapping them by implementing two concepts, an Anchor and a Swap.	The Anchor is the initial selection of code to be selected, and the Swap is the second. They do need to be chosen in order, and will be replaced with each other as soon as the Swap is chosen.
			
			
			
				Both the Anchor and Swap has two variants: Hard and Soft. The Hard variant will span from the very start of the line the selection starts on, and goes to the end of the line of the selection end, the soft variant spans only exactly what is in your selection. Because of this setup, to set a Soft Anchor or Swap, you must have an actual selection chosen (whether it all be on one line or not), while Hard can work with a selection or a simple caret location.Selections may not overlap and an Anchor and a Swap are not required to match their variants.
			
			
			
				All four actions can be found in the Edit Menu under the Copy/Paste groups or can be run as keyboard shortcuts:
			

			
				
					
						Shortcut
						Action
					
				
				
					
						Alt + PageUp
						Soft Code Anchor
					
					
						Alt + PageDown
						Soft Code Swap
					
					
						Ctrl + Alt + PageUp
						Hard Code Anchor
					
					
						Ctrl + Alt + PageDown
						Hard Code Swap
      '';
    };
  }) {};

  code-time = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-Time";
    plugname = "Code Time";
    plugid = "com.softwareco.intellij.plugin";
    version = "2.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10687/108342/softwareco.zip";
      sha256 = "137q27abm9x7kw34lzhsb6f7zaxagm43bg0m8amyba7lf3h8562j";
      name = "Code-Time-2.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://software.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/swdotcom/swdc-intellij/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Code Time
      

      
      Code Time is an open source plugin for automatic programming metrics and time-tracking.
      

      
      
      
      

      
      Getting started
      

      
      1. Create your web account
      

      
      
      

      
      The Code Time web app has data visualizations and settings you can customize, such as your work hours and office type for advanced time tracking. You can also connect Google Calendar to visualize your Code Time vs. meetings in a single calendar.
      

      
      You can connect multiple code editors on multiple devices using the same email account.
      

      
      2. Track your progress during the day
      

      
      
      

      
      Your status bar shows you in real-time how many hours and minutes you code each day.
      

      
      3. Check out your coding activity
      

      
      To see an overview of your coding activity and project metrics, open the **Code Time panel** by clicking on the Code Time icon in your side bar.
      

      
      
      

      
      In your Activity Metrics, your _editor time_ is the total time you have spent in your editor today. Your code time is the total time you have been typing in your editor today. Each metric shows how you compare today to your average and the global average. Each average is calculated by day of week over the last 90 days (e.g. a Friday average is an average of all previous Fridays).
      

      
      You can also see your top files today by KPM (keystrokes per minute), keystrokes, and code time.
      

      
      Your Project Metrics provides a breakdown for the current open project. The _Open changes_ section shows how many lines you have added and deleted before you commit them and the Committed today section summarizes your commits today.
      

      
      4. Generate your Code Time dashboard
      

      
      At the end of your first day, open Code Time in your side bar and click Generate dashboard to open your dashboard in a new editor tab. Your dashboard summarizes your coding data—such as your code time by project, lines of code, and keystrokes per minute—today, yesterday, last week, and over the last 90 days.
      

      
      
      

      
      Web app data visualizations
      

      
      Click "See advanced metrics" in the Code Time side bar or visit app.software.com to see more data visualizations. Here are a few examples of what you will see in your dashboard after your first week.
      

      
      Active code time
      

      
      Visualize your daily active code time. See productivity trends compared to weekly and monthly averages. See how you stack up against the Software community of over 100,000 developers.
      

      
      
      

      
      Top projects
      

      
      See how much time you spend per project per week. Get a breakdown of your top projects right in your dashboard.
      

      
      
      

      
      Work-life balance
      

      
      Connect your Google Calendar to visualize meeting time versus code time. See how much coding happens during work hours versus nights and weekends so you can find ways to improve your work-life balance.
      

      
      
      

      
      
      

      
      It’s safe, secure, and free
      

      
      We never access your code: We do not process, send, or store your proprietary code. We only provide metrics about programming, and we make it easy to see the data we collect.
      

      
      Your data is private: We will never share your individually identifiable data with your boss. In the future, we will roll up data into groups and teams but we will keep your data anonymized.
      

      
      Free for you, forever: We provide 90 days of data history for free, forever. In the future, we will provide premium plans for advanced features and historical data access.
      

      
      Code Time also collects basic usage metrics to help us make informed decisions about our roadmap.
      

      
      Get in touch
      

      
      Enjoying Code Time? Let us know how it’s going by tweeting or following us at @software_hq.
      

      
      We recently released a new beta plugin, Music Time for VS Code, which helps you find your most productive songs for coding. You can learn more (https://www.software.com/music-time).
      

      
      Have any questions? Please email us at support@software.com and we’ll get back to you as soon as we can.
      '';
    };
  }) {};

  code-blocks-sorter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Code-blocks-sorter";
    plugname = "Code blocks sorter";
    plugid = "eu.osimowicz.plugins.intellij.CodeBlocksSorter";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9450/46501/intellij-code-blocks-sorter.zip";
      sha256 = "0d5svszb492dzzzhrv48vigk4kpnjcsp4dxkjgmh7dkcfwqnny4p";
      name = "Code-blocks-sorter-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.osimowicz.eu";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/osimek1/intellij-code-blocks-sorter/master/LICENSE.md";
        free = false;
      };
      description = ''
        This plugin allows you to sort your code depending on indentation, comments, brackets etc. eg. You may select whole class and sort all your method alphabetically. Pleas notice that eg. private keyword is also a part of line with your method name so it will sort your methods by accessibility.
      '';
    };
  }) {};

  code-comments = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Code-comments";
    plugname = "Code comments";
    plugid = "com.jmg.codecomment";
    version = "4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8351/81502/com.jmg.codecomment-4.1.jar";
      sha256 = "1hhilwryjd9iqyzr2mq8p9vxc23cj80q7kgirq3ng9ddn6wy2gf4";
      name = "Code-comments-4.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/jetbrainscodecommentsplugin/codecomments/src";
      license = lib.licenses.asl20;
      description = ''
        Add comments to code of project without change it.
      '';
    };
  }) {};

  codecase = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CodeCase";
    plugname = "CodeCase";
    plugid = "io.github.QCute.CodeCase";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12490/104760/CodeCase.jar";
      sha256 = "1qkva6vrj0kqbv42vylv9xnd8v3mg5ccs5pn4pfyaii6n9g78xw2";
      name = "CodeCase-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/QCute/CodeCase";
      license = lib.licenses.gpl3Only;
      description = ''
        Switch easily between space case, kebab-case, snake_case, PascalCase, camelCase See Edit menu or use Shift + Alt + U.
      '';
    };
  }) {};

  codecompletion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeCompletion";
    plugname = "CodeCompletion";
    plugid = "com.yz.android.codecompletion";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14803/93425/codecompletion.zip";
      sha256 = "0bvam1vh0j6qfrls7r1qakw1hbd2r4nb9qmf1vkb3s8dxz13jd2z";
      name = "CodeCompletion-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Yuphee";
      license = lib.licenses.asl20;
      description = ''
        code postfix completion
      promote develop
      Available templates:
      
         .pitInit presenterpresenter = new xxPresenterImpl(); presenter.attachView(this);
      
      
         .timerCreate rx timerObservable.timer(10, TimeUnit.SECONDS)...;
      
      
         .intervalCreate rx intervalObservable.interval(0, 1, TimeUnit.SECONDS)...;
      
      
         .isemptyCreate if is empty strif (TextUtils.isEmpty(str)) {};
      
      
         .isnotemptyCreate if is not empty strif (!TextUtils.isEmpty(str)) {};
      '';
    };
  }) {};

  codecompletionlive = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CodeCompletionLive";
    plugname = "CodeCompletionLive";
    plugid = "CodeCompletionLive";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1315/3485/CodeCompletionLive_3485.jar";
      sha256 = "0pcnnai2k8gs048jsa6vwnjwzbryiqp62yfxrgzp7fcz6qyyk8iz";
      name = "CodeCompletionLive-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        CodeCompletionLive cycles through several completions. By default it is binded to Ctrl-Shift-Alt-U but
        it's better to rebind it to for example Ctrl-Space. To do that open Keymap from Settings, under
        Plug-ins - CodeCompletionLive you will see one action CodeCompletionLiveAction, bind it to a new shortcut.

        First it checks Smart Code Completion
        (Ctrl-Shift-Space) if no suggestion available it checks Basic Code Completion (Ctrl-Space) if still IDEA could
        find anything it triggers Class Name Completion (Ctrl-Alt-Space).
      '';
    };
  }) {};

  codegen-1_2_6 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeGen-1_2_6";
    plugname = "CodeGen";
    plugid = "me.hehaiyang.codegen";
    version = "1.2.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9574/58686/CodeGen.zip";
      sha256 = "166hn1fccfymmz0dk6b1f2j6nmpr3yz6659abm1qp6yznrqfm0x4";
      name = "CodeGen-1_2_6-1.2.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hykes";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/hykes/CodeGen/blob/master/LICENSE";
        free = false;
      };
      description = ''
        GitHub | Issues | JetBrains 
      
      This plugin helps you to generate specific template code by create table statement or database .
      Support IDEA Community Edition(171+)、IDEA Ultimate Edition(171+)
      
        Velocity template language
        IDEA database
        Predefined variables
        Custom template
      '';
    };
  }) {};

  codegen-0_1_1 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeGen-0_1_1";
    plugname = "CodeGen";
    plugid = "me.ely.codegen";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12694/66209/codegen.zip";
      sha256 = "1in7ka71b22z60d8znqb1r6qxrqawzss4pzvs7bh2zmi1sw3mi4w";
      name = "CodeGen-0_1_1-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com/idea";
      license = lib.licenses.asl20;
      description = ''
        This plugin has been renamed to KodeGen Please Upgrade`
    This plugin generates code from right click 'Generate...' menu while focused
    on a kotlin class. The output class can be customized using a provided velocity template to format
    the code based on the origin class and optional selected classes.
    The following features are available: 
    
      Generate the Controller class for the persistent class.
      Generate the Service class for the persistent class.
      Generate the Repository class for the persistent class.
    
    If you want to add variables into template context, you can modified the source and package the plugin to meet your needs. See README
      '';
    };
  }) {};

  codeglance = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeGlance";
    plugname = "CodeGlance";
    plugid = "net.vektah.codeglance";
    version = "1.5.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7275/44537/CodeGlance-1.5.4.zip";
      sha256 = "10qnq9j99qh321pacjiky3zr0v59wgc0vpc63pc87zq14yhqrxd4";
      name = "CodeGlance-1.5.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Vektah/CodeGlance";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Vektah/CodeGlance";
        free = false;
      };
      description = ''
        Embeds a code minimap similar to the one found in Sublime into the editor pane. Works with both light and dark themes using your customized colors for syntax highlighting.
      '';
    };
  }) {};

  codeglance2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CodeGlance2";
    plugname = "CodeGlance2";
    plugid = "net.vektah.codeglance2";
    version = "1.5.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15562/105607/CodeGlance2-1.5.5.jar";
      sha256 = "19d75kfyx6blwvbg3cb7pqbzxqa1six791daiz7x9gj7yxskb46l";
      name = "CodeGlance2-1.5.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Vektah/codeglance2";
      license = lib.licenses.bsd2;
      description = ''
        This plugin embeds a code minimap similar to the one found in Sublime into the editor pane. Works with both light and dark
		themes using your customized colors for syntax highlighting.

		* This plugin is a separated update of the original project CodeGlance that seemingly no longer updated.
		Please mind that this plugin can be removed from the marketplace any time by the original author's request.
		Original CodeGlance author: 'Vektah(adam@vektah.net)', 'https://github.com/vektah/CodeGlance'
      '';
    };
  }) {};

  codehelper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CodeHelper";
    plugname = "CodeHelper";
    plugid = "com.troyanovsky.idea.CodeHelper";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12560/67572/CodeHelper.jar";
      sha256 = "00pyq78ri14ij8zv77jj7im2acggcyk1yqyxlg40qj50i06nbigb";
      name = "CodeHelper-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Code highlight helper for PHP/GO developers
      '';
    };
  }) {};

  codeinterview = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeInterview";
    plugname = "CodeInterview";
    plugid = "CodeInterview";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6129/16737/codeinterview.zip";
      sha256 = "02bcg7yh6p95r7n40xwgk2z6igcw4gd11y1w4z2b1a84cw9hirbv";
      name = "CodeInterview-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://codeinterview.me/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://codeinterview.me/";
        free = false;
      };
      description = ''
        CodeInterview Plugin is an IDEA version of the codeinterview.me functionality. Candidates can code in their IDE and the plugin synchronizes the contents of your editors with the CodeInterview site.
      '';
    };
  }) {};

  codemr = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeMR";
    plugname = "CodeMR";
    plugid = "com.codemr.analyzer";
    version = "2021.1.1-release-2020.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10811/106984/CodeMR-2021.1.1-release-2020.2.zip";
      sha256 = "086p3vrarqbw8bh3i6i1i7kzaydyjf3qhsm7hxjilad4zdn8yqrc";
      name = "CodeMR-2021.1.1-release-2020.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.codemr.co.uk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.codemr.co.uk/eula/eula%20codemr.txt";
        free = false;
      };
      description = ''
        CodeMR is a software quality and static code analysis tool for Java, Kotlin and Scala projects. It helps software companies for developing better code, better quality products.
CodeMR visualizes code metrics and high level quality attributes (coupling, complexity, cohesion and size) in different views, such as Package Structure, TreeMap, Sunburst, Dependency and Graph Views.
The graph visualization technique applied in CodeMR is simple yet intuitive. CodeMR has different filtering options and supports custom queries. It visualizes high-level object-oriented quality attributes and low level metrics. Quality attributes are derived from the combinations of several metrics. You can also create different HTML reports for the project and export many object-oriented metrics for packages, classes, and methods.
CodeMR analyses your source code on your local machine and save all analysis files to your local working directory. It does not share your source code with any our or third-party servers.

Requirements:

    IntelliJ Platform 2018.1 or an upper version
    Optional IntelliJ Scala Plugin for analyzing Scala codes
    Optional IntelliJ Kotlin Plugin for analyzing Kotlin codes
    Additional note for Android Studio: Some of CodeMR UI components use JavaFx packages. If JDK used by your IDE doesn't support JavaFx, you can change JDK of IDE as described here: https://intellij-support.jetbrains.com/hc/en-us/articles/206544879


For more information, please visit https://www.codemr.co.uk
Better Code, Better Quality...
      '';
    };
  }) {};

  codemaker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeMaker";
    plugname = "CodeMaker";
    plugid = "com.xiaohansong.codemaker";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9486/72995/CodeMaker-1.4.1.zip";
      sha256 = "0ba4rx645npbbi453yygkr8ykhzmgwsrn6jlwyrwl51cy8y3kijg";
      name = "CodeMaker-1.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/x-hansong/CodeMaker";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/x-hansong/CodeMaker/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin generates code from right click 'Generate...' menu while focused
    on a java/scala class. The output class can be customized using a provided velocity template to format
    the code based on the origin class and optional selected classes. There are many features are contribute
    by Dmitry Karlinsky and I appreciate that.
    The following features are available: 
    
      Support add custom template to generate codes.(Velocity templates and groovy templates)
      Generate the model class for the persistent class.
      Generate the converter class for the model class and the persistent class.
      Generate @see doc for override method
      Generate Api table to clipboard (html or markdown format)
      Generate the class field from api table in clipboard
    
    If you want to add variables into template context, you can modified the source and package the plugin to meet your needs. See README
      '';
    };
  }) {};

  codemetrics = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CodeMetrics";
    plugname = "CodeMetrics";
    plugid = "com.github.kisstkondoros.codemetrics";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12159/65671/codeMetrics.jar";
      sha256 = "1djrvnvrc84d8klgkcyq4ij1w8dndy16kqcx4kzkcl8729579rk4";
      name = "CodeMetrics-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kisstkondoros";
      license = lib.licenses.mit;
      description = ''
        Provides inlay indicators based on a customizable complexity calculation for
    Java files


The steps of the calculation:

    get the AST of the input source file
    walk through each and every node of it
    
        depending on the type of the node and the configuration associated with it
        create a new entry about the node. This entry contains everything necessary
        for further use (e.g. the node name, complexity increment, child nodes
        etc.)
    
    
        show the sum of complexity of child nodes for methods and the maximum of
        child nodes for classes
    


    Please note that it is not a standard metric, but it is a close approximation
    of
    
        Cyclomatic complexity
    .


    Please also note that it is possible to balance the complexity calculation for
    the project / team / personal taste by adjusting the relevant configuration
    entries.



    If You want to know the causes You can click on the inlay hint to list all the
    entries for a given method or class. (This also allows You to quickly navigate
    to the corresponding code)



    License

Licensed under MIT
      '';
    };
  }) {};

  codenarc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeNarc";
    plugname = "CodeNarc";
    plugid = "CodeNarc";
    version = "4.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5925/75233/codenarc-idea-4.3.1.zip";
      sha256 = "09fnp36m6507bxxgmdjxb2ibjv5gf45890z5fjgqk7p02p0blvg1";
      name = "CodeNarc-4.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://twitter.com/DanielDemus";
      license = lib.licenses.asl20;
      description = ''
        CodeNarc analyzes Groovy code for defects, bad practices, inconsistencies, style issues and more.
A flexible framework for rules, rulesets and custom rules means it's easy to configure CodeNarc to
fit into your project. Build tool, framework support, and report generation are all enterprise ready.
      '';
    };
  }) {};

  codenarc-updated = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeNarc-Updated";
    plugname = "CodeNarc Updated";
    plugid = "dk.demus.idea.CodeNarc";
    version = "4.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12106/63145/CodeNarc_Updated.zip";
      sha256 = "1f38n95fwzb6x54ldxdblqw8q3g9zy8j6z5qs31iapsvl7xarbps";
      name = "CodeNarc-Updated-4.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://twitter.com/DanielDemus";
      license = lib.licenses.asl20;
      description = ''
        CodeNarc analyzes Groovy code for defects, bad practices, inconsistencies, style issues and more.
    A flexible framework for rules, rulesets and custom rules means it's easy to configure CodeNarc to
    fit into your project. Build tool, framework support, and report generation are all enterprise ready.
      '';
    };
  }) {};

  codesearch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeSearch";
    plugname = "CodeSearch";
    plugid = "io.heidou.codesearch";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12578/99842/CodeSearch-1.1.0.zip";
      sha256 = "1rmf7j3j3r2icqszpgnzsyy1s1apss4ib030z9wkzb1z0h0f8m60";
      name = "CodeSearch-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/guojianhua/code-search";
      license = lib.licenses.asl20;
      description = ''
        Support for search with Baidu, Google, StackOverflow and GitHub. You can also customize the search service.
      '';
    };
  }) {};

  codestats = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CodeStats";
    plugname = "Code::Stats";
    plugid = "net.codestats.plugin.atom.intellij";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8393/85953/code-stats-intellij.jar";
      sha256 = "02pvhir4k500v8sa74my2rq6sx0rkyyk9y60zc7vz6afq1a9yhv3";
      name = "CodeStats-1.0.9.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://codestats.net/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/code-stats/code-stats-intellij/blob/master/licence";
        free = false;
      };
      description = ''
        Code::Stats plugin for the IntelliJ/JetBrains range of IDEs.
      '';
    };
  }) {};

  codestream-github-gitlab-bitbucket-prs-and-code-review = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeStream-GitHub-GitLab-Bitbucket-PRs-and-Code-Review";
    plugname = "CodeStream: GitHub, GitLab, Bitbucket PRs and Code Review";
    plugid = "com.codestream.jetbrains-codestream";
    version = "10.4.0+121";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12206/108195/codestream-jb-jcef-10.4.0+121.zip";
      sha256 = "1w1y4fr7czswqinvci3bpdlrvvxik6x4vqp99jyf9kdgwz60vzhz";
      name = "CodeStream-GitHub-GitLab-Bitbucket-PRs-and-Code-Review-10.4.0+121.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.codestream.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.codestream.com/terms";
        free = false;
      };
      description = ''
        CodeStream is a developer collaboration platform that integrates all of your essential dev tools, such as GitHub, GitLab, Bitbucket, Slack, Teams, Jira, Trello and more, into your IDE. Eliminate context-switching and simplify code discussion and code review by putting collaboration tools in your IDE.



Requirements

    CodeStream requires version 2019.2 or later of any JetBrains IDE, and is also available for [VS Code](https://marketplace.visualstudio.com/items?itemName=CodeStream.codestream), [Visual Studio](https://marketplace.visualstudio.com/items?itemName=CodeStream.codestream-vs) or [Atom](https://atom.io/packages/codestream).
    Your repository must be managed by Git, or a Git hosting service like GitHub.


Guided Installation Option
Help us improve CodeStream for first-time users by participating in a 20-minute zoom call: screen-share while we guide you along the way and demonstrate CodeStream's capabilities. If you work on a team with at least 10 developers please schedule a time here.

Create and Review Pull Requests in your IDE
Create, review and merge pull requests inside your IDE, with full source-tree and full file access, your favorite keybindings, built-in diff too, and code intelligence.



Get Feedback on Work-in-Progress with Pre-PR Code Reviews
CodeStream's lightweight feedback requests let you get feedback on your changes regardless of the current state of your repo, without the friction of committing, pushing or issuing a pull request. Your teammates can review your changes right in their IDE, with full file context, and with no need to set aside their current work to switch branches or pull the latest.



CodeStream’s feedback requests are so easy that you can start doing them throughout the development process instead of waiting until the end. You’re a few days into a sprint and have some work stubbed out? Maybe some work that hasn’t even been committed. Get feedback on your work-in-progress so that you can identify and resolve issues early instead of saving those gotchas for when you need to get the code merged.

Simplified Code Discussion
Rather than copying &amp; pasting, CodeStream enables in-editor commenting on any code in your repository, with optional sharing to Slack, Teams or via email, with automatic at-mentioning of code authors via git blame.



Your teammates can participate in the discussion right from their IDE, or from Slack, Teams, or replying to the email.



Build the Knowledge Base Behind Your Codebase
CodeStream turns conversation into documentation by capturing all of the discussion about your code, and saving it with your code. Comment and code review threads are automatically repositioned as your code changes, even across branches. All with zero effort on your part.



Previously discussed questions and issues that explain important decisions are now accessible right where you need them, when you need them. Just click on the codemark to expand it and see how something works or why something was done a certain way.

Team Transparency through Live View
Development is a collaborative activity, yet much of it happens in isolation, with work only shared with the team at the end of a cycle, or sprint. CodeStream’s “LiveView” increases transparency by making the local edits of individual developers visible to team members, so that everyone knows what everyone else is working on, in real-time.

As developers write code, whether editing existing files or creating new files, a summary of their changes, including the repo(s), files, and lines changed is exposed to their teammates through CodeStream. The information is displayed contextually, in the IDE, and even warns teammates of potential merge conflicts… before they happen!



Frequently Asked Questions

Where are messages stored?
Your team’s codemarks, which include the message text and the code snippet, are stored in the cloud on CodeStream’s servers. CodeStream uses best practices when it comes to security, but if your team has stringent infosec requirements we also offer an on-prem solution.

Help &amp; Feedback
Check out the user guide for more information on getting started with CodeStream. Please follow @teamcodestream for product updates and to share feedback and questions. You can also email us at support@codestream.com.
      '';
    };
  }) {};

  codeswitch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CodeSwitch";
    plugname = "CodeSwitch";
    plugid = "com.service.char.format";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14396/87385/CodeSwitch.jar";
      sha256 = "10x9h8ffags4pp9w22zxbidvhh164ipnh7dgzh13mm7340glpkf7";
      name = "CodeSwitch-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Switch easily between
       
           snake_case
           camelCase
           kebab-case
            dot.case
        
        
        
            See Tools menu or use  ⌥ + F / Alt + F.
        
         
      
            字符转换,下划线命名--&gt;驼峰命名--&gt;中横线命名(脊柱命名)--&gt;下划线命名 
             for example:  user_id--&gt;userId--&gt;user-id--&gt;user_id 
        
           驼峰命名法(camelCase，小驼峰)：面向对象语言(如Java、C#)变量、方法常用
           蛇形线命名法(snake_case)：数据库属性、C、Python变量常用
           短横线命名法(kebab-case)：Web前端语言(如CSS)变量常用
           英文句号分割(dot.case)：Apollo配置属性
        
      
      
      Bug please feedback email address:[wyk9988@gmail.com]
      Thanks
      '';
    };
  }) {};

  codesync = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CodeSync";
    plugname = "CodeSync";
    plugid = "com.sogou.adstream.code-sync";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12865/67891/code-sync-0.0.2.jar";
      sha256 = "13h06pqvmij1d6bc2s3qsdrzbmfq9ys0bs4mlys499akf4fn52k2";
      name = "CodeSync-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This is a plug-in that automatically synchronizes code to solve problems where similar code exists in multiple projects,
    and the content of the code (such as status codes) needs to be extracted and
    shown to operators to help them solve problems as quickly as possible
    The following features are available: 
    
      Auto push special code to remote
      Auto pull remote content to current project
      '';
    };
  }) {};

  codetemplate = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeTemplate";
    plugname = "CodeTemplate";
    plugid = "yuanqi.plugin.codetemplate";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14962/96630/CodeTemplate.zip";
      sha256 = "1c4n2nsmvbla9s6qswp5yl4ary2m9r4s7xbw5kbvjsmy0bnz95j6";
      name = "CodeTemplate-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Used to quickly add or save blocks of code to synchronize them in the cloud to reduce repetitive configuration and increase coding happiness
      Suitable for programmers who need to build new projects frequently

      How to use it?
            right click you can see codetemplate Group
                    "codetemplate -&gt; Insert template from repository" is use to Adds the template to the cursor position
                    "codetemplate -&gt; Create new template from selected" is use to create new template from selected code
      tips:
            when you use plugin first time, You'll see a window that lets you log in or sign up for an account, and then you can use it
      '';
    };
  }) {};

  codetester-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeTester-IDEA";
    plugname = "CodeTester-IDEA";
    plugid = "CodeTester-IDEA";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15284/106902/CodeTester-IDEA-2.0.1.zip";
      sha256 = "0bvg66mlxiich3lnwzsydjp72fgjimkmv8vd612kp0nfw9i00375";
      name = "CodeTester-IDEA-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fxnm";
      license = lib.licenses.mit;
      description = ''
        CodeTester-IDEA
                        
                        GitHub |
                        Issues
                        
                        CodeTester-IDEA is a plug-in for JetBrains' IntelliJ IDEA which provides a possibility for students to allow them to automatically test programming submissions against a set of student created tests.

With the aim of creating a perfectly tested program and to ensure there are no missing edge cases.



This project survives only because students create and share tests!



Please note, this is not an official part of the SimpleCodeTester - this plug-in is only a user interface for the underlying technology from SimpleCodeTester.



Currently the CodeTester-IDEA only works for students on the KIT in Programming 1.
      '';
    };
  }) {};

  codetogether = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeTogether";
    plugname = "CodeTogether";
    plugid = "com.genuitec.codetogether";
    version = "3.1.0-00694";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14225/104975/codetogether-3.1.0-00694.zip";
      sha256 = "0cy2j77jp9ljnpc1hayq4sl737hqdlrxd6rsf77xcp4liphlzzb4";
      name = "CodeTogether-3.1.0-00694.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://genuitec.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.codetogether.com/eula/";
        free = false;
      };
      description = ''
        Now with IDE-to-IDE support and simultaneous editing! Add 
    CodeTogether to IntelliJ for pair programming 
    from anywhere. Great for remote teams, even when using different IDEs. CodeTogether is 
    available for IntelliJ, Eclipse and VS Code. You can host a collaborative session from 
    any supported IDE, and participants can join from their preferred IDE or a browser.
    Source is always End-to-End Encrypted
    and on-premises hosting is 
    optionally available.
    Host-based intelligence ensures everyone gets the language smarts needed for capabilities such 
    as content assist and validation, regardless of how they join the session.
Getting Started
Simply install
    the plugin, start a session, and share the URL with your peers.
Starting a Session
Open the CodeTogether view on the right-hand side of the IDE, and click Host New Session or use 
    the CodeTogether: Start Hosting Session action.
Inviting Users to a Session
Click Copy Invite URL in the CodeTogether view to copy the session URL to the clipboard, and then 
    share it with others. Participants simply click Join Remote Session in the CodeTogether view of their 
    IDE, or paste the URL into any modern browser.
Stopping a Session
In the CodeTogether view, click Stop Session or use the CodeTogether: Stop Session action.
For more information, see the Getting 
Started Guide.
      '';
    };
  }) {};

  codetools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodeTools";
    plugname = "CodeTools";
    plugid = "com.sevendark.ai.plugin.AiCoder";
    version = "0.3.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11467/75793/CodeTools-0.3.6.zip";
      sha256 = "091l990cqzff170792viyyg6f1s713vvbcbszf7kddy3pps3dms3";
      name = "CodeTools-0.3.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sevendark";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/sevendark/IDEACodeTools/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Features:
    1. When update playframework2.3 , you need to change play.F.Option to java.util.Optional,
       this tools can help replace them.
    2. When you need to copy jooq code to run on Navicat, or Workbench, 
       this tools can help generate sql script.
    3. Also you can convert sql to jooq code.(preview)

    Where can find menu:
    On top menus , Open Tools -&gt; CodeTools, then you can see all tools

    How to use Transform Jooq code
    1. select a piece jooq code
        eg: select().from(TBLUSER).where(TBLUSER.ID.eq(1))
    2. press `ctrl+alt+g`
    3. paste SQL anywhere
    
    depend on Hibernate BasicFormatterImpl and JSqlParser
    
    Feedback
      '';
    };
  }) {};

  codealike = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Codealike";
    plugname = "Codealike";
    plugid = "com.codealike.client.intellij.plugin";
    version = "1.5.0.29";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9331/64543/com.codealike.client.intellij-corv-1.5.0.29.zip";
      sha256 = "0crih52faa2d4sfsswrb2csc7ky1y8xidng72zjf5wxnywd82gbd";
      name = "Codealike-1.5.0.29.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://codealike.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://codealike.com/tos";
        free = false;
      };
      description = ''
        Automatically track everything you do when you code. See reports and metrics in real-time and never forget again what you did on the code.
      '';
    };
  }) {};

  codebrag-integration-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Codebrag-Integration-Plugin";
    plugname = "Codebrag Integration Plugin";
    plugid = "pl.tomaszdziurko.codebrag.plugin.intellijidea";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7766/19572/codebrag-intellij-idea-plugin.jar";
      sha256 = "1fac0j9n3i9c8xz3adqhda7v5f9rgiy0m73435igzjbkyf4405dd";
      name = "Codebrag-Integration-Plugin-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://softwaremill.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tdziurko/codebrag-intellij-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Experimental plugin integrating 
Codebrag (code-review tool) with IntelliJ Idea
      '';
    };
  }) {};

  codelytv-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CodelyTV-Theme";
    plugname = "CodelyTV Theme";
    plugid = "tv.codely.codelytv-theme";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12891/101538/codelytv-theme-2.0.2.zip";
      sha256 = "1pqv10w7hix079rpc1gcyhv2v8inkn9my3lpmz48sswl74kg2q0b";
      name = "CodelyTV-Theme-2.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://codely.tv";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/CodelyTV/jetbrains-theme/blob/master/LICENSE";
        free = false;
      };
      description = ''
        CodelyTV Theme.

    A modern, good-looking, productivity-increaser theme for all JetBrains IDEs
      '';
    };
  }) {};

  codename-one = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Codename-One";
    plugname = "Codename One";
    plugid = "com.codename1.plugin.intellij";
    version = "6.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7357/90491/IntelliJCodenameOneSupport-6.5.1.zip";
      sha256 = "1rvgfiqansp3ilqzpic5m7nxy176rycgai0i9gkj92rwipqxxdl2";
      name = "Codename-One-6.5.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.codenameone.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.codenameone.com/terms.html";
        free = false;
      };
      description = ''
        Codename One Plugin for IntelliJ IDEA
      Easily create native apps using Java™ for iOS, Android, Windows and more!
      '';
    };
  }) {};

  codermirror = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CoderMirror";
    plugname = "CoderMirror";
    plugid = "com.codermirror";
    version = "1.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10975/67920/codermirror-1.2.4.zip";
      sha256 = "148i4m9mwrb5dgzdl87vvjsbxhb29jlznicyz7crcw63axg1rs9p";
      name = "CoderMirror-1.2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.codermirror.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.codermirror.com/terms.html";
        free = false;
      };
      description = ''
        CoderMirror automatically tracks everything you do when you code.
                See reports and metrics in real-time in any programming language to understand how
                you spent your time.
            
            
                Features
                
                    Reports by IDE, language, project, branch or file
                    Reports and unlimited historic data are free forever, you own them
                    Privacy: Data is analyzed locally and never leaves your computer
      '';
    };
  }) {};

  coderpillr-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Coderpillr-Theme";
    plugname = "Coderpillr Theme";
    plugid = "coderpillr.theme";
    version = "1.0.0-rc.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12878/67288/coderpillr-theme.jar";
      sha256 = "1rb3bb9301lyq8y4rac9y1fsr93xqnakvzws1b8ngbbnxaq545wn";
      name = "Coderpillr-Theme-1.0.0-rc.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        A dark theme modeled after Visual Studio Code's Material Palenight and JetBrains' Dark Purple themes. For version 2019.1 and above.
      
      Tested with IntelliJ, WebStorm, PyCharm, PhpStorm, and Rider.
      '';
    };
  }) {};

  codewind = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Codewind";
    plugname = "Codewind";
    plugid = "org.eclipse.codewind.intellij";
    version = "0.14.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13839/94504/codewind-intellij-0.14.1.zip";
      sha256 = "126gzlgrk6sywbmlrkbs6zqml4plyzgaylvq669jmacwdzwdsk15";
      name = "Codewind-0.14.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.eclipse.org/codewind/";
      license = lib.licenses.epl20;
      description = ''
        Codewind
      
        Adds tools to help build cloud-native, containerized Java
        applications. Create an application from a template project
        and launch, update, test, and debug in containers on the
        desktop. Supports Codewind version 0.11.0. For more
        information, see the Codewind website.
      
      Why use Codewind?
      
        Get started with templates or samples to create and deploy applications that run in containers.
        Create containerized applications in languages and runtimes that you're already familiar with.
        Pull in your existing applications and use Codewind to help get them cloud ready.
        See code changes reflected in your containerized application.
      
      Features
      
        Create new containerized projects or add existing ones.
        View your containerized projects, including the application and build status.
        Access application, build, and container logs in the Output view.
        Toggle the project auto build setting and manually initiate project builds.
        Open your application in a browser.
      
      Getting started with Codewind
      
        For more information, see
        Installing Codewind for IntelliJ.
      
      Contributing
      Submit issues and contributions:
      
        
          Submitting issues:
          https://github.com/eclipse/codewind/issues.
        
        
          Contributing:
          https://github.com/eclipse/codewind-intellij/blob/master/CONTRIBUTING.md.
      
      Developing
      To develop and debug Codewind for IntelliJ, see
        Developing.
      '';
    };
  }) {};

  codic-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Codic-Support";
    plugname = "Codic Support";
    plugid = "jp.codic.plugins.intellij";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8040/94699/codic-intellij-plugin.jar";
      sha256 = "1lww8y34dd9xhgj6ngazxz86avx8f77d9031mc35v81k84a52sch";
      name = "Codic-Support-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/codic-project/codic-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/codic-project/codic-intellij-plugin";
        free = false;
      };
      description = ''
        codic plugin for the IntelliJ platform products
    This plugin automatically generates (translate Japanese to English) naming using codic API.
      '';
    };
  }) {};

  coding-easier = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Coding-Easier";
    plugname = "Coding Easier";
    plugid = "com.cheng.plugin.coding.easier";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13001/106729/CodingEasier.jar";
      sha256 = "02zwrir1gf4z8j082zc5n5z76xym8vw1lznwagjgjdd3dbhxg7wz";
      name = "Coding-Easier-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/Chave-Z/CodingEasier";
      license = lib.licenses.asl20;
      description = ''
        Coding Easier
        
        
        Gitee |
        Issues |
        Doc
        
        
        
        Features:
            
            Google translate
              
                Google translate.
                Google translate and replace words.
              
            
            json format.
            Create constant.
            Switch case
              
                to CONSTANT.
                to camelCase.
                to underscore_case.
                to PascalCase.
                to Kebab-case.
                to kebab-case.
                to words.
                to UpperCase.
                to LowerCase.
              
            
          
        
        Google translate
        json format
        Create constant
        Switch case
      '';
    };
  }) {};

  coding-helper-1_5 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Coding-Helper-1_5";
    plugname = "Coding-Helper";
    plugid = "org.muzi.open.helper";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11014/63724/coding-helper.jar";
      sha256 = "1nszg30d9v719x5725cdaqqpxpmmvsp9mjbhn8ychza39kyw22fv";
      name = "Coding-Helper-1_5-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zimuwse";
      license = lib.licenses.asl20;
      description = ''
        Common Coding Tools
      1.Auto generate java bean,mybatis mapper,mybatis xml and sql;
      2.Convert,format and transform tools;
      3.Other useful tools are coming soon.
      '';
    };
  }) {};

  coding-helper-2_2020_7 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Coding-Helper-2_2020_7";
    plugname = "Coding Helper";
    plugid = "cn.xunyard.coding-helper";
    version = "2.2020.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13551/106505/CodingHelper-2.2020.7.zip";
      sha256 = "1pp9z1qiqss14ry5m239lh5b93dikjlz3yy0crzg7qh4k24hk36w";
      name = "Coding-Helper-2_2020_7-2.2020.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xunyard";
      license = lib.licenses.asl20;
      description = ''
        A tool for coding help such as service document building and i18n error code translate found and set
      '';
    };
  }) {};

  coding-wizard = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Coding-Wizard";
    plugname = "Coding-Wizard";
    plugid = "com.piean.idea-plugin.coding-wizard";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15080/100983/Coding-Wizard-1.0.2.zip";
      sha256 = "0pjcz8g4c3gm562xdxbbjn1dckri9956glrmla636lpw6rpfam7c";
      name = "Coding-Wizard-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Piean/coding-wizard";
      license = lib.licenses.asl20;
      description = ''
        The Idea plugin for MyBatis and other code helper
    Feature
    
      Generate All Setter
      BeanCopy Use Getter And Setter
      MyBatis Helper(future)
    
    Usage
    
      Put the cursor on the instance variable, then press "Alt+Insert" and select "AllSetter"
      Put the cursor on the instance variable, then press "Alt+Insert" and select "BeanCopy", that required select an
        other variable in popup
      MyBatis Helper is developing
      '';
    };
  }) {};

  coding-counter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Coding-counter";
    plugname = "Coding counter";
    plugid = "com.maff.codingcounter";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10109/79990/CodingCounter.zip";
      sha256 = "1c1qz85fmb0i04gg2kjfmxbw09529z1r6jgwy091gmrvvg58496z";
      name = "Coding-counter-0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/maff91/Coding-Counter";
      license = lib.licenses.mit;
      description = ''
        Provides different typing statistics (adding, deleting, coping, pasting, etc.).
      There are plans to add more complicated metrics in future.

      
      Project page on Github.
      

      Features

      Counts such parameters for all open projects simultaneously:
      
        Chars typed.
        Backspace/Del pressed.
        Corrections with backspace (backspace pressed within 1 second after typing).
        Chars cut (Cmd-X).
        Total chars removed (cut, del, backspace).
        Total chars added (typed, pasted).
      

      Divides statistics for such periods:
      
        Today.
        Last Week.
        Last Month.
        All time.
      

      Usage
      To see statistics go to View -&gt; Tool Windows -&gt; Coding Counter.

      Change Log

      v0.4:
      
        Fix rare IDE freezing due to UI thread deadlock.
        Fix bug when statistics for month and week incorrectly shown.
      

      v0.5:
      
        Rewrite code in order to avoid using deprecated APIs.
        Properly support multiple open projects.
        Statistics updates immediately.
        Bump min supported IDEA version to 183.2153.8.
      

      v0.6:
      Resolve plugin bytecode compatibility issues with Android Studio.
      '';
    };
  }) {};

  coding-net = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Coding.net";
    plugname = "Coding.net";
    plugid = "net.coding.git";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8565/46325/Coding-Plugin-for-JetBrains.jar";
      sha256 = "04mq306nxb24caz3qpx7l1vw2704fkdanlx0j565p4pvrarhpxsp";
      name = "Coding.net-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://coding.net";
      license = lib.licenses.asl20;
      description = ''
        Allows working with 
Coding.net. 

 
ABOUT CODING 

 CODING established in February 2014, is one of the most advanced service platforms for software could-developing in China. 

 
Coding.net and 
CodeMart are the major sub-brands of CODING. The former acts as an on-cloud coordinate stage to provide service and tools for on-cloud software developing. The key service of Coding.net includes code trusteeship, project management, product display and WebIDE. 

 
CodeMart was launched on October 2015. It functioned as an crowdsourcing platform. Different from traditional crowdsourcing platforms, the vision of CodeMart is more than an information provider or task-board manager. It’s not only connecting developers and clients, but also supervising the whole process in order to ensure high efficiency and the safety of their on-cloud cooperation. 

 
This Plugin is a CodeMart Project. 
 Develop by 
r0b1n_0u
      '';
    };
  }) {};

  codota-ai-autocomplete-for-java-and-javascript = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Codota-AI-Autocomplete-for-Java-and-JavaScript";
    plugname = "Codota AI Autocomplete for Java and JavaScript";
    plugid = "com.codota.csp.intellij";
    version = "4.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7638/108545/codota-4.2.3.zip";
      sha256 = "024g3mzs6w2lyq3vpqjv9xak1ialh4386fvf6nixcyn00yrq6pr6";
      name = "Codota-AI-Autocomplete-for-Java-and-JavaScript-4.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.codota.com/plugins";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.codota.com/terms";
        free = false;
      };
      description = ''
        Better code completions using AI for Java and JavaScript. Codota uses the most advanced Machine Learning models to boost productivity and save time for developers. Supports IntelliJ, Android Studio, WebStorm, and PhpStorm
      
      
            Codota  completes lines of code based on millions of open source Java programs and your context helping you code faster with fewer errors.
            
            The following features are available with the new version of Codota:
            
                Full line AI autocomplete 
                In line and relevant code examples
                Code suggestions based on your own coding practices
            
            Your code stays private. Codota doesn't send your code to the Codota server, we only send minimal contextual information from the currently edited file that allows us to make predictions based on your current local scope.  Learn more.
            
            
            Installation is quick and simple, just follow the instructions  here
            
            Go to our website to find popular Java code like Java date format snippets and Java timer examples
            
            Click here for more information.

           
           

            Terms &amp; Conditions 
            Contact support@codota.com for any question or issue.  
            You can also report an issue in the Codota Plugin for Jetbrains repository in GitHub to allow others to see and participate in the discussion &gt;.
            Codota Java supports IntelliJ IDEA version 2017.1 or higher
            Codota JavaScript supports IntelliJ IDEA or WebStorm version 2018.3 or higher
      '';
    };
  }) {};

  cofe-mybatis = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cofe-Mybatis";
    plugname = "Cofe-Mybatis";
    plugid = "tk.cofedream.plugin.mybatis";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12808/79241/Cofe-Mybatis-1.4.3.zip";
      sha256 = "1dhjnvd4844pkdzqmmmbyl8vf6b9h5xgbrkyp098zv4g160sa93k";
      name = "Cofe-Mybatis-1.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cofedream";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitee.com/cofedream/cofe_mybatis/blob/master/license";
        free = false;
      };
      description = ''
        Cofe Mybatis
    
        
            Gitee |
            GitHub
        
    
    Free Mybatis Plugin For Jetbrains Created By Cofedream.
    Features:
    
        Support Spring Inject.
        
            Support Mybatis.
            
                SQL parameter completion.
                Mapper XML Validate.
            
        
        Support Mapper MapperScan.
        More.
      '';
    };
  }) {};

  coffeebean-dark-ui-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CoffeeBean-Dark-UI-Theme";
    plugname = "CoffeeBean Dark UI Theme";
    plugid = "com.mrarm.coffeebean.ui.theme";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12948/68019/coffeebean-ui-theme-1.0.1.zip";
      sha256 = "03ajriaml971ps4crqy4r7nchxx7q4sh0h1r5qmpfbdw4yf5da7v";
      name = "CoffeeBean-Dark-UI-Theme-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/mrarm/coffeebean";
      license = lib.licenses.gpl3Only;
      description = ''
        UI Theme with notes of Arabica.
      See more information on Github.
      
      screenshot
      '';
    };
  }) {};

  coffeebrew = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CoffeeBrew";
    plugname = "CoffeeBrew";
    plugid = "org.coffebrew";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5920/9097/org.coffebrew_9097.jar";
      sha256 = "16y7czmvc3zj6rvzdi69ikpk2zidwwqclls5fjppx4pvpc575qnj";
      name = "CoffeeBrew-0.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/netzpirat/coffee-brew";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/5920/license.txt";
        free = false;
      };
      description = ''
        Plugin for CoffeeScript language support
      '';
    };
  }) {};

  collabnet-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CollabNet-Tools";
    plugname = "CollabNet Tools";
    plugid = "CollabNet Tools";
    version = "1.1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7116/79552/jetbrains.zip";
      sha256 = "0nfijmp18syqgvpmxmpzqkwddw0c2qfspinw28q1q38pgj67h9g5";
      name = "CollabNet-Tools-1.1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.collab.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://ctf.open.collab.net/gerrit/gitweb?p=jetbrains.git;a=blob;f=license;h=d645695673349e3947e8e5ae42332d0ac3164cd7;hb=head;tflink=projects.jetbrains/scm.jetbrains_plugin";
        free = false;
      };
      description = ''
        CollabNet Connector for IntelliJ IDEA provides IDEA IDE integration for CollabNet TeamForge.
      '';
    };
  }) {};

  color = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Color";
    plugname = "Color";
    plugid = "Color";
    version = "0.1.6";
    src = fetchurl {
      url = "https://github.com/downloads/iron9light/ideacolorschemes-plugin/color-0.1.6.zip";
      sha256 = "0y0zzmxry4kj6z72ig1857g2s3nn8bs3ibrlr0qsn11zi7jcaxbz";
      name = "Color-0.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ideacolorschemes.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://ideacolorschemes.com";
        free = false;
      };
      description = ''
        Find and share color schemes on ideacolorschemes.com
      '';
    };
  }) {};

  color-browser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Color-Browser";
    plugname = "Color Browser";
    plugid = "Color Browser";
    version = "0.2.1-6.x";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/950/2142/Color_Browser_2142.zip";
      sha256 = "1awiqbp1czfwzmaa9d99kihglhv15810zg677jp6vx4lz4pr3siw";
      name = "Color-Browser-0.2.1-6.x.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/950/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/950/license.txt";
        free = false;
      };
      description = ''
        This plugin allows you to see colors used in Java code and CSS/HTML files. You
        may also picks colors and insert one of several representations of that color
        in the current editor.
      '';
    };
  }) {};

  color-highlighter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Color-Highlighter";
    plugname = "Color Highlighter";
    plugid = "com.mallowigi.colorHighlighter";
    version = "6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13309/103684/Color_Highlighter-6.0.zip";
      sha256 = "1zws5nb0l1fakz6600fg1r13ji9rsb2mfvifwl3l65fw69775nad";
      name = "Color-Highlighter-6.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mallowigi";
      license = lib.licenses.mit;
      description = ''
        This plugin highlights colors in editors in order to make them more stand out.

This does the same as "Show CSS Color preview as background", only for more languages!

Supported languages:
- XML
- HTML
- JavaScript
- TypeScript
- Properties
- YAML
- Python
- PHP
- Ruby
- Scala
- Java
- Kotlin
- Go
- ObjectiveC
- Swift

More to come!

PS: You can disable the highlighting at Settings &gt; Editor &gt; Appearance &gt; "Show inline colors"
      '';
    };
  }) {};

  colorblindnesssupport = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ColorBlindnessSupport";
    plugname = "ColorBlindnessSupport";
    plugid = "com.jetbrains.malenkov.color.blindness.support";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9280/71186/ColorBlindnessSupport.jar";
      sha256 = "1sw8wphll1dgwf3q6ipvn951biahafdkibvqll3h5ravkiyyzilz";
      name = "ColorBlindnessSupport-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://sites.google.com/site/malenkov/";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        For people with color vision deficiency:
        a plug-in for IDEs based on the IntelliJ platform.
      '';
    };
  }) {};

  colorreborn = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ColorReborn";
    plugname = "ColorReborn";
    plugid = "com.shanbay.plugin.color.reborn";
    version = "3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8270/25768/color-reborn.jar";
      sha256 = "171kf2j30gv2lv2xr1xa81bb70qjxmx4g30yzdlfprjvnp1xbih0";
      name = "ColorReborn-3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shanbay.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.shanbay.com";
        free = false;
      };
      description = ''
        usage:
 1. input rgb/argb color value
 2. click ok
 3. has already pasted to clipboard
 
 samples:
 input: #ff209e85
 output: &lt;color name="color_298_cyan"&gt;#ff209e85&lt;/color&gt;
 
 input: #aa209e85
 output: &lt;color name="color_t298_cyan"&gt;#aa209e85&lt;/color&gt;
 
 input: #209e85
 output: &lt;color name="color_298_cyan"&gt;#209e85&lt;/color&gt;
 
 input: 209e85
 output: &lt;color name="color_298_cyan"&gt;#209e85&lt;/color&gt;
 
 
for night mode
 input: #ff209e85 &amp; #ff1b836e
 output:
 &lt;color name="color_298_cyan_186_cyan"&gt;#ff209e85&lt;/color&gt;
 &lt;color name="color_298_cyan_186_cyan"&gt;#ff1b836e&lt;/color&gt;
 
 
 have fun!
 :D
      '';
    };
  }) {};

  colored-icons = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Colored-Icons";
    plugname = "Colored Icons";
    plugid = "com.chylex.intellij.coloredicons";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14734/102334/IntelliJ-Colored-Icons-1.3.jar";
      sha256 = "0pzkn82wnwcil88vsl2l8bw8nqlrph3kaharvd93ln8wns9gvyw8";
      name = "Colored-Icons-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://chylex.com";
      license = lib.licenses.asl20;
      description = ''
        Adds color to many of the gray IntelliJ platform icons.
	  Uses resources from https://github.com/JetBrains/intellij-community and some of the official IntelliJ platform plugins.
      '';
    };
  }) {};

  colorful---by-hulk-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Colorful---By-Hulk-Color-Scheme";
    plugname = "Colorful - By Hulk Color Scheme";
    plugid = "color.scheme.Colorful - By Hulk";
    version = "1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12258/61012/Colorful_-_By_Hulk.jar";
      sha256 = "0kyg7yg3rwqka47b99kkq54zxmk78gljrp5md0f2c4hf6ahamp2d";
      name = "Colorful---By-Hulk-Color-Scheme-1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://quantamental.xyz";
      license = lib.licenses.asl20;
      description = ''
        Colorful - By Hulk
      '';
    };
  }) {};

  column-align = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Column-Align";
    plugname = "Column Align";
    plugid = "com.touhidapps.column.align";
    version = "1.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14274/86175/CodeColumnAlign-1.6.0.jar";
      sha256 = "1133fb3xs0fj0qx0bpr47ylbvz6hpmfxmpsn0kg7ilq9ql0mx5wg";
      name = "Column-Align-1.6.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://touhidapps.com";
      license = lib.licenses.mit;
      description = ''
        Format your code by column
    This plugin will make format your code by column, So it will increase code readability
    USE: Select multiple lines of code and press (ctrl + alt + k) or select "Code Column Align" option from Code menu
    Make sure your selection starts from the beginning of any line
      '';
    };
  }) {};

  command-line-launcher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Command-Line-Launcher";
    plugname = "Command Line Launcher";
    plugid = "org.yapal.world.commandlinelauncher";
    version = "1.0.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14337/102641/command_line_launcher.zip";
      sha256 = "08glh1b36y2j8pva2cd4zqwphndx2cljs078iwblwmchbj9js5za";
      name = "Command-Line-Launcher-1.0.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Save and run all your command lines
    It's now easy to remember some complex commands what can be very practical
    
    Group them by folder
    Filter them by project or application
    
    It's now quick to run one or many commands
    
    Launch with one click
    Run your command with parameters
    Run an entire folder or a selection (ex: usual commands to start your daily project !)
    
    Export/Import all your commands
    
    Share your favorite commands to everyone
    Switch of computer or IDE without loose your commands
      '';
    };
  }) {};

  comment-parser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Comment-Parser";
    plugname = "Comment Parser";
    plugid = "hu.rb.commentparser-intellij";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13807/78384/commentparser-intellij-1.0.0.zip";
      sha256 = "0a1rlhq17p0jz5z954vly7dp3sfnv2n88bs8164j671wvyymshag";
      name = "Comment-Parser-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/balintrudas";
      license = lib.licenses.mit;
      description = ''
        Comment Parser is a Java library that can be used to extract comments from a source code.
    It can also be used to grouping comments together and the results can be exported to various formats.
    
    Learn More
    
    The following features are available:
    
    Comment parsing inside methods
    Comment parsing outside methods
    Comment parsing outside classes
    Comment grouping with javadoc tags
    Comment grouping with predefined annotations
    Comment grouping with custom annotations
    Inheritance between groups
    Comment marking with predefined markers
    Comment marking with custom markers
    Comment exclusion with predefined markers
    Comment exclusion with custom markers
    Exporting to formats like Excel (.xlsx), Csv (.csv), Markdown (.md), AsciiDoc (.adoc)
      '';
    };
  }) {};

  comment-translator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Comment-Translator";
    plugname = "Comment Translator";
    plugid = "com.iambedant.commentTranslator";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11447/54032/Comment_Translator-0.0.3.zip";
      sha256 = "0gv9rm0n9cwzdbxpnvphcsxffh9xid9i49cxnbdh0qhcfvm6yssl";
      name = "Comment-Translator-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://iambedant.com";
      license = lib.licenses.mit;
      description = ''
        Plugin for translating comment
        How to use
        
 	        Follow bellow link to create Google Cloud Translation API and download a private key as JSON.Google cloud translate api docs.
             Select the comment and hit Ctrl+Shift+M or go to Toolbar-&gt;Translator-&gt;Translate.
        

        
        

      
      Full Usage Documentation
      '';
    };
  }) {};

  comments-highlighter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Comments-Highlighter";
    plugname = "Comments Highlighter";
    plugid = "com.clutcher.comments_highlighter";
    version = "1.3.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12895/87709/comments_highlighter-1.3.5.zip";
      sha256 = "0yn8jxfmy6d6mzgh067w0s421fcv4d1pqmgqdznr3d7frzlhdwz3";
      name = "Comments-Highlighter-1.3.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://clutcher.github.io";
      license = lib.licenses.mit;
      description = ''
        This plugin is a replacement of Better Comments plugin, which has limited language support. Comments Highlighter plugin would work with any language, supported by Intellij. Plugin has possibility to define custom user tokens.
      How to add custom user token:
      
        Open settings window
        Tools-&gt;Comments Highlighter Settings
        Click on "+" sign and enter any token in popup. (Third screenshot of plugin)
        Reopen settings window. This is mandatory step due to bug in Intellij
      '';
    };
  }) {};

  comments-translator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Comments-translator";
    plugname = "Comments translator";
    plugid = "com.nicklyu.comments-translator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11222/50913/Comments_translator-1.0.zip";
      sha256 = "01k8w0v1wyy264bagbgpf7q2arncsfmgclv970h2a3dwq2bvzhdz";
      name = "Comments-translator-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nicklyu/Intellij-comments-translator";
      license = lib.licenses.asl20;
      description = ''
        Plugin for intellij platform allowing to translate comments in code
      '';
    };
  }) {};

  commit-log = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Commit-Log";
    plugname = "Commit Log";
    plugid = "Commit Log";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1823/31995/CommitLog.jar";
      sha256 = "0gm52d0mzvpjr90hxdpbrdslfyb0wdclq8skqml9z5a534gifw74";
      name = "Commit-Log-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tomotoyinbo/intellij-commitLog-plugin/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tomotoyinbo/intellij-commitLog-plugin/";
        free = false;
      };
      description = ''
        Creates a commit log for each commit executed, according to a user defined template.

 This is mainly aimed at those of us who have a non-vcs integrated issue tracking system (e.g. bugzilla) and who want to record exact details of associated commits within their issue updates.
 However, at present the plugin generates a simple textual log, based on a user-defined template, so this can be used for any purpose required, such as emailing or placing into documents.
 Ultimately it is intended to implement automated actions to be performed post commit, e.g. for integration with issue trackers, or emailing of logs.
 
 Commit comments can also be generated based on files in the changelist to ease per-file commenting in the comment. 
 Settings can be edited on a per-project basis in Project Settings|Commit Log.
 
 To Do:
 * Allow automated actions to be defined for execution using the generated commit log.
 * Improve template editing.
 * Add configuration of text used for change types.
      '';
    };
  }) {};

  commit-message-create = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Commit-Message-Create";
    plugname = "Commit-Message-Create";
    plugid = "com.rmondjone.commit_plugin";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12256/105654/CommitPlugin.jar";
      sha256 = "06x9jmmgh0ga709892xzsiinjgagbplwy7pgcbb54kszcrm1lhnb";
      name = "Commit-Message-Create-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/RmondJone";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Submit information generation plugin
        Submit information template generation plugin for standardizing code submission information
        Author: Guo Hanlin
        Special thanks: @darrachequesne
        Plugin GitHub address:https://github.com/RmondJone/Commit-Message-Plugin
      '';
    };
  }) {};

  commit-message-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Commit-Message-Template";
    plugname = "Commit Message Template";
    plugid = "MHCommitMessageTemplate";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9364/34514/commit_template.jar";
      sha256 = "1q8pbq69b3jhcqh6b9mbb89j3yrqcmr3vrmgqci06144ax2m2z3v";
      name = "Commit-Message-Template-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.myheritage.com";
      license = lib.licenses.mit;
      description = ''
        Adds a button to the commit dialog (right above the commit message field), that loads a commit message template.
      '';
    };
  }) {};

  commit-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Commit-Template";
    plugname = "Commit Template";
    plugid = "Commit Template";
    version = "20.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14104/83246/commit-template.jar";
      sha256 = "0faj3wllriasmfji8k9srrbdjg1gif07x03878q7q1273149vps2";
      name = "Commit-Template-20.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yzhengfei";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/yzhengfei/generate-document/blob/master/Generate%20Document%20EULA";
        free = false;
      };
      description = ''
        Create a commit message using a user-defined template
    
    
    
        
            English
            
                
                  Features
                  
                    Support custom template commit message
                    Support custom form commit message
                    Keep history commit messages
                  
                
                
                    Demo：
                    
# Message Type
FIX:

# Commit Message
Fix bug description

# Issues Id
Closes 88888
                    
                
            
        
        
            Chinese
            
                使用用户定义的模板创建提交消息
                
                  功能
                  
                    支持自定义模板提交
                    支持自定义表单提交
                    历史提交内容留存
                  
                
                
                    示例：
                    
# 提交描述
Desc:

# 提交类型：3选1
#
#   ReqDev = 需求开发
#   BugFix = 修复Bug
#   FaultFix = 故障修复
Type:

# 如果是需求开发，请填写 需求ID
# 如果是修复Bug，请填写 BugID
# 如果是故障修复，请填写 故障ID
# 请填写纯数学，多个以逗号分隔（英语逗号）
ID:
      '';
    };
  }) {};

  commit-message-checker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Commit-message-checker";
    plugname = "Commit message checker";
    plugid = "org.turbanov.commits.message.checker";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9558/75893/CommitMessageChecker-1.1.jar";
      sha256 = "0asw59mj5236lics8fd5jwnlhs3vqp19rbjiplrbx6l4qs2rm6n7";
      name = "Commit-message-checker-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/turbanoff/CommitMessageChecker";
      license = lib.licenses.asl20;
      description = ''
        Checks that commit message contains reference to the same issue as branch.
Useful with one-branch-per-issue policy.
      '';
    };
  }) {};

  commitlint-conventional-commit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Commitlint-Conventional-Commit";
    plugname = "Commitlint Conventional Commit";
    plugid = "com.github.lppedd.idea-conventional-commit-commitlint";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14046/101801/idea-conventional-commit-commitlint-0.1.2.zip";
      sha256 = "031dr2cjaikm7v02j72fwvl10wgcrj0698ir7cmi1z3nsipi89hg";
      name = "Commitlint-Conventional-Commit-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lppedd/idea-conventional-commit-commitlint";
      license = lib.licenses.mit;
      description = ''
        This plugin extends the functionality of
  Conventional Commit
  to provide commit types and scopes
  via Commitlint rules.
  The only requisite is to have a .commitlintrc.json file in the project's root
  directory.

The considered rules are type-enum and scope-enum.


  Read additional details
  at GitHub.
      '';
    };
  }) {};

  commongeneratortools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CommonGeneratorTools";
    plugname = "CommonGeneratorTools";
    plugid = "com.souyidai.common.plugin.generators";
    version = "1.2.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8280/37185/CommonGeneratorPlugin.jar";
      sha256 = "0k9pklxbvd9hi8ryiqqklxqa9abj6ikirn1syp4nd7gvw3ki93jy";
      name = "CommonGeneratorTools-1.2.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.huli.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.huli.com";
        free = false;
      };
      description = ''
        HULI.COM(狐狸金服) common generator tools,generate json/thrift idl from model/bean.Or generate properties from xml usage: 1,Type alt+insert to choose your target(such as JsonSample,ThriftIDL,XmlToProperties). 2,You can set the blacklist of field by using regular expression.(Setting -&gt; Other Setting -&gt; SYDCommonGenSetting) enjoy it! Plugin home page
      '';
    };
  }) {};

  compare-directories = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Compare-Directories";
    plugname = "Compare Directories";
    plugid = "Compare Directories";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/113/9817/Compare_Directories_9817.zip";
      sha256 = "1z3h5advxrp5xp1nzg3i0wblxjx3v6whddrl27a7x9zk8zdjscwi";
      name = "Compare-Directories-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Allows the fast comparison of two directories or archive files (jar, zip, war... and also tar/gz) based on file contents. Compared directories/archives are shown in a tree view to give a better and easier-to-read overall view of the differences. Compared directories/archives may contain archives in archives in archives in..., which are all opened and compared compressed file by compressed file. In IntelliJ IDEA, compiled Java class files can also be compared at the attribute/method level (option when starting the comparison). Comparisons can be run on any file or directory inside or outside the current project.  
 From the comparison tree view, single file differences (on both text and binary files) can easily be viewed and edited with the usual IDEA diff window. Left-side and right-side files can be separately opened as easily. You can also view differences in compiled Java class structure and bytecode using the usual IDEA diff window, thanks to the built-in Java disassembler. Blank-only differences in text files are detected, as well as user-defined differences in text files and differences in source file comments, called &laquo;non-significant differences&raquo;. The plugin provides some basic mass-merging facilities on compared files and directories (copy/delete on compared files or directories).  
 This plugin works on any IntelliJ Platform product, except the Java disassembler, which is only available on IntelliJ products bundled with Java ASM4 library.  
 For more information, please read the online help bundled with the plugin (complete plugin sources are also bundled for the IDEA plugin developers' convenience).
      '';
    };
  }) {};

  compare-tab-with-editor-2 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Compare-Tab-With-Editor-2";
    plugname = "Compare Tab With Editor 2";
    plugid = "be.jbeckers.compare_tab_with_editor2";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13053/98770/Compare_Tab_With_Editor_2-1.0.4.zip";
      sha256 = "1i7fkfkq663j07k15bds513s9vk9kf7z93hv9zj0750p4fwxvrrr";
      name = "Compare-Tab-With-Editor-2-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jbeckers.github.io/CompareTabWithEditor2/";
      license = lib.licenses.asl20;
      description = ''
        Compare the currently open file to another one, by right click on editor tab.
      '';
    };
  }) {};

  comparison-chain-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Comparison-chain-generator";
    plugname = "Comparison chain generator";
    plugid = "org.jetbrains.comparisonChain";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7134/12250/comparisonChainGen.jar";
      sha256 = "0jkhxi1ykanmnrkpz7dl3knwr8c8adqfmzi19djagkfl1v0cpjgm";
      name = "Comparison-chain-generator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.yourcompany.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.yourcompany.com";
        free = false;
      };
      description = ''
        Enter short description for your plugin here.
 
most HTML tags may be used
      '';
    };
  }) {};

  comparisonchain-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ComparisonChain-Generator";
    plugname = "ComparisonChain Generator";
    plugid = "ir.ali.plugin.comparisonChainGenerator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10571/44538/ComparisonChainGenerator.jar";
      sha256 = "0nfh03jlfv3xfsxsm07lmyqnhkwhqqmk1081bgnrvh80qmpqp0w6";
      name = "ComparisonChain-Generator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.garaei.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.garaei.com";
        free = false;
      };
      description = ''
        This plugin adds guava comparisonChain to your class in a very easy way. 
 
By shortcut alt + insert you will see comparisonChain in your popup menu
      '';
    };
  }) {};

  completable-reactor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Completable-Reactor";
    plugname = "Completable Reactor";
    plugid = "ru.fix.completable.reactor.plugin.idea";
    version = "1.4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9599/50837/completable-reactor-plugin-idea.zip";
      sha256 = "03ximwpjlkxs94c06q96n8hgzsbsz3qhqs10qzkggkd8pw08x7hf";
      name = "Completable-Reactor-1.4.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ru-fix";
      license = lib.licenses.asl20;
      description = ''
        CompletableReactor framework makes it easier to create business flows that have concurrently running parts and complex execution branching.
      CompletableReactor provides DSL-like Builder-style API to describe business flows.
      Framework built on top of Fork Join Pool and CompletableFuture API.
      
      Completable Reactor plugin provide graph visualization and source code navigation within IDE.
      '';
    };
  }) {};

  comrade-neovim = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Comrade-Neovim";
    plugname = "Comrade Neovim";
    plugid = "beeender.ComradeNeovim";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12153/60449/ComradeNeovim-0.1.2.zip";
      sha256 = "1c4cdlq9yl7if2j519r29xkqhq0h1x5mln5293vgg6p412qpv68v";
      name = "Comrade-Neovim-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/beeender/ComradeNeovim";
      license = lib.licenses.gpl3Only;
      description = ''
        Brings JetBrains/IntelliJ IDEs magic to Neovim.
    ComradeNeovim creates a bridge between JetBrains IDEs and Neovim to bi-directly synchronize editing contents between them and bring features like auto completion, linting and quick fix to Neovim.
    You also have to install the neovim side plugin to make this work. Please refer to:
    
        Comrade
      '';
    };
  }) {};

  conantracemapper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ConanTraceMapper";
    plugname = "ConanTraceMapper";
    plugid = "com.ss.android.ugc.conan.trace";
    version = "0.0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12269/61133/ConanTraceMapper.jar";
      sha256 = "1qq07nf8nkz4s5kgyxmgjca1sk3jsyx4msj3l7ybc4rca10hib6v";
      name = "ConanTraceMapper-0.0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.tiktok.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        ConanTraceMapper helps the ConanTrace module to map the trace file.
      '';
    };
  }) {};

  concise-assertj-optimizing-nitpicker-cajon = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Concise-AssertJ-Optimizing-Nitpicker-Cajon";
    plugname = "Concise AssertJ Optimizing Nitpicker (Cajon)";
    plugid = "de.platon42.cajon";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12195/98576/cajon-plugin-1.11.zip";
      sha256 = "03vyb94lw35a5m1lgx5q18vysdvr1v6s558c6jpqw9knwkgqf30g";
      name = "Concise-AssertJ-Optimizing-Nitpicker-Cajon-1.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chrisly42/cajon-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Cajon is an IntelliJ IDEA Plugin for shortening and optimizing AssertJ assertions.
    It adds several inspections and quick fixes to fully use the fluent assertion methods
    and thus makes the intention clear and concise, also generating better messages on test failures.
    It can also be used to convert JUnit 4 assertions and assumptions to AssertJ.
    It supports referencing inside extracting()-methods with strings, adding refactoring safety.
    Bogus or twisted assertions are also reported.
    
    Full documentation here...
      '';
    };
  }) {};

  concordion = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Concordion";
    plugname = "Concordion";
    plugid = "com.bitard.concordion";
    version = "1.0_alpha2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7265/13549/latest.jar";
      sha256 = "09xs7f8f15ikfh63ns3a1fi5sd3y3lsxdj79vy69ficbrsmjg78h";
      name = "Concordion-1.0_alpha2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MichaelBitard/intelliJ-concordion-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Help you use concordion faster.
 
First version just flag your method as &quot;unused&quot; 
 More coming!!
      '';
    };
  }) {};

  concordion-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Concordion-support";
    plugname = "Concordion support";
    plugid = "org.concordion.plugin.idea.lang";
    version = "0.12.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7978/42222/IdeaConcordionSupport-0.12.0.zip";
      sha256 = "18nfz7gfnna11khlnv2gfxq55vk2jw02f2j8wn28amfs78g9dkxm";
      name = "Concordion-support-0.12.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/concordion/idea-concordion-support";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin provides support such as autocompletion, navigation between spec files, go to declaration and renaming for http://concordion.org/ testing framework. Plugin homepage: https://github.com/concordion/idea-concordion-support Require idea 14.1+ with JUnit plugin running on jdk 8 (project may use any jdk)
      '';
    };
  }) {};

  concourse-ci-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Concourse-CI-Support";
    plugname = "Concourse CI Support";
    plugid = "com.github.cedricziel.ideaconcourse";
    version = "0.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15565/107184/idea-concourse-0.0.9.zip";
      sha256 = "0p8rdm19fs4ip3iaydmysaxnl8nfd51qhcvjkl4qxlskwq76pjiw";
      name = "Concourse-CI-Support-0.0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.cedric-ziel.com";
      license = lib.licenses.mit;
      description = ''
        This plugin integrates knowledge about ConcourseCI pipeline files in IntelliJ based IDEs.

Structure:
the plugin provides a JSON schema to the IDE to provide stable autocompletion
  and validation for keys in both pipelines and task files

Validation:
the plugin provides some inspections to avoid referencing invalid data
      '';
    };
  }) {};

  configurablefilename = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ConfigurableFilename";
    plugname = "ConfigurableFilename";
    plugid = "be.cegeka.intellij.plugin.configurablefilename";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8144/23275/ConfigurableFilenamePlugin.jar";
      sha256 = "1ps0zqgcmx31pdga15kp7y0ivcckml2wr65nana0q7k2fqc8x76k";
      name = "ConfigurableFilename-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BartCr/ConfigurableFilenamePlugin";
      license = lib.licenses.mit;
      description = ''
        A plugin to allow developers to configure custom filenames using template variables. 
Available template variables:    ''${NAME} name of the new file specified by you in the 'New' dialog   ''${USER} current user system login name   ''${NOW} current system date. 
 The formatting for the date can be specified by a format string after a semicolon (''${NOW;FORMAT}). The default format is yyyy-MM-dd_HH-mm-ss
      '';
    };
  }) {};

  configurationstophook = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ConfigurationStopHook";
    plugname = "ConfigurationStopHook";
    plugid = "com.cyl.idea.plugin.ConfigurationStopHook";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14226/105257/ConfigurationStopHook-1.4.zip";
      sha256 = "08jclab2i4g1clar5c506nas1yfks3bw695ya15n51hbpmjlyfi2";
      name = "ConfigurationStopHook-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Run tasks before stop, just like run tasks before launch.
      '';
    };
  }) {};

  connector-for-aws-lambda = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Connector-for-AWS-Lambda";
    plugname = "Connector for AWS Lambda";
    plugid = "io.github.satr.idea.plugin.connector.la";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9886/47770/connector-for-aws-lambda.zip";
      sha256 = "1jkhyk057xchih3whhqb7slfks6k5rd6a1jzdxk6lfmgqvk0vfkv";
      name = "Connector-for-AWS-Lambda-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://satr.github.io/intellij-idea-plugin-connector-for-aws-lambda/";
      license = lib.licenses.mit;
      description = ''
        View and update functions powered by AWS Lambda with JAR-artifact.
      Copyright © 2018, github.com/satr, MIT License. 
      Read more about AWS Lambda.
      Amazon Web Services, and AWS Lambda are trademarks of Amazon.com, Inc. or its affiliates in the United States and/or other countries.
      '';
    };
  }) {};

  connector-to-assigned-targetprocess-entities = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Connector-to-Assigned-Targetprocess-Entities";
    plugname = "Connector to Assigned Targetprocess Entities";
    plugid = "com.targetprocess.assigned.entities.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8300/107235/jetbrains-targetprocess-assigned-entities.jar";
      sha256 = "0jyihrfzifsfx1lppqj05mb8v51y4kz14yari1phf99gjzd8mrkn";
      name = "Connector-to-Assigned-Targetprocess-Entities-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/victor-homyakov/jetbrains-targetprocess-assigned-entities";
      license = lib.licenses.mit;
      description = ''
        Adds support of Targetprocess server into Jetbrains' IDE (IDEA, WebStorm, etc.).
      Retrieves assigned User Stories and Bugs from Targetprocess server.
      Settings are in Preferences &gt; Tools &gt; Tasks &gt; Servers.
      Full Changelog:
      https://github.com/victor-homyakov/jetbrains-targetprocess-assigned-entities/blob/master/CHANGELOG.md
      '';
    };
  }) {};

  console-beep = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Console-Beep";
    plugname = "Console Beep";
    plugid = "Console Beep";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6100/9942/Console_Beep_9942.zip";
      sha256 = "0m4vpyxv7r0125yfidl3xihqan1xlcqxzyfrx3vimy0j79wiwsbh";
      name = "Console-Beep-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ishchenko/idea-console-beep";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ishchenko/idea-console-beep";
        free = false;
      };
      description = ''
        Plays a sound when a certain text appears in console
      '';
    };
  }) {};

  consoleurllink = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ConsoleUrlLink";
    plugname = "ConsoleUrlLink";
    plugid = "ConsoleUrlLink";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6958/15773/consoleLink.jar";
      sha256 = "1fk1qrwkccn9wlspcpdak4mhhgbspc446aish16minf92aiqzqdg";
      name = "ConsoleUrlLink-0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/siosio/consoleLink";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/siosio/consoleLink";
        free = false;
      };
      description = ''
        The output to the console as a hyperlink URL. Browser will open when you click on the link. 
https://github.com/siosio/consoleLink
      '';
    };
  }) {};

  conststringplaceholder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ConstStringPlaceholder";
    plugname = "ConstStringPlaceholder";
    plugid = "com.github.sckm.constant-string-placeholder";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10573/44617/constant-string-placeholder-0.0.1.zip";
      sha256 = "0jp54m1yqks0dln4zr0h9xabdy252gyq9za5w0ps2l95qq5agmnh";
      name = "ConstStringPlaceholder-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sckm";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/sckm";
        free = false;
      };
      description = ''
        In Kotlin string template, show constant value as placeholder text if variable is constant value
      '';
    };
  }) {};

  construction-paper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Construction-Paper";
    plugname = "Construction Paper";
    plugid = "com.margush.ConstructionPaper";
    version = "1.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15102/100501/Construction_Paper.jar";
      sha256 = "0jyz5kzdzwm606lv4fsmg5p7w1cava5j8q4m0440hjzi2p94krgc";
      name = "Construction-Paper-1.12.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/matthias-margush/construction-paper-jetbrains";
      license = lib.licenses.mit;
      description = ''
        A construction-paper-inspired theme for Jetbrains IDEs.

  
  
  Palette
  

  
  
  Screenshot
      '';
    };
  }) {};

  constructorproperties-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ConstructorProperties-generator";
    plugname = "ConstructorProperties generator";
    plugid = "pl.tndsoft.constructorplugin";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12210/75739/constructor-properties-generator-plugin-0.0.2.jar";
      sha256 = "04czj75zbvdbch56w3y3n8j066wsj8kysan1cmr3jisizqql7msf";
      name = "ConstructorProperties-generator-0.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tomasz77";
      license = lib.licenses.bsd2;
      description = ''
        This is simple plugin generating @ConstructorProperties annotation with field names on at least one arg constructor.

      Action visible in generate actions for class.
      '';
    };
  }) {};

  consul-kv-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Consul-KV-Support";
    plugname = "Consul K/V Support";
    plugid = "com.github.novotnyr.consul-intellij-plugin";
    version = "3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10511/77344/consul-intellij-plugin-3.zip";
      sha256 = "0r2118daxh7hk1lhvj9rr7xp5mnp8rl517x5p2ba4av9glb3p4pc";
      name = "Consul-KV-Support-3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/novotnyr/consul-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Consul by Hashicorp Key/Value browser and editor
      See Consul.io for further details.
      This is an unofficial plug-in, not affiliated with Hashicorp.
      
            Browse Consul K/V repository. Add, edit and remove entries and folders.
            Define multiple Consul instances and easily switch between them
            Export the contents of a Consul folder to the .properties file
            Paste values like version=1 directly from the Clipboard to the Consul tree
            Copy values to the Clipboard in the =-delimited format
            Get notified about external changes of remote Consul K/V changes
      '';
    };
  }) {};

  context-buddy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Context-Buddy";
    plugname = "Context Buddy";
    plugid = "com.virtuslab.contextbuddy";
    version = "0.24";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13020/86264/contextbuddy-0.24.zip";
      sha256 = "02yvkvyw2zqqm3ymh19fpahfdz0ikxz3ybvpm3v0wcjwfhhymq2d";
      name = "Context-Buddy-0.24.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://virtuslab.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/VirtusLab/contextbuddy/master/eula.txt";
        free = false;
      };
      description = ''
        The tool, that allows you to inspect project history in more details.
      
      Context buddy analyze history based on tokens: method names, parameters, vars or words depending on language/format used rather then lines as git does.
      
      It means that it assigns multiple commits to single line, ignores whitespace changes (if has no semantic meaning) or tracks renames properly.
      
      Please check our website and plugin documentation.
      
      If you are interested what is going under the hood please we've wrote a blogpost about that.
      '';
    };
  }) {};

  context-console-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Context-Console-Plugin";
    plugname = "Context Console Plugin";
    plugid = "Context Console Plugin";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6026/11861/context-console-plugin.jar";
      sha256 = "1k003wqcbkb3y1s6sfalbcmrw16jp8kh868j9qyph9nhl6xjz7i4";
      name = "Context-Console-Plugin-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Allows you to open a console in the location specified
      '';
    };
  }) {};

  context-free-grammar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Context-Free-Grammar";
    plugname = "Context Free Grammar";
    plugid = "codes.rudolph.idea.cfg";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10162/40740/idea-plugin-context-free-grammar_0.3.1.jar";
      sha256 = "14a4jv91c0j5hsqqzybgf22x7h0kdzi6gqr4w1vjc9ig7s9wpmkr";
      name = "Context-Free-Grammar-0.3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.rudolph.codes";
      license = lib.licenses.bsd3;
      description = ''
        Adds support for EBNF-like context free grammars.
 This plugin currently is meant for working with grammars in the specification and/or documentation phase.
 For a detailed description read the 
README.
 Read the 
TODO-List for knowing what I plan to add or change in future releases.
 Made by 
Jonas Rudolph
      '';
    };
  }) {};

  context-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Context-Helper";
    plugname = "Context Helper";
    plugid = "ru.spb.se.contexthelper";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10842/47040/context-helper-1.0.jar";
      sha256 = "1dbasqw1kk2nakagp9adgfrj1j8wy84brsbjl0fnjmlalazs4sx7";
      name = "Context-Helper-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Helps Java users to look up help based on the current context. Put the cursor around the element
    you want to get help about and ask for relevant StackOverflow discussions. Key combination for that
    is shift+alt+H.
    
    GitHub repository: GitHub Repository
    This project is a part of JetBrains Research: Project Page
      '';
    };
  }) {};

  context-run = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Context-Run";
    plugname = "Context Run";
    plugid = "de.lauerit.contextrun.plugin";
    version = "0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7432/15710/context-run-plugin.jar";
      sha256 = "0xzfy6r3pnhwlwji2vp6a9z046j4ypma8m7672za6f41x7i7s2y0";
      name = "Context-Run-0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.yourcompany.com";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows to start a java application from context menu and pass information about the context (like path of current selected file) on the command line.
      '';
    };
  }) {};

  contrast = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Contrast";
    plugname = "Contrast";
    plugid = "com.contrastsecurity.contrast-intellij-plugin";
    version = "2.7.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10335/73845/contrast-intellij-plugin-2.7.2.zip";
      sha256 = "02aig4440jsydf8qz5a69zd5zhh5bb2yaq9q7fa8hrnqhk08kkb0";
      name = "Contrast-2.7.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.contrastsecurity.com";
      license = lib.licenses.gpl3Only;
      description = ''
        Instrument your applications with Contrast Security to gain real-time visibility to vulnerabilities in your application, and to defend them against attacks.
      Contrast integrates with your existing SDLC processes to provide an easy way to view and fix vulnerabilities in your code, and protect your applications.
      The Contrast for IntelliJ plugin lists the vulnerabilities from your application directly in your IntelliJ environment enabling developers to resolve issues faster.
      Please note that you will need an account in the Contrast UI in order to use this feature.
      You can learn more about Contrast Security's latest products by visiting our website at www.contrastsecurity.com.
      To schedule a demo, contact us at www.contrastsecurity.com/demo or by calling 1-888-371-1333.
      Welcome to the Era of Self-Protecting Software.
      '';
    };
  }) {};

  conventional-commit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Conventional-Commit";
    plugname = "Conventional Commit";
    plugid = "com.github.lppedd.idea-conventional-commit";
    version = "0.17.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13389/102972/idea-conventional-commit-0.17.0.zip";
      sha256 = "1j2rf0aywhi18m753pfl470dnfaa3754kl1bfi8k5p633nhp6q99";
      name = "Conventional-Commit-0.17.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lppedd/idea-conventional-commit";
      license = lib.licenses.mit;
      description = ''
        The aim of this plugin is to provide completion for
  conventional commits,
  also named semantic commits, inside the VCS Commit dialog.


The plugin provides:

  Standard completion - based on context
  Template completion - initiated intentionally



  It also offers a certain level of customization, which means allowing personalized and
  sharable default tokens, and attaching additional Providers for the various
  parts of the commit message: type, scope, subject, body,
  footer type and footer value.



  Read the full description
  at GitHub.
      '';
    };
  }) {};

  convert-jsonsql-to-go-struct = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Convert-JSONSQL-to-GO-Struct";
    plugname = "Convert JSON/SQL to GO Struct";
    plugid = "to-go-struct";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14409/96030/to-go-struct-1.0.7.zip";
      sha256 = "1x5gdzrmllpww5vixmijmxr6ai1lnf4rxw82wdyzklhc4w0lz6m9";
      name = "Convert-JSONSQL-to-GO-Struct-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liuhao2050/to-go-struct-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Convert JSON or SQL create table to Go Struct.
        &nbsp;
        Usage
        Select JSON/SQL right click and select "Convert JSON/SQL To GO"
        Support automatic saving of custom tags
        Use '%s' as field name in tag template 

        Enjoy！

        Repo
         to-go-struct-intellij-plugin
        &nbsp;
      '';
    };
  }) {};

  convert-yaml-and-properties-file = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Convert-YAML-and-Properties-File";
    plugname = "Convert YAML and Properties File";
    plugid = "com.github.chencn.yamlandprops";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13804/100625/ConvertYamlAndProperties-1.0.5.jar";
      sha256 = "1gjsaj7vyisgn3vaxs1syznzg4g33dxa5w6yvp1mkcx51kwl05y2";
      name = "Convert-YAML-and-Properties-File-1.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chencn/ConvertYamlAndProperties";
      license = lib.licenses.asl20;
      description = ''
        Convert YAML and Properties File
     
        
            Github  |  Gitee
        
    
     You can quickly convert Properties files to YAML files, or YAML files to Properties files
      '';
    };
  }) {};

  converter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Converter";
    plugname = "Converter";
    plugid = "com.github.me10zyl.converter";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9460/32646/intellij-converter.jar";
      sha256 = "18li86k942rfv38slc8i8migx035495nyr00161vn92lp2f9x0nm";
      name = "Converter-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/me10zyl/intellij-converter";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/me10zyl/intellij-converter";
        free = false;
      };
      description = ''
        Converter Code Generator!
 By using this tool, you can generate converter code more easily!
 Converter code example：
 

      public TestSchema convert(TestModel source){
           TestSchema target = new TestSchema();
           target.setProp1(source.getProp1());
           return target;
      }
       

 

 

 
Any advice mailing to me or put an issue on github 
  中文描述：
 使用这个工具， 你可以生成实体转换器(Converter)代码！
      '';
    };
  }) {};

  converter-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Converter-Generator";
    plugname = "Converter Generator";
    plugid = "org.dudariev.converter.generator";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10638/78387/ConverterGenerator.jar";
      sha256 = "1l7q0hfgg01jy50lq2ngh2mi341knyp0a0mq0hifq958jqh7nkik";
      name = "Converter-Generator-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DudarevDaniel/ConverterGenerator";
      license = lib.licenses.gpl3Only;
      description = ''
        ConverterGenerator
      

      GitHub
      

      Custom plugin for generating the converter method by matching setters and getters of given classes.
      Plugin generates the converter method (code) for you in your class.
      
      

      Usage:
      
        Put the caret in any place within the class, press Alt+Ins and select "Generate converter method" in menu or use the shortcut Ctrl+Alt+G.
        In the dialog select the Class you want to convert To and select the class you want to convert From.
        Press "Ok" and converter method will be added to your current class.
        Plugin also writes in comments list of fields, that were not mapped (appropriate setter or getter is missing or different types).
      '';
    };
  }) {};

  copy-class-fields = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Copy-Class-Fields";
    plugname = "Copy Class Fields";
    plugid = "jp.ikeponias";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12284/107593/Copy_Class_Fields-1.1.1.zip";
      sha256 = "1kbx82hhviya131xivnrgknr054yga46l5kg45czcxq9i8pf6ppz";
      name = "Copy-Class-Fields-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "dummy";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Ikeponias/intellij-plugin";
        free = false;
      };
      description = ''
        Copy all fields to clipboard
    When you do intention action, you can choose menu.
    If you choose "Add fields to clipBoard", current class fields and each default values added your clipboard.
    And if you choose "Copy fields to clipBoard for Builder", current class fields and each default values added your clipboard for lombok builder.
      '';
    };
  }) {};

  copy-constructor-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Copy-Constructor-Generator";
    plugname = "Copy Constructor Generator";
    plugid = "com.heytea.plugin.ccg";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12850/69633/copy-constructor-generator-1.1.1.zip";
      sha256 = "1fqvjg593pj0036kqmkg3qw02frd3bqhzbwhx2jp27lmkwq16cgk";
      name = "Copy-Constructor-Generator-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.heytea.com";
      license = lib.licenses.mit;
      description = ''
        Adds an option to generate a copy constructor to the generate menu.

        The action will generate a copy constructor taking an instance of copying over every field from the user selected class.

        Adds an option to generate a convert method to the generate menu.

        The action will generate a convert method instantiate an instance of the user selected class, and copying every field to this instance.
      '';
    };
  }) {};

  copy-hippo-shared-files = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Copy-Hippo-shared-files";
    plugname = "Copy Hippo shared files";
    plugid = "com.machak.hippo.plugin.id";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7226/29788/hippo-shared-libs.zip";
      sha256 = "172002rnm2lk8p37zxwiiw8rp839ik6v8nmqhhpkkayv23ipym69";
      name = "Copy-Hippo-shared-files-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/machak/intellij-hippo-shared-lib";
      license = lib.licenses.asl20;
      description = ''
        Deploy shared hippo dependencies into tomcat shared library
      '';
    };
  }) {};

  copy-option-path = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Copy-Option-Path";
    plugname = "Copy Option Path";
    plugid = "com.intellij.plugin.copy.options";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10903/71617/CopyOptionPath-0.3.zip";
      sha256 = "03fns5hay035r8y5qjmxb5v7p472d09wg9kmfh1nmhgh6ww2gqr7";
      name = "Copy-Option-Path-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/ant_druha";
      license = lib.licenses.asl20;
      description = ''
        Adds 'Copy Option Path' action which copies full path to an option from IDE dialogs.
      '';
    };
  }) {};

  copy-path-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Copy-Path-Helper";
    plugname = "Copy Path Helper";
    plugid = "com.devwook.copy_path_helper";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10304/60598/CopyPathHelper.jar";
      sha256 = "0ag3aspj7h5cdl2rbnham26h75y6ccgfl8hc81ndp4d2dmy50v94";
      name = "Copy-Path-Helper-1.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://lejewk.github.io/";
      license = lib.licenses.mit;
      description = ''
        Help to copy file path.
      
        Copy in a variety of styles with config your self. 
        Shortcuts : ctrl + shift + Q
        Copy Eg) /project/domain/Book.php -d 2017
        Config menu location : Tools &gt; Copy Path Helper Setting
      '';
    };
  }) {};

  copy-path-as-unix-like = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Copy-Path-as-Unix-LIke";
    plugname = "Copy Path as Unix LIke";
    plugid = "com.michael.bergens.java.playground2";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12679/65295/copyNixPath2.jar";
      sha256 = "1809xixsmms804firk6ab48z8ivcc17hss7c3z1lm0yd30f0q6ih";
      name = "Copy-Path-as-Unix-LIke-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bluelovers/idea-copyNixPath";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mub/brainYard/tree/master/jetBrains/idea/plugins/copyNixPath";
        free = false;
      };
      description = ''
        Copy current file's file path or dir path with Unix file separators
    
      Very simple plugin that copies current file's path or its dir path to the →clipboard
      with always Unix and never Windows path separators regardless.
      
      Problem:
      If your IDE runs under Windows, then standard Idea "Copy Path" feature will copy you the backslashed Windows path,
      but if you run a Unix terminal into your Windows paths (like Cygwin or a virt with shared folders),
      then it is very hard to use the backslashed Windows path with Unix shell scripts, that's when this plugin can help.
      
      And if you have the Windows Services for Unix
      installed, you'll be able to use the paths provided by this plugin in Windows as well, in Explorer and the CMD.EXE
      shell and the PowerShell.
      
      Solution:
      This plugin adds 2 menu items to the editor popup menu, but I also remapped the standard Idea's
      "Edit → Copy Path" action's keyboard shortcuts to my plugin's too.
      
      
      On top of that:
      Starting @version 1.0.4, also adds settings to transform paths by a regex for a project. For example, substituting this:
      ^[A-Z]:/dir/(.+)''$ with this: /mount/wf_dir/$1
      will turn this Windows path:
      C:\dir\meh\blah\file.ext into this on the clipboard:
      /mount/wf_dir/meh/blah/file.ext
      '';
    };
  }) {};

  copy-rest-url = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Copy-REST-Url";
    plugname = "Copy REST Url";
    plugid = "CopyRestUrl";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9436/36391/CopyRestUrl.jar";
      sha256 = "067cpk7ssyxkl0c54rsa29bw26g3a9rhijnjyn6ng36n5lab0qki";
      name = "Copy-REST-Url-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/miguelcordovam/intellij_plugins/tree/master/CopyRestUrl";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/miguelcordovam/intellij_plugins/tree/master/CopyRestUrl";
        free = false;
      };
      description = ''
        Copy REST Url will copy REST url from a Spring @Controller or @RestController method. 
 Just right-click on the method, and select "Copy REST Url" and it will copy the url to the clipboard.
 You can also use ctrl + alt + R shortcut over the method name. Then you can paste it on the browser or anywhere you want. 

 Features:
 - If your application is using Spring-Boot and you have an application.properties file, it will look for these 2 keys: server.port, server.contextPath. And if they are found, it will add those values to the final url.
 - The plugin will only be available for methods with @RequestMapping, @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping annotation.
 - Works for any http method.
 - For GET methods, it will include query string on the url, like this: "?param1=X&amp;param2=X..."
      '';
    };
  }) {};

  copy-sourcegraph-link = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Copy-Sourcegraph-Link";
    plugname = "Copy Sourcegraph Link";
    plugid = "com.copysourcegraphlink";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11312/51948/CopySourcegraphLink.jar";
      sha256 = "0wdjzfl4ysw7vlxzxxicxbhcgz0q9n6vwfhk21sgbd9gml94arg3";
      name = "Copy-Sourcegraph-Link-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/erezeshkol";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin lets you create a Sourcegraph link that points to the current line.
      After configuring your development folder and Sourcegraph server in the Preferences (under Tools &gt; Copy Sourcegraph Link),
      simply use the keyboard shortcut (by default, Ctrl+Cmd+S on Macs) to copy a Sourcegraph link that points to the current line.
      '';
    };
  }) {};

  copy-the-path = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Copy-The-Path";
    plugname = "Copy The Path";
    plugid = "me.xfcy.idea.CopyThePath";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8586/53646/CopyThePath.jar";
      sha256 = "11ay00f5zafkl5y9sl9yiwv01hrg6acjbgb5ww06sijyh9rqwm2h";
      name = "Copy-The-Path-0.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.xfcy.me/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.wtfpl.net/txt/copying/";
        free = false;
      };
      description = ''
        The function for this plugin is to copy the relative path from the project root directory of the files which has been opened in the edtior.
[Usage]
menu bar-&gt;Tools-&gt;Copy The Path-&gt;Copy The Path
or binding shortcut like ctrl+shift+c.
Then paste it to anywhere you want.

这个插件可以复制编辑器中打开的文件相对于其所在项目根目录的相对路径。
[使用方式]
菜单栏-&gt;Tools-&gt;Copy The Path-&gt;Copy The Path
或者给他绑定一个快捷键，比如 ctrl+shift+c
然后在需要使用的地方粘贴。
      '';
    };
  }) {};

  copy-as-html = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Copy-as-HTML";
    plugname = "Copy as HTML";
    plugid = "Copy as HTML";
    version = "0.8.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/190/12841/CopyAsHtml.jar";
      sha256 = "043ya3kwk0h3zq242wqc3balm9ni5x621ravvrmh5pgxjdfb1v23";
      name = "Copy-as-HTML-0.8.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Copies a snippet of code as html 
 
 Adds menu items &quot;Copy as HTML&quot; to main menu and editor popup. Will copy the current selection or the complete editor buffer. Currently only works if focus is in editor (for example won't work in project tree). 
 Preserves more formatting than the built-in HTML export. 
 HTML is only a snippet (without html and body tags) meant to be inserted into a complete HTML document. 
 Currently HTML format is fixed and uses CSS a lot. 
 Options: unindent, add border, padding, line numbers, tabs to spaces conversion, include editor's warning and error highlighting (see IDE Settings -&gt; Copy as HTML). 
 Reuses the editor &quot;Show Line Numbers&quot; setting (see Idea's &quot;View&quot; menu).
      '';
    };
  }) {};

  copy-as-json = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Copy-as-Json";
    plugname = "Copy as Json";
    plugid = "com.liuzhihang.toolkit.copyasjson";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13606/93224/Copy_as_Json-1.0.4.zip";
      sha256 = "1nyx3jmhl4bjdw5kjpc9j0i11kndd9a6mmskdr2fipmkihk8pdf0";
      name = "Copy-as-Json-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://liuzhihang.com";
      license = lib.licenses.mit;
      description = ''
        IntelliJ Copy as Json plugin

GitHub |
Issues |
Website |
LICENSE



Copy as Json plugin for IntelliJ IDEA




    JSON
        
            将JavaBean复制为Json字符串
        
        
            Copy JavaBean as Json string
        
    
    公众号
        
            liuzhihangs
      '';
    };
  }) {};

  copy-current-files-file-path-or-dir-path-with-unix-file-separators = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Copy-current-files-file-path-or-dir-path-with-Unix-file-separators";
    plugname = "Copy current file's file path or dir path with Unix file separators";
    plugid = "com.michael.bergens.java.playground";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7584/17601/copyNixPath.jar";
      sha256 = "0sv2059azhvwczs7gjmlaw3dk87kqzg6j6il05vj3hkljzi6f4i3";
      name = "Copy-current-files-file-path-or-dir-path-with-Unix-file-separators-1.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mub/brainYard/tree/master/jetBrains/idea/plugins/copyNixPath";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mub/brainYard/tree/master/jetBrains/idea/plugins/copyNixPath";
        free = false;
      };
      description = ''
        Very simple plugin that copies current file's path or its dir path to the →clipboard with always Unix and never 
 
  Windows
  path separators regardless.  
Problem: If your IDE runs under Windows, then standard Idea &quot;Copy Path&quot; feature will copy you the backslashed Windows path, but if you run a Unix terminal into your Windows paths (like Cygwin or a virt with shared folders), then it is very hard to use the backslashed Windows path with Unix shell scripts, that's when this plugin can help. 
 And if you have the Windows Services for Unix installed, you'll be able to use the paths provided by this plugin in Windows as well, in Explorer and the CMD.EXE shell and the PowerShell.  
Solution: This plugin adds 2 menu items to the editor popup menu, but I also remapped the standard Idea's &quot;Edit → Copy Path&quot; action's keyboard shortcuts to my plugin's too.   
On top of that: Starting @version 1.0.4, also adds settings to transform paths by a regex for a project. For example, substituting this: ^[A-Z]:/dir/(.+)''$ with this: /mount/wf_dir/$1 will turn this Windows path: C:\dir\meh\blah\file.ext into this on the clipboard: /mount/wf_dir/meh/blah/file.ext
      '';
    };
  }) {};

  copyandroidreference = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CopyAndroidReference";
    plugname = "CopyAndroidReference";
    plugid = "com.khande.ideaPlugin.CopyAndroidReference";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11130/49782/CopyAndroidReference-1.0.0-release.jar";
      sha256 = "0i9a8nci7bin3s0fanwzamcpkcmxc6zq79chsm96hhas8xq4k6l2";
      name = "CopyAndroidReference-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This is a quick tool for copying Android resource reference to be used in java or xml file. 
    All Android resource types such as layout, drawable, dimen, string mentioned in
    Android resource types overview
    are supported.
    For examples:
    CopyRef4Java:
    
    layout/activity_main.xml =&gt; R.layout.activity_main
    drawable-xhdpi/ic_back.png =&gt; R.drawable.ic_back
     &lt;string name="app_name"&gt;MyAndroidApp&lt;string&gt; =&gt; R.string.app_name
    ...
    

    CopyRef4Xml:
    
    layout/activity_main.xml =&gt; @layout/activity_main
    drawable-xhdpi/ic_back.png =&gt; @drawable/ic_back
     &lt;string name="app_name"&gt;MyAndroidApp&lt;string&gt; =&gt; @string/app_name
    ...
      '';
    };
  }) {};

  copypaste-stack = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CopyPaste-Stack";
    plugname = "Copy/Paste Stack";
    plugid = "com.kstenschke.copypastestack";
    version = "1.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7478/18878/copypastestack.jar";
      sha256 = "1m5wyxqvnr54j5pks8a3c4j9z0na1b2hn1c5m1ksgdgprh70brbn";
      name = "CopyPaste-Stack-1.1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.coexec.com/";
      license = lib.licenses.asl20;
      description = ''
        Copy/paste stack is an advanced copy history manager including a clipboard viewer.
 The plugin adds a tool window of copy history items, similar to the standard copy history built-in, but possible to be kept persistently open and with some additional features:
 
 
 Copy/paste stack provides an unlimited long list of of copied string items, from the current and recent sessions. Copy/paste stack caches its content, allowing you to keep copied items for as long as needed (instead of limiting their availability to the current editing session).  
 The full text of selected copied items can be previewed in an editable text pane. 
 One or multiple selected items can be inserted into the editor via [ENTER] key, [SPACE] or double click, and can be copied back to the clipboard  
 Items are automatically trimmed from surrounding whitespace. 
 The list of copied items can be sorted chronologically or alphabetically, and grouped using color tags 
 When pasting items back into the editor, they can be wrapped with a prefix and postfix string, and a delimiter when pasting multiple items at once.  
 The plugin also includes a viewer for the current textual or image clipboard contents 
 
Please note: This plugin is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      '';
    };
  }) {};

  copyplaceholders = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CopyPlaceHolders";
    plugname = "CopyPlaceHolders";
    plugid = "br.com.viasoft";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11327/52107/copyPlaceHolders.jar";
      sha256 = "1kii7jp95m9chixh23r885s3lly8bcy6qb0m6qpp1g5cf6pq0svv";
      name = "CopyPlaceHolders-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.viasoft.com.br";
      license = lib.licenses.mit;
      description = ''
        Copy text by replacing variables with placeholders.

Create a file named placeHolders.properties inside the resource folder, if it does not exist a dialog box will be displayed for the user to inform variable value.

When you select any text in the IntelliJ editor and use the 'Copy Place Holders' action, the selected text variables that have been added in the property file quoted above will be overwritten, and the replaced text will be copied.

To add a variable use the following expression ''${VARIABLE_NAME}.

Example:

In the placeHolders.properties file, add the following property.
name = Gaspar

In the IntelliJ editor add the following text
My name is ''${name}

After adding the variable and text select the text and press the atacle Ctrl + Alt + C, or in the context of the menu select the option 'Copy Place Holders'.
      '';
    };
  }) {};

  copytofinder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CopyToFinder";
    plugname = "CopyToFinder";
    plugid = "com.github.timmyovo.CopyToFinder";
    version = "1.6-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13517/82103/CopyToFinder-1.6-SNAPSHOT-all.jar";
      sha256 = "1fzyad6r4p4xbd8c1dqxh44zm8pfzggfx8csccy9j29yiyc22zbx";
      name = "CopyToFinder-1.6-SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/TimmyOVO/CopyToFinder";
      license = lib.licenses.mit;
      description = ''
        Home:https://github.com/TimmyOVO/CopyToFinder
            Provides native pasteboard access in macintosh.
            Using this plugin you can copy file(Command + C) inside your ide,
            and paste(Command + V) that file into finder.
      '';
    };
  }) {};

  copywithstyle = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CopyWithStyle";
    plugname = "CopyWithStyle";
    plugid = "com.peterae86.copy";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8455/27559/CopyWithStyle.jar";
      sha256 = "1byfr0ijm1dlckswvl3s81njsgljcs3spbsnxv5hmbni03nm0z2n";
      name = "CopyWithStyle-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin allows copying code from editor to clipboard with colors and style! Select lines you want copy, and then right click on the editor, you can see "Copy with style" options on the first line
      '';
    };
  }) {};

  copyright = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Copyright";
    plugname = "Copyright";
    plugid = "Copyright";
    version = "1.0.1-8.x";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/88/5373/Copyright_5373.zip";
      sha256 = "167csahsqq1xp77si0f2q3id5lf5260qsjkkw9pq2qf4kh7p5cyg";
      name = "Copyright-1.0.1-8.x.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/intellij-copyright-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/88/license.txt";
        free = false;
      };
      description = ''
        Copyright Notice. This plugin is used to ensure files in a project or module have
        a consistent copyright notice.
      '';
    };
  }) {};

  coral-blue = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Coral-Blue";
    plugname = "Coral Blue";
    plugid = "com.0xPB.coralblue.jetbrains";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14871/97352/coral_blue.jar";
      sha256 = "1b5d7b6hblp7jvk4j832jll45akn8bnim54slas7c4qy620r11a6";
      name = "Coral-Blue-0.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/0xPB";
      license = lib.licenses.mit;
      description = ''
        A dark color theme that aims to be easy on the eyes
      '';
    };
  }) {};

  cordova = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cordova";
    plugname = "Cordova";
    plugid = "com.github.masahirosuzuka.PhoneGapIntelliJPlugin";
    version = "139.63";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7436/17546/phoneGap.zip";
      sha256 = "13vzr02pakwwvwlz1xrqvyjxmd43qsdks2s2az6nwdxc6abynndk";
      name = "Cordova-139.63.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-plugins/tree/master/phoneGap";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Adds Cordova support to IntelliJ-based IDEs. Here's what's included in this support:

Cordova project template 
Run/debug configuration template 
Code completion for event types 
PhoneGap support 

WebStorm comes with this plugin bundled, so Cordova support is available by default in it.
For more information, check out our documentation.
      '';
    };
  }) {};

  core-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Core-theme";
    plugname = "Core theme";
    plugid = "com.jetbrains.theme.core";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13556/74870/Core.jar";
      sha256 = "1s1s6w11mfl1mc2wnmz87rf573wf1cngjdaj316da9cv63bdq02b";
      name = "Core-theme-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kwonoj/core.intellij";
      license = lib.licenses.mit;
      description = ''
        Unofficial vscode core light theme (https://github.com/miqh/vscode-core-theme) port.
      '';
    };
  }) {};

  courier-schema-language = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Courier-schema-language";
    plugname = "Courier schema language";
    plugid = "org.coursera.courier.plugin";
    version = "1.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8005/48610/idea-plugin.jar";
      sha256 = "01fmcbb9lcig754rjyk6zb9fas8h4fhq05rgw2vaxvmdcmj2pwq7";
      name = "Courier-schema-language-1.6.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://groups.google.com/forum/#!forum/courier";
      license = lib.licenses.asl20;
      description = ''
        Courier Schema Language plugin.
      See github.com/coursera/courier
      '';
    };
  }) {};

  covscript = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CovScript";
    plugname = "CovScript";
    plugid = "org.covscript";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10326/61110/intellij-covscript-2.0.2.zip";
      sha256 = "1k9j8vvgwi6bi23rkjp2grzhjkp49w14xjpqm6fw2xd9aslgp7lg";
      name = "CovScript-2.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://covscript.org";
      license = lib.licenses.gpl3Only;
      description = ''
        CovScript language support.


Functions provided:

	Syntax highlighting, error reporting
	Starting CovScript package manager
	Inspections
	Quick fixes
	File templates
	Live templates
	File icon provider
	Semantic-based highlights
	Jump to definition
	Renaming
	Code completion with detailed information
	Try Evaluate
	Cspkg GUI starter
	Regex auto detection and injection
	SDK management
	Error reporter
	Invalid configuration and nightly build notifications
	Code execution
	Detailed run configurator
	Bread crumbs
	Find usages
	Spell checking
	Code folding
	Structure view

This plugin is officially supported by the CovScript developers.
Powered by Covariant Studio.
      '';
    };
  }) {};

  create-jira-ticket = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Create-Jira-Ticket";
    plugname = "Create Jira Ticket";
    plugid = "Create Jira Ticket";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7109/13433/CreateJiraTicket-1.2.2.zip";
      sha256 = "0iywslvs51kjcihjjyxilzfy4sc58cj9rra15p9arm4ylvk62x44";
      name = "Create-Jira-Ticket-1.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cathiele/CreateJiraTicketPlugin";
      license = lib.licenses.asl20;
      description = ''
        Creates Atlassian Jira-Tickets directly from Comments in Sourcecode based on configurable rules.
      '';
    };
  }) {};

  create-testng-xml = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Create-TestNG-XML";
    plugname = "Create TestNG XML";
    plugid = "com.alibaba.autonavi.qa.testng";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9556/33361/gavroche.zip";
      sha256 = "13sm6avkln5qsxpxvmq90gsa8hsg2fcgpj7ywip10lhmmir0qfjl";
      name = "Create-TestNG-XML-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://amap.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://amap.com";
        free = false;
      };
      description = ''
        Create TestNG XML, by Right click on the project file 
 创建testng的xml，通过项目的文件上右键选择，文件会被生成在项目的根目录下 有问题mail: heygeo@163.com 详情： https://github.com/Felixlovechina/testngXmlAutoCreate/blob/master/README.md
      '';
    };
  }) {};

  createintent-method-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CreateIntent-method-generator";
    plugname = "CreateIntent method generator";
    plugid = "com.scache.createintentmethodgenerator";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8069/23916/CreateIntentGenerator.jar";
      sha256 = "1sdsx7pgpxbdilbz6mpx446zg6g4wcljwcwgcbjhs7isk0c90bqz";
      name = "CreateIntent-method-generator-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sckm";
      license = lib.licenses.asl20;
      description = ''
        Plugin for generates createIntent method for Android Activity
      '';
    };
  }) {};

  creatures-caos-and-agenteering = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Creatures-CAOS-and-Agenteering";
    plugname = "Creatures CAOS and Agenteering";
    plugid = "com.badahori.creatures.plugins.intellij.agenteering";
    version = "0.01.100";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14660/106912/CaosPlugin-0.01.100.zip";
      sha256 = "10y6yn62y1m6jgs19mcnys4v301v06ng2khmd68rpa8ccrxyq2n3";
      name = "Creatures-CAOS-and-Agenteering-0.01.100.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bedalton/Caos-Plugin-IntelliJ";
      license = lib.licenses.mit;
      description = ''
        This plugin aims to provide simple CAOS and agent editing for a variety of Creatures variants
    Supports:
    
      Creatures 1
      Creatures 2
      Creatures Village (Mostly)
      Creatures 3
      Docking Station
      Sea Monkeys (Experimental)
    
    Implemented
    
      Syntax Highlighting
      Basic completion
      Definition reference
      Parameter hints
      Known value completion from list. (ie. Drives or Chemicals by name)
      Sprite viewers
      ATT file editor
    
    Todo:
    
      COB compiler/decompiler
      Pray File editing
      Sprite compilers
      '';
    };
  }) {};

  cron-descriptor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cron-Descriptor";
    plugname = "Cron Descriptor";
    plugid = "com.dwilden.crondescriptor";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10913/50516/cron-descriptor-1.3.zip";
      sha256 = "0ib40j598c7nqrdijlbzl3n70zjgb752mkyajk4qbigz5rpkkyq5";
      name = "Cron-Descriptor-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.device-insight.com";
      license = lib.licenses.mit;
      description = ''
        Plugin to display a human readable description for cron expressions as tooltip
    Supports: Java, Kotlin, Properties, Yaml
      '';
    };
  }) {};

  crowdwiki = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CrowdWiki";
    plugname = "CrowdWiki";
    plugid = "wiki.crowdwiki.wiki";
    version = "0.3.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11199/53017/SourceWiki.zip";
      sha256 = "1py63sgi3k4bc7r708m63c38rxdbj5irvqg0lffl44lzk7gk8gw0";
      name = "CrowdWiki-0.3.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.crowd.wiki";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://talk_later.crowd.wiki";
        free = false;
      };
      description = ''
        CrowdWiki
  
  English
  
      editing and Sharing quick documents.
  
  中文
  
      编辑、共享 快速文档提醒
      '';
    };
  }) {};

  crowdin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Crowdin";
    plugname = "Crowdin";
    plugid = "com.crowdin.crowdin-idea";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9463/104864/Crowdin-1.3.0.zip";
      sha256 = "0xdf4kgizq2ic4ipnd26n547640jhqccfahmj27dgjv6q9sjlagk";
      name = "Crowdin-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://crowdin.com/contacts";
      license = lib.licenses.mit;
      description = ''
        This plugin lets you integrate android project with Crowdin. It enables you to upload new source strings to the system instantly as well as download translations from your Crowdin project.
      
      To start using this plugin, create a file with project credentials named crowdin.properties in the root directory of the project.
      
      
        project-id=your-project-numeric-id
        api-token=your-api-token
      
      
      If you are using Crowdin Enterprise, you also need to specify base-url:
      
      
        base-url=https://{organization-name}.crowdin.com
      
      
      
        Plugin will automatically find localization files in the values directory and if renewed it will be uploaded to Crowdin instantly.
        To download translations from Crowdin, choose in menu: Tools &gt; Crowdin &gt; Download Translations. Translations will be exported to the Resources folder.
      
      
      For more about plugin configuration visit plugin homepage.
      '';
    };
  }) {};

  crud = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Crud";
    plugname = "Crud";
    plugid = "com.github.mars05.crud-plugin";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12440/97696/crud-plugin-1.1.2.zip";
      sha256 = "1p7d08kwwmwzrks9ds6f39dgskbkdazadzzrbhhymmk103yhb2gc";
      name = "Crud-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mars05/crud-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Crud Plugin 
    
         A plugin for create, delete, update, and retrieve can help you quickly generate relevant code based on the
            database table structure.
         There are two ways to use: 
        
             Generate project from Crud Plugin
             Project right click to generate code
        
         For more information about curd please visit: GitHub
      '';
    };
  }) {};

  crystal-language-support-updated-for-v2018-2-onwards = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Crystal-language-support-updated-for-v2018.2-onwards";
    plugname = "Crystal language support updated for v2018.2 onwards";
    plugid = "net.kenro.ji.jin.intellij.crystal-2";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11232/51084/Intellij-Crystal-1.3.0.jar";
      sha256 = "0pkz1xaxrglz5fhy4lyp70x4d9fgng49bg7qxihw7g8v7d3di5jk";
      name = "Crystal-language-support-updated-for-v2018.2-onwards-1.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://kenro-ji-jin.net/";
      license = lib.licenses.bsd3;
      description = ''
        This is an update to the original Crystal language plugin to support IDEA 2018.2 onwards.
      Released separately since the original plugin got dormant.
      '';
    };
  }) {};

  csbaselanguage = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CsBaseLanguage";
    plugname = "CsBaseLanguage";
    plugid = "CsBaseLanguage";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13402/108011/CsBaseLanguage.zip";
      sha256 = "07q86abp6bwgwb3nsix9qa500g9qailkwzn9l3l974nimb1lzcbk";
      name = "CsBaseLanguage-1.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vaclav/mpscs";
      license = lib.licenses.asl20;
      description = ''
        The C# base language for MPS
      '';
    };
  }) {};

  csstdlibrary = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CsStdLibrary";
    plugname = "CsStdLibrary";
    plugid = "CsStdLibrary";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13403/106751/CsStdLibrary.zip";
      sha256 = "0ri84ab0xppbczzzfyl1xmjldm930h2rkc16br9kb49cxkinxc6b";
      name = "CsStdLibrary-1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wirthma/CsStdLibrary";
      license = lib.licenses.asl20;
      description = ''
        Stubs corresponding to the C# standard library
      '';
    };
  }) {};

  csstubsgenerator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CsStubsGenerator";
    plugname = "CsStubsGenerator";
    plugid = "CsStubsGenerator";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13401/106750/CsStubsGenerator.zip";
      sha256 = "1wdii8m3g1796q1g537150lbl61i0xc5vv66qdr8c0gqbysxsnl4";
      name = "CsStubsGenerator-1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wirthma/CsStubsGenerator";
      license = lib.licenses.asl20;
      description = ''
        Generator of C# stub models from a stubs specification file
      '';
    };
  }) {};

  csense---kotlin-assistance = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Csense---Kotlin-Assistance";
    plugname = "Csense - Kotlin Assistance";
    plugid = "csense-idea.kotlin-assistance";
    version = "0.9.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12853/89554/kotlin-assistance-0.9.13.zip";
      sha256 = "1qlf8ky0l29wl2nnl4rjygn8vwcwynjr7n0b3irgg20dl16c4dii";
      name = "Csense---Kotlin-Assistance-0.9.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csense-oss/idea-kotlin-assistant";
      license = lib.licenses.mit;
      description = ''
        A plugin that helps you avoid common issues with kotlin &amp; various JVM bugs &amp; unforeseen issues.
     Examples include:
     
         initialization order bugs 
         Usage after overwriting a value (and then using the overwritten in conjunction)
         Potentially bad returns (returning from say "any" might be missing a label)
         Naming issues for variables / function names 
         mismatched lambda parameter names (for example forEachIndex, where the first should be index, but easily can be mistaken) 
         mismatched parameter names (you use the wrong place for the given argument)
      '';
    };
  }) {};

  csense---kotlin-checked-exceptions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Csense---Kotlin-Checked-Exceptions";
    plugname = "Csense - Kotlin Checked Exceptions";
    plugid = "csense-idea.kotlin-checked-exceptions";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12673/106930/idea-kotlin-checked-exceptions-1.1.4.zip";
      sha256 = "0ma5y08h57cmdw4ir719dadkybbyi40q9sfrdxb1cgl0bibhdvrb";
      name = "Csense---Kotlin-Checked-Exceptions-1.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csense-oss/idea-kotlin-checked-exceptions";
      license = lib.licenses.mit;
      description = ''
        A plugin that adds errors / hints / quickfix related to checked exceptions,
     so that if you are interacting with java &amp; checked exceptions, you can get the same error handling.
     Suggestions &amp; bug -&gt; go to the github page and post an issue :)
      '';
    };
  }) {};

  csense---kotlin-test-assistance = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Csense---Kotlin-Test-Assistance";
    plugname = "Csense - Kotlin Test Assistance";
    plugid = "csense-idea.kotlin-test";
    version = "0.275";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12928/90987/idea-kotlin-test-assistance-0.275.zip";
      sha256 = "1b83gkdlz3q1x4l6sx0f9gy3x7n03hl1q8s6vfwx41awnwsn35c6";
      name = "Csense---Kotlin-Test-Assistance-0.275.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csense-oss/idea-kotlin-test-assistance";
      license = lib.licenses.mit;
      description = ''
        A plugin that helps you with testing your code.(junit only at this time)
    For example it provides:  
    
     highlights functions that are missing tests
     highlights classes that are not tested
      '';
    };
  }) {};

  csense---java-assistance = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Csense---java-assistance";
    plugname = "Csense - java assistance";
    plugid = "csense-idea.java-assistance";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12854/68021/csense-idea-java-assistance-0.4.zip";
      sha256 = "0prglxrj44allc4nkhgqdbdg10bi1p8zv4kw5pqr4ykhk7azz16h";
      name = "Csense---java-assistance-0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csense-oss/idea-java-assistant";
      license = lib.licenses.mit;
      description = ''
        A plugin that helps you avoid common issues with Java &amp; various JVM bugs &amp; unforeseen issues.
     Examples include:
     
         mismatched parameter names (you use the wrong place for the given argument)
         inheritance based issues (with regards to initialization)
         initialization order inspection
      '';
    };
  }) {};

  csense---java-test-assistance = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Csense---java-test-assistance";
    plugname = "Csense - java test assistance";
    plugid = "csense-idea.java-test-assistance";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12990/68364/java-test-assistance-0.1.zip";
      sha256 = "1dp0par4kj20cha8lnnsw4vwpbrbfrr25gkpncq9fagddgjj70i0";
      name = "Csense---java-test-assistance-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csense-oss/idea-java-test-assistance";
      license = lib.licenses.mit;
      description = ''
        A plugin that helps you with testing your code.(junit only at this time)
    For example it provides:  
    
     highlights functions that are missing tests
     highlights classes that are not tested
      '';
    };
  }) {};

  csense-kotlin-annotations = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Csense-kotlin-annotations";
    plugname = "Csense kotlin annotations";
    plugid = "csense-idea.csense-kotlin-annotations";
    version = "0.6.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13383/89378/csense-kotlin-annotations-idea-0.6.7.zip";
      sha256 = "14fvk0nlcdlszd9y57zsdd4x2dr3nvp1fa7z0fcnsjwfz04qzmbl";
      name = "Csense-kotlin-annotations-0.6.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.tvedesys.dk/csenseoss";
      license = lib.licenses.mit;
      description = ''
        This plugin provides annotations based Statical analysis (SA) to help with
    
         External annotations
         MPP capable annotations (all of the kotlin ecosystem)
         Threading
         Number ranges
         and more
    
    It works with:
    
        csense annotations
        most android (support &amp; X) annotations
        some Jetbrains annotations
    
    
    This is still an early WIP.
    Feel free to report bugs and suggestions on github
    https://github.com/csense-oss/csense-kotlin-annotations-idea
      '';
    };
  }) {};

  cucumber-scenarios-indexer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cucumber-Scenarios-Indexer";
    plugname = "Cucumber Scenarios Indexer";
    plugid = "com.github.rmatafonov.cucumber-scenarios-indexer";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11208/71235/index-cucumber-scenarios-1.1.0.zip";
      sha256 = "0i7ivsq613kawnzzrdhsapx8crmmydkqf0d17sx1bggxp6mvprnr";
      name = "Cucumber-Scenarios-Indexer-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.linkedin.com/in/rmatafonov";
      license = lib.licenses.gpl3Only;
      description = ''
        A little plugin which updates your Cucumber feature files
        with indexes for scenarios
    
    
        Works from the context menu in a project files tree - will change
        a *.feature file or all the *.feature files in a directory and
        all the subdirectories
    
    
        Just click "Index Cucumber Scenarios" from the context menu
        on a folder or a file in the project files tree
    

    E.g. before: 
    
        Scenario: testing requirement #345 
        Scenario Outline: testing requirement #123 
    
    after: 
    
        Scenario: 01 - testing requirement #345 
        Scenario Outline: 02 - testing requirement #123 
    
    OR
    before:
    
        Scenario: 01 - testing requirement #345 
        Scenario Outline: 02 - testing requirement #123 
        Scenario: 01 - testing requirement #345 
        Scenario Outline: 02 - testing requirement #123 
    
    after: 
    
        Scenario: 01 - testing requirement #345 
        Scenario Outline: 02 - testing requirement #123 
        Scenario: 03 - testing requirement #345 
        Scenario Outline: 04 - testing requirement #123 
    
    
    UPD 27-Oct-2019
    
        Added Editor Pop-up menu action
        Possible update your Feature file with the shortcut Ctrl+Alt+I
      '';
    };
  }) {};

  cucumber-for-groovy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cucumber-for-Groovy";
    plugname = "Cucumber for Groovy";
    plugid = "cucumber-groovy";
    version = "191.4212.41";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7213/54456/cucumber-groovy-191.4212.41.zip";
      sha256 = "05znm0bpvdmj9x7bjyx34lrng2wzyap83dw4r66kp6h01pz2dind";
      name = "Cucumber-for-Groovy-191.4212.41.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-plugins/tree/master/cucumber-groovy";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/JetBrains/intellij-plugins/blob/master/cucumber-groovy/LICENSE.txt";
        free = false;
      };
      description = ''
        Adds support for Cucumber testing tools with step definitions written in Groovy.
      '';
    };
  }) {};

  cucumber-for-java = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cucumber-for-Java";
    plugname = "Cucumber for Java";
    plugid = "cucumber-java";
    version = "191.4212.41";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7212/54457/cucumber-java-191.4212.41.zip";
      sha256 = "0pg2i3ivr6l5mmd0yf8d0ymvi4m97jg5ysg5s04nrk2pxb4n1m0c";
      name = "Cucumber-for-Java-191.4212.41.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-plugins/tree/master/cucumber-java";
      license = lib.licenses.asl20;
      description = ''
        Adds support for Cucumber testing tools with step definitions written in Java.
        
Provides coding assistance for step definitions
Adds a dedicated run/debug configuration type
      '';
    };
  }) {};

  curnotes = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CurNotes";
    plugname = "CurNotes";
    plugid = "de.cusp.cu.curNotes";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10017/38582/CurNotes.jar";
      sha256 = "17c3ck9j2vrmpli9b7nddjmnfdd577003j2z9wda40rjjyzk3h0c";
      name = "CurNotes-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.cusp.de";
      license = lib.licenses.asl20;
      description = ''
        Save Notes that belong to the project 
You can save notes that belong to the project. They will be saved in the .idea-folder. 
So if you don't track your .idea-folder with git, the notes are also not tracked. 
So you can call it "private notes".
      '';
    };
  }) {};

  curnotesmds = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CurNotesMDs";
    plugname = "CurNotesMDs";
    plugid = "de.cusp.cu.curNotesMDs";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10453/43333/CurNotesMDs.jar";
      sha256 = "0cn1q5dn5afflrajgy92yh4xhmxbljwd2m3xwn02n2n07izjb0kr";
      name = "CurNotesMDs-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.cusp.de";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.cusp.de";
        free = false;
      };
      description = ''
        Save Notes that belong to the project 
You can save notes that belong to the project. They will be saved in the .idea-folder. 
So if you don't track your .idea-folder with git, the notes are also not tracked. 
So you can call it "private notes". 
This plugin needs MarkdownSupport
      '';
    };
  }) {};

  current-date-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Current-date-generator";
    plugname = "Current date generator";
    plugid = "com.j92.current-date-generator";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9722/41532/intellij-date-generator-plugin.jar";
      sha256 = "17jvrb0jaa6z1nc3sr011rf9hm6x062ry8wm5cx8i40a8b9dcv3l";
      name = "Current-date-generator-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://joostvandriel.nl";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://joostvandriel.nl";
        free = false;
      };
      description = ''
        Date generator 
Generates the current date in different formats. Configuration 
The default format is : yyyy-MM-dd'T'HH:mm:ssXXX. Go in Preferences to `Date generator` and customize the format.
      '';
    };
  }) {};

  cursive = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Cursive";
    plugname = "Cursive";
    plugid = "com.cursiveclojure.cursive";
    version = "1.10.0-2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8090/105096/cursive-1.10.0-2020.3.zip";
      sha256 = "12z4zfxva1im8h7b1iq5l04vh00i1pklvc05akc50khm8vvvkxl2";
      name = "Cursive-1.10.0-2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://cursive-ide.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://cursive-ide.com/licence-faq.html";
        free = false;
      };
      description = ''
        Provides full Clojure and ClojureScript language support.

  Intelligent Editor featuring code completion, syntax highlighting and real-time error highlighting.
  First-class ClojureScript nearly all functionality is equivalent in Clojure and ClojureScript.
  Code Navigation project and structure views, navigation to symbols, namespaces, classes, and Find Usages.
  REPL Integration full integration with nREPL and clojure.main style REPLs for Clojure and ClojureScript.
  Test Integration interactive running of clojure.test tests, with failures marked in the editor and visual diffs.
  Leiningen Support full support for Leiningen including support for large multi-module projects.
  Structural Editing full support for paredit style editing.
  Code Formatting smart, customisable formatting support.
  Clojure Debugger full support for debugging Clojure, including expression evaluation and debug REPLs.
  Refactorings seamless rename, extract let, automatic imports and requires, and more.
  Interop Support best in class support for Java interop, including smart completion using type inference.

A changelog is available here.
                    Built on: 2021-01-01 22:01
                    Built from: 1.10.1-eap1
      '';
    };
  }) {};

  custom-inspections = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Custom-Inspections";
    plugname = "Custom Inspections";
    plugid = "com.pyfips.intellij.custominspections";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14313/93397/custominspections.jar";
      sha256 = "01lbxxp4cw3akbfjwwkyh490q3gl2wfq66gcan2bpcivkg03la3r";
      name = "Custom-Inspections-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/pyfips/custominspections";
      license = lib.licenses.mit;
      description = ''
        Create inspections for any file type by using regular expressions
      You can use this plugin whenever you want to check something that is not covered by the
      specific language inspections and creating custom inspections using structural search is
      not supported for the file type.
      You can also filter files by their path name, relative to the project directory.
      
      Settings are stored in project directory and can easily be shared with others.
      
      Examples use cases
      
      Create custom inspections for unstructured files like txt or rst.
      Enforce specific code styles, e.g. to write i++ instead of i = i + 1.
      Make sure that specific {placeholders} are used instead of writing e.g. the product name directly.
      Detect wrong spelled names and provide the correct spelling in a tooltip.
      '';
    };
  }) {};

  custom-theme-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Custom-Theme-Color-Scheme";
    plugname = "Custom Theme Color Scheme";
    plugid = "color.scheme.Custom Theme";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12936/68223/Custom_Theme.jar";
      sha256 = "1qcrr4gblqg17wp3ndriwaklh72dc1ivrfvdx2ap9bfjdlx60wgg";
      name = "Custom-Theme-Color-Scheme-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://luandeptrai.com";
      license = lib.licenses.asl20;
      description = ''
        theme light for looking base on theme color in 
https://coolors.co/f2f2f2-000b0f-e7eaeb-003a4c-004d6a
      '';
    };
  }) {};

  custom-view-maker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Custom-View-Maker";
    plugname = "Custom View Maker";
    plugid = "com.funkygeneral.customviewmaker";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10911/49346/CustomViewMaker.zip";
      sha256 = "1g979hsbj70n34ii4v51ph0j91sbviz038106bv9q5p2n29sajnj";
      name = "Custom-View-Maker-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.funkygeneral.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.funkygeneral.com/customviewmaker/eula.html";
        free = false;
      };
      description = ''
        Develop Custom Views without having to rebuild after every step!
      So good!
      '';
    };
  }) {};

  customcodegenerate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CustomCodeGenerate";
    plugname = "CustomCodeGenerate";
    plugid = "com.ming.ccg";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13429/73646/CustomCodeGenerate.jar";
      sha256 = "1kzhdz5vfzv3cn99ip05c7zsjqhhdglzgavnpd4f0v250svf4hmi";
      name = "CustomCodeGenerate-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "#";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.mozilla.org/en-us/mpl/2.0/";
        free = false;
      };
      description = ''
        Automatic Code Generator
      butterKnife + dagger快速代码生成工具 使用方法alt + insert -&gt; Custom Code Generate
      '';
    };
  }) {};

  customize-word-separators = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Customize-word-separators";
    plugname = "Customize word separators";
    plugid = "net.dstribe.custom_word_separators";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13613/80017/customize-word-separators-0.2.1.zip";
      sha256 = "10jbccq665521a910ydqz88ryj8xzyqrcq35np2xh5qrrhkdyvgc";
      name = "Customize-word-separators-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/naoyukik/customize-word-separators-kt";
      license = lib.licenses.mit;
      description = ''
        This plugin allows you to Customize word separators.
      '';
    };
  }) {};

  cxviewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CxViewer";
    plugname = "CxViewer";
    plugid = "com.checkmarx.intellij";
    version = "9.00.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7593/105440/CxViewer-IntelliJ-9.00.16.zip";
      sha256 = "0q3kd5847iw62jiykp0a1k8gvxq77hxai3vp4i15qr2p07iljsjd";
      name = "CxViewer-9.00.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.checkmarx.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.checkmarx.com/terms-of-use";
        free = false;
      };
      description = ''
        Checkmarx plugin for IntelliJ allows retrieving scan results from the Checkmarx scan server.
        Full user's manual can be found here: https://checkmarx.atlassian.net/wiki/spaces/KC/pages/4259972/CxSAST+IntelliJ+Plugin
      '';
    };
  }) {};

  cyideatools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "CyIdeaTools";
    plugname = "CyIdeaTools";
    plugid = "CyIdeaTools";
    version = "1.4.3-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11613/106419/CyIdeaTools-1.4.3-SNAPSHOT.zip";
      sha256 = "0ylflk67bs7ngsdylcsvhzla3l2p3nzgb0lkgj39kdqfr8z7ppvk";
      name = "CyIdeaTools-1.4.3-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.lovecying.com";
      license = lib.licenses.asl20;
      description = ''
        Useful IDEA plugin tools for mulit functions and others for crud code maker 。Also take a view for gaps flow
      '';
    };
  }) {};

  cyan-light-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Cyan-Light-Theme";
    plugname = "Cyan Light Theme";
    plugid = "com.jetbrains.CyanTheme";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12102/102788/CyanTheme.jar";
      sha256 = "1rmb6risjm8dh53rmph3xrzvnrlh7rn8slsf0g9w5nzz271m9b6p";
      name = "Cyan-Light-Theme-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://jetbrains.com";
      license = lib.licenses.mit;
      description = ''
        A light theme in cyan tones. For version 2019.1 and above.
  

  To install:
  
  Go to Settings (Preferences) | Plugins, find the theme plugin and install it
  Restart IDE
  Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
  
  

  Report an issue  |  On GitHub  |  How to make a theme
      '';
    };
  }) {};

  cyberpunkui-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "CyberpunkUI-Color-Scheme";
    plugname = "CyberpunkUI Color Scheme";
    plugid = "color.scheme.CyberpunkUI";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15775/107625/CyberpunkUITheme.jar";
      sha256 = "1hjd45y2pyjr6ybkqf9dk32b5x65mg30076qxslxayxllirf417c";
      name = "CyberpunkUI-Color-Scheme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Python-optimised color theme based on the Cyberpunk 2077 GUI
      '';
    };
  }) {};

  d8gerautocode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "D8gerAutoCode";
    plugname = "D8gerAutoCode";
    plugid = "com.xyz.caofancpu.D8gerAutoCode";
    version = "3.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13576/104966/D8gerAutoCode-3.7.zip";
      sha256 = "0nsd1l4jqkrrywrawak1mh2dviqibqlsdjww1h0j03200lpy8cck";
      name = "D8gerAutoCode-3.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.debuggerpowerzcy.top/about/";
      license = lib.licenses.asl20;
      description = ''
        Java Automatic coding and Multi-lines wrapping and Linux commands and Regex skill are integrated by one plugin.
        
        As JetBrains' said, I believe that you should be good use of tools will save you precious hours on your busing work.
        I always wonder, "If someone else has already solved the repeating work, why do I need to repeat it again?"
        Well, that's a valid question for my drive to find the repeat parts at daily work and develop this plugin to save my time.
        After 13 version iterations, I believe you're really worthy of using this plugin.
        重复编码老瞎忙,️ 写来写去那几行. 不知工具在何方? 八哥智能一键帮!
        Java自动代码生成利器, 字符串批处理, Linux命令工具, 正则表达式奇淫巧技. 
        
            项目|Project
            博客指南|Blog guide
            视频教程||||||
                Video Manual
            
            新手教程||||||
                Tutorial
      '';
    };
  }) {};

  datev-scc-ui-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DATEV-SCC-UI-Theme";
    plugname = "DATEV SCC UI Theme";
    plugid = "de.welcz.datev.scc.ui.theme";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12514/73810/datev-scc-ui-theme-1.2.0.zip";
      sha256 = "0l29yqnrz6m3mn23ifmzpw37l9v5f1zqabk2gj7m25v2pdcw8y6d";
      name = "DATEV-SCC-UI-Theme-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/enolive/datev-scc-theme";
      license = lib.licenses.mit;
      description = ''
        UI Theme with the colors of the
      Internal Software Craft Community at DATEV.
      See screenshots &amp; description on Github.
      '';
    };
  }) {};

  dcevm-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DCEVM-Integration";
    plugname = "DCEVM Integration";
    plugid = "dcevm-plugin";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13604/106567/DCEVM-Plugin.jar";
      sha256 = "1nlkhl5baknrdjnd34npqzsqm0snpplnpqp678fj3pc6a9kqyw1f";
      name = "DCEVM-Integration-2.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/akumaburn/DCEVM-IntelliJ-Plugin";
      license = lib.licenses.mit;
      description = ''
        This is an [IntelliJ IDEA plugin](https://github.com/akumaburn/DCEVM-IntelliJ-Plugin)
      which provides integration with **DCEVM - an OpenJDK-based JVM** that allows for **Java Hot Swapping**
      Targets **JDK 11 ONLY** currently.

      Simply choose one of the options in the event log and click the upper right button to enable hotswap for all your currently open projects.
      '';
    };
  }) {};

  ddd-dmvp = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DDD-DMVP";
    plugname = "DDD-DMVP";
    plugid = "wenhe.online.ddd.dmvp";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12540/63956/dmvp-plugin.zip";
      sha256 = "0i5xvnww4dpsfwhm1mbsaqx8x4xi13vbx91jzpjzfzwmvig8d1rs";
      name = "DDD-DMVP-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://wenhe.online";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/luanqiu/ddd-base";
        free = false;
      };
      description = ''
        DMVP Business Framework Generator
      '';
    };
  }) {};

  ddlab-codepublisher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DDLAB-CodePublisher";
    plugname = "DDLAB CodePublisher";
    plugid = "com.ddlab.tornado.codepublisher";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14732/92544/ddlab-codepublisher-idea-2020-1.3.1.zip";
      sha256 = "1bzd85lmqnkgn1cf5kdjjiqs6nz64z0r60vkfzzlw6azy6vf9yix";
      name = "DDLAB-CodePublisher-1.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://about.me/debadattamishra";
      license = lib.licenses.asl20;
      description = ''
        CodePublisher is a free and open source IntelliJ IDEA plugin which helps developer/s to 
          publish or share the complete Codebase or code snippet directly to GitHub.com,
          GitLab.com or Bitbucket.com.
          This plugin does not provide any git functionality, it only provides an easy way to keep the code in GitHub.com,
          GitLab.com or Bitbucket.com 
          for future references.
          Many times, developers write good code for some POC and code goes into lost world after some time. 
          This plugin will help you to save and share your code in GitHub.com,
          GitLab.com or Bitbucket.com.
          
          
          Advantages of Code Publisher
          
            An convenient way to publish codebase in GitHub.com, GitLab.com or Bitbucket.com for future reference.
            Easy to create a code snippet and share with your friends.
            A non blocking way to share the source code or code snippet.
            Easy to work as it has been developed using pure java and it is free and open source.
            Does not provide GIT functionality but it uses some git functionality internally.
          
          
          How to use
          
          	Make right click on a project and select menu item Publish project to GitHub, GitLab, Bitbucket
          	Make right click on a file and select menu item Share code in GitHub, GitLab, Bitbucket
          
          
          License
          &nbsp;©&nbsp;Copyright 2018 Debadatta Mishra(PIKU)
          Free and Open Source licensed under the Apache License, Version 2.0.
      '';
    };
  }) {};

  ddlab-gitpusher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DDLAB-Gitpusher";
    plugname = "DDLAB Gitpusher";
    plugid = "com.ddlab.tornado.gitpusher.id";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11488/60688/ddlab-gitpusher-idea-1.0.2.zip";
      sha256 = "1phs108dz5l5nxbx29j1b6yf5yvhalw0fgzd738bc2j32lngw83i";
      name = "DDLAB-Gitpusher-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://about.me/debadattamishra";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "osl-3.0";
        free = false;
      };
      description = ''
        Git Pusher is an IntelliJ IDEA plugin which helps in pushing the complete Codebase or code snippet directly to GitHub or Bitbucket.
          This plugin provides the following basic features:
          
            A hassle free way to push codebase in GitHub or Bitbucket.
            Easy to create a code snippet and share with your friends.
            A non blocking way to push the code or code snippet.
            Easy to work as it has been developed using pure java and it is free and open source.
            Does not provide GIT functionality.
          
          License
          &nbsp;©&nbsp;Copyright 2018 Debadatta Mishra(PIKU)
          Free and Open Source licensed under the Apache License, Version 2.0.
      '';
    };
  }) {};

  dg-test-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DG-Test-Helper";
    plugname = "DG Test Helper";
    plugid = "com.github.kassak.dg-test-helper";
    version = "0.08";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12937/104868/dg-test-helper-0.08.zip";
      sha256 = "021f8m5skm28w3ldkcl7bc5rvn5vjfc6kjnvyl603czh17pibsih";
      name = "DG-Test-Helper-0.08.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kassak/geo-support";
      license = lib.licenses.mit;
      description = ''
        Helps to run tests easier. Some more chars.
      '';
    };
  }) {};

  dgt-codegen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DGT-CodeGen";
    plugname = "DGT-CodeGen";
    plugid = "com.dgtis.code.gen.plugin.code-gen-plugin";
    version = "6.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12465/72644/code-gen-plugin-6.0.1.zip";
      sha256 = "0k18pg6axhj3m3wldc12ppx4sf9jca97s7sxp4cbfhbfg9jsbkdh";
      name = "DGT-CodeGen-6.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.dgtis.com/";
      license = lib.licenses.asl20;
      description = ''
        The plug-in generates the corresponding Java file by right-clicking the "Project" menu bar and using the CodeGen option.
     Generated java files are formatted according to Volecity template
    The functions of the plug-in are as follows: 
    
      Generate templates for persistent classes.
      Configure the database connection properties of plug-ins
      Automatically generate Service, ServiceImpl,Repo templates
      Database selection function
      Generate file directory selection
      Add json to generate entity classes.
      '';
    };
  }) {};

  dgt-doclever = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DGT-DOClever";
    plugname = "DGT-DOClever";
    plugid = "com.dgtis.doclever.plugin.doclever-plugin";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12506/63605/DGT-DOClever-1.0.1.zip";
      sha256 = "1a1czfc3al5v16c24ky5mpzbq4nisia8qfaxqj2cmxfdsrwji0x0";
      name = "DGT-DOClever-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.dgtis.com";
      license = lib.licenses.asl20;
      description = ''
        TThe plug-in can right-click the Java file annotated by the Controller and select the doclever menu
               Then select the method that needs to import DOCLever to generate JSON.
            The functions of the plug-in are as follows: 
            
                Generate JSON for the DOCLever import group
      '';
    };
  }) {};

  dpframeplugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DPFramePlugin";
    plugname = "DPFramePlugin";
    plugid = "com.deparse.dpframe.plugin";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10258/41778/DPFramePlugin.zip";
      sha256 = "1wrhkxxplzads00dlcqik2fwpjzn6vk20gr0mp40ypisckh0am68";
      name = "DPFramePlugin-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.deparse.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.deparse.com";
        free = false;
      };
      description = ''
        Plugin for: 
 1）Generate fields for Butterknife; 
 2）Generate fields by findViewById; 
 4）Generate Java bean with Gsonformat
 Directions: 
 http://docs.deparse.com/
      '';
    };
  }) {};

  dsl-platform = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DSL-Platform";
    plugname = "DSL Platform";
    plugid = "com.dslplatform.ideaplugin";
    version = "0.9.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8227/50854/DSL-Platform.zip";
      sha256 = "1v8m424y3z8wi2sdsvvjqqa5r3cx41ls3lg8hfz0xrx8c57y2x9d";
      name = "DSL-Platform-0.9.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://dsl-platform.com";
      license = lib.licenses.bsd3;
      description = ''
        IDEA integration with DSL Platform.
      dsl platform ddd
      '';
    };
  }) {};

  dsltrans = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DSLTrans";
    plugname = "DSLTrans";
    plugid = "DSLTrans";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10385/83904/DSLTrans.zip";
      sha256 = "1jkv9drkrwf4sr4q39alzmdgnzzrb0q4cqixp8qfj0n8sh5jnjf9";
      name = "DSLTrans-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mbeddr/language_verification";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "epl-1.0";
        free = false;
      };
      description = ''
        A plugin to a) Build DSLTrans transformations and contracts, b) Execute those transformations on models, and c) Verify the transformations using the contract language. Please see the repository README for usage instructions.
      '';
    };
  }) {};

  dto-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DTO-generator";
    plugname = "DTO generator";
    plugid = "com.nvinayshetty.DTOnator";
    version = "V0.997";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7834/50380/DTOnator.zip";
      sha256 = "198hgfwm34xj4bgs5s6h0q100wvyf1b648j0d4wsxixcf1kbvyg6";
      name = "DTO-generator-V0.997.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nvinayshetty/DTOnator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        Data Transfer Object(DTO) generator that generates Java classes from the given feed.
      This is a open source project please raise a feature request or file a bug if any,at our  repository we are looking forward for your feedBack
      '';
    };
  }) {};

  dtoutils = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DTOUtils";
    plugname = "DTOUtils";
    plugid = "cc.yihy.dto";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10211/79614/DTOUtils-IDEA.zip";
      sha256 = "049mxn3db0m23n7xbplphmcngh1n36gigsv5abgrsl28hz5h459v";
      name = "DTOUtils-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Yihy/resources_cn";
      license = lib.licenses.asl20;
      description = ''
        English: Using this tool, you can generate Entity &lt;=&gt; Model code! 
      中文描述： 使用这个工具， 你可以生成实体互相转换(Entity&lt;=&gt;Model)代码！
      '';
    };
  }) {};

  daedalus-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Daedalus-support";
    plugname = "Daedalus support";
    plugid = "org.avallach.daedalus.ide";
    version = "0.5";
    src = fetchurl {
      url = "https://github.com/Avallach7/daedalus-intellij/raw/master/daedalus-intellij.jar";
      sha256 = "1x1q9xyvhlpisisn6saq0s708nzf3aqrgzqxn6l7akq1rfl628v7";
      name = "Daedalus-support-0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Avallach7/daedalus-intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Avallach7/daedalus-intellij";
        free = false;
      };
      description = ''
        Support for Daedalus language, dedicated for gameplay scripting in games on zEngin engine (Gothic I, II, II:NOTR). 
This project was developed primarily for SoulFire group. Discussion thread: themodders.org/index.php?topic=27411
      '';
    };
  }) {};

  dafny-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dafny-Support";
    plugname = "Dafny Support";
    plugid = "DafnyPlugin4Intellij.DafnyPlugin4Intellij";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12709/66472/Dafny_Support-1.0.4.zip";
      sha256 = "1bknw1xzf6h63d5jnxhidxlvvp6lv6v0i8vb0mdg9wfifmy9fpzr";
      name = "Dafny-Support-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DanielFGA/Dafny4IntelliJ";
      license = lib.licenses.asl20;
      description = ''
        Dafny Support for IntelliJ with verification and execution.
      '';
    };
  }) {};

  dalesbred = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dalesbred";
    plugname = "Dalesbred";
    plugid = "fi.evident.dalesbred.plugin.idea";
    version = "0.5.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7313/32157/Dalesbred-0.5.2.zip";
      sha256 = "1b39qyp8b861gs0r72iwyw2zwr43663yz0c0rlw3h6yrhw6ndn9i";
      name = "Dalesbred-0.5.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/EvidentSolutions/dalesbred-idea-plugin";
      license = lib.licenses.mit;
      description = ''
        Dalesbred support.
      '';
    };
  }) {};

  darcula-darker-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Darcula-Darker-Theme";
    plugname = "Darcula Darker Theme";
    plugid = "com.vecheslav.darculaDarkerTheme";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12692/68787/darcula-darker.jar";
      sha256 = "16lkca456nyphlqkqkxx03i8d3b511skwqhk3gg52wp64cahis39";
      name = "Darcula-Darker-Theme-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vecheslav/darcula-darker";
      license = lib.licenses.mit;
      description = ''
        A dark theme based on Darcula, but with more contrasting tones. For JetBrains IDEs, version 2019.1 and above.
      

      To install:
      
      Go to Settings (Preferences) | Plugins, find the theme plugin and install it
      Restart IDE
      Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
      
      
      Report an issue  |  On GitHub
      '';
    };
  }) {};

  darcula-pitch-black = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Darcula-Pitch-Black";
    plugname = "Darcula Pitch Black";
    plugid = "dev.patrickpichler.darculaPitchBlackTheme";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14059/82616/darcula-pitch-black.jar";
      sha256 = "0ic5x1ji51apvhrh8pgqnmlp085iwhf7638d3bfdprbvxdccqp2h";
      name = "Darcula-Pitch-Black-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://git.sr.ht/~patrickpichler/darcula-pitch-black";
      license = lib.licenses.mit;
      description = ''
        A dark theme based on Darcula Solid, but with pitch black background.
      

      To install:
      
      Go to Settings (Preferences) | Plugins, find the theme plugin and install it
      Restart IDE
      Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
      
      
      Report an issue  |  On sourcehut
      '';
    };
  }) {};

  darcula-solid-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Darcula-Solid-Theme";
    plugname = "Darcula Solid Theme";
    plugid = "com.vecheslav.darculaSolidTheme";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13920/98697/darcula-solid.jar";
      sha256 = "1g3xl22d9iwhv78x6x8125mid6wnwra4yxdkrn5nyzyp5xzph2p8";
      name = "Darcula-Solid-Theme-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vecheslav/darcula-solid";
      license = lib.licenses.mit;
      description = ''
        A dark theme based on Darcula, but with MORE contrasting &amp; solid tones.
      

      To install:
      
      Go to Settings (Preferences) | Plugins, find the theme plugin and install it
      Restart IDE
      Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
      
      
      Report an issue  |  On GitHub
      '';
    };
  }) {};

  darcula-sombre = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Darcula-Sombre";
    plugname = "Darcula Sombre";
    plugid = "lermitage.jetbrains.darcula.sombre";
    version = "1.9.0.192";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12264/74810/darcula_sombre-1.9.0.192.jar";
      sha256 = "1v975adfg4d4mnv2fz0nqjc9a37bf2qc82ibsa646gj6f31si3ib";
      name = "Darcula-Sombre-1.9.0.192.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jonathanlermitage";
      license = lib.licenses.mit;
      description = ''
        Darcula Sombre Theme: like Darcula Theme, with darker colors and unobtrusive borders.
      Apply theme: File &gt; Settings... &gt; Appearance &amp; Behavior &gt; Appearance &gt; choose Darcula Sombre theme and validate.
      '';
    };
  }) {};

  darcula-blacker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Darcula-blacker";
    plugname = "Darcula (blacker)";
    plugid = "com.jgentil.theme.darcula_blacker";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12201/60623/darcula_blacker.jar";
      sha256 = "1gncny7wq1ccj3iiyf30sk72ri1jjrpszdmakwqj87ff5rdzci96";
      name = "Darcula-blacker-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jgentil/darcula_blacker";
      license = lib.licenses.asl20;
      description = ''
        Extends the Darcula UI Theme to have black backgrounds in certain areas instead of grey.
      '';
    };
  }) {};

  dark-blue-theme-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dark-Blue-Theme-Color-Scheme";
    plugname = "Dark Blue Theme Color Scheme";
    plugid = "color.scheme.Dark Blue Theme";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10592/44740/Dark_Blue_Theme.jar";
      sha256 = "0cca5ds89g44fmvpr1l6zwnimj7gz2gaz7yidz01310qdnf7apxb";
      name = "Dark-Blue-Theme-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://";
        free = false;
      };
      description = ''
        Dark Blue Theme
      '';
    };
  }) {};

  dark-candy-ui-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dark-Candy-UI-Theme";
    plugname = "Dark Candy UI Theme";
    plugid = "dark_candy";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12330/61659/dark_candy.jar";
      sha256 = "0g00ijc8di3zigrddkasmymyjh9a71s41dzcnw4hxpm1dpag46k1";
      name = "Dark-Candy-UI-Theme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Dark Candy UI Theme is a plugin for JetBrains IDE. 
      Originally inspired by the Darcula Theme and it offers: 
      
        Beautiful color schemes supporting a majority of languages;
        Main code color is red (candy);
        Darker background with red elements.
      '';
    };
  }) {};

  dark-flat-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dark-Flat-Theme";
    plugname = "Dark Flat Theme";
    plugid = "dark.flat.theme";
    version = "0.17";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12165/60113/DarkFlatTheme.jar";
      sha256 = "1m2bkwdsg68jc40r931dwpgz7nkdq56cjz2rixs4dp65m1f7h3pf";
      name = "Dark-Flat-Theme-0.17.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Dark LaF theme based on 'Rider Dark' with more 'flat' design and minimum visible borders
      '';
    };
  }) {};

  dark-jeff-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dark-Jeff-Theme";
    plugname = "Dark Jeff Theme";
    plugid = "com.jfboily.darkjeff";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12198/98503/dark-jeff.jar";
      sha256 = "14ca85chz0dpmd63ssshpcyr32zrvs12ihfmldla1mihln507aic";
      name = "Dark-Jeff-Theme-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jfboily.com";
      license = lib.licenses.mit;
      description = ''
        My version of a dark theme.
      Includes a minimally modified version of Rainglow Azure color scheme (by Dayle Rees).
      enjoy!
      '';
    };
  }) {};

  dark-orange-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dark-Orange-Theme";
    plugname = "Dark Orange Theme";
    plugid = "com.adrian.dima.theme.dark.orange";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12259/61025/dark-orange.jar";
      sha256 = "0xqrdjc13ds571r8v6fym9wyr9q1wrna53glwzccg6qpgpk6b0a0";
      name = "Dark-Orange-Theme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/adrianclaudiudima";
      license = lib.licenses.asl20;
      description = ''
        Dark Orange Theme
      '';
    };
  }) {};

  dark-purple-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dark-Purple-Theme";
    plugname = "Dark Purple Theme";
    plugid = "com.jetbrains.darkPurpleTheme";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12100/102785/DarkPurpleTheme.jar";
      sha256 = "080r14gg4xpy0yj1g13vg5znr3yam9v66845dnv82mic8jvmwpva";
      name = "Dark-Purple-Theme-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.mit;
      description = ''
        A dark theme in purple tones. For version 2019.1 and above.
  

  To install:
  
  Go to Settings (Preferences) | Plugins, find the theme plugin and install it
  Restart IDE
  Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
  
  

  Report an issue  |  On GitHub  |  How to make a theme
      '';
    };
  }) {};

  darktheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DarkTheme";
    plugname = "DarkTheme";
    plugid = "io.eightpigs.intellij.darktheme";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12425/66364/DarkTheme.jar";
      sha256 = "0mx9x27czjrs7l2jkc833yylpbrfwh58p5r3wcwdbd3hw8idvsxg";
      name = "DarkTheme-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://eightpigs.io";
      license = lib.licenses.mit;
      description = ''
        DarkTheme


    

A dark theme for JetBrains IDEs.
      '';
    };
  }) {};

  darkyens-time-tracker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Darkyens-Time-Tracker";
    plugname = "Darkyen's Time Tracker";
    plugid = "com.darkyen.darkyenustimetracker";
    version = "1.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9286/84537/DarkyenusTimeTracker.jar";
      sha256 = "1lwhr3n0ckw5fh9z0fjjmhg23pf4pf3rxz42629hm19vaf7b3amq";
      name = "Darkyens-Time-Tracker-1.5.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://darkyen.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://unlicense.org";
        free = false;
      };
      description = ''
        Track the time spent on a project through a lightweight status bar widget.

        Overview
        
            Click the widget or start typing to start counting
            Pauses the timer automatically when idle
            Click timer widget for options
            Git integration, inject the time it took to create the commit into the commit message
        

        Features
        
            Pause or stop after a given time of inactivity (clicking any buttons/keys or scrolling).
            When returning after a period of inactivity and the counting is paused, short time durations are automatically counted in, long periods can be counted in manually through a message popup. The auto-count duration is configurable.
            Start counting automatically when you type something, even when stopped. Configurable.
            Pause the timer when you work on a different project within the same IDE process, useful when switching projects frequently. Configurable.
            The time format on the widget is configurable using a simple but flexible template substitution. Includes clear documentation of the format, including examples of frequently requested formats.
            Ability to inject the time it took to create a Git commit through a Git commit hook, using the same customizable time format. The time is appended at the end of the message, unless your template contains &lt;#DTT#&gt;, which is then replaced by the formatted time instead.
            Reset the time (and the hidden Git counter time) manually through a button in settings or through an IDE action.
            Manually adjust counted time.
        

        Time is saved in IDE's workspace files, so it does not clutter the workspace directory.
      '';
    };
  }) {};

  dart-data-class = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dart-Data-Class";
    plugname = "Dart Data Class";
    plugid = "andrasferenczi.dart-data-plugin";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12429/87737/dart-data-plugin-0.1.0.zip";
      sha256 = "0ff932d74hxnb4xswbcf51802r6rz9minjfwix2d7s2mkn7ypidv";
      name = "Dart-Data-Class-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andrasferenczi/dart-data-plugin";
      license = lib.licenses.asl20;
      description = ''
        Essential utility methods generator for Dart data classes.
        
        
        Features:
        
            Named argument constructor generator
            copyWith() method generator
            toMap() / fromMap() methods generator
        

        Featured with a couple additional settings.
        
        Find out more on the project's Github page.
        
        Not an official plugin.
      '';
    };
  }) {};

  dart-fast-imports = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dart-Fast-Imports";
    plugname = "Dart Fast Imports";
    plugid = "org.arxing.dart_fast_import";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13430/74601/dart-fast-import.zip";
      sha256 = "024laj88bzmb9rfs5ffs0w4bmz37290z0k67gnvvnyfgp79g8jg0";
      name = "Dart-Fast-Imports-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Arxing/plugin-dart-fast-import";
      license = lib.licenses.asl20;
      description = ''
        This plugin can help you import file fast.
      '';
    };
  }) {};

  dart-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dart-Helper";
    plugname = "Dart Helper";
    plugid = "dart.helper.exgou.cn";
    version = "1.2.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14092/105663/dart_helper.zip";
      sha256 = "0mwls5n3m4sqz7rabmil4avg5khk0dkpvakzlw7zsf8bvrmkyamk";
      name = "Dart-Helper-1.2.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wskfjtheqian";
      license = lib.licenses.asl20;
      description = ''
        Dart language development aids,
        
        Dart 语言开发助手
        
        1. Create dart file based on JSON data    
        1. 根据Json数据创建 Dart 文件(支持中文Json Key)
        
        2. Add dart class according to JSON data      
        2. 根据Json数据创建 Dart 类(支持中文Json Key)
        
        3. Add formMap function       
        3. 添加 formMap 函数用于解析 Json
        
        4. Add toMap function         
        4. 添加 toMap 函数用于生成中文
        
        
        Support data types
        
        Int, double, string, bool, datetime, list, map, enum, class, generic
        
        5. Add copyWith function    
        添加 copyWith 函数
        
        8. Add auto create dio request code    
        8. 根据函数自动添加 dio 请求代码
        
        Automatic translation Json Key    
        自动翻译Json Key
        
        https://gitee.com/wskfjt/dart_helper
        
        https://github.com/wskfjtheqian/dart_helper
      '';
    };
  }) {};

  dart-json-serialization-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dart-Json-Serialization-Generator";
    plugname = "Dart Json Serialization Generator";
    plugid = "org.bdshadow.json.serialization.generator";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12127/84811/DartJsonSerializationGeneratorIdeaPlugin.jar";
      sha256 = "1ak0gzdpc4ni6amc5vghxlj58dyv3ghwmwxqjwr1a1j0x2bimzs1";
      name = "Dart-Json-Serialization-Generator-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bdshadow/DartJsonSerializationGeneratorIdeaPlugin";
      license = lib.licenses.asl20;
      description = ''
        Generator plugin for JsonSerializable  Dart classes. Generates Dart fromJson/fromMap and toJson/toMap methods based on fields of the class
      '';
    };
  }) {};

  dash = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dash";
    plugname = "Dash";
    plugid = "com.paperetto.dash";
    version = "3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7351/41539/Dash.jar";
      sha256 = "0vi40z253cyszs4dzjgbdqimx05b6aaaybcf0ljx469wxn5r0xkh";
      name = "Dash-3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gdelmas/IntelliJDashPlugin";
      license = lib.licenses.mit;
      description = ''
        A smart and simple plugin that provides keyboard shortcut access for Dash, Velocity or Zeal in IntelliJ IDEA, RubyMine, WebStorm, PhpStorm, PyCharm, DataGrip, CLion, GoLand and Android Studio. 

Usage
 
The default shortcut assigned to smart-search is Cmd-Shift-D (Mac OS X) or Ctrl-Shift-D (Windows, Linux). 
A menubar command named either "Smart-Search Documentation" can be found in the "Tools" menu. 
The plugin either searches for the statement at caret position or the current selection. It will identify the programming language in use and request filtered results accordingly. A non filtered search over all documentation entries can be invoked by adding the Alt modifier key to the shortcut. "Search all Documentation" is also available in the tools menu. 

Configuration
 
Shortcut 
You can change the shortcut at Preferences -&gt; Keymap -&gt; Plug-ins -&gt; Dash. 
Toolbar Icon 
You can add a button to the toolbar. Right-click the menubar -&gt; Customize […]. You will find the button under "Plug-ins -&gt; Dash". 

Supported API Documentation Browsers
 
Kapeli Dash (Mac OS X) 
Dash is an API Documentation Browser and Code Snippet Manager. Dash stores snippets of code and instantly searches offline documentation sets for 150+ APIs (for a full list, see below). You can even generate your own docsets or request docsets to be included. http://kapeli.com/dash 
Velocity (Windows) 
Velocity gives your Windows desktop offline access to over 150 API documentation sets (provided by Dash for OS X). https://velocity.silverlakesoftware.com 
Zeal (Linux &amp; Windows) 
Zeal is a simple offline API documentation browser inspired by Dash (OS X app). http://zealdocs.org
      '';
    };
  }) {};

  dash-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dash-Progress-Bar";
    plugname = "Dash Progress Bar";
    plugid = "some.awesme";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13709/76507/flutter_dash_progress_bar.jar";
      sha256 = "0n0m7awkq17wqdgdsawpfhzfia18mmhmkl4d2jlq1mmspq8yb1p9";
      name = "Dash-Progress-Bar-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        Flutter Dash Progress Bar for IJ based IDEs.
      '';
    };
  }) {};

  dashboard-integration-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dashboard-Integration-Plugin";
    plugname = "Dashboard Integration Plugin";
    plugid = "org.slayer.testLinkIntegration";
    version = "3.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8279/76290/untitled3.zip";
      sha256 = "1dfbsrg5x4nn2p7iq89rbb9r6qrdaql9mj5fiic5k0d66dzdpq22";
      name = "Dashboard-Integration-Plugin-3.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/obscuratus/Dashboard";
      license = lib.licenses.gpl3Only;
      description = ''
        Generating log step/verify based on test information from Dashboard.
      '';
    };
  }) {};

  data-binding-formatter--databinding-model-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Data-Binding-Formatter--Databinding-Model-Generator";
    plugname = "Data Binding Formatter : Databinding Model Generator";
    plugid = "moe.xing.databindingformatter";
    version = "0.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8616/54525/DataBindingFormatter.jar";
      sha256 = "14zihl0sbrrfsg7fpsa0ijwf50fhzznf787h3rv2l9iwxgbjmxyz";
      name = "Data-Binding-Formatter--Databinding-Model-Generator-0.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://loli.xing.moe";
      license = lib.licenses.gpl3Only;
      description = ''
        Quickly add android data binding setter and getter ,notifyChange and PropertyChangeRegistry methods for a model.

      After created model,open Generate window, select Data Binding Formatter.

      AndroidX supported.

      todo:
      allow set notify method name.

      GitHub repo: https://github.com/Qixingchen/DataBindingModelFormatter 
      
      If you find a Bug,please create a Issue in GitHub

       screenshot:
      '';
    };
  }) {};

  data-binding-getter-setter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Data-Binding-getter-setter";
    plugname = "Data Binding getter setter";
    plugid = "com.leon.databinding.gettersetter";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9814/36552/DataBindingGetterSetter.jar";
      sha256 = "0gfqr5ddpkyd3r0bav5wrnjxr25nw5646i0f3k6x0k1c0phh4bkc";
      name = "Data-Binding-getter-setter-0.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/njleonzhang/vue-data-tables";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/njleonzhang/vue-data-tables";
        free = false;
      };
      description = ''
        android data binding setter and getter, similar to the default getter/setter.
 
 After created model, open Generate window, select DB Getter and Setter.
 
 
GitHub repo: https://github.com/njleonzhang/DataBindingGetterSetter
      '';
    };
  }) {};

  data-version-control-dvc-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Data-Version-Control-DVC-Support";
    plugname = "Data Version Control (DVC) Support";
    plugid = "com.davidprihoda.dvc";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11368/57724/Data_Version_Control__DVC__Support-0.0.5.zip";
      sha256 = "1x9nnrlwfg05rhr3l87gn142y2czkls3sp8c8vh6jp7bgij6a10y";
      name = "Data-Version-Control-DVC-Support-0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://dvc.org";
      license = lib.licenses.asl20;
      description = ''
        Data Version Control (DVC) file support.
        
        Contribute: https://github.com/iterative/intellij-dvc
        
        For more about DVC see the DVC Website or DVC GitHub.
        
        Features:
        
            Bash syntax highlighting in cmd field (when BashSupport plugin is installed)
                Known issue: Fails for multi-line commands
            
            Click-through file references for dependencies and outputs (ctrl+click)
            DVC file syntax highlighting (YAML)
            DVC file icon
      '';
    };
  }) {};

  dataweave-2-0- = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DataWeave-2.0.";
    plugname = "DataWeave 2.0.";
    plugid = "org.mule.tooling.intellij.dataweave.v2";
    version = "2.0.48";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10362/96999/data-weave-plugin-v2-2.0.48.zip";
      sha256 = "0z7sf7fzmx9slnx42lba5qwm1sa701i5lplw7rzbmgsaf6wrc359";
      name = "DataWeave-2.0.-2.0.48.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mulesoft-labs/data-weave-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        DataWeave 2.0 Intellij Plugin. This plugin allows to edit, run debug data weave files.
      '';
    };
  }) {};

  dataweave-plugin-for-intellij = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DataWeave-Plugin-for-IntelliJ";
    plugname = "DataWeave Plugin for IntelliJ";
    plugid = "org.mule.tooling.intellij.dataweave";
    version = "0.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8458/37863/data-weave-plugin-0.13.zip";
      sha256 = "0157ml89p5znl8sazg4l86cx82dq148qr56jax7axq7n3qvhrzma";
      name = "DataWeave-Plugin-for-IntelliJ-0.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/machaval/mule-esb-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/machaval/mule-esb-plugin";
        free = false;
      };
      description = ''
        DataWeave Plugin for IntelliJ. This plugin allows to edit, run and debug DataWeave files.
      '';
    };
  }) {};

  database-inspector = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Database-Inspector";
    plugname = "Database Inspector";
    plugid = "com.chimerapps.moorinspector";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15364/108367/plugin-0.1.4.zip";
      sha256 = "04shm57manffn0f1420j2yn8n201158cqdf3bw381843k5saxzdm";
      name = "Database-Inspector-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Chimerapps";
      license = lib.licenses.mit;
      description = ''
        This plugin enables the moor inspector ui inside the IDE. Use the moor_inspector dart/flutter library
        to connect and inspect your databases during development. After running your dart/flutter app, use the connect
        button to discover and connect your process/device and start inspecting!
      '';
    };
  }) {};

  database-navigator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Database-Navigator";
    plugname = "Database Navigator";
    plugid = "DBN";
    version = "3.2.1395.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1800/106906/DBN-20.0.zip";
      sha256 = "0fimvzkwsch00kcsrsrz855y42m5iyyp000713mqpff6bdd58qhx";
      name = "Database-Navigator-3.2.1395.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.net/confluence/display/CONTEST/Database+Navigator";
      license = lib.licenses.asl20;
      description = ''
        Database development, scripting and navigation tool
            This product adds extensive database development and maintenance capabilities to the IntelliJ IDEA development environment and related products.
            Along with a qualified and IDE-compliant SQL and PL/SQL editor, it provides advanced database connection management,
            script execution support, database objects browsing, data and code editor, support for database compiler operations, method execution and debugging,
            database objects factory, as well as various navigation capabilities between all its components.
            See features overview on the support page.

            Supported Databases:
            
                Oracle
                MySQL
                SQLite
                PostgreSQL
                Any JDBC compliant database (EXPERIMENTAL)
            
            
            This tool is free for personal and commercial usage. 
            Donations are very welcome though.
      '';
    };
  }) {};

  databinding-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Databinding-Support";
    plugname = "Databinding Support";
    plugid = "com.github.shiraji.databindinglayout";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9271/39908/databinding-support-1.1.1.zip";
      sha256 = "0s8v2mcwknaw2g5vp5spm3rbh2pxczprg7fgk1535iy6a7fsb0am";
      name = "Databinding-Support-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/9271";
      license = lib.licenses.asl20;
      description = ''
        Intellij plugin that support Android Data Binding Library. This plugin has following features: 
 
 Convert non-databinding layout to databinding layout 
 Add data tag 
 Add import tag 
 Add variable tag 
 Wrap with @{} 
 Wrap with @={} 
 Switch between @{} and @={} 
 Jump from a class to layouts that the instance is binded
      '';
    };
  }) {};

  databindingconvert = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DatabindingConvert";
    plugname = "DatabindingConvert";
    plugid = "cn.mycommons.tools.plugin.databindingconvert";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8611/78185/DatabindingConvert-0.2.0.zip";
      sha256 = "02hlwxjmg2gp760awm8k360cyzvjpn3ffmqwpdi9l4mj3jf612sn";
      name = "DatabindingConvert-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LiushuiXiaoxia/DatabindingConvert";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/LiushuiXiaoxia/DatabindingConvert/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Convert normal android xml layout to databinding layout.
      '';
    };
  }) {};

  dataiku-dss = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dataiku-DSS";
    plugname = "Dataiku DSS";
    plugid = "com.dataiku.dss.intellij";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12511/74828/dss-integration-pycharm-1.1.0.jar";
      sha256 = "0hm0caz96ra2z9nq3f6v4j0wpa38f0m96x23qa5mx0jss8ssbvmv";
      name = "Dataiku-DSS-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.dataiku.com";
      license = lib.licenses.asl20;
      description = ''
        Dataiku DSS plugin to edit Recipes and Plugins directly from PyCharm or IntelliJ IDEA.
      '';
    };
  }) {};

  datalog-language-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Datalog-Language-Support";
    plugname = "Datalog Language Support";
    plugid = "com.lfrobeen.intellij-datalog";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13056/81454/intellij-datalog-public-1.1.0.zip";
      sha256 = "0is6yd7ixmgxgpw6x1ddg65yw1yx58r84gs7099fibipjl59vvfn";
      name = "Datalog-Language-Support-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LFrobeen/intellij-datalog";
      license = lib.licenses.mit;
      description = ''
        Datalog language support for JetBrains products.
      '';
    };
  }) {};

  datanucleus-intellij-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Datanucleus-Intellij-Plugin";
    plugname = "Datanucleus Intellij Plugin";
    plugid = "me.serce.datanucleus";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9268/47583/DatanucleusIntellijPlugin-0.3.zip";
      sha256 = "0rwhzlhdayll1aiv5z2cjs93jpniyj1w4w3h8kslx4ivbiflnb41";
      name = "Datanucleus-Intellij-Plugin-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://serce.me";
      license = lib.licenses.asl20;
      description = ''
        Plugin allows you enhance Datanucleus classes after compilation (currently JPA only)
      '';
    };
  }) {};

  datetimeconverter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Datetimeconverter";
    plugname = "Datetimeconverter";
    plugid = "de.imgruntw.plugin.datetimeconverter";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10208/65794/Datetimeconverter-1.6.zip";
      sha256 = "0788fib3npfyj1dh551pvkx04zwvj4m5z2lxjk1mqbip146s27y7";
      name = "Datetimeconverter-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/imgruntw/date-time-converter-plugin";
      license = lib.licenses.asl20;
      description = ''
        1. Converting between milliseconds and textual date time.
            2. Formatting representation of date time. (See patterns for formatting from DateTimeFormatter)
            3. Converting a batch of milliseconds from the clipboard. (Ctrl + V or ⌘ + V)
            4. Editable dropdown with some default format patterns.
            5. Editable dropdown with some default time zones ids.
            6. Timestamps can be displayed as milliseconds and seconds.
      '';
    };
  }) {};

  davidandroidstring = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DavidAndroidString";
    plugname = "DavidAndroidString";
    plugid = "com.david.androidstring";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15720/107140/DavidAndroidString.jar";
      sha256 = "0h2pn7b90wcvb9m21mas9h7cnh0j5rs4k0qyavkm3c629aww7yky";
      name = "DavidAndroidString-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.litehome.ltd:666/";
      license = lib.licenses.asl20;
      description = ''
        Android studio(4.0) strings convertor.
    This plugin can change string in res/layout/xxx.xml to value/strings.xml.
    This plugin is for android studio above 4.0.
    There are 2 actions:
  1) sortString: happens when you right click the res/layout folder in a android studio project, then this action will sort all the strings in the layout folder to the value/strings.xml file(not include the @string/xxx string)
  2) toStringxml: happens when you right click the layout file in the layout folder in the android studio project, you need to double click or select the text you want to turn to the
  value/strings.xml file, then it will replace the text with @stirng/layoutname_text_line num in the layout file, then the string into the value/strings.xml file
      '';
    };
  }) {};

  day-and-night = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Day-And-Night";
    plugname = "Day And Night";
    plugid = "com.daynight.plugin";
    version = "1.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12006/93845/plugin-1.2.5.jar";
      sha256 = "17j00c9xv4fhq3k5sdvqh7vb274kja8h4s0aa04jms4lf08647sy";
      name = "Day-And-Night-1.2.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/iBavtovich/day-and-night-plugin";
      license = lib.licenses.mit;
      description = ''
        This plugin added possibility for automatic theme and color scheme changes according user's schedule settings
      '';
    };
  }) {};

  day-off-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Day-Off-Color-Scheme";
    plugname = "Day Off Color Scheme";
    plugid = "color.scheme.Day Off";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14417/87691/Day_Off.jar";
      sha256 = "1b4f3jg9a8rakzcs6qinwxbz4rjyp5kzrcpagr0g9jqdczi6a6j8";
      name = "Day-Off-Color-Scheme-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://anewlevelmedia.com";
      license = lib.licenses.asl20;
      description = ''
        A port of the Brogrammer color scheme first found in Sublime Text 3.
      '';
    };
  }) {};

  db2j-ce = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Db2j-CE";
    plugname = "Db2j-CE";
    plugid = "cc.ssnoodles.db2j-plugin-ce";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13768/108420/Db2j-CE-1.0.3.zip";
      sha256 = "0rnag4b0d0jh1l4phychpfdd6za13070rrsimpv2xx2y81jzzqyp";
      name = "Db2j-CE-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SShnoodles/db2j-ce-idea-plugin";
      license = lib.licenses.mit;
      description = ''
        Help you generate java files from database tables.
            Support Oracle、Postgresql、Mysql.
            Dependence spring、spring-data-jpa、lambok、querydsl annotations.
        
        
           Generate list:
           * Pojo
           * Dto
           * Jpa
           * Repository
      '';
    };
  }) {};

  dbunit-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DbUnit-Tools";
    plugname = "DbUnit Tools";
    plugid = "com.sankuai.meituan";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13137/70366/dbUnit_Plugin.jar";
      sha256 = "060ik2hqqpj6zyc0yda8gqmnwc1sdp0b74rk4ysys2r2rxxp4d9j";
      name = "DbUnit-Tools-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.meituan.com";
      license = lib.licenses.asl20;
      description = ''
        适配DbUnit测试套件，增加IDEA拓展功能. (Add idea support of spring-DbUnit.)
      Made by linjianyu
      '';
    };
  }) {};

  dbdocgenerator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DbdocGenerator";
    plugname = "DbdocGenerator";
    plugid = "com.qiyu.dbdoc.generator.id";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14915/101731/DbdocGenerator.zip";
      sha256 = "0hgywrbhhzmwl1d30y07aaihaiix7jiv97hy06794vnydf2gh0d4";
      name = "DbdocGenerator-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Features
              
                Function: Generate db document with Doc, Excel and Markdown.Currently supported databases: MySql, Oracle, SQLServer.
                Step1: Click File &gt; Settings... &gt; Other Settings select DbdocGenerator.
                Step2: Check configuration in manu,click Test Connection verified db connection is succeed.
                Step3: After db connection is succeed click Generate to generate db document.
                Step4: Generate work finish,check files and it can be use.
              
              
                插件功能：生成数据库对应的结构文档支持导出Doc,Excel和Markdown类型。已支持的数据库：MySql, Oracle和SqlServer
                Step1: 点击 File &gt; Settings... &gt; Other Settings 选择DbdocGenerator
                Step2: 填写配置，检查无误后点击 Test Connection验证数据库连接是否成功
                Step3: 验证数据库连接成功后点击 Generate 生成对应的数据库结构文档。
                Step4: 检查文档生成是否正确。
      '';
    };
  }) {};

  dddtool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DddTool";
    plugname = "DddTool";
    plugid = "ddd.diagram.tool";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13823/78858/DDDC2M.jar";
      sha256 = "0wxn4mk94l4f7nznc8cclh3797lwhq02vf4jqi8bhgcm2v6gsm3c";
      name = "DddTool-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/thorgits/DddDiagram";
      license = lib.licenses.mit;
      description = ''
        The tool assists developers to quickly generate domain models from code.
      '';
    };
  }) {};

  de-fonter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "De-Fonter";
    plugname = "De Fonter";
    plugid = "com.tom.fonter";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13627/75877/fonter-1.0.2.zip";
      sha256 = "0qdfkic39c6kzfrsnm58q9p53kkcfks84xl1whxl8n658dlwcdgw";
      name = "De-Fonter-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Tomtomgo/fonter/";
      license = lib.licenses.gpl3Only;
      description = ''
        Increase and decrease the font size of IntelliJ IDEA's UI, console and editor using two keyboard shortcuts.
      '';
    };
  }) {};

  dead-links = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dead-Links";
    plugname = "Dead Links";
    plugid = "dead-links";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10787/46315/idea-dead-links-1.0.0.zip";
      sha256 = "009byn784pj7q76pkk0yznm339zkx3wbrmk8kp0i2sl7k4s8cwv6";
      name = "Dead-Links-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/trubitsyn";
      license = lib.licenses.asl20;
      description = ''
        Inspection that highlights dead links.
      '';
    };
  }) {};

  debian-packaging-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Debian-Packaging-Support";
    plugname = "Debian Packaging Support";
    plugid = "com.github.nthykier.debpkg";
    version = "0.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14724/106263/debpkg-0.0.8.zip";
      sha256 = "1i2ckm4kv6jjag56rn7469g3zzfyqw5vb6nmnjjg8ihysrjkpfcv";
      name = "Debian-Packaging-Support-0.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nthykier/IDEA-debpkg/";
      license = lib.licenses.asl20;
      description = ''
        Support for common Debian packaging files (e.g. debian/control and debian/changelog).

This is an IDEA plugin (e.g. IntelliJ or PyCharm) that enables support for some
commonly used formats in Debian packaging.
      '';
    };
  }) {};

  debugger-for-aws-lambda = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Debugger-for-AWS-Lambda";
    plugname = "Debugger for AWS Lambda";
    plugid = "io.thundra.debugger";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13858/79731/thundra-debugger-intellij-plugin-1.3.zip";
      sha256 = "12vrnfa2fcjvc2l7kfsxmippgcmhx8zyyprhg0nv90i4pxv7cr87";
      name = "Debugger-for-AWS-Lambda-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://thundra.io";
      license = lib.licenses.asl20;
      description = ''
        Start online debug sessions while the AWS Lambda functions run on AWS Cloud.
    Thundra sets up an easy and secure connection between your AWS Lambda functions and IntelliJ.
    Debug your serverless applications natively with their own permissions.
    Stop mocking resources and simulating the environments! Put breakpoints and pause the execution of the Java
    functions to see the stack trace.
  

  Installation


  
    Install the extension from the market place.
  
  
    Sign up for Thundra and select Thundra Debugger to get your authentication key. If you’ve already signed up, you can get your key from the settings page.
  
  
    Click on Run - Edit Configurations and click the add button for new configuration.
  
  
    Select Thundra Debugger for the new configuration.
  
  
    Set your authentication key to variable Authentication Token on the configuration modal.
  
  
    Enter a name for this new profile and save.
  

  
    How to use


  
    Set a debug point on your AWS Lambda function.
  
  
    Select a profile from the Run Configurations dropdown.
  
  
      Click on the Debug button to start debug session with selected profile.
  
  
      Now invoke your AWS Lambda function to hit on the debug point.
  
  
    Debug session ends when your AWS Lambda function times out. You can update the timeout of your function for longer debug sessions.
  


  To manage your Thundra Debugger profiles:
  

  
    Select Run - Edit Configurations.
  
  
    Select a profile from the Run Configurations dropdown.
  
  
    Click on Thundra debugger and add a new configuration.
  
  
    Enter a new name for the profile and save.
  
  
    Your saved profiles will be listed under Run configurations.
      '';
    };
  }) {};

  decentralized-internet = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Decentralized-Internet";
    plugname = "Decentralized Internet";
    plugid = "com.decentralized.internet.id";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13735/76903/Decentralized_Internet.jar";
      sha256 = "020s54mj9n662laqjy4ymby2si03n38g53nn2pqmd67nx9mcnpcb";
      name = "Decentralized-Internet-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.lonero.org";
      license = lib.licenses.mit;
      description = ''
        Library to build decentralized and grid computing projects.
      Parallel Processing, Grid Computing, P2P, IOT, Decentralization, Blockchain, Cryptocurrency
      '';
    };
  }) {};

  decoder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Decoder";
    plugname = "Decoder";
    plugid = "org.simple.enc";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15153/98391/enc-1.1.zip";
      sha256 = "0pih3v6h4z8y7ryj6nkpss66sg6lmp4l12nk4i23zkcz0h5syv23";
      name = "Decoder-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/owler";
      license = lib.licenses.asl20;
      description = ''
        PBEWithMD5AndDES Decoder/Encoder
        Decode selected text like ENC() and save result into clipboard
        Hot key [Ctrl + Alt + D]
        Encode any selected text and save result into clipboard
        Hot key [Ctrl + Alt + E]
        Go to Settings: Tools: Decoder to set Encryption key
      '';
    };
  }) {};

  deepcode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DeepCode";
    plugname = "DeepCode";
    plugid = "ai.deepcode.jetbrains-plugin";
    version = "1.2.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14350/100805/DeepCode-jetbrains-plugin-1.2.12.zip";
      sha256 = "0pxbk26cdypgjp58h489n4h6d7mjl1py3zwq0q34l888ds8gc7z1";
      name = "DeepCode-1.2.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.deepcode.ai";
      license = lib.licenses.mit;
      description = ''
        DeepCode finds bugs, security vulnerabilities, performance and API issues based on AI. DeepCode's speed of analysis allow us to analyse your code in real time and deliver results when you hit the save button in your IDE. We support Java, C/C++, Python, JavaScript and TypeScript.
      '';
    };
  }) {};

  deeplink-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Deeplink-Helper";
    plugname = "Deeplink Helper";
    plugid = "ru.deeplink.plugin";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15369/105114/beru_deeplink_commands.jar";
      sha256 = "0m8cfjypvg4v2xv8yf6q9j09d1kszwjl8lwpp291chvp9sa8y568";
      name = "Deeplink-Helper-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Helpful plugin for send deeplink or adb commadns to your application/device. Create your own configuration in json config file.
        Share script of useful commands with other developers or QA for boilerplate and elusive cases.
      '';
    };
  }) {};

  deletemultilines = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DeleteMultiLines";
    plugname = "DeleteMultiLines";
    plugid = "DeleteMultiLines";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1377/3570/DeleteMultiLines_3570.jar";
      sha256 = "1i3y0sfy9ry55nflriz38r88f05q3a1zxlaw7pvd1m85pywh0h75";
      name = "DeleteMultiLines-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Delete multi lines which are included in the selection range.
Current line will be deleted if no selection in editor.
Initially, Shift+Del is assigned as shortcut for this action.
No menu item is created for this action.
      '';
    };
  }) {};

  delombok = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Delombok";
    plugname = "Delombok";
    plugid = "dev.aid.delombok";
    version = "1.18.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14831/94470/delombok.zip";
      sha256 = "0mc54z723x6778671l17yyirqqilbi7mlb8knwr8jq7k0i3ldwd0";
      name = "Delombok-1.18.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/04637";
      license = lib.licenses.asl20;
      description = ''
        Let you work with people who don't use lombok.
      --- English ---
      Let you continue to use lombok and can cooperate with people who do not use it, keep the code concise and complete, and let you focus more on the core code.
      
      Use: 
      
          You can check "Delombok code" checkbox in vcs before committing the code.
          You can click "Delombok project" in "Build" menu.
      
      
      --- Chinese ---
      让你与不使用lombok插件的人合作, 保证代码完整性的同时隐藏样板式代码并且屏蔽其警告, 让你只关注核心代码的开发
      使用: 
      
          可以在提交代码前, 在vcs中勾选 "Delombok code" 复选框
          可以在 "Build" 菜单中点击 "Delombok project" 来delombok整个项目
      
      
      Github: https://github.com/04637/delombok
      '';
    };
  }) {};

  demandware-studio-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Demandware-Studio-Plugin";
    plugname = "Demandware Studio Plugin";
    plugid = "com.demandware.studio";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7850/20468/intellij-demandware.zip";
      sha256 = "0msc0mmjdc2vwhwk6h8jjr9drfkaya6frf1c3n0m2xq31x6pqsy2";
      name = "Demandware-Studio-Plugin-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nek4life/intellij-demandware/";
      license = lib.licenses.mit;
      description = ''
        Demandware development tools. JDK8+ Required.
      '';
    };
  }) {};

  demisto-add-on-for-pycharm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Demisto-Add-on-for-PyCharm";
    plugname = "Demisto Add-on for PyCharm";
    plugid = "com.demisto.demisto-plugin";
    version = "0.9.8.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12093/88905/Demisto_PyCharm_Plugin-0.9.8.4.zip";
      sha256 = "0bf1qwn4y8kmmfaam4idq14f45jynl64s29mqbqgw5s303gk5pv5";
      name = "Demisto-Add-on-for-PyCharm-0.9.8.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.demisto.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://paloaltonetworks.com/legal/eula";
        free = false;
      };
      description = ''
        Demisto is a Security Orchestration, Automation, and Response (SOAR) platform that helps security teams coordinate and automate tasks across 100s of partner products through task-based playbooks.
            The Demisto Add-on for PyCharm simplifies third-party integration and script development by enabling users to author Python content for Demisto directly in PyCharm.
            Features:
            
            Leverage PyCharm capabilities: Take advantage of smart code completion, error highlighting, and quick navigation to accelerate development of third-party integrations and scripts in Demisto.
            Console flexibility: Choose between running scripts locally in PyCharm or running them in Demisto and having the results display in PyCharm.
            End-to-end development: Create new Python/YML files, edit existing files, and export files to Demisto. 
            Remote execution: Execute Demisto integration/automation commands in PyCharm and have results display in PyCharm.
      '';
    };
  }) {};

  depconfig = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DepConfig";
    plugname = "DepConfig";
    plugid = "com.yiwowang.plugin.config";
    version = "1.3.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13368/75347/depconfig.zip";
      sha256 = "0cfw5njxlm9g8dfl4drv8apdpqrbvmmkl81vfmlyf64z1h930xd0";
      name = "DepConfig-1.3.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/author/c00822af-e5b6-41cf-ac33-7ae3413c78fa";
      license = lib.licenses.asl20;
      description = ''
        For internal employees only.Quickly to search dependence/class/resource,generate configuration in "overlay" folder automatically
      '';
    };
  }) {};

  dependency-analytics = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dependency-Analytics";
    plugname = "Dependency Analytics";
    plugid = "org.jboss.tools.intellij.analytics";
    version = "0.0.4.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12541/92131/org.jboss.tools.intellij.analytics-0.0.4.6.zip";
      sha256 = "15gz0zv512lbwgfnnp1pkdk176y89sr6kbxvdj3jxylrpm5p5dhr";
      name = "Dependency-Analytics-0.0.4.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.redhat.com";
      license = lib.licenses.epl20;
      description = ''
        Overview
      'Dependency Analytics Report' with Insights about your application dependencies:
      
        Flags a security vulnerability(CVE) and suggests a remedial version
      

      Supported Languages
      
        'Dependency Analytics' extension supports projects using Maven, projects build on npm (Node ecosystem) and
         Python projects. Extending support for Go languages is currently under progress.
      

      Prerequisites
      
        This extension assumes you have the following binaries on your PATH:
      
      
        node (for running the LSP server)
      

      Quick Start
      
        Install the extension.
        Opening or editing a manifest file (pom.xml / package.json / requirements.txt) scans your application for security vulnerabilities.
      

      Features
      
        Opening or editing a manifest file (pom.xml / package.json / requirements.txt) scans your application for security vulnerabilities,
            flag them along with 'quick fixes'.
        
      
      
        
      

      Know more about Dependency Analytics Platform
      
        The mission of this project is to significantly enhance developer experience:
        providing Insights (security, licenses, AI based guidance) for applications and helping developers, Enterprises.
      
      
        GitHub repository
      

      Feedback &amp; Questions
      
        File a bug in GitHub Issues
      

      License
      
        EPL-2.0, See LICENSE
        for more information.
      '';
    };
  }) {};

  dependently-typed-lambda-calculus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dependently-Typed-Lambda-Calculus";
    plugname = "Dependently-Typed Lambda Calculus";
    plugid = "org.ice1000.tt";
    version = "0.10.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12176/88142/intellij-dtlc-0.10.1.zip";
      sha256 = "09pxi7is3cssv5pwqr1nmh7mal47dd54rphnlm69qynbihfw61yh";
      name = "Dependently-Typed-Lambda-Calculus-0.10.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ice1000.org";
      license = lib.licenses.asl20;
      description = ''
        Several dependently-typed experimental programming language support,
in one plugin.

This plugin is created for personal entertainment purpose.

All your issues/pull requests will be replied very quickly.


Features (listed for each supported language):

	Export supported language files as clickable HTML
	Running (type checking) your code in supported languages
	Live template contexts for supported languages
	Create and iconify files for supported languages
	Mini-TT:
	
			Mini-TT executable management
			Folding code blocks and special symbols to unicode
			Syntax highlight, color settings page
			Completion/find usages/goto declaration/rename
			Commenter, brace matcher
		
	
	RedPRL:
		
			RedPRL executable management
			Folding code blocks
			Completion/find usages/goto declaration/rename
			Syntax highlight, color settings page
			Commenter, brace matcher
		
	
	MLPolyR:
		
			MLPolyR executable management
			Folding code blocks
			Syntax highlight
			Language injection in Strings
			Completion/find usages/goto declaration/rename
			Commenter, brace matcher
		
	
	Vanilla Mini-TT:
		
			The agdacore executable management
			Folding code blocks and special symbols to unicode
			Syntax highlight, color settings page
			Completion/find usages/goto declaration/rename
			Commenter, brace matcher
		
	
	Voile:
		
			Executable (voilec) management
			Commenter, brace matcher
			Syntax highlight, color settings page
			Completion/find usages/goto declaration/rename
		
	
	Agda (dumb support):
		
			Language injection in Strings
			Folding code blocks and layout blocks
			Dumb completion/goto definition/rename
			Syntax highlighter, color settings page
			Commenter, brace matcher
		
	
	MiniAgda:
		
			Executable (miniagda) management
			Syntax highlighter
			Commenter, brace matcher
		
	
	CubicalTT:
		
			Executable (cubical) management
			Folding code blocks and imports
			Syntax highlighter, color settings page
			Completion/find usages/goto declaration/rename
			Stub indices, goto symbol (search everywhere)
			Commenter, brace matcher
		
	
	YaccTT:
		
			Executable (yacctt) management
			Folding code blocks and imports
			Syntax highlighter, color settings page
			Completion/find usages/goto declaration/rename
			Stub indices, goto symbol (search everywhere)
			Commenter, brace matcher
		
	
	Molikto's mlang:
		
			Syntax highlighter, color settings page
			Folding code blocks and comments
			Completion/find usages/goto declaration/rename
			Commenter, brace matcher
		
	
	Narc:
		
			Executable (narc) management
			Commenter, brace matcher
			Syntax highlight, color settings page
		
	
	VitalyR:
		
			Commenter, brace matcher
			Completion/find usages/goto declaration/rename
			Term normalization
      '';
    };
  }) {};

  derwish-theme13-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Derwish-Theme13-Color-Scheme";
    plugname = "Derwish Theme13 Color Scheme";
    plugid = "color.scheme.Derwish Theme13";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12795/66541/Derwish_Theme13.jar";
      sha256 = "0c4ni3w9v4s9fyf0gwci8qll126kh58x6i5bb8xk234bp2nq4s44";
      name = "Derwish-Theme13-Color-Scheme-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/derwish-pro/jetbrains-theme13";
      license = lib.licenses.mit;
      description = ''
        Dark theme for JetBrains IDEs. The theme is made in minimalist dark colors. You can also download this theme for other apps to make your interface look homogenous. Check the link on Github for installation instructions.
      '';
    };
  }) {};

  desccron = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DescCron";
    plugname = "DescCron";
    plugid = "dev.arunvelsriram.desccron";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14159/85955/DescCron-1.2.0.zip";
      sha256 = "1jx9w84h4ybwbgx4bm4iqgmk0vhs0jr5qbh15wn92jkbsbm2nh4i";
      name = "DescCron-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://arunvelsriram.dev";
      license = lib.licenses.mit;
      description = ''
        DescCron (Describe Cron) provides a descriptive view of cron expressions for humans.
    
    It's file format agnostic, as the cron expression to be described is a user selected text.
    
    On GitHub: https://github.com/arunvelsriram/DescCron/
      '';
    };
  }) {};

  describe-key = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Describe-Key";
    plugname = "Describe Key";
    plugid = "Describe Key";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/81/289/Describe_Key_289.jar";
      sha256 = "11cq8hf2pd941axx5g969grv87qwzd95yks82zm3n8lv2rn5dawa";
      name = "Describe-Key-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Allows to easily find out what a key or shortcut does. Bound to
       Ctrl+Alt+K by default.
      '';
    };
  }) {};

  design-patterns = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Design-Patterns";
    plugname = "Design Patterns";
    plugid = "design.patterns.plugin";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10856/47949/Design-Patterns-Intellij-IDEA-Plugin.jar";
      sha256 = "1zy9wxsskxjrasz2awlxyfliaijy7pdji2j8lqfqlskm66kxkja2";
      name = "Design-Patterns-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.linkedin.com/in/orestes-polyzos/";
      license = lib.licenses.mit;
      description = ''
        Provides on the fly implementation of various design patterns based on user's code
            More information can be found here.
            Currently supported design patterns
            
                Behavioral
                
                    Strategy
                
                Creational
                
                    Builder (Inner)
                    Factory
                    Singleton
      '';
    };
  }) {};

  designitejava = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DesigniteJava";
    plugname = "DesigniteJava";
    plugid = "org.designite.intellij.plugin";
    version = "1.6.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13380/73012/DesigniteJavaPlugin-1.6.5.zip";
      sha256 = "11qhylsjmyizyc3c2x81n9nlfi5b3992b94kyp5ilqply61rj9xj";
      name = "DesigniteJava-1.6.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.designite-tools.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.designite-tools.com/eula/";
        free = false;
      };
      description = ''
        This plugin uses DesigniteJava to analyze
    Java source code to compute object-oriented metrics and
detect code smells at implementation, design, and architecture granularities.

    The plugin tags methods and classes suffering from various smells that motivates developer to refactor the
    method or class to improve the maintainability of the code. Also, the plugin shows the source code quality
    information in a tool window to keep an eye on the code quality.
      '';
    };
  }) {};

  deveco-ide-china-region = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DevEco-IDE-China-Region";
    plugname = "DevEco IDE (China Region)";
    plugid = "com.huawei.ide";
    version = "2.0.2019060";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10354/66757/Huawei_IDE.zip";
      sha256 = "04qfnwfc2mk9y42d4h4j862m8jj4hirwjqdx6rknz8fbbhd8lv0z";
      name = "DevEco-IDE-China-Region-2.0.2019060.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://developer.huawei.com";
      license = lib.licenses.asl20;
      description = ''
        DevEco IDE（简称IDE）是华为消费者业务为开发者提供的集成开发环境，旨在帮助开发者快捷、方便、高效使用华为EMUI开放能力。
        IDE基于Android Studio功能扩展（以插件形式提供），当前已上线开放能力为智慧服务（Huawei HiAI），功能主要包括HiAI Engine、
        HiAI Foundation（AI模型分析、AI模型分段、AI模型转换、业务类生成）、AI模型市场、远程真机调试、HiKey 970、Camera、安全服务等。
        注:该插件仅支持 中国大陆地区
        DevEco IDE is an integrated development environment provided by Huawei Technologies. It helps app developers to
        leverage Huawei device EMUI open capabilities. DevEco IDE is provided as an Android Studio plugin. The current
        version provides development toolsets for Huawei Hi AI capability,including HUAWEI HiAI Engine tools, HUAWEI
        HiAI Foundation tools, AI Model Marketplace, Remote Device Service, HiKey 970, Camera, Safe Service.Note: This
        plugin only supports mainland China
      '';
    };
  }) {};

  deveco-ide-non-china-region = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DevEco-IDE-Non-China-Region";
    plugname = "DevEco IDE (Non-China Region)";
    plugid = "com.huawei.ide.oversea";
    version = "2.0.2019040";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11297/63336/Huawei_IDE.zip";
      sha256 = "1mzb0m6832crawpyzn25li3j088d61siis18qrgla6x18ls5dg0w";
      name = "DevEco-IDE-Non-China-Region-2.0.2019040.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://developer.huawei.com";
      license = lib.licenses.asl20;
      description = ''
        DevEco IDE is an integrated development environment provided by Huawei Technologies. It helps app developers to
        leverage Huawei device EMUI open capabilities. DevEco IDE is provided as an Android Studio plugin. The current
        version provides development toolsets for Huawei Hi AI capability,including HUAWEI HiAI Engine tools, HUAWEI
        HiAI Foundation tools, AI Model Marketplace, Remote Device Service, HiKey 970, Camera, Safe Service.Note: This plugin only supports overseas area
      '';
    };
  }) {};

  devhelper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DevHelper";
    plugname = "DevHelper";
    plugid = "com.xiyt.devhelper";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15322/102846/DevHelper-1.0.2.zip";
      sha256 = "1i6pdj1w0w7d3s36bjbk6cdgw62cqn7jwr2w17ck1w832d5f7ddy";
      name = "DevHelper-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.daxiblog.com";
      license = lib.licenses.asl20;
      description = ''
        一个能够提高效率的开发助手插件，主要包括以下功能:
        
            生产密码：大小写字母、数字、特殊符号任意组合，长度任意指定，批量生成密码；
            生成序号：根据起始值、步长、位数生成一系列序号，并可添加前后缀；
            Base64编码和解密，支持多种编码格式以及URL安全选项；
            散列哈希加密：支持MD5、SHA-1、SHA-224、SHA-256、SHA-384、SHA-512、HmacMD5、HmacSHA1、HmacSHA224、HmacSHA256、HmacSHA384、HmacSHA512的加密
            文本处理：可以对行文本进行格式化(去除空白、空行、重复行)、行编辑(合并、拆分、命名转换等)、行排序(按照字母或数据升序降序)
            生产UUID：支持大写/小写 UUID的生成，可以选择是否带有分隔符
            格式化：支持Json、xml、html的格式化
            RSA非对称加解密：支持RSA的私钥/公钥分别进行加密或者解密，可以生成私钥和公钥对
        
        A development assistant plug-in that can improve efficiency, mainly includes the following functions:
        
            Production password: any combination of uppercase and lowercase letters, numbers, and special symbols, any length specified, batch generation of passwords;
            Generate serial number: Generate a series of serial numbers according to the starting value, step length, and digits, and add prefixes and suffixes;
            Base64 encoding and decryption, supporting multiple encoding formats and URL security options;
            Hash hash encryption: support MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512 encryption
            Text processing: line text can be formatted (removal of blanks, empty lines, repeated lines), line editing (merge, split, name conversion, etc.), line sorting (ascending and descending by alphabet or data)
            Production UUID: support the generation of uppercase/lowercase UUID, you can choose whether to have a separator
            Formatting: Support formatting of Json, xml, html
            RSA asymmetric encryption and decryption: support RSA private key/public key for encryption or decryption respectively, can generate private key and public key pair
      '';
    };
  }) {};

  devtools-for-apache-openwhisk = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DevTools-for-Apache-Openwhisk";
    plugname = "DevTools for Apache Openwhisk";
    plugid = "com.navercorp.openwhisk.intellij";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14740/97973/intellij-plugin-1.1.4.jar";
      sha256 = "16lmxc609qj1skrcb01f0vcj1gwqapvs5qkl8wjm6f531j0l7xr9";
      name = "DevTools-for-Apache-Openwhisk-1.1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/naver";
      license = lib.licenses.asl20;
      description = ''
        OpenWhisk-intellij-support is an open source Intellij Plugin for Apache OpenWhisk. It assists users to develop/deploy/manage OpenWhisk functions in Intellij.


Feature

OpenWhisk Explorer

    Explore all entities in your endpoints/namespaces.
        
            The .wskprops file is automatically registered.
            You can add the API host manually.
            You can add namespace manually by API auth key.
        
    
    Show the action code with syntax highlighting.
    [Soon] Edit the action code on the remote server.
    Invoke the action remotely and get the activation result.
    Show a list of actions related to the sequence action.
    Show information about the trigger and related rules.
    Show activations related to the action (Same as wsk activation list ''${action}).
    Show detailed information of the activation (Same as wsk activation get ''${activation_id}).
    Update parameters of the action, package, and trigger.


Manifest View

    List up manifest YAML files in the workspace.
    Deploy/Undeploy OpenWhisk packages with manifest (via wskdeploy).
        
            Deploy with the deployment file.
            Deploy with multiple credentials.
      '';
    };
  }) {};

  devutil-inspections = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DevUtil-Inspections";
    plugname = "DevUtil Inspections";
    plugid = "DevUtil Inspections";
    version = "0.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4610/8018/DevUtil_Inspections_8018.zip";
      sha256 = "15pq43k0x41qbgwkwx3jwqy6i8gcq3n9nvwf1ffg55rb27ylfmxd";
      name = "DevUtil-Inspections-0.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sourceforge.net/projects/intellijdevutil/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://sourceforge.net/projects/intellijdevutil/";
        free = false;
      };
      description = ''
        A set of new inspections to use with the devUtil library annotations.
      '';
    };
  }) {};

  developers-macro = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Developers-Macro";
    plugname = "Developers Macro";
    plugid = "net.p35.common-enum-values";
    version = "0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12364/102341/common-enum-values-0.4.0.zip";
      sha256 = "1fal6z46fj6fz4f99a8adlh4i7kr52504ybnahl3z74gmsm26gsj";
      name = "Developers-Macro-0.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.linkedin.com/in/pavlo-zhukov-01812427/";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows your to use macro developers() where you need your project developers enum.
    You can configure developers list under Developers section in IDE preferences.
      '';
    };
  }) {};

  devnagri = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Devnagri";
    plugname = "Devnagri";
    plugid = "com.devnagri.androidstudio";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10982/48430/Devnagri.zip";
      sha256 = "0brmvq4yy97rbx5k4lvfp16mimiz178bar3v7z2nm34g1c7ywi39";
      name = "Devnagri-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://app.devnagri.com/";
      license = lib.licenses.mit;
      description = ''
        Devnagri - AI powered human translation platform, it helps to increasing prospective clientele base by translating the product in multiple Indian languages.  It is a combination of Machine and Human Translation, giving best at economic cost.
      '';
    };
  }) {};

  dex-2-java = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dex-2-Java";
    plugname = "Dex 2 Java";
    plugid = "com.violinday";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11399/52794/Dex2Java.zip";
      sha256 = "13w93xx442pjlylrhkph1n0bfl3ns0rx83iyhgspbxag778k3ha0";
      name = "Dex-2-Java-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/violinday";
      license = lib.licenses.asl20;
      description = ''
        Convert Dex 2 Java
      '';
    };
  }) {};

  dhall = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dhall";
    plugname = "Dhall";
    plugid = "org.intellij.plugins.dhall";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13889/80192/intellij-dhall-0.0.3.zip";
      sha256 = "11mchw317jnf96b5p9331whhkgh9ldfl2zvm6prjyv6c5n64hcix";
      name = "Dhall-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/garetht";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.mozilla.org/en-us/mpl/2.0/";
        free = false;
      };
      description = ''
        Provides basic Dhall language support. https://dhall-lang.org/
      '';
    };
  }) {};

  diagrams-net-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Diagrams.net-Integration";
    plugname = "Diagrams.net Integration";
    plugid = "de.docs_as_co.intellij.plugin.diagramsnet";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15635/106807/diagrams.net-intellij-plugin-0.1.4.zip";
      sha256 = "0fkakgwdj8s20hb2ci5s1y8amp19l08i5lx7b2hn28k630phmdpy";
      name = "Diagrams.net-Integration-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/docToolchain/diragrams.net-intellij-plugin#readme";
      license = lib.licenses.asl20;
      description = ''
        This unofficial extension integrates diagrams.net  (formerly known as draw.io) directly into IntelliJ.
It supports diagram files with the extensions .drawio.(svg|png).
      '';
    };
  }) {};

  dialog-resizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dialog-Resizer";
    plugname = "Dialog Resizer";
    plugid = "org.maxal.dialogResizer";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11123/50889/DialogResizer-1.6.zip";
      sha256 = "1bzf21bq0hd4x0mpny05b910ks8w39s462ph6zq21lp2mmxdi7x7";
      name = "Dialog-Resizer-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/maxal";
      license = lib.licenses.asl20;
      description = ''
        The plugin helps you to resize dialogs and windows to the specified resolution.


      Just activate the action (Find Action|Dialog Resizer), select the resolution and CTRL+SHIFT+Click
       in any dialog or window. To capture the screenshot of the component ALT+SHIFT+Click
      '';
    };
  }) {};

  dictionary = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dictionary";
    plugname = "Dictionary";
    plugid = "dk.lost_world.Dictionary";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12089/59722/Dictionary-0.2.zip";
      sha256 = "0i1n4vhwq6grjmp9crm19wm9337qd5yzisiz15cls0f3ba4w6bmm";
      name = "Dictionary-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/olivernybroe/intellij-Dictionary";
      license = lib.licenses.mit;
      description = ''
        Plugin for having a shared dictionary for all members of your project. 
    
    It will automatically find any project.dic files and add them
    to the list of dictionaries. 
    
    It will also search packages for dictionary files and add them to our list of dictionaries.
      '';
    };
  }) {};

  diff--patch-file-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Diff--Patch-File-Support";
    plugname = "Diff / Patch File Support";
    plugid = "de.thomasrosenau.diffplugin";
    version = "2.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11957/105577/intellij-diff-plugin-2.1.6.zip";
      sha256 = "1w3bdr2wy01rv6ba5499a6xfcx88520lird7p646nj4l3kf6fl2n";
      name = "Diff--Patch-File-Support-2.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ThomasR/intellij-diff-plugin";
      license = lib.licenses.asl20;
      description = ''
        Syntax highlighting for .diff files and .patch files
        Supports the common formats: normal, contextual, unified, git patch.
        Does not support the formats: side-by-side, diff3, ed, if-else, RCS.
        
        
        Copyright 2020 Thomas Rosenau
        Licensed under the Apache License, Version 2.0 (the "License"); you may not use this software except in
           compliance with the License. You may obtain a copy of the License at
        
        http://www.apache.org/licenses/LICENSE-2.0
        
        Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
           on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for
           the specific language governing permissions and limitations under the License.
      '';
    };
  }) {};

  difftoolsetprochenst = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DiffToolSetProchenst";
    plugname = "DiffToolSetPro@chenst";
    plugid = "com.shuntian.plugin.DiffToolSetPro";
    version = "1.9.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14635/107158/ToolSetPro.zip";
      sha256 = "1c0dhdy3absybvzzzg6m6yagnwgqmcglia38whm5nzrgsic521ji";
      name = "DiffToolSetProchenst-1.9.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://vooc.top/license.php";
        free = false;
      };
      description = ''
        You can easily commit or compare the code with at least two branchs now in the Editor Or Version Control Tab After you click right button
        First, make sure you have downloaded the other branch code to your local disk,
        Open your project:
        Open ★★★ -&gt; Setting in the right button, then Paste the root path of your local project in the Editor,like "C:\\dev_xxx",make sure it is JSON format
        1.How to Quickly Commit File: In the subversion menu of the Version Control Tab, click the "提到RM" menu. After that, the dev code will be updated first, and then the panel will pop up to confirm to cimmit to RM or release branch in the copy mode
        2 How to Quickly Compare File: In current file, click right button, you can compare directly with the corresponding file of release code, eliminating the need to find
        
        使用说明：
        确保下载了rm/release分支代码到本地,在右键★★★ -&gt; Settging菜单设置完路径后，
        1 便捷提交文件到RM：在Version Control Tab面板选取文件后（可多选）,在subversion菜单，点击“提到RM”菜单后就会先更新dev代码，拷贝方式提交rm
        2 便捷提交文件到release/uat:在文件右键★★★菜单，找到“提到release/uat”并打开，先设定文件清单，然后逐个比较代码，然后可以提交修改后的文件到release/uat/rm
        此外，可以单独便捷比较不同分支文件差异：选中当前文件右键，找到代码比较菜单，可以直接同rm或release分支相应的文件作比较，省去寻找

        ps:配置文件：d:\IdeaPlugToolSetPro.json（gbk格式）
        This plugin is combined with the TortoiseSVN
        本插件集成了乌龟提交代码工具。
      '';
    };
  }) {};

  diffblue-cover---unit-test-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Diffblue-Cover---Unit-Test-Generator";
    plugname = "Diffblue Cover - Unit Test Generator";
    plugid = "com.diffblue.intellij.cover.commercial";
    version = "2021.01.01-commercial.2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15169/108076/diffblue-cover-ij-2021.01.01-commercial-2020.3.zip";
      sha256 = "1ql1j1inzxyahirv1zddbkf2rpq0r3ylf83xis72n3c26h1aa8w0";
      name = "Diffblue-Cover---Unit-Test-Generator-2021.01.01-commercial.2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.diffblue.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://docs.diffblue.com/licenses/ce-eula/";
        free = false;
      };
      description = ''
        Diffblue's IntelliJ IDEA plugin interactively writes unit tests for Java applications, increasing test coverage and helping you find regressions in future code changes.
    
    Please see here for the User Guide.
    

    
    Features
    
        Automatically writes unit tests for your Java methods and classes using the JUnit 4 or JUnit 5 test framework.
        
        Configurable test naming convention.
    
    

    Pre-requisites
    
        Java 8 or Java 11 compatible source code
        IntelliJ 2019.3 to 2020.3, Community or Ultimate
        The project must build and be set up for running unit tests.
    
    
  
    Support
    Users of the paid-for plugin benefit from enhanced support, more details can be found on our Support Site.
    
    
    
-    See here for all Diffblue documentation.
-
      '';
    };
  }) {};

  diffblue-cover-community-edition---unit-test-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Diffblue-Cover-Community-Edition---Unit-Test-Generator";
    plugname = "Diffblue Cover Community Edition - Unit Test Generator";
    plugid = "com.diffblue.intellij.cover.plugin";
    version = "2021.01.01-eval.2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14946/108074/diffblue-cover-ij-2021.01.01-eval-2020.3.zip";
      sha256 = "1ls7y8fvlwjp12683xcz11pn6wg15yaqhbli4bla5z0s9zlzmzg3";
      name = "Diffblue-Cover-Community-Edition---Unit-Test-Generator-2021.01.01-eval.2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.diffblue.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://docs.diffblue.com/licenses/ce-eula/";
        free = false;
      };
      description = ''
        Diffblue's Community Edition IntelliJ IDEA plugin interactively writes unit tests for Java applications, increasing test coverage and helping you find regressions in future code changes.
    
    Please see here for the User Guide.
    

    
    Features
    
        Automatically writes unit tests for your Java methods and classes using the JUnit 4 or JUnit 5 test framework.
        
        Configurable test naming convention.
    
    

    Pre-requisites
    
        Java 8 or Java 11 compatible source code
        IntelliJ 2019.3 to 2020.3, Community or Ultimate
        The project must build and be set up for running unit tests.
    
    
  
    Support
    Please feel free to post feedback, questions and feature-requests to our Community Forum.
    
    
    
-    See here for all Diffblue documentation.
-
      '';
    };
  }) {};

  digger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Digger";
    plugname = "Digger";
    plugid = "Digger";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/115/493/Digger_493.zip";
      sha256 = "0qkdpdws18vjxx4kda9b5piacfcdsmiclm4lqsbnbklinvlkal57";
      name = "Digger-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Plugin for old game Digger
      '';
    };
  }) {};

  dilbert-daily-strip = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dilbert-Daily-Strip";
    plugname = "Dilbert Daily Strip";
    plugid = "Dilbert";
    version = "1.9.0.168";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/36/88277/DilbertDailyStrip.zip";
      sha256 = "1yh0bd9lhyh1cw2vfbaljm1xzhgk7xvc22zrg4cwhxfdz6755svk";
      name = "Dilbert-Daily-Strip-1.9.0.168.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/codebrewer/intellij-platform-dilbert-daily-strip-plugin";
      license = lib.licenses.asl20;
      description = ''
        Displays the cartoon strip of the day from the dilbert.com website.
      '';
    };
  }) {};

  dimenify = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dimenify";
    plugname = "Dimenify";
    plugid = "com.hr.dimenify";
    version = "3.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9349/62200/dimenify-plugin.jar";
      sha256 = "1ynibfgzqn9ysj8jsr88vaf87jnda7mkwa1pqjcfwxvimbkl3v9h";
      name = "Dimenify-3.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.anvith.in";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/humblerookie/dimenify/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin generates dimensions for the other density bucket values for Android
  USAGE
    - Just point the cursor on the dimension value in your dimen
    - Right click and click on Generate -&gt; 'Generate alternate dimens..'
    - Alternately you can convert entire xml file in one bucket to others using right click on file-&gt; Generate alternate dimens from file.
      '';
    };
  }) {};

  dimens-generating = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dimens-Generating";
    plugname = "Dimens Generating";
    plugid = "com.guowenlong.dimens";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11290/61946/Dimens-Generating.zip";
      sha256 = "0qfjw39yxwg622crx1lby8f66kdm8r4xb9ljrli6xil90w1vr2dr";
      name = "Dimens-Generating-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Wenlong-Guo/Dimens-Generating";
      license = lib.licenses.asl20;
      description = ''
        Dimens Tool
      
      
      
      GitHub |
      Issues |
      Jetbrains |
      README
      
      
      
      A Generate any smallest width screen size dimens.xml plugin.
      
      Features:
      
        Generate a dimens.xml file of the specified size (can be customized) based on the selected dimens.xml file.
        When the file to be generated already exists, you can control whether to overwrite.
        Can generate multiple files of the specified size at the same time.
        Can generate one or multiple times at a time.
      
      
      Usage:
      
        Choose origin dimens.xml -&gt; right click -&gt; Generate Dimens -&gt; Edit option -&gt; Click "生成" button
      
      
      Tips:
      
        Stay in Chinese text and display English later.
        Welcome to improve your opinion.
        If you feel good,please star,thank you very much.
      
      
      
      To Do List:
      
        Better support in English.
        Optimize the UI.
        Perfect the documentation.
      
      
      
      Send feedback
      '';
    };
  }) {};

  dimension-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dimension-Tools";
    plugname = "Dimension Tools";
    plugid = "com.nerdscorner.dimension.tools";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12374/62161/Dimension_Tools.jar";
      sha256 = "1bxhbdbb6p4j2nv4hil6mwhisa91df7b7ws3hp8npb9k5av34b1b";
      name = "Dimension-Tools-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.marcher.com.uy";
      license = lib.licenses.asl20;
      description = ''
        Simple tool to convert dimensions in Android.
      '';
    };
  }) {};

  directory-marker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Directory-marker";
    plugname = "Directory marker";
    plugid = "DirectoryMarker";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12151/59929/idea-php-mark-directory.jar";
      sha256 = "1yis2785sj5r5qp1vg9hhzbyjiyln6nld4b6ipasd0bicpkx49nn";
      name = "Directory-marker-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.softmg.ru";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin provides default instruments for making colored marks for directories on all JetBrains IDEs.
      '';
    };
  }) {};

  direnv-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Direnv-integration";
    plugname = "Direnv integration";
    plugid = "systems.fehn.intellijdirenv";
    version = "0.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15285/105202/Direnv_integration-0.1.3.zip";
      sha256 = "0m8ybnja6f2sq8k3s4jc479136jvxkac4y3ph1r1j2zrlyjpxnw1";
      name = "Direnv-integration-0.1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fehnomenal/intellij-direnv";
      license = lib.licenses.mit;
      description = ''
        This plugin provides an action to import environment variables from direnv into the Java process that is running the IDE.

A button next to the Reload All from Disk action will start the process.



Note: This plugin handles only .envrc files in the project root.

Note: You need direnv in your path.
      '';
    };
  }) {};

  disable-context-help = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Disable-context-help";
    plugname = "Disable context help";
    plugid = "com.dpaulenk.idea.contexthelp";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7413/20025/disable-context-help-idea-plugin.jar";
      sha256 = "0ljjwsjh1jc4jym075z704sq3l65niqvqn8cwmc7d1vlppzxiihr";
      name = "Disable-context-help-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fantast";
      license = lib.licenses.mit;
      description = ''
        This plugin disables idea context help functionality, which is quite annoying, when launched accidentally from various tool windows.
      '';
    };
  }) {};

  discord-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Discord-Integration";
    plugname = "Discord Integration";
    plugid = "com.almightyalpaca.intellij.plugins.discord";
    version = "1.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10233/105629/JetBrains-Discord-Integration-1.6.1.zip";
      sha256 = "1y07dzv6fln1ga60vppvz84a0y1ia24chcqr7v280iis05h30wkv";
      name = "Discord-Integration-1.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Almighty-Alpaca/JetBrains-Discord-Integration";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Show everyone on Discord what awesome projects you're working on!

 Features:Publish information about your current project to DiscordHighly customizable in using the plugins settingsShows IDE, project name with description and file nameCan detect a wide range of languages and frameworks automaticallySupports from multiple icon themesAutomatically hides when you go AFKHide individual projects you don't want to show yet or are under NDADoes *not* insert ads into your rich presenceFor troubleshooting, ideas and feature requests feel free to join the Discord server.
For bug reports please take a look at the official GitHub repository.
      '';
    };
  }) {};

  discord-panel = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Discord-Panel";
    plugname = "Discord Panel";
    plugid = "org.dblanovschi.DiscordPanel";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14918/107860/DiscordPanel-0.1.4.zip";
      sha256 = "1z308nqg3m2xj6cgl1rxjr8yifrlghfa15gc5y3gkzzrq65p4abi";
      name = "Discord-Panel-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/dblanovschi";
      license = lib.licenses.bsd3;
      description = ''
        This plugin adds a small discord client tool window.
        Note that this plugin uses JCEF; you should have it in the runtime you're using.
        This plugin lives on GitHub; you can find it here.
      '';
    };
  }) {};

  discordbeam = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DiscordBeam";
    plugname = "DiscordBeam";
    plugid = "de.lukweb.discordbeam";
    version = "1.09";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12804/106058/DiscordBeam-1.09.zip";
      sha256 = "0anzd0h3si9iq6f698rcbkimsywm0wpq1ksvdg3k19fhqsih2q05";
      name = "DiscordBeam-1.09.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LukWebsForge/ShareIt";
      license = lib.licenses.mit;
      description = ''
        Share files and code with one click to your Discord server.
      '';
    };
  }) {};

  dissemination-2d-ascii-game = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dissemination-2d-ASCII-game";
    plugname = "Dissemination: 2d ASCII game";
    plugid = "com.outofmemory.entertainment.dissemination";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8570/37812/dissemination.jar";
      sha256 = "0inv713vi87l262fcrp2732h9nbyhympwxxxr3maikzvmg8xnx35";
      name = "Dissemination-2d-ASCII-game-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://outofmemorygames.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://outofmemorygames.com";
        free = false;
      };
      description = ''
        when programmer closes IDE, the secret life of computer program begins: binary goo starts to grow in dirty code and if nobody takes an action, it will eventually spawn bugs. Here comes the code guardian. With his weapon he fights the goo to keep code clean, but every time fails: bugs are inevitable 

 use "Tools | Play Dissemination" action to launch the game 

 !!!do not play the game in files with uncommitted changes!!!
      '';
    };
  }) {};

  djaneiro-for-pycharm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Djaneiro-for-PyCharm";
    plugname = "Djaneiro for PyCharm";
    plugid = "pw.mcclure.djaneiro.pycharm";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9295/31471/djaneiro-pycharm.jar";
      sha256 = "04gvk10mhaqjihw9jyhd39fgyyyk69cn403vgpvi68q3nz9x75aa";
      name = "Djaneiro-for-PyCharm-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.mcclure.pw";
      license = lib.licenses.mit;
      description = ''
        This was originally a pure port of the Djaneiro plugin for Sublime Text, but new features have been added not found in the original plugin. 
It's a collection of live templates for common patterns encountered when building Django applications (with a couple generic python uses) specifically useful for models, forms, widgets, views, and templates. 
For example, the following expansions for models and forms can be made:  

    mchar&lt;TAB--&gt; ''$FIELDNAME$ = models.CharField($name$ , max_length=50)$END$
    fchar&lt;TAB--&gt; ''$FIELDNAME$ = forms.CharField($ARGS$)$END$
     
Where each variable between dollar signs(''$) (e.g., $FIELDNAME$, $NAME$, etc) is a stopping point for the cursor each time enter is pressed. 
 The abbreviations generally adhere to the following conventions: 
 
 Model field templates are prefixed by 'm' with the exception of `fk`, `m2m`, and `o2o` fields 
 Form field templates are prefixed by 'f' 
 Widgets are prefixed by 'w' 
 Settings are prefixed by 's' 
 Template templates have no prefix, nor do generic python templates 
 
 
 For a full listing of the abbreviations, see the github repo:  https://github.com/brmc/pycharm-djaneiro/tree/master/docs
      '';
    };
  }) {};

  djinni-idl-file-support-0_8 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Djinni-IDL-file-support-0_8";
    plugname = "Djinni IDL file support";
    plugid = "com.dropbox.djinni.ideaplugin";
    version = "0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9209/29815/djinni.jar";
      sha256 = "15byxjcapcfmfqijvp7l5wi5v40gdig81bi3y5xqg6brgz2c2jkc";
      name = "Djinni-IDL-file-support-0_8-0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dropbox/djinni";
      license = lib.licenses.asl20;
      description = ''
        Add some basic navigation, code-completion and error highlighting support to .djinni files. License Copyright 2015-2016 Dropbox, Inc.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 &nbsp;&nbsp;
http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
      '';
    };
  }) {};

  djinni-idl-file-support-0_10_3 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Djinni-IDL-file-support-0_10_3";
    plugname = "Djinni IDL file support";
    plugid = "com.github.cross-language-cpp.djinni-intellij-plugin";
    version = "0.10.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15347/104843/djinni-intellij-plugin-0.10.3.zip";
      sha256 = "1my9hm9v4cl3mkb37cjgiihlx5qqhq72hsw742nmhilplyzpqvxc";
      name = "Djinni-IDL-file-support-0_10_3-0.10.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cross-language-cpp/djinni-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Adds basic navigation, code-completion and error highlighting support for .djinni IDL files.

Djinni is a tool for generating cross-language type declarations and interface bindings. It's designed to connect C++ with either Java or Objective-C.
      '';
    };
  }) {};

  doc-aware-search-everywhere = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Doc-Aware-Search-Everywhere";
    plugname = "Doc-Aware Search Everywhere";
    plugid = "org.jetbrains.search-everywhere-docs";
    version = "1.0.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14308/98735/search-everywhere-docs-1.0.12.zip";
      sha256 = "0kb0hsdvdlxgwfkrk5p958kpbm8jw3qn1pn4xfr73qfrmbb484yd";
      name = "Doc-Aware-Search-Everywhere-1.0.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Provides suggestions from product help articles in the Search Everywhere popup. Selected articles are open in your default Web browser.
      '';
    };
  }) {};

  doc-view = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Doc-View";
    plugname = "Doc View";
    plugid = "com.liuzhihang.doc-view";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15305/107648/Doc_View-1.0.6.zip";
      sha256 = "0lli3wjwcl7sg5wb7d8kga6kn088fqgycg7ypvbv44kijvcf4ik7";
      name = "Doc-View-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://liuzhihang.com";
      license = lib.licenses.mit;
      description = ''
        An IntelliJ IDEA plug-in that can directly generate Markdown documents through annotations

GitHub |
Issues |
Website |
LICENSE




Doc View plugin for IntelliJ IDEA



English introduction



Generate related documents based on the interface




    Generate interface documentation
        Generate request return parameter list
        Generate request return parameter example
    
    Support Spring Controller
    Support Dubbo interface
    Support validation related annotations
    Copy Markdown text clipboard
    Exportable Markdown files
    Support custom Markdown templates




中文介绍



根据接口生成相关文档



    生成接口文档
        生成请求返回参数列表
        生成请求返回参数示例
    
    支持 Spring Controller
    支持 Dubbo 接口
    支持 `validation` 相关注解
    可复制 Markdown 文本剪贴板
    可导出 Markdown 文件
    支持自定义 Markdown 模版



Other



    个人公众号: 『 程序员小航 』
    
    小伙伴们如果有遇到问题或者有使用建议，可以关注公众号并留言。
      '';
    };
  }) {};

  docsearch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DocSearch";
    plugname = "DocSearch";
    plugid = "DocSearch";
    version = "1.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10711/69556/DocSearchPlugin.jar";
      sha256 = "0iggcrl577bkn05vyyi3gbrlpr0a6x38xdqc4h8y68q4rqqbbd5h";
      name = "DocSearch-1.13.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/EgoRedMC/DocSearchPlugin";
      license = lib.licenses.gpl3Only;
      description = ''
        Simple plugin for searching Java documentation
      Also adds some usefull hotkeys
      '';
    };
  }) {};

  dockdockbuild = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DockDockBuild";
    plugname = "DockDockBuild";
    plugid = "com.intuit.intellij.makefile";
    version = "1.0.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13740/99968/DockDockBuild.zip";
      sha256 = "1xgskcfgkjyl734nvr2i76d8bf8w71r3bg738qy1001gyx3fh9nd";
      name = "DockDockBuild-1.0.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.intuit.com/";
      license = lib.licenses.mit;
      description = ''
        Support for running UNIX Makefiles on a Docker container
      '';
    };
  }) {};

  docker-registry-explorer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Docker-Registry-Explorer";
    plugname = "Docker Registry Explorer";
    plugid = "com.github.exidcuter.dockerregistryexplorer";
    version = "1.0.0-stable";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15548/105166/docker-registry-explorer-1.0.0-stable.zip";
      sha256 = "15lvrpv91rfpp98gz17wc1cz3csqj79c0vz214nf24id65qr7i24";
      name = "Docker-Registry-Explorer-1.0.0-stable.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Docker Registry Explorer is a plugin that enables you to see the contents of your Docker Registry in your IDE.
      '';
    };
  }) {};

  document-assistant = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Document-Assistant";
    plugname = "Document Assistant";
    plugid = "org.tonyyan.plugin.documentassistant";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12764/65929/DocumentAssistant.zip";
      sha256 = "0s9747m14mz9g2z5dz5nr2xyll253dzsjcxhf9qmh6wsl5qibg2g";
      name = "Document-Assistant-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Document Assistant is SpringMVC RestFull API markdown document generator.
   It can analyse java class what mark with @RestController. It very easy to generate input and output parameters by your code and doc comments.
      '';
    };
  }) {};

  dodona = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dodona";
    plugname = "Dodona";
    plugid = "be.ugent.piedcler.dodona";
    version = "2.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11166/102294/dodona-2.1.1.zip";
      sha256 = "1qp6gkr8h6ih0sqfd997fzl7mqsalb0nbp2m9nhmv8gh4mlkx1b7";
      name = "Dodona-2.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/11166-dodona";
      license = lib.licenses.mit;
      description = ''
        Companion plugin for the Ghent University Dodona platform, which allows you to submit exercises right from your favourite JetBrains IDE.
      '';
    };
  }) {};

  domui-development-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DomUI-Development-Plugin";
    plugname = "DomUI Development Plugin";
    plugid = "to.etc.domui.intellij.plugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10720/45777/domui-intellij-plugin.jar";
      sha256 = "13wc9jr6g5baw49x4lnv02vq8hjrpfwsw6igmr4d4pjf4z2nkwpi";
      name = "DomUI-Development-Plugin-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://domui.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "lgpl-2.1.php";
        free = false;
      };
      description = ''
        This plugin adds supposedly useful extra's to work with DomUI to IntelliJ Idea. The plugin adds the following: 
 
 Replace strings that contain property names or paths by DomUI's typed properties 
 Shows warnings for above property paths and allows them to be replaced with a quick fix
      '';
    };
  }) {};

  doodle-jump = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Doodle-Jump";
    plugname = "Doodle Jump";
    plugid = "com.fkw.plugin.jnetkit.rpc-jumpto";
    version = "1.0-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11992/58423/rpc-jumpto-1.0-SNAPSHOT.jar";
      sha256 = "1r7i1wh8vplndc6pp8b28k637pf9z0f8b9ar5j4ssbpfhpplyp96";
      name = "Doodle-Jump-1.0-SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/careinfress/rpc-jumpto";
      license = lib.licenses.asl20;
      description = ''
        A Plugin Of Jumpto For RPC.
    一款方便RPC跳转的插件
      '';
    };
  }) {};

  download-selection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Download-Selection";
    plugname = "Download Selection";
    plugid = "com.johnlindquist.plugins.DownloadSelection";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7250/13469/download-selection.zip";
      sha256 = "1xb6a3ahh51h5baxs677k4q7mn4lfwvaczd2ygvwfapzx7kcp4l4";
      name = "Download-Selection-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://johnlindquist.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://johnlindquist.com/";
        free = false;
      };
      description = ''
        Select a url, type &quot;ctrl+shift+A&quot;, type &quot;Download Selection&quot; or select &quot;Download Selection&quot; from the Tools menu.
      '';
    };
  }) {};

  dr-vector-android = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dr.Vector-Android";
    plugname = "Dr.Vector Android";
    plugid = "com.drvector";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9937/43125/DoctorVector.jar";
      sha256 = "192y75whchjsqndf7lnzsakdcgms556i6d931b535kwki92kmpzd";
      name = "Dr.Vector-Android-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/eymar/DrVectorAndroid";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/eymar/DrVectorAndroid";
        free = false;
      };
      description = ''
        Dr.Vector 
 This plugin helps to deal with vector drawable files. It fixes such float declaration: .128 to 0.128, 1.225.443 to 1.225 0.443, 1.30-.25 to 1.30 -0.25 
 
 NumberFormatException may be thrown on some devices when file contains .128 like float numbers 
 How to use it 
Option 1: Edit - Doctor Vector - Fix Floating Points
 
Option 2: Ctrl + Alt + D
 
Both options require vector drawable (xml) to be opened in editor
      '';
    };
  }) {};

  dracula-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dracula-Theme";
    plugname = "Dracula Theme";
    plugid = "com.vermouthx.idea";
    version = "1.9.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12275/106424/dracula-theme-1.9.6.zip";
      sha256 = "0a39bh5afks7l9xz3k7a675m3n0hv0snzkqawrla61bjprp8cqrm";
      name = "Dracula-Theme-1.9.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://draculatheme.com/";
      license = lib.licenses.mit;
      description = ''
        A Dark Theme for JetBrains IDEs


Screenshots

Install
All instructions can be found at draculatheme.com/jetbrains.
Dracula PRO

Dracula PRO is a color scheme and UI theme tailored for programming.
Made for terminal emulators, code editors, and syntax highlighters.
Designed to be aesthetically pleasing while keeping you focused.
Get it now
Sponsors
The JetBrains Dracula Theme is sponsored by CodeStream.

Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from inside your IDE while using jump-to-definition, your keybindings, and other IDE favorites.
Learn more
Credit
The Dracula Theme plugin icon is designed by Icojam.
Contribution
If you'd like to contribute to this theme, please read the Contributing Guide.
      '';
    };
  }) {};

  draganddropapk = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DragAndDropApk";
    plugname = "DragAndDropApk";
    plugid = "com.thasneem.draganddrop";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8437/26670/DragApkAndDrop.zip";
      sha256 = "1izyxy427fdwzx17gb80ik1raw3z88vi81k3cda19l2rq34mdrdy";
      name = "DragAndDropApk-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/thasneemp";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/thasneemp";
        free = false;
      };
      description = ''
        This plugin can use for Install apk to mobile without using commands!
 You can drag your APK file to this window or you can select file from your directory.
      '';
    };
  }) {};

  drawablexhdpi = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "DrawableXhdpi";
    plugname = "DrawableXhdpi";
    plugid = "com.stardon.androiddrawable";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14680/91704/AndroidDrawableFactory.jar";
      sha256 = "0fynz6l823mfg6kgai89rhq8dacjgi7bbxib4i83zmqhz3vjjgi6";
      name = "DrawableXhdpi-2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ccc920123/AndroidDrawableFactory.git";
      license = lib.licenses.asl20;
      description = ''
        Quickly and easily convert images into images of various densities (LDPI, MDPI, HDPI, XHDPI, XXHDPI, XXXHDPI) used by Android. UI designers do not need to spend a lot of time to adapt multi-density mobile phone images
    
    Author: Yujin Chen
       Github 
      issues(issues)
       Xhdpi image conversion, the ability to convert any Android Drawable format   
      
      "ldpi", "mdpi", "hdpi", "xhdpi","xxhdpi", "xxxhdpi" 
      For example, if my artist has designed a phone with an xhdpi resolution, I can use AndroidDrawable to convert this xhdpi into "ldpi", "mdpi", "hdpi", "xhdpi","xxhdpi", "xxxhdpi"
   DrawableXhdpi usage

  1. Search for "AndroidDrawableXhdpi" in the Android studio plugin tool and install it, then restart Android studio
 2. Click Tools to find DrawableXhdpi you can also quickly launch Windows shortcuts Ctrl+Shift+D
  3. 
 1). Click add image to add image to be converted
 2). Select the image conversion storage path
  3) set up the need to convert file density, total "ldpi", "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi" six density selected  
 that is, the image was first designed according to which density
 4). Check the density that you want to convert
 5). Start conversion

 3.   
    
    
    快速方便的将图片转换成Android 使用的各个密度（ldpi、 mdpi、 hdpi、xhdpi、xxhdpi、xxxhdpi）的图片，不需要UI设计人员花费大量的时间来进行多密度手机图片的适配
      作者：陈渝金
       开源地址 
      问题反馈(issues)
       xhdpi图片转换，能任意转换Android Drawable下的各种规格格式   
      
      "ldpi", "mdpi", "hdpi", "xhdpi","xxhdpi", "xxxhdpi" 
      比如我的美工人员设计了一个图片适合 xhdpi 分辨率的手机，我可以通过AndroidDrawable将这个xhdpi转换成
      "ldpi", "mdpi", "hdpi", "xhdpi","xxhdpi", "xxxhdpi"的图片
       DrawableXhdpi 使用方式
     
      1.在Android studio 插件工具处搜索“DrawableXhdpi”并且安装，然后重启Android studio
       2.点击Tools找到DrawableXhdpi 你也可以快捷启动windows系统快捷键 Ctrl+Shift+D
       3. 
       1).点击添加图片，添加需要转换的图片
      2).选择图片转换的存放路径
      3).设置需要转换的文件密度，共"ldpi", "mdpi", "hdpi", "xhdpi","xxhdpi", "xxxhdpi"六个密度选择
      也就是这个图片最先设计是按照哪种密度设计
      4).勾选需要转换结果的密度
       5).开始转换
      '';
    };
  }) {};

  drom-code-inspections = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Drom-code-inspections";
    plugname = "Drom code inspections";
    plugid = "ru.drom";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14124/83480/Drom_code_inspections-1.0.1.zip";
      sha256 = "0k2jgb076lc5p4njcmg08221g4cbiifaw718s8y57l4n7kvmj2wy";
      name = "Drom-code-inspections-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.drom.ru/";
      license = lib.licenses.asl20;
      description = ''
        Plugin written in Kotlin for Kotlin syntax check to ensure that exceptions are checked
      '';
    };
  }) {};

  drum-roll = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Drum-roll";
    plugname = "Drum-roll";
    plugid = "mhashim6.idea.plugin.drumroll";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12130/104022/Drum-roll-1.0.zip";
      sha256 = "1rgfqn704cixlaw9cz3p2b3gd7izhrybj34dmwj2dzsdci6367kw";
      name = "Drum-roll-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mhashim6";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mhashim6/intellij-drumroll/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Get notified when build finishes in a very special way: Plays a drum roll sound on compile/build. and
        other equally-fun sounds when build yields errors, or
        warnings.
      '';
    };
  }) {};

  dsllistenerbuilder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DslListenerBuilder";
    plugname = "DslListenerBuilder";
    plugid = "com.shanbay.plugins.dsl.listener.builder";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11611/54691/DslListenerBuilder.zip";
      sha256 = "0a496la2kmhja5dx14ffmbbkh3kwsc50rv13z9xpavvy8ib8ml0w";
      name = "DslListenerBuilder-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shanbay.com";
      license = lib.licenses.asl20;
      description = ''
        Plugin for Generate Kotlin DSL ListenerBuilder Code 
        The Open Source Code Repository Url: https://github.com/BayMikyou/DslListenerBuilder
        The Plugin develop blog Url: https://juejin.im/post/5c4f106a6fb9a049de6dc410
        The more detail you can watch the below gif
      '';
    };
  }) {};

  dubbo = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dubbo";
    plugname = "Dubbo";
    plugid = "com.bruce.intellijplugin.dubboPlugin";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10946/48274/dubboPlugin-1.1.2.zip";
      sha256 = "0jqilabn3h3w7as5prhwxx92lml2a75wxjyky3xcc4zkqn29xm5z";
      name = "Dubbo-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dubbo/intellij-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/gejun123456/IntellijDubboPlugin/blob/master/license";
        free = false;
      };
      description = ''
        GitHub
      |&nbsp;Issues
      Features
      
          create dubbo+springboot project with api module and provider module quickly
          support lots of third party dependency like mybatis,pageHelper,hikari,redis
          generate code example and testcase for them
      '';
    };
  }) {};

  dubboinvoker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DubboInvoker";
    plugname = "DubboInvoker";
    plugid = "me.wbean.plugin.dubbo.invoker";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11981/58303/DubboInvoker.zip";
      sha256 = "0mcwk2zny17fhx52gz1knc4cii4fwim98vvz7l9g0az93k9y5lnn";
      name = "DubboInvoker-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wbean/";
      license = lib.licenses.gpl3Only;
      description = ''
        a develop tool help test dubbo service.
      call dubbo service with several click.
      auto generate param value according param type.
      support user define param value in doc comment.

      document: https://github.com/wbean/DubboInvoker

      
       usage:
       step1: right click on dubbo service method 
       step2: click DubboInvoker 
       step3: check auto generate param value 
       step4: click invoke button
       
       user define param value example:
       
    /**
     *
     * @param a id
     *          example=asdfasdf
     * @param b 商户号
     *          example=123
     * @param exportParam realParam
     *                    example={"billDate":20190101}
     */
    void getData(String a, int b, ExportParam exportParam);
       
       
       1. new line for example
       2. start with token "example="
      '';
    };
  }) {};

  dubbotest = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DubboTest";
    plugname = "DubboTest";
    plugid = "com.yanglx";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15664/106496/DubboTest.zip";
      sha256 = "0a5ydcwgp5bziw8b0v4wx3mz3bv011yc42mslkfx61pb93x9sffk";
      name = "DubboTest-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        DubboTest can directly request your dubbo interface, and hope to bring you some convenience
    when developing and
    debugging.

Quick start:

1.First, you need to start the dubbo service first to expose your interface
2.Find the interface method you need to debug, right-click and select RunDubboTest, then you can see the DubboTest
    window pops up, and some parameters are randomly generated, you can change your input parameters. After the
    parameters are determined, click the run button.

The address input box can choose the following two types.
use zookeeper: zookeeper://127.0.0.1:2181
use dubbo: dubbo://127.0.0.1:2288

tips:
1.The methodType field needs to correspond to the input parameter type of your interface,
        and generally does not need to be changed, because it will be automatically generated
        for you after you right-click and select it. When your input parameter is not a regular object,
        you need to add a class field to tell dubbo which class you are using.
2.There is a save button behind the input box了‘, you can choose to save the current address for
        selection next time, or you can click the delete button to delete the current address



DubboTest可以直接请求您的dubbo接口，在开发调试时希望能给你带来一些便利。
开始使用：
1.首先您需要先启动dubbo服务，暴漏您的接口。
2.找到您需要调试的接口方法，右键选择RunDubboTest，这时你可以看到DubboTest的窗口弹出，
    而且随机生成了一些参数，你可以更改你的入参。参数确定好后点击run按钮就可以了。

address输入框可以选择以下两种类型
使用zookeeper地址：zookeeper://127.0.0.1:2181
使用dubbo直连：dubbo://127.0.0.1:2288

小提示:
1.methodType这个字段需要对应你的接口入参类型，一般是不需要更改，因为鼠标右键选择后会为你自动生成。
        当你的入参不是常规对象时，需要添加class字段来告诉dubbo你使用的是哪个类。
2.在输入框后有save按钮，您可以选择保存当前使用地址用以下次可以选择，您也可以点击delete按钮来删除当前地址
      '';
    };
  }) {};

  duck-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Duck-Progress-Bar";
    plugname = "Duck Progress Bar";
    plugid = "com.github.rougsig.duck-progress-bar";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11602/54596/duck-progress-bar.jar";
      sha256 = "0l3kmgkqs9czx5lx4swh23f7ma798zxpq68kb7z5m9a5h8lgpas9";
      name = "Duck-Progress-Bar-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rougsig/duck-progress-bar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        Duck progress bar for intellij based IDEs
      '';
    };
  }) {};

  duda-common-props = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Duda-Common-Props";
    plugname = "Duda Common Props";
    plugid = "com.danielg.duda.commonprop";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13787/78415/duda-props-1.0.4.zip";
      sha256 = "1a44xpdsb5ad8irnvzcavxymfnd7q7s1k7vv86yy17lvcs5yvndb";
      name = "Duda-Common-Props-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Suggests auto completion properties found in property files.
    Works for CommonProps.getX(also in js) and featureFlags.getX.
      '';
    };
  }) {};

  dukescript-java-regex-tester = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dukescript-Java-Regex-Tester";
    plugname = "Dukescript Java Regex Tester";
    plugid = "org.javapro.idea";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11370/79478/regextester-idea-1.0.3-jar-with-dependencies.jar";
      sha256 = "0wpih2hs504ncqnlkyp022x4bvw9az20idw1b7zsx7c4ybsg4k98";
      name = "Dukescript-Java-Regex-Tester-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.javapro.org";
      license = lib.licenses.gpl3Only;
      description = ''
        An easy to use regular expressions tool (builder, tester, valid values generator)
    It has the following characteristics:
    
        Pasting of unescaped regular expression
        Auto escape of regular expression
        Testing for:
            
                Replacement
                Partial matching
                Group capturing
                Valid values generation
            
        
        Code generation for JVM languages
            
                Java
                Kotlin
            
        
        The following java.util.regex API characteristics has been tested for support:
            
                linebreaks trough
                    \n
                
                hexadecimal character matching such as
                    [\x7F-\xFF]
                
                
                    Unicode categories
                    support such as \p{Letter} or
                    \p{InGreek}
                
                Pattern modifiers at regex such as:
                    
                        case insensitive matching mode trough
                            (?i)
                        
                        dot-all mode
                            (?s)
                        
                        comments mode
                            (?x)
                        
                    
                
            
        
    
    
    Credits
    
    Concept and development:
    Ruslan López Carro
    
    Some UI improvements:
    Leonardo Quintana Juárez
    
    
    If you want to support this plugin or contribute for my rehabilitation therapies don't hesitate to
    Donate
    
    
    This plugin was possible due the following technologies:
    
        
            Dukescript
        
        
            Level CSS
        
        
            NES CSS
        
        
            BOOTSTRA.386
        
        
            Generex
        
        IntelliJ IDEA SDK from Jetbrains
        Open JavaFx
        NetBeans Platform
    
    Contribute
    Source Code
      '';
    };
  }) {};

  dummy-text-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Dummy-Text-Generator";
    plugname = "Dummy Text Generator";
    plugid = "Dummy Text Generator";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7216/50021/dummy.jar";
      sha256 = "1rp0593rr7pijsrlfavc10j50w79z0xv66p1hpy8m5zj9iiyd3d9";
      name = "Dummy-Text-Generator-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kstenschke/dummytext-plugin";
      license = lib.licenses.asl20;
      description = ''
        The plugin adds a random text generator, capable of creating witty texts in different genres.
    Created text can be inserted newly at the caret, or replace a selection.
    The dummy text generator is added to the main menu, tools menu and into the generate... popup (Alt+Insert).
    
    Used from the main menu, text is generated in the previously selected genre.
    
    Used from the Tools menu or Generate popup, the plugin allows to choose from several genres::
    
        Culinary Inspirations
        Esoteric Wisdom
        Fake Latin  (similar to "Lorem Ipsum" blindtext)
        Pirate Lingo
        Science Fiction
    
    When replacing a multi-lined selection of text, the generated dummy text maintains the amount of lines.
    When replacing a selection of text within a single line, the amount of words is roughly being maintained.
    When the replaced text selection consists fully of lower-cased or capital letters or begins with a
    capital letter, that previous casing is maintained. Furthermore, the presence or absence of a trailing
    punctuation mark of a replaced text selection is being maintained.
    Please note: This plugin is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      '';
    };
  }) {};

  dummymapper-jsonavrographql = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "DummyMapper-JsonAvroGraphQL";
    plugname = "DummyMapper (Json,Avro,GraphQL)";
    plugid = "com.github.goodforgod.dummymapper";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14911/107313/dummymapper-1.0.2.zip";
      sha256 = "0kn2gsic8fl0vv7a8xcp308a13d17pap88wy6xixfjz1q15mqac1";
      name = "DummyMapper-JsonAvroGraphQL-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://goodforgod.github.io/DummyMapper/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/GoodforGod/DummyMapper/blob/master/LICENSE";
        free = false;
      };
      description = ''
        DummyMapper is a plugin for mapping Java Classes to formats like JSON, GraphQL, JSON Schema, AVRO Schema.
        
        
        Plugin supports mapping to formats:
        
            JSON (Example representation in JSON)
            JSON Array (Array examples representation in JSON)
            JSON Schema (Draft 2019),
            (Draft-07),
            (Draft-06)
            GraphQL (v14)
            AVRO Schema (1.9.2)
      '';
    };
  }) {};

  duplicate-lines = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Duplicate-Lines";
    plugname = "Duplicate Lines";
    plugid = "DuplicateLines";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10008/63188/duplicate-lines-intellij-plugin.jar";
      sha256 = "0fgjij8gl8mqqzyh410fnfn4yalc30y71j4qk4djnqa8jyif8ngh";
      name = "Duplicate-Lines-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xusoo/duplicate-lines-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/xusoo/duplicate-lines-intellij-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin that lets you duplicate the entire selected lines, not just down (like you already can by default), but also up.
        In both cases, unlike the default action, it will preserve the original selection after the duplication.
      
      
        Supports single lines, multiple selected lines, multiple carets and block selection.
      
      
        Default shortcuts are "Shift + Ctrl + Alt + Up/Down" and "Shift + Command + Option + Up/Down" for macOS.
      '';
    };
  }) {};

  duplicate-detector = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Duplicate-detector";
    plugname = "Duplicate detector";
    plugid = "com.suhininalex.cloneDetection.plugin.id";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9829/37146/Duplicate_detector-1.1.zip";
      sha256 = "16laqmqwhz6wjwnghlq4ivqinqprq7h3hlifpfcjlh1cxi1ib91j";
      name = "Duplicate-detector-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://suhininalex.github.io/IdeaClonePlugin/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "fpl-1.0.0";
        free = false;
      };
      description = ''
        This plugin provides advanced on-the-fly duplicated code inspections for IntelliJ IDEA (aka clone detection).
              
              Main features:
              
                  Supports detection of
                    
                        exact clones
                        clones with renamed variables/types/etc.
                        clones with gaps
                    
                  Can analyze industry-size projects (with millions lines of code)
                  Works on-the-fly, right as you type
                  Supports both Java and Kotlin (with more languages on the way)
              
              
              Plugin requires additional memory up to 500 Mb per 1 million LOC.
      '';
    };
  }) {};

  dva-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Dva-Helper";
    plugname = "Dva Helper";
    plugid = "com.liang.dva-hepler";
    version = "1.02";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15812/107573/dva-helper-1.02.zip";
      sha256 = "1ivljrjx3ak3dibpvmckv9mjsczggybk848w0lj76w4zgfj45nfl";
      name = "Dva-Helper-1.02.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liangyehao/dva-helper";
      license = lib.licenses.asl20;
      description = ''
        Lets you view dva models in your umi project
        Supports project which uses umijs
      '';
    };
  }) {};

  e2dit-minimal-language = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "E2DIT-Minimal-Language";
    plugname = "E2DIT Minimal Language";
    plugid = "com.e2dit.e2tml";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9251/30189/e2tml_plugin.jar";
      sha256 = "1rx1z222k1wpiha3r0mbyd6idm9y41fdq2d6c906l5m22qpl286a";
      name = "E2DIT-Minimal-Language-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://e2dit.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://e2dit.com";
        free = false;
      };
      description = ''
        Syntax highlighting for minimal language E2TML.
      '';
    };
  }) {};

  easy-debug-for-recoverpoint = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Easy-Debug-For-RecoverPoint";
    plugname = "Easy Debug For RecoverPoint";
    plugid = "com.dell.easydebug";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11953/58980/EasyDebug.jar";
      sha256 = "0vv8cp7n533qyz1r1945dmx2qwlxw3f7dgry87gjpw4w2f5k0jmg";
      name = "Easy-Debug-For-RecoverPoint-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html";
        free = false;
      };
      description = ''
        Plugin to enable remote debugging, replace Jar and reset branch to RPA version.
      '';
    };
  }) {};

  easy-generate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Easy-Generate";
    plugname = "Easy Generate";
    plugid = "com.star.easy_generate";
    version = "1.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15564/106839/easy_generate-1.01.jar";
      sha256 = "0bfc5m494dvgc41h2hgpm2lqhc5hk1ady5nn4g73hynz9vpjxvk9";
      name = "Easy-Generate-1.01.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/starcwang";
      license = lib.licenses.asl20;
      description = ''
        This plugin can help you to generate java code quickly. 
      1. add "Field Name Constants" button in Generate window, which can generate field constants quickly.

      easy_generate source code and document
      
      v1.01 first version
      
          support generate constant for field
      '';
    };
  }) {};

  easy-gradle = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Easy-Gradle";
    plugname = "Easy Gradle";
    plugid = "cn.renyuzhuo.plugin.easygradle";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11920/60762/EasyGradle.jar";
      sha256 = "17rfqzfhnnja54824abx6hm4xpjqpz1a9n5ds2sgkavr5fg3pdd2";
      name = "Easy-Gradle-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://renyuzhuo.cn";
      license = lib.licenses.mit;
      description = ''
        Easy Gradle.
      Use gradle is so easy!

      1. You can format build.gradle file
      2. update gradle to new version
      3. stop gradle with one click
      '';
    };
  }) {};

  easy-import = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Easy-Import";
    plugname = "Easy Import";
    plugid = "Easy Import";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6561/10259/Easy_Import_10259.jar";
      sha256 = "0rqpp2sjj3izjp1p4ms70a94v2bmnsa48z1v4apypc6hzaswbrim";
      name = "Easy-Import-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/6561/license.txt";
        free = false;
      };
      description = ''
        This plugin simplify importing modules to current project from zip archive. "Import Modules" action appears in File menu.
      '';
    };
  }) {};

  easy-javadoc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Easy-Javadoc";
    plugname = "Easy Javadoc";
    plugid = "com.star.easydoc.easy-javadoc";
    version = "1.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12977/106475/easy_javadoc-1.16.jar";
      sha256 = "0x19rnsqcgmyxlz9wikszzh1fnvi8hjg0qa58709wgr25ph0i6is";
      name = "Easy-Javadoc-1.16.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/starcwang";
      license = lib.licenses.asl20;
      description = ''
        This plugin can help you complete the Chinese javadoc document quickly.
      Support three type of javadoc: field, method and class.
      easy_javadoc source code and document
      
      v1.16 update
      
          @throws tag bug fix
      
      v1.15 update
      
          fix some bugs
      
      v1.13 update
      
          support baidu translator and tencent translator
          add cache for translator
      
      v1.12 update
      
          fix some bugs
      
      v1.11 update
      
          fix some bugs
      
      v1.10 update
      
          support auto translate
          fix some bugs
      
      v1.9 update
      
          fix some bugs
      
      v1.8 update
      
          support import and export
          support more IDEA versions
      
      v1.7 update
      
          fix some bugs
      
      v1.6 update
      
          support custom template
          support translate Chinese to English
          fix some bugs
      
      v1.5 update
      
          support more idea versions
          fix some bugs
      
      v1.4 update
      
          support for incremental updates
          support whole sentences translation
          add @throws label for the method javadoc
          fix some bugs
      
      v1.3 update
      
          support bulk insert javadoc
          fix some bugs
      
      v1.1 update
      
          add @link label in @return doc of the method javadoc
          fix some bugs
      
      v1.0 first version
      
          support class, method and field javadoc
      '';
    };
  }) {};

  easy-shell = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Easy-Shell";
    plugname = "Easy Shell";
    plugid = "org.internal.easy.shell";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7218/13108/easyShell.jar";
      sha256 = "0wvg8q9sjf4x849jx6y3c3d4cxl6silwfg91nhya92n82xv11i3l";
      name = "Easy-Shell-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Enter short description for your plugin here.
 
most HTML tags may be used
      '';
    };
  }) {};

  easy-translation-2_01_01 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Easy-Translation-2_01_01";
    plugname = "Easy-Translation";
    plugid = "com.gogh.android.plugin.translation";
    version = "2.01.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8553/104451/EasyTranslation.jar";
      sha256 = "08zpv8w7x6jzgwbfbk24wn0mh8s5ql73jyiq0h97m4gx573sv3p9";
      name = "Easy-Translation-2_01_01-2.01.01.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "mailto:xiaofeng355@gmail.com";
      license = lib.licenses.asl20;
      description = ''
        An Intellij platform plugin that support Chinese-English words(sentence) translation of each other. 
      
       Instructions(update at 2020.09.25): 
      1. Double click to select the English(Chinese) words(sentence) you want to translate. 
      2. Press shortcut key(Alt + A) to view translation result. 
      3. For Step 2. you also can right click the words(sentence) and select menu item "EZTranslate". 
      4. Another way is to press shortcut(Shift Alt + A) display translation content in tool window(Floating Mode or Pinned Mode). 
      5. And you can press shortcut key(Shift + F10) to select an translation engine(Google or YouDao) to translate it in web page. 
      
       Fixed: 
      1. Solve the garbage problem. 
      2. The balloon support for mouse events.
      '';
    };
  }) {};

  easy-translation-1_3 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Easy-Translation-1_3";
    plugname = "Easy-Translation";
    plugid = "easy.plugin.translation";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10142/52029/easy-translation.zip";
      sha256 = "1az729m0lqhfmlp7p8xxkwanqpyyyc9qww01lmisby8jp2fah9dh";
      name = "Easy-Translation-1_3-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/limengyu1990";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        Instructions for use
        File -&gt; Settings -&gt; Other Settings -&gt; Translation Configuration, Set Translation Source
        Chinese to English: "Right mouse button -&gt; Chinese 2 English", or use the shortcut key (Alt A)
        English to Chinese: Mouse select the English to be translated, then "Right mouse -&gt; translation", or use the shortcut key (Alt T)
      '';
    };
  }) {};

  easyapi = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EasyApi";
    plugname = "EasyApi";
    plugid = "com.itangcent.idea.plugin.easy-api";
    version = "2.0.9.183.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12211/108580/easy-api.2.0.9.183.0.jar";
      sha256 = "1js951n09mwa721pv3fhr0vp9qc33df33bx0cy2njihlymifrfwp";
      name = "EasyApi-2.0.9.183.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tangcent";
      license = lib.licenses.gpl3Only;
      description = ''
        easy-api

GitHub |
Issues |
Guide



A plugin that simplifies API development.

Help you generate API documentation from your code to postman/markdown
If the keyboard shortcuts do not work,please check for keyboard conflicts.
You can set the shortcut keys at Preferences(Settings) &gt; KeyMap 



Features

    Export Api(beta)
        
        1. Open existed Spring Controller File Or Select files or directories from project navigation
        You can use by this : "alt shift E(windows)/ctrl E(mac)"
        
        2.select apis and channel
        
        3.click [✔] button or press enter key
    
    Export Api To Postman
        
        There are two ways to export api.
        
        1. Open existed Spring Controller File
        You can use by this : "Right click in the file -&gt; generate... " or use its shortcuts "Alt + Insert" , then
        choose the action "ExportPostman"
        
        2. Select files or directories from project navigation
        You can use by this : "Click [Code -&gt; ExportPostman] in top"
    
    Quick API requests from code
        
        Open existed Spring Controller File
        Right click in the file -&gt; generate... or use its shortcuts "Alt + Insert"
        then choose the action "Call"
    
    Export API To Markdown(beta)
        
        There are two ways to export api.
        
        1. Open existed Spring Controller File
        You can use by this : "Right click in the file -&gt; generate... " or use its shortcuts "Alt + Insert" , then
        choose the action "ExportMarkdown"
        
        2. Select files or directories from project navigation
        You can use by this : "Click [Code -&gt; ExportMarkdown] in top"
    
    ApiDashBoard
        
        You can use by this : "Click [Code -&gt; ApiDashBoard] in top"
        Then you can easily export api by drag it from project(left) to postman(right)
    
    ScriptExecutor
        
        You can use by this : "Click [Code -&gt; ScriptExecutor] in top"
        Then you can easily write、load or run scripts.
      '';
    };
  }) {};

  easyappplugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EasyAppPlugin";
    plugname = "EasyAppPlugin";
    plugid = "com.mmyh.plugin.easyapp";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12473/63115/EasyAppPlugin.jar";
      sha256 = "0qcmslfy3shqjczji858im7sf7kl1pah2z6mqmszy9xvj5apwg11";
      name = "EasyAppPlugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        to support EasyApp, see https://github.com/mmyh/EasyApp
      '';
    };
  }) {};

  easycamelqsm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EasyCamelQSM";
    plugname = "EasyCamelQSM";
    plugid = "com.jd.com.ins.qsm.EasyCamelQSM";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14852/94340/EasyCamelQSM.jar";
      sha256 = "0g3krrbw921n0ggnq1g1brmbxyhq7jnwyqbfz1jzrpadpl7xddxk";
      name = "EasyCamelQSM-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jd.com";
      license = lib.licenses.asl20;
      description = ''
        Switch easily between space case, snake_case, SNAKE_CASE, PascalCase or camelCase. See Edit menu or use ctrl + alt + q.
      '';
    };
  }) {};

  easychangefontsize = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EasyChangeFontSize";
    plugname = "EasyChangeFontSize";
    plugid = "hebehan.easychangefontsize";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12243/70631/FontSize.jar";
      sha256 = "00r8mh5p36qqrr2qm78g6b7ri74ibxk4rrfl51cr463l84q3pl1g";
      name = "EasyChangeFontSize-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.hebehan.com";
      license = lib.licenses.mit;
      description = ''
        Easy Change FontSize,Made by Hebe with 💖
      Fast Change your IDE FontSize in demonstration,airplay,ppt,keynote,code review etc...
      
      这是一款快速切换字体大小的插件,可以在常用字体与你设置的大小字体间快速切换
      用用场景有,投屏,演示,ppt或keynote展示,代码审查等,避免切换字体大小的尴尬
      Made by Hebe with 💖
      
      
      usage:
      1.set your font size:
      
      click menu 'Window'-&gt;'set font size' 
      then set your personal font size,click ok 
      
      2.change your font size
      
      in your toolbar,there is a icon like 'A' if you don't see,you should open your 'main tool bar'(double click shift and input 'toolbar' to open)
      then,it's very easy to use,click the icon to change the font size you have set.
      
      
      如何使用:
      1.设置你的字体偏好:
      
      点击'Window菜单',看到有'set font size'菜单,点击后弹出设置界面 
      左边是你常用的字体大小,默认获取你当前字体大小,右边是你的特殊字体大小,默认为23,设置好以后点击OK保存 
      
      2.改变你的字体大小
      
      安装成功后,在你的工具栏有一个像'A'的图标,如果你没有看到它,双击shift,然后搜索'main tool bar',右边有一个开关,点击打开后,在主工具栏即可看到
      然后就非常简单了,点击一下'A',就会变成默认字体,再点击一下,就会变成特殊字体,非常方便的切换,重启IDE后默认恢复正常字体
      '';
    };
  }) {};

  easyexporter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EasyExporter";
    plugname = "EasyExporter";
    plugid = "net.exoticdev.plugins.EasyExporter";
    version = "1.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10239/41149/EasyExporter.jar";
      sha256 = "005gqzczhwgyrw543sz3c76fc62rpvpi6nk7dmljd3niajjv54w2";
      name = "EasyExporter-1.01.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://exoticdev.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://exoticdev.net";
        free = false;
      };
      description = ''
        Export your modules blazing fast.
      '';
    };
  }) {};

  easymvvm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EasyMVVM";
    plugname = "EasyMVVM";
    plugid = "engineer.echo.plugin.mvvm";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13870/79618/mvvm.jar";
      sha256 = "0gipcpn0dw2v0j5j6dp893gxfynwv0yaqscxsqwf3zq5fjnimqmy";
      name = "EasyMVVM-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.1991th.com";
      license = lib.licenses.asl20;
      description = ''
        Easy to create MVVM.[ ⌃⇧M ]
      required: androidx,LiveData,DataBinding,Kotlin,ViewModel
      plucky@echo.engineer
      '';
    };
  }) {};

  easysnippet = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EasySnippet";
    plugname = "EasySnippet";
    plugid = "me.baluwii.easy.snippet";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11018/49015/UpdateSnippetPlugin.jar";
      sha256 = "12vysb2m3pdzjd8lrlqsgisq2r8jkbq34l0b06406phdirb2iaxn";
      name = "EasySnippet-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/iBimsBaluwii";
      license = lib.licenses.asl20;
      description = ''
        Generate hastebin-snippets of a whole code file (or a selection) whenever you click on a button like Code &gt; Create a Snippet or whenever you use a shortcut like ctrl + alt + 2.
      '';
    };
  }) {};

  easysoc-chisel = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EasySoC-Chisel";
    plugname = "EasySoC Chisel";
    plugid = "org.easysoc.chisel";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14269/104979/easysoc-chisel-1.1.0.zip";
      sha256 = "1racrfj4rrwf609473g3x1cp8n3pir0y04slva265gx5s4njr7wb";
      name = "EasySoC-Chisel-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.easysoc.org";
      license = lib.licenses.gpl3Only;
      description = ''
        Create new Chisel project based on ProjectWizard and Templates.
    Bringing Agile Hardware Development to the Masses.
      '';
    };
  }) {};

  easysoc-firrtl = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EasySoC-Firrtl";
    plugname = "EasySoC Firrtl";
    plugid = "org.easysoc.firrtl";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14183/105119/easysoc-firrtl-1.1.0.zip";
      sha256 = "0a12f1990axpci21kcs5qrlwg0q04hbq9khldqhvhr1bbsqmxac2";
      name = "EasySoC-Firrtl-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.easysoc.org";
      license = lib.licenses.gpl3Only;
      description = ''
        Jump to the corresponding Chisel code by navigate(Ctrl+Click or Ctrl+B) on the Firrtl fileinfo comment.
    Also supports Syntax highlighting, Structure View and more features in the future.
      '';
    };
  }) {};

  easysoc-verilog = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EasySoC-Verilog";
    plugname = "EasySoC Verilog";
    plugid = "org.easysoc.verilog";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14184/107871/easysoc-verilog-1.0.1.zip";
      sha256 = "08gdramzj5kzzlfnq032s0gmyqv27509wsywrc3ipaivc94x6l6m";
      name = "EasySoC-Verilog-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.easysoc.org";
      license = lib.licenses.gpl3Only;
      description = ''
        Jump to the corresponding Chisel code by navigate(Ctrl+Click) the special verilog comment.
    Currently depends on the SystemVerilog plugin by Edaphic.Studio.
      '';
    };
  }) {};

  easywsdl-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EasyWSDL-Generator";
    plugname = "EasyWSDL Generator";
    plugid = "com.easywsdl.tools.plugins.intellij";
    version = "2.7.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7751/104829/easywsdl.plugin.intellij-2.7.3.zip";
      sha256 = "029lx7812f4lf901g078pi5rlc49hma276r4p0ici3ls7kifs32b";
      name = "EasyWSDL-Generator-2.7.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.easywsdl.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://easywsdl.com/easywsdl_genreator_plugin_license.html";
        free = false;
      };
      description = ''
        Generate java classes for Android and save your time. Forget about WSDL files and focus on your application. Using this tool you can easly consume any SOAP Web service (for example .NET WCF or ASMX services).
      '';
    };
  }) {};

  easyyapi = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EasyYapi";
    plugname = "EasyYapi";
    plugid = "com.itangcent.idea.plugin.easy-yapi";
    version = "2.1.1.183.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12458/108575/easy-yapi.2.1.1.183.0.jar";
      sha256 = "18af19cbq3ybnbc1dj66pqh71wmqbna5nn4gvgc9n13ifjnz68df";
      name = "EasyYapi-2.1.1.183.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tangcent";
      license = lib.licenses.gpl3Only;
      description = ''
        easy-yapi

GitHub |
Issues |
Guide



帮助你导出api到`yapi`/`postman`/`markdown`


    基于javadoc&amp;KDoc&amp;ScalaDoc解析API文档
    注意, 你可以在保持代码零侵入的情况下得到相当完整的api文档, 但是特殊的需求还是需要部分特殊的注释/注解配合
    与之相对的是, 你可以灵活的运用配置规则来适应你的项目特性以减少代码侵入.



    如果快捷键无效, 请检查快捷键冲突.
    可以在 Preferences(Settings) &gt; KeyMap修改快捷键.



详细信息参考:Guide
导出API到Yapi,有四种方法:
    
        1. 打开spring项目中的Controller文件或者在IDEA的左边项目文件区域选择文件或者文件夹
        使用快捷键"alt shift E(windows)/ctrl E(mac)"
        然后选择要导出的API,选择导出渠道为yapi
        点击[✔]按钮或者按回车键完成导出
    
    
        2. 打开spring项目中的Controller文件
        右键文件内容选择generate...或者用"[Alt + Insert]/[Ctrl+Enter](快捷键可能不一样)"
        然后选择"ExportYapi"
    
    
        3. 在IDEA的左边项目文件区域选择文件或者文件夹
        鼠标点击最上方[Code -&gt; ExportYapi]
    
    
        4. 鼠标点击最上方[Code -&gt; YapiDashBoard]
        然后就可以用鼠标将左边的API拖动到右边yapi目录中
    


Features

    Export Api(beta)
        
        1. Open existed Spring Controller File Or Select files or directories from project navigation
        You can use by this : "alt shift E(windows)/ctrl E(mac)"
        
        2.select apis and channel
        
        3.click [✔] button or press enter key
    
    Export Api To Postman
        
        There are two ways to export api.
        
        1. Open existed Spring Controller File
        You can use by this : "Right click in the file -&gt; generate... " or use its shortcuts "[Alt +
        Insert]/[Ctrl+Enter]" , then
        choose the action "ExportPostman"
        
        2. Select files or directories from project navigation
        You can use by this : "Click [Code -&gt; ExportPostman] in top"
    
    Quick API requests from code
        
        Open existed Spring Controller File
        Right click in the file -&gt; generate... or use its shortcuts "[Alt + Insert]/[Ctrl+Enter]"
        then choose the action "Call"
    
    Export API To Markdown(beta)
        
        There are two ways to export api.
        
        1. Open existed Spring Controller File
        You can use by this : "Right click in the file -&gt; generate... " or use its shortcuts "[Alt +
        Insert]/[Ctrl+Enter]" , then
        choose the action "ExportMarkdown"
        
        2. Select files or directories from project navigation
        You can use by this : "Click [Code -&gt; ExportMarkdown] in top"
    
    ApiDashBoard
        
        You can use by this : "Click [Code -&gt; ApiDashBoard] in top"
        Then you can easily export api by drag it from project(left) to postman(right)
    
    YApiDashBoard
        
        You can use by this : "Click [Code -&gt; YApiDashBoard] in top"
        Then you can easily export api by drag it from project(left) to yapi(right)
    
    Debug
        
        You can use by this : "Click [Code -&gt; Debug] in top"
        Then you can easily debug script、load and run script.
      '';
    };
  }) {};

  ebean-10-x-enhancement = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ebean-10.x-Enhancement";
    plugname = "Ebean 10.x Enhancement";
    plugid = "org.avaje.ebean10.enhancer";
    version = "10.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9332/37530/ebean10-idea-enhancer.zip";
      sha256 = "1gdab5hgm3x3fx48wlcph81p90qyab29s5r7a4ny2wnvsx2y5n0b";
      name = "Ebean-10.x-Enhancement-10.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ebean-orm.github.io/";
      license = lib.licenses.asl20;
      description = ''
        Ebean enhancement for 10.x
      '';
    };
  }) {};

  ebean-4-x-enhancement = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ebean-4.x-Enhancement";
    plugname = "Ebean 4.x Enhancement";
    plugid = "org.avaje.ebean.enhancer";
    version = "4.11.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7801/27508/ebean-idea-enhancer.zip";
      sha256 = "1acdmyb6mxbx3p1qcr39d48hxrw6jy9g5yhnkw3i449s7ip5jf0y";
      name = "Ebean-4.x-Enhancement-4.11.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ebean-orm.github.io/";
      license = lib.licenses.asl20;
      description = ''
        Ebean enhancement for versions 4.x to 7.x
      '';
    };
  }) {};

  ebean-8-x-enhancement = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ebean-8.x-Enhancement";
    plugname = "Ebean 8.x Enhancement";
    plugid = "org.avaje.ebean8.enhancer";
    version = "8.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8524/30418/ebean8-idea-enhancer.zip";
      sha256 = "1bsgc71x56w6k7x4sfi3dmdjmbjf0416b2sd02dfq17q8301lz16";
      name = "Ebean-8.x-Enhancement-8.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ebean-orm.github.io/";
      license = lib.licenses.asl20;
      description = ''
        Ebean enhancement for 8.x
      '';
    };
  }) {};

  ebean-enhancer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ebean-enhancer";
    plugname = "Ebean enhancer";
    plugid = "org.avaje.ebean11.enhancer";
    version = "12.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10082/99022/ebean-idea-12.4.3.zip";
      sha256 = "0rdcmlprf3fsjas0a689bisyvzl8w52klgpnm0grmg25k8wx52m4";
      name = "Ebean-enhancer-12.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ebean.io/";
      license = lib.licenses.asl20;
      description = ''
        Ebean enhancement
    
        Uses ebean-agent to perform Ebean enhancement for
        entities, @Transactional and query beans.
    
    &nbsp;

    Enable per project
    
    
      
        Enabled per project via Build menu
      
      
        
        &nbsp;
      
    
    
      
        Or enable via File | Settings | Ebean plugin.
      
      
        
      
    
    
    
       &nbsp;
      '';
    };
  }) {};

  ecarxfindview = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EcarxFindView";
    plugname = "EcarxFindView";
    plugid = "com.ecarx.plugin.findview";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11334/52218/EcarxFindViewPlugin.jar";
      sha256 = "02741fm5zygpb2f0rzbs7q5gdfspvwbqd824hjijf1ng979ifqrp";
      name = "EcarxFindView-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.ecarx.com.cn/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses";
        free = false;
      };
      description = ''
        code generate tool,help you auto generate control variables/findViewById code/click event code for Layout widgets.
      '';
    };
  }) {};

  eclipse---dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Eclipse---Dark-Color-Scheme";
    plugname = "Eclipse - Dark Color Scheme";
    plugid = "color.scheme.Eclipse - Dark";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10530/44112/EclipseDark.jar";
      sha256 = "1wc9cqcr2chli3v7bxf5kip0rvj79a7z6ljz4wpc5d8lpp1zpyf5";
      name = "Eclipse---Dark-Color-Scheme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/bijou-code/IntellijEclipseDark";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://github.com/bijou-code/IntellijEclipseDark";
        free = false;
      };
      description = ''
        Eclipse Dark Theme
      '';
    };
  }) {};

  eclipse-code-formatter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Eclipse-Code-Formatter";
    plugname = "Eclipse Code Formatter";
    plugid = "EclipseCodeFormatter";
    version = "20.7.201.6668.0-Eclipse_2020-06-JavaOnly";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6546/102449/EclipseFormatter.zip";
      sha256 = "0sb6g0vhy8kz9rwjz9wbiygbbh9wvfyjwcldibi334m21fy13v7n";
      name = "Eclipse-Code-Formatter-20.7.201.6668.0-Eclipse_2020-06-JavaOnly.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://plugins.intellij.net/plugin/?idea&id=6546";
      license = lib.licenses.asl20;
      description = ''
        Allows using Eclipse's code formatter directly from IntelliJ.
        Solves the problem of maintaining a common code style in team environments where both IDEA and Eclipse are used. 
        

        Go to https://github.com/krasa/EclipseCodeFormatter#instructions
        for instructions how to use it.     

       Currently supports formatting of
       -Java (Eclipse [see plugin version], also emulates Eclipse's imports optimizing, configurable external Eclipse location for Eclipse 4.5+, Workspace Mechanic support)

         
        Donations are welcomed.
      '';
    };
  }) {};

  eclipse-dark-theme-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Eclipse-Dark-Theme-Color-Scheme";
    plugname = "Eclipse Dark Theme Color Scheme";
    plugid = "color.scheme.Eclipse Dark Theme";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11055/84822/Eclipse_Dark_Theme_1.4.jar";
      sha256 = "0fnvz72bacagx6wir9pa93mckmdm4gk5q6zsqh0s618s1scgsz6d";
      name = "Eclipse-Dark-Theme-Color-Scheme-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.schneidermayer.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "cpl-1.0";
        free = false;
      };
      description = ''
        Example: https://i.stack.imgur.com/qEh5P.png
      '';
    };
  }) {};

  eclipse-groovy-compiler-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Eclipse-Groovy-Compiler-Plugin";
    plugname = "Eclipse Groovy Compiler Plugin";
    plugid = "com.bluetrainsoftware.groovy.idea";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7210/13035/eclipsegroovy-idea.jar";
      sha256 = "0v3flgnkgagjak4n1sqnd3mmngxzsg4hqha2nxh0d6463y25w42f";
      name = "Eclipse-Groovy-Compiler-Plugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rvowles/eclipsemavengroovy-idea";
      license = lib.licenses.mit;
      description = ''
        Activates Groovy plugin in Intellij IDEA when the Maven Compiler is swapped to the Eclipse-Groovy Compiler in the pom. This adds the Groovy directories (src/main/groovy and src/test/groovy) to the IDEA build.
      '';
    };
  }) {};

  eclipse-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Eclipse-Keymap";
    plugname = "Eclipse Keymap";
    plugid = "com.intellij.plugins.eclipsekeymap";
    version = "202.5428.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12559/88658/EclipseKeymap.zip";
      sha256 = "1p64h0h0xr6yvg0kdxr4bvqikr61jv50vqga83364jcx6dfnxy95";
      name = "Eclipse-Keymap-202.5428.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = lib.licenses.asl20;
      description = ''
        Eclipse keymap for all IntelliJ-based IDEs.
    Use this plugin if Eclipse keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  eclipse-project-creator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Eclipse-Project-Creator";
    plugname = "Eclipse Project Creator";
    plugid = "com.github.xeonkryptos.eclipseprojectcreator";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14967/104388/eclipse-project-creator-0.0.6.zip";
      sha256 = "1v33brsh3zh6km8g66xvzc2jw2anv5933f34qmscizasrbcw3ygx";
      name = "Eclipse-Project-Creator-0.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Xeonkryptos/eclipse-project-creator";
      license = lib.licenses.asl20;
      description = ''
        Simple and small plugin to improve cooperation with Eclipse. When creating a new project in IntelliJ with the build-in wizard, you'll typically need to add the files required by Eclipse to work
properly (.project and .classpath) manually. Don't forget to edit the relevant places within them! This sucks if you'll need to do it every time, so your colleagues working with Eclipse don't
complain.
To improve this behaviour this small plugin adds Eclipse as external framework support for Java-based projects. Means, in the project/module wizard for Java projects, you have a new entry allowing
you to create with the basic project structure defined by IntelliJ the .project and .classpath file set to the minimum required. You don't need to bother to create them by yourself or use the export
feature of the bundled Eclipse plugin.

To improve your usual work life, sources roots are synced into your .classpath file on every change as long as you don't let IntelliJ the syncing.

Additionally, it supports Ivy in such as if it detects the installed plugin IvyIDEA and its facet on a module, it automatically updates the .classpath and .project files. Required is the modified version
of IvyIDEA that adds the same library creation support into the project wizard as this plugin provides. The modified version you'll find here.
      '';
    };
  }) {};

  eclipse-scout = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Eclipse-Scout";
    plugname = "Eclipse Scout";
    plugid = "org.eclipse.scout.sdk.s2i";
    version = "10.0.0.2007091253";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13393/92107/org.eclipse.scout.sdk.s2i-10.0.0-20200709.125212-157.zip";
      sha256 = "0m333qw6lmqwrmpqkcscqclckn3293s3q47qn4s44lj2nk0qni9j";
      name = "Eclipse-Scout-10.0.0.2007091253.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.eclipse.org/scout/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.eclipse.org/legal/epl-v10.html";
        free = false;
      };
      description = ''
        Eclipse Scout integration for IntelliJ IDEA
      
      
      Includes:
        
        
          Derived resource update for FormData and PageData
          @ClassId validation inspections (missing, duplicates)
          Editor for Scout nls files
          Inspection for missing translations
          Code completion for Scout nls keys in Java, JavaScript and HTML
          Java code completion for Scout elements like FormFields, Menus, KeyStrokes, Codes and much more.
      '';
    };
  }) {};

  eclipse-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Eclipse-theme";
    plugname = "Eclipse theme";
    plugid = "Eclipse theme";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13404/73256/eclipseTheme.jar";
      sha256 = "1893abmbxdmx6fqmsa6sidd2z9vxkjdm6x20nawvzs2piv5921pz";
      name = "Eclipse-theme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "mailto://wuping1984@gmail.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Eciipse theme, mainly the color and code style.
      '';
    };
  }) {};

  eclipseconverter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EclipseConverter";
    plugname = "EclipseConverter";
    plugid = "EclipseConverter";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1375/3569/EclipseConverter_3569.jar";
      sha256 = "16z4pl5jfrmp0kzgj3z4xgjx4n10wy72m1bk8vmq1bj3x061frrj";
      name = "EclipseConverter-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Sync eclipse userlibrary file to intelliJ global library.
	  Snyc eclipse project classpath file to intelliJ module dependence.
      '';
    };
  }) {};

  eclipser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Eclipser";
    plugname = "Eclipser";
    plugid = "com.kukido.eclipser";
    version = "0.8.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7153/103089/Eclipser-0.8.7.zip";
      sha256 = "009dq02mm3bqzb03fk11g4rn2ay5vrqn6q368vgrzjq62n35zxbf";
      name = "Eclipser-0.8.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kukido/eclipser";
      license = lib.licenses.asl20;
      description = ''
        Eclipser converts Eclipse launch configurations into IntelliJ IDEA configurations:
        
            Local Java application Eclipse launcher into Application run configuration
            Program launch Eclipse launcher into external tool in Tools menu
            Maven launch configuration into Maven run configuration
            Remote Java application Eclipse launcher into Remote run configuration
            Ant launch configuration into Ant target run configuration
        
        For limitations, known issues and support please refer to plugin wiki:
            https://github.com/kukido/eclipser/wiki
      '';
    };
  }) {};

  ecmybatis = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ecmybatis";
    plugname = "Ecmybatis";
    plugid = "me.gaigeshen.idea.ecmybatis";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12027/60952/ecmybatis.zip";
      sha256 = "1qy9ndwl1js2cb0a0c1kixfxcy8bm33sbcpn8vrs652v1pq1njzr";
      name = "Ecmybatis-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gaigeshen";
      license = lib.licenses.asl20;
      description = ''
        This plugin Ecmybatis.
      A cool tool for generate mybatis files, include dao, mapper and entities files
      '';
    };
  }) {};

  ecoandroid = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EcoAndroid";
    plugname = "EcoAndroid";
    plugid = "anaribeiro.ist.EcoAndroid";
    version = "1.0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15637/106687/EcoAndroid-1.0.3.1.zip";
      sha256 = "0gr44k7q54hkm55dz7vhdbsladxwym6c0s2c60gd8ic1cjqjyl8m";
      name = "EcoAndroid-1.0.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        EcoAndroid suggests automated refactorings for reducing the energy consumption of Java Android applications. It is based on the idea of energy pattern and it has already been used to improve the energy efficiency of dozens of Android applications.
It currently supports the detection and correction of the following energy patterns:

Dynamic Retry Delay: increase the interval between attempts to access a resource, avoiding regular accesses to a resource that most likely went down.
Push Over Poll: use push notifications instead of actively querying resources, such as polling.
Reduce Size: reduce the size of the data being transferred as much as possible, therefore reducing the energy being used in the transfer.
Cache: store data that is being used frequently, which results in a lower energy consumption since it reduces the amount of code executed and the number of accesses to retrieve information.
Avoid Graphics and Animations: reduce the display of graphics and animations, since the use of this type of resources increases energy consumption.
      '';
    };
  }) {};

  ecoreimport = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EcoreImport";
    plugname = "EcoreImport";
    plugid = "ImportPlugin";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9422/83906/EcoreImport.zip";
      sha256 = "05n9pmd6rvrxnca58v64pjngk9nnqcwd5gsd1x0lh0si0jb9iqhz";
      name = "EcoreImport-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BentleyJOakes/EcoreImport";
      license = lib.licenses.mit;
      description = ''
        Import an Ecore metamodel into a language's structure. Right-click on a language's structure aspect and select Import Ecore.
      '';
    };
  }) {};

  editstarters = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EditStarters";
    plugname = "EditStarters";
    plugid = "hdzi.idea-editstarters-plugin";
    version = "2.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11543/103760/idea-editstarters-plugin-2.4.0.zip";
      sha256 = "1wlm0gcalcwwfwvpqxhqih9hf6fr3wlwd9ryz1b99mppfx41ggli";
      name = "EditStarters-2.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/hdzitao";
      license = lib.licenses.mit;
      description = ''
        This plugin provides the ability to modify Spring Boot Starters.
    If the latest version is reviewing, you can download it on Github
      '';
    };
  }) {};

  editusages = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EditUsages";
    plugname = "EditUsages";
    plugid = "com.funivan.idea.editUsages";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10274/41624/EditUsagesIdeaPlugin.zip";
      sha256 = "1gj49dg93j4d1071ah4zdc792zgwsibss97yn7n1x34l681p17hg";
      name = "EditUsages-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://funivan.com";
      license = lib.licenses.mit;
      description = ''
        Find some statements with IDEA and edit it in pleasant way.
 Twitter: 
@funivan
      '';
    };
  }) {};

  editor-groups = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Editor-Groups";
    plugname = "Editor Groups";
    plugid = "EditorGroups";
    version = "0.36";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10897/94754/EditorGroups.zip";
      sha256 = "1xikqabwrf456kpzxm8sqhwfyd96z9df67bsngwxmsizznykrk4h";
      name = "Editor-Groups-0.36.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/GrepConsole";
      license = lib.licenses.asl20;
      description = ''
        Usage: https://github.com/krasa/EditorGroups
           
        
       In active development. Please report your ideas and issues.
      '';
    };
  }) {};

  editortree = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EditorTree";
    plugname = "EditorTree";
    plugid = "EditorTree";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/202/4341/EditorTree_4341.zip";
      sha256 = "14s38jfqzccz831p58a97r60q66x0rk34rds2l7f39wf3lav62qd";
      name = "EditorTree-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/202/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/202/sourceCode.zip";
        free = false;
      };
      description = ''
        Show popup with currently opened files in editors organized by tree.
      '';
    };
  }) {};

  edutools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EduTools";
    plugname = "EduTools";
    plugid = "com.jetbrains.edu";
    version = "4.1-2020.2-975";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10081/97817/EduTools-4.1-2020.2-975.zip";
      sha256 = "0vxgjacjchm0yjkby38a8ycsk5gq6smyw166lb15sx8z9dpyv7f8";
      name = "EduTools-4.1-2020.2-975.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        With the EduTools plugin, you can learn and teach programming languages such as Kotlin, Java, Python, JavaScript,
  Rust, Scala, C/C++ and Go in the form of coding tasks and custom verification tests right inside of JetBrains IntelliJ Platform based IDEs.


How It Works
Install EduTools plugin: Go to Preferences → Plugins (or Configure → Plugins from the Welcome Screen) and search for the EduTools plugin.


  As an Educator:

  
    Create your own interactive course with custom tasks, checks, tests, hints, and lots more.
  
  
    Share your course publicly or privately with your students or co-workers
    on Stepik, a learning management, and MOOC
    platform. Or you can save your course as an archive file.
  
  
    Let learners independently complete their assignments with the assistance of your integrated tests.
  


  Read this tutorial for more details


  As a Learner:

  
    Join a public interactive programming course from the list, or choose a course
    from Stepik,
    solve programming assignments from
    Kotlin for Java Developers
    and Algorithmic Toolbox Coursera courses,
    complete JetBrains Academy projects and
    solve challenges from CheckiO.
  
  
    Start learning by filling in placeholders in the exercise code according to the task description.
  
  
    Verify tasks, get instant feedback and quick results using an intelligent development tool.
  

Read this
  tutorial for more details


  You may also be interested
    in PyCharm Edu and IntelliJ IDEA Edu - special IDEs optimized for learning and teaching.
    Get your Educational Tool here
      '';
    };
  }) {};

  eevee-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Eevee-Progress-Bar";
    plugname = "Eevee Progress Bar";
    plugid = "manjaro.epb";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14604/100002/EeveeProgressBar.jar";
      sha256 = "09dkx1lrsbh30q2rr1bvxkn0giyy97g8flj35xb4786apm44pxq7";
      name = "Eevee-Progress-Bar-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This is the Eevee Progress Bar for IJ based IDEs based on the Nyan Progress Bar by Dmitry Batkovitch.
      It display a running Eevee for the basic bar and random eeveelution for the indeterminate one.
      
      
      DETERMINATE:
      
      
      
      INDETERMINATE:
      '';
    };
  }) {};

  effective-inner-builder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Effective-Inner-Builder";
    plugname = "Effective Inner Builder";
    plugid = "com.andrey4623.intellij.plugins.effectiveinnerbuilder";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13665/75881/Effective_Inner_Builder-1.0.zip";
      sha256 = "0bcgwgk57q5mzmcfzjcxna39qskiwzni3hfpjmdscflh0prp2frb";
      name = "Effective-Inner-Builder-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andrey4623";
      license = lib.licenses.asl20;
      description = ''
        Plugin for generation inner builder and getters for a class.
    
    Features:
    
    Generates inner builder and getters for a class
    Supports JSR-305 @Nullable, @Nonnull and @ParametersAreNonnullByDefault annotations
    Checks for non-null value for fields annotates as @Nonnull
    
    
    Usage:
    
    Locate the cursor inside a class, open Generate menu (Code -&gt; Generate...) and select Builder and Getters.
    
    
    If you come across bugs with the plugin or have feature requests, please raise an issue.
      '';
    };
  }) {};

  el-chalten = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "El-Chalten";
    plugname = "El Chalten";
    plugid = "com.martinagabrielli.themes";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12316/61776/El-Chalten.jar";
      sha256 = "1n0fi4sjzz2hx549wr50biqjdk28z6bgfxv53wv4chfrnry9vmkj";
      name = "El-Chalten-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.martinagabrielli.com";
      license = lib.licenses.asl20;
      description = ''
        El Chalten theme inspired in the Patagonian colours of el Calafate, Argentina.
      '';
    };
  }) {};

  elastic-actors = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Elastic-Actors";
    plugname = "Elastic Actors";
    plugid = "org.elasticsoftware.elasticactors";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13814/102466/intellij-ea-plugin-1.4.3.zip";
      sha256 = "1vrv99jxb06wjzizzv01j773c7v2fcl8f9dfvd4fzm29jawrrnx9";
      name = "Elastic-Actors-1.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/elasticsoftwarefoundation";
      license = lib.licenses.asl20;
      description = ''
        Elastic Actors Framework support for IntelliJ IDEA.
      
      
      Features:
      
        Method signature verfication for Message Handler methods
        Detect suspicious types for messages being sent by Actors
        Detect potential issues with mutable and immutable Message classes
        Find usages of classes in the context of Actor Message handling
          
            Usages of a class in Message Handler methods
            Usages of a class inside the the Actor's onReceive method
      '';
    };
  }) {};

  elastic-indents = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Elastic-Indents";
    plugname = "Elastic Indents";
    plugid = "io.github.heldev.elasticindents";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14849/94248/elastic-indents-1.0.0.jar";
      sha256 = "0cnj2ghlmbvfyz5b5bh8xsnqm15wqlv6p8273d94fmp4vsrlcxfp";
      name = "Elastic-Indents-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/heldev/intellij-elastic-indents";
      license = lib.licenses.mit;
      description = ''
        Doubles the visual length of space indents
    Switch it on/off using View -&gt; Toggle Elastic Indents
      '';
    };
  }) {};

  elasticsearch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Elasticsearch";
    plugname = "Elasticsearch";
    plugid = "org.elasticsearch4idea";
    version = "0.7.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14512/108584/Elasticsearch-0.7.2.zip";
      sha256 = "1lla9qcmi9i47d5ga7plyxp6f3cnb0j3nkrwm94vcxx2s7h9279j";
      name = "Elasticsearch-0.7.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Elasticsearch plugin allows you to access your Elasticsearch cluster and perform some basic operations by REST
        API.
        Features:
    
        View list of indices with short information
        CRUD documents
        View data in table, tree, or JSON view
        Sort or hide fields
        SSL and AWS request signing
        Much more!
      '';
    };
  }) {};

  elephpant-progress-bar = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Elephpant-Progress-Bar";
    plugname = "Elephpant Progress Bar";
    plugid = "pronskiy.elephpant";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15291/101310/elephpant-progress-bar-0.1.1.zip";
      sha256 = "1h7llm8v9ncjnnnpls7cml2driayczsiibrxm3aksfgg2qgxl4hk";
      name = "Elephpant-Progress-Bar-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pronskiy/elephpant-progress-bar";
      license = lib.licenses.asl20;
      description = ''
        An adorable elephpant progress bar for PhpStorm and other JetBrains IDEs. 
    
    Elephpant logo is created by Vincent Pontier.
    This plugin is entirely based on the Gopher plugin by
Florin Pățan. And inherits Nyan Progress Bar plugin from Dmitry Batkovich.
      '';
    };
  }) {};

  elixir = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Elixir";
    plugname = "Elixir";
    plugid = "org.elixir_lang";
    version = "11.9.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7522/108451/intellij-elixir-11.9.2.zip";
      sha256 = "0fwwkikj3c0qb7ikrnk4p9asi4kgsf4crd00i35g1nmp7c38hhs8";
      name = "Elixir-11.9.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/KronicDeth/intellij-elixir";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Donate

(Average is ''$30.29 USD.)


Elixir support for JetBrains IDEs

  IntelliJ IDEA
  AppCode
  CLion
  Gogland
  PhpStorm
  PyCharm
  Rubymine
  WebStorm

Features:

  Elixir SDK with Internal Erlang SDK
  Syntax highlighting and semantic annotation
  Grammar Parsing (So good, it found bugs in the native Elixir tokenizer and parser)
  Inspections with Quick Fixes
  Code Folding
  Commenter
  File Templates
  
    Graphical Debugger - works on all Run Configurations
    
      Breakpoints (in .ex and .eex file)
      Stepping
      
        Stack Frames
        
          Go up and Down stack without stepping program
          Collapse and expanded nested data structures in local variables
          Evaluate code in any frame in Evaluator
        
      
      Customizable Module Filters
    
  
  Delimiter/Brace Auto-insertion
  Delimiter/Brace Matching
  Embedded Elixir (EEx) Templates
  Compilation
  Decompilation
  Dissassembly
  BEAM Chunks viewer
  
    Run Configurations
    
      Distillery Release CLI
      Elixir
      Elixir Mix
      Elixir Mix ExUnit
      IEx
      IEx Mix
    
  
  
    Completion
    
      
        Module Names
        
          Aliases in Elixir Source
          Atoms in Elixir Source
          Decompiled Aliases from .beam files (Elixir SDK, Erlang SDK, and _build)
          Decompiled Atoms from .beam files (Elixir SDK, Erlang SDK, and _build)
        
      
      
        Function and Macro Names
        
          Elixir Source
          Decompiled from .beam files (Elixir SDK, Erlang SDK, and _build)
        
      
      Module Attributes
      Parameters and Variables
    
  
  Formatting
  
    Go To
    
      Definition (of macro or function from usage)
      
        Symbol
        Module Aliases (Source or Decompiled)
        Function and Macro Names (Source or Decompiled)
      
      Test
      Test Subject
    
  
  Find Usage
  
    Refactor
    
      
        Rename
        
          Moduel Attribute
          Parameters and Variables
        
      
    
  
  
    Spellchecking

    Dictionaries for common dependencies:
      
        Elixir
        Ecto
      
    
  
  Structure View
      '';
    };
  }) {};

  elm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Elm";
    plugname = "Elm";
    plugid = "org.elm.klazuka";
    version = "4.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10268/103630/intellij-elm-4.3.0.zip";
      sha256 = "15by8iysqnw23d6421nnb1m941wmfmc7sr51rf3xh75lpwfkiyr7";
      name = "Elm-4.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/klazuka";
      license = lib.licenses.mit;
      description = ''
        Provides support for the Elm programming language.

      Features:
      
          Code completion
          Go to declaration
          Go to symbol
          Find usages
          Type Inference and Type Checking
          Rename refactoring
          Introduce "variable" refactoring (`let/in`)
          Generate JSON encoders/decoders
          Generate type annotation for un-annotated function
          Graphical UI for running elm-test
          Re-format code using elm-format
          Detect unused code
          Detect and remove unused imports
          'Add Import' quick fix for unresolved references
          Code folding
          Structure view
          Syntax highlighting
          WebGL/GLSL support
          Spell checking
          etc.
      '';
    };
  }) {};

  elvish-shell-language = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Elvish-Shell-Language";
    plugname = "Elvish Shell Language";
    plugid = "com.github.sblundy.elvish-lang-plugin";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12788/107405/elvish-lang-plugin-1.2.0.zip";
      sha256 = "0ycwqjm5m0jv35p320ivzw61k0l9zaj9xzqbvqaabhl89hya02wc";
      name = "Elvish-Shell-Language-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sblundy/";
      license = lib.licenses.mit;
      description = ''
        Support editing files for the Elvish Shell language.
      '';
    };
  }) {};

  emacs-patched = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Emacs+-Patched";
    plugname = "Emacs+ Patched";
    plugid = "com.cursive-ide.emacsplus";
    version = "0.3.900";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10045/79159/emacs-plus-0.3.900.zip";
      sha256 = "1z0z7s3clv4zzjkyz3hr6d0nic8jzyz5nrw61apibplgpwf69byf";
      name = "Emacs+-Patched-0.3.900.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cursive-ide/emacs-plus";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.mulgasoft.com/intellemacsplus/mpl-v-1-0";
        free = false;
      };
      description = ''
        Emacs like enhancements for IntelliJ IDEA.  The new keymaps Emacs+ and Mac Emacs+:
      
        Add comment commands, including a reasonable comment-dwim M-; and comment-next/previous/kill for files whose language is backed by a Psi file
        Implement Emacs style forward-word M-f and backward-word M-b
        Enhance C-s and C-r to support additional sub-commands on the search string, including:
          
            isearch yank commands C-w, C-y, M-y and C-M-y
            isearch history M-n and M-p
            state toggles M-c,  M-m,  M-w and M-r
            proper exiting behavior on C-g and ENTER
          
          
        
        Extend the default Kill Ring behavior so that the following bindings behave as expected:
          
            yank C-y, yank-pop M-y and append-next-kill C-M-w
          
          
        Enhance C-x b to respond to more keystrokes (e.g. C-g, C-n, C-p, etc.) and use Recent Files for searches
        
        Implement tri-state recenter C-l
        Implement most of the expected case, space and transposition commands
        Add basic movement bindings on some, but not all, tool windows
        Add C-g on some, but not all, tool windows and dialogs
        Add C-x 1 and C-x 0 in tool windows
        Add Command as Meta on MacOS when using the Mac Emacs+ keymap
        Add assorted bindings of IntelliJ commands to more closely emulate Emacs
      
      
      This is a patched version of the original plugin, which has been abandoned.
      '';
    };
  }) {};

  emacs-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Emacs-Keymap";
    plugname = "Emacs Keymap";
    plugid = "com.intellij.plugins.emacskeymap";
    version = "202.5428.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13089/88660/EmacsKeymap.zip";
      sha256 = "1jq6zwvqjyw68krw2a27ppfwnd1zdsgmpvz7q0rq80129yipx9zj";
      name = "Emacs-Keymap-202.5428.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Emacs keymap for all IntelliJ-based IDEs.
    Use this plugin if Emacs keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  emacsflavor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EmacsFlavor";
    plugname = "EmacsFlavor";
    plugid = "pers.tommas.emacsflavor";
    version = "1.2-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15519/106474/intellij-emacs-flavor-1.2-SNAPSHOT.zip";
      sha256 = "05wihgiq5a7qfqhsxhsw17118hfcd5fi4k4xwyxh9i6a9my62hsr";
      name = "EmacsFlavor-1.2-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tommas1988/intellij-emacs-flavor";
      license = lib.licenses.mit;
      description = ''
        Enhancement of default intellij emacs keymap. Target to provide original emacs experience.

    How to use:
    Just switch to the default intellij emacs keymap or others that based on it, EmacsFlavor will replace some actions and restore when you switch to other keymaps.

    Features:
    
    ENTER key works like emacs dose in the find mode.
    Tab selection in emacs style.
    New "Upper Case" &amp; "Lower Case" actions work in emacs style.
    

    GitHub repository
      '';
    };
  }) {};

  embedded-linux-jvm-debugger-raspberry-pi-beaglebone-black-intel-galileo-ii-and-several-other-iot-devices = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Embedded-Linux-JVM-Debugger-Raspberry-Pi-BeagleBone-Black-Intel-Galileo-II-and-several-other-IoT-Devices";
    plugname = "Embedded Linux JVM Debugger (Raspberry Pi, BeagleBone Black, Intel Galileo II, and several other IoT Devices)";
    plugid = "com.atsebak.raspberrypi";
    version = "1.23";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7738/37901/embeddedlinux-jvmdebugger.zip";
      sha256 = "0c8rv5xd3iz0x22mfgpxfyca8575jclivj5x10f3wlzv9nqmxjzp";
      name = "Embedded-Linux-JVM-Debugger-Raspberry-Pi-BeagleBone-Black-Intel-Galileo-II-and-several-other-IoT-Devices-1.23.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/asebak/embeddedlinux-jvmdebugger-intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/asebak/embeddedlinux-jvmdebugger-intellij";
        free = false;
      };
      description = ''
        Java Runner/Debugger for Embedded Systems/IoT Devices that run on any variant of the Embedded Linux Kernel
      '';
    };
  }) {};

  embedded-web-browser = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Embedded-Web-Browser";
    plugname = "Embedded Web Browser";
    plugid = "com.starxg.browserfx";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12282/93042/webbrowserforidea.jar";
      sha256 = "0yry22mmny1qg0dh3ylypwjmbiwxfgivmr84sgrai3cc1dibg146";
      name = "Embedded-Web-Browser-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/starxg/webbrowserforidea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/starxg/webbrowserforidea/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Embedded Web Browser for IDEA
      An embedded browser.
      '';
    };
  }) {};

  embedded-web-browser-for-idea = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Embedded-Web-Browser-for-IDEA";
    plugname = "Embedded Web Browser for IDEA";
    plugid = "io.loli.browserfx";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10750/46234/browserfx.jar";
      sha256 = "139nals7vg3xlaky2x9ah0pj0whlg2bd600qgf6s2s39vx5lgc61";
      name = "Embedded-Web-Browser-for-IDEA-1.1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/chocotan/webbrowser4idea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/chocotan/webbrowser4idea/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Embedded Web Browser for IDEA
      '';
    };
  }) {};

  embedded-web-browser-for-intellij-platforms = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Embedded-Web-Browser-for-Intellij-Platforms";
    plugname = "Embedded Web Browser for Intellij Platforms";
    plugid = "space.vistarsvo.embrowser";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10797/49164/embrowser4intellij.jar";
      sha256 = "0ffadk2j5p5ilsr419ingrihmkxyi70h4ib1p6vpsh4l09hmmp21";
      name = "Embedded-Web-Browser-for-Intellij-Platforms-2.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vistarsvo/embrowser4intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/vistarsvo/emBrowser4Intellij/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Embedded Web Browser for Intellij Platform
        Forked from chocotan Embedded Web Browser
        
        
        
            No need to switch window between browser and IDE if you need to Google something :)
            
                
            
        
        Futures:
        
            Web history
            Change User Agent
            View HTML source
            Scale web page
      '';
    };
  }) {};

  embeddedprojectjdk = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EmbeddedProjectJdk";
    plugname = "EmbeddedProjectJdk";
    plugid = "com.jetbrains.embeddedProjectJdk";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10480/77061/embeddedProjectJdk-2.1.zip";
      sha256 = "1wny0yp885wkpxy4dg4kgwykkv4w09b3w97gpkb5bxin9rmn1k7b";
      name = "EmbeddedProjectJdk-2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/embeddedProjectJdk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/JetBrains/embeddedProjectJdk/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin allows you to put the jdk.table.xml file (stored in /config/options/config/options/jdk.table.xml by default), into the project folder and commit to VCS. If the JDK defined in the per project /.idea/jdk.table.xml is not found or invalid, then the plugin will it automatically.

You can also define OS-dependent .idea/jdk.table.*.xml files like so:

  - Windows: jdk.table.win.xml
  - Linux: jdk.table.lin.xml
  - MacOS: jdk.table.mac.xml
      '';
    };
  }) {};

  ember-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Ember-Color-Scheme";
    plugname = "Ember Color Scheme";
    plugid = "color.scheme.Ember";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12401/62182/Ember.jar";
      sha256 = "1aaqw2gvr7cdjm1q204kg5hbzv8yy5rnnpmdw01d02vs81z416qd";
      name = "Ember-Color-Scheme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/hashd/gem-color-scheme";
      license = lib.licenses.mit;
      description = ''
        Easy on the eye light color scheme for IntelliJ IDEs
      '';
    };
  }) {};

  ember-snippets = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Ember-Snippets";
    plugname = "Ember Snippets";
    plugid = "com.shamcode.intellij.embersnippets";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10094/41114/intellij-ember-snippets.jar";
      sha256 = "1i04qb78l8419scl8bjdasjy6dlf64918liac1jc3mksgv1mp3ad";
      name = "Ember-Snippets-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shamcode/intellij-ember-snippets";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shamcode/intellij-ember-snippets/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Port of 
Ember.js rfc176 compliant imports from 
atom-ember-snippets
      '';
    };
  }) {};

  embold = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Embold";
    plugname = "Embold";
    plugid = "com.embold.intellij";
    version = "0.9.1.56-beta";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14711/105611/Embold.zip";
      sha256 = "0krfim77waz5jb8yb5acl1q27ikhqrcrdp60bpji67c77jsgiz6h";
      name = "Embold-0.9.1.56-beta.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.embold.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://docs.embold.io/end-user-license-agreement-eula-for-ide-plugins/";
        free = false;
      };
      description = ''
        Embold is an AI-based software analytics platform that helps teams analyse and improve software quality.
It analyses source code across 4 dimensions: code issues, design issues, metrics and duplication, and
surfaces issues which impact stability, robustness, security, and maintainability.
The Embold Score helps teams understand risk areas and prioritise the most important fixes.



The Embold IntelliJ plugin uncovers potential bugs, vulnerabilities, anti-patterns and code smells in Java.
With the fast scanners and the instant feedback, you can edit the code with suggested quick fixes even before the code is committed.
The plugin also uncovers hard-to-detect anti-patterns that make your code difficult to maintain and
can lead to error-prone solutions.



More info on Embold: www.embold.io
      '';
    };
  }) {};

  emerald = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Emerald";
    plugname = "Emerald";
    plugid = "com.adebesin.emerald";
    version = "1.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13039/92297/emerald.jar";
      sha256 = "1faph1x00i6g4sxydlwm6iyjk54c1crpbjxgvszy483rzb22i7qv";
      name = "Emerald-1.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/adebesin/emerald";
      license = lib.licenses.asl20;
      description = ''
        Emerald colour theme for IntelliJ IDEA integrated development environment
      '';
    };
  }) {};

  emmet-everywhere = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Emmet-Everywhere";
    plugname = "Emmet Everywhere";
    plugid = "ua.in.dej.myEmmet";
    version = "1.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7450/18764/emmeteverywhere.jar";
      sha256 = "1adc1ahibiw4vrwgizflv4ibvgbsjxphz20iyadgxxnlccazmk2p";
      name = "Emmet-Everywhere-1.2.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://dej.in.ua/emmet-everywhere/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://dej.in.ua/emmet-everywhere/";
        free = false;
      };
      description = ''
        EmmetEverywhere Plugin for IntelliJ IDEA
 ==================================
 
 WARNING!
 v.1.2.3+ for JAVA 1.8
 v.1.2.2 for JAVA 1.7
 
 Use HTML Emmet anywhere.
 For example in Google Closure Template (*.soy files).
 Just type your code and press CTRL+ALT+]
 
 Here’s an example: this abbreviation
 
 #page&gt;div.logo+ul#navigation&gt;li*5&gt;a{Item ''$}
 
 ...can be transformed into
 
 &lt;div id=&quot;page&quot;&gt;
 &lt;div class=&quot;logo&quot;&gt;&lt;/div&gt;
 &lt;ul id=&quot;navigation&quot;&gt;
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;Item 1&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;Item 2&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;Item 3&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;Item 4&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href=&quot;&quot;&gt;Item 5&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/div&gt;
 
 more information about Emmet:
 http://emmet.io/
      '';
    };
  }) {};

  emmylua = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EmmyLua";
    plugname = "EmmyLua";
    plugid = "com.tang";
    version = "1.3.5.194-IDEA203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9768/105341/IntelliJ-EmmyLua-1.3.5.194-IDEA203.zip";
      sha256 = "0qz6vr6ckxlkxakqig64ll2jccwmdpcqq6vls4j65f9gp6bm0b3h";
      name = "EmmyLua-1.3.5.194-IDEA203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/EmmyLua";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/EmmyLua/IntelliJ-EmmyLua/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Support for Lua programming language.
    Source Code | Gitter | Donate | Doc | VSCode-EmmyLua
    Features:
    
        Syntax highlighting
        
            Highlight global value
            Highlight local/param value
            Highlight up value
        
        Code completion
        
            Keyword completion
            Basic completion
            Type inferred based completion
        
        Debugger
        
            Attach Debugger(Windows only)
            Remote Debugger(Mobdebug.lua)
        
        Lua 5.4 support
        Find usages
        Rename
        Go to definition
        Go to symbol
        Go to class
        Go to file
        Parameter name hints
        Comment based type/class annotation
        Structure view
        Comment in/out
        Color settings page
        Method override line marker
        Quick Documentation
        Live templates
        Postfix completion templates
        Code formatter
        Code intentions
        Code inspections
        Lua Standard Library/API
        Region folding
        Lua Check Tool
    
    中国朋友可以加QQ群29850775交流及反馈BUG
      '';
    };
  }) {};

  emoji-support-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Emoji-Support-Plugin";
    plugname = "Emoji Support Plugin";
    plugid = "com.github.shiraji.emoji";
    version = "3.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9174/83373/emoji-3.1.0.zip";
      sha256 = "1glglgyqdpz68gcf2drxpzcw5v60dd2m65mha64zs9hdpdps5d9a";
      name = "Emoji-Support-Plugin-3.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/9174";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/emoji/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Intellij plugin for supporting auto-complete for Emoji.
    
    This plugin also supports code folding
      '';
    };
  }) {};

  emoji-commit-log-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Emoji-commit-log-viewer";
    plugname = "Emoji commit log viewer";
    plugid = "siosio.EmojiCommitLogViewer";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14529/105764/EmojiCommitLogViewer-1.0.4.zip";
      sha256 = "0zn2v01gnv2zsrd20cc0yansr7hiarc5r649awg8g7gm8sil7a4p";
      name = "Emoji-commit-log-viewer-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/siosio/EmojiCommitLogViewer";
      license = lib.licenses.mit;
      description = ''
        Commit log window  to show the emoji.

      example:
      :recycle: -&gt; ♻
      '';
    };
  }) {};

  encourage-coder-by-gakki = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Encourage-Coder-By-Gakki";
    plugname = "Encourage Coder By Gakki";
    plugid = "com.plungermen.plugin.encourage";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12387/62346/GakkiPlugin.jar";
      sha256 = "0h6zl3wh8nw4z5chrnprn4xvirsz2hp339snnxyqzc8vvg6sigqf";
      name = "Encourage-Coder-By-Gakki-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Gakki remind you to rest in time
        You can set remind text and remind gap hour in "Settings" - "Other Settings" - "Encourage By Gakki"
      '';
    };
  }) {};

  encrypt-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Encrypt-Tool";
    plugname = "Encrypt Tool";
    plugid = "com.baislsl.ideaplugin.encryptor";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10464/43485/idea-encryptor.jar";
      sha256 = "1zshir2ar2l8l2cjxbd6i07l64flfhg3zdd4qnbbx4y8aq4lh8xa";
      name = "Encrypt-Tool-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/baislsl";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/baislsl/idea-encryptor/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Encrypt tools 
 
 Features 
 
 Encrypt or decrypt the whole file.  
 Encrypt or decrypt the selected text.  
 Open tool kit wilndows to encrypt.  
 
github
      '';
    };
  }) {};

  endertheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EnderTheme";
    plugname = "EnderTheme";
    plugid = "ru.galtsov";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13947/80920/EnderTheme.jar";
      sha256 = "02azz86pk3grx116a3fspmbcvasqacqqcj8dxz9kfkbn6bgrw017";
      name = "EnderTheme-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ogaltsov";
      license = lib.licenses.asl20;
      description = ''
        Dark and ominous pastel theme for JetBrains IDEs.
      '';
    };
  }) {};

  enforcebracketstyle = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EnforceBracketStyle";
    plugname = "EnforceBracketStyle";
    plugid = "net.lambcode.enforceBracketStyle";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9390/31622/EnforceBracketStyle-1.0.zip";
      sha256 = "05qc9pab7bparmkp55400n68aklhhy3imvw8jqwgl1n9sbpaf7zx";
      name = "EnforceBracketStyle-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lambcode/EnforceBracketStyle";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/lambcode/EnforceBracketStyle";
        free = false;
      };
      description = ''
        Enforces bracket newline style as you type.
      '';
    };
  }) {};

  enhanced-file-search = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Enhanced-file-search";
    plugname = "Enhanced file search";
    plugid = "com.github.me10zyl.enhancedfilesearch";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11387/52660/idea-plugin-enhanced-file-search2.jar";
      sha256 = "0xxcqvdz8j38jqz1yzmn12riva6vsqrif608mnshavjfajn91k26";
      name = "Enhanced-file-search-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.zengyilun.com";
      license = lib.licenses.asl20;
      description = ''
        Shortcut to locate directory, support Search.
      快速定位文件夹，支持搜索.
      control shift w to open search menu.
      '';
    };
  }) {};

  enso = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Enso";
    plugname = "Enso";
    plugid = "Enso";
    version = "enso-12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6403/19492/enso.jar";
      sha256 = "17c2ixsqd3jhv5jzv3673lw9f2lagjl0m92vf8skydw0ba1nh333";
      name = "Enso-enso-12.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.mdl.com";
      license = lib.licenses.gpl3Only;
      description = ''
        TDD as if you meant it

Slide effortlessly between...

   java tests (unit, integration, acceptance)
   Concordion tests (HTML specification and fixture)
   test subjects


Encourages expressive test method names by displaying the test names next to your production classes

Write and move between your tests quicker than ever and without breaking Red/Green/Refactor flow

Instructions for use: Alt-T
      '';
    };
  }) {};

  entity-spring-rest-code-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Entity-Spring-Rest-Code-Generator";
    plugname = "Entity Spring Rest Code Generator";
    plugid = "com.youssef.tool.idea.plugins";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14200/86752/entityCodeGenerator.jar";
      sha256 = "0i4mbdp3x6907g1fah2pipvr39sr4wm840i51n5ljznnnpml1xdn";
      name = "Entity-Spring-Rest-Code-Generator-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This plugin is for generating codes for entities. 
    With a bean defined with Entity annotation, use it the following classes such as :
    Controller REST API with swagger DOC API
    DAO(PagingAndSortingRepository)
    DTO
    Service (with page query)
    Mapper mapstruct
    Mockito Juint5 Unit Test
    



    Steps:
      
        create this Interface in the model folder
        public interface AbstractEntity {
    E getId();
}
        Implement the  AbstractEntity&lt;"entity id type"&gt;   in your Entity
        Add @override on Entity getID methode
        Right click on Entity class then choose "Entity Spring Rest Code Generator"
        You need to create after that the data Test generator class 
      



    Dependencies:
      Spring Boot Data-jpa, Data-Rest 1.X or 2.X
      springfox-swagger2 2.9.2
      mapstruct 1.3.0 Final
      mapstruct-processor  1.3.0 Final
      '';
    };
  }) {};

  entitycodegenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EntityCodeGenerator";
    plugname = "EntityCodeGenerator";
    plugid = "com.liuqi.tool.idea.plugins";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12720/66436/entityCodeGenerator.jar";
      sha256 = "04ajxh7zhbhhsl8pckxgdk7k4dlp50s3g2xnb01a2zgzaxfrglf3";
      name = "EntityCodeGenerator-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "cn.liumoran";
      license = lib.licenses.asl20;
      description = ''
        This plugin is for generating codes for entities. With a bean defined with Entity annotation, use it the following classes such as Dao/Repository/DTO/Service/ServiceImpl/Query/
    Controller/Mapper would be created automatically. Basic functions like add/update/delete/simple query would be contained in these auto generated classes.
    Additionally, a mybatis mapping file would be created in the directory of resources/mappers, with elements of 'resultMap' and other useful sqls.
    After installation, a new menu item would be created in the 'Window' menu. You must promise that the class opened in the editor with the annotation of Entity,
    or nothing would happen after you click the menu item.
      '';
    };
  }) {};

  enum-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Enum-Generator";
    plugname = "Enum-Generator";
    plugid = "com.enums.plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11188/50758/Enum-Generator-Plugin.jar";
      sha256 = "0xfwh169rghg7s9d2jwv8pz3rwnjb4bvi7j0gdkflw6q72h440fz";
      name = "Enum-Generator-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tedburner/Enum-Generator-Plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tedburner/Enum-Generator-Plugin";
        free = false;
      };
      description = ''
        To init java Enum, use  Mac control + enter or windows alt+ insert, and then generator valueOfXXX method;

      在枚举方法类中使用 Mac control + enter 或者 windows alt+ insert， 选择 EnumGenerator，
      生成 valueOfXXX 枚举方法。
      '';
    };
  }) {};

  enumgenerator-1_1 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EnumGenerator-1_1";
    plugname = "EnumGenerator";
    plugid = "com.jlh.enumgenerator";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10792/46691/EnumGenerator.jar";
      sha256 = "1axck7wjmy0nahc229aq301mpiiiqc9ql4sfsn6s37li6s6fql4n";
      name = "EnumGenerator-1_1-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/rohou";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitee.com/rohou/enumgenerator";
        free = false;
      };
      description = ''
        To init java Enum and generator valueOfXXX method; 初始化java enum 对象 并且生成属性对应的valueOf方法
      '';
    };
  }) {};

  enumgenerator-1_0 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EnumGenerator-1_0";
    plugname = "EnumGenerator";
    plugid = "com.youzan.framework.easy-plugin.EnumGenerator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10825/46796/EnumGenerator.jar";
      sha256 = "12nxarr9l3ddbwixlz1k4wb6ss7h17cmhxbpq9mv71pqldx7k4nx";
      name = "EnumGenerator-1_0-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.youzan.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "w3c";
        free = false;
      };
      description = ''
        To init java Enum and generator valueOfXXX method; 初始化java enum 对象 并且生成属性对应的valueOf方法
      '';
    };
  }) {};

  enummdgenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EnumMdGenerator";
    plugname = "EnumMdGenerator";
    plugid = "com.syl.zombie.enumgenerator.v666";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10860/49204/EnumGenerator.jar";
      sha256 = "0vzkacb9p6gfkl91y4y481cv459waiai57h2ylld4yzdd2d882gj";
      name = "EnumMdGenerator-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/zombie1993/EnumMdGenerator";
      license = lib.licenses.asl20;
      description = ''
        use markdown generate enum class
      
      support markdown table to enum class
      support lombok
      support packaging (use the default )
      '';
    };
  }) {};

  enumerathor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Enumerathor";
    plugname = "Enumerathor";
    plugid = "pl.koziolekweb.enumerathor";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11178/50333/enumerathor.zip";
      sha256 = "05b8dnx963bk3nq8k59mnbmpflqd5jzy7i98pmqhh3gwjzb8zk2m";
      name = "Enumerathor-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://koziolekweb.pl";
      license = lib.licenses.asl20;
      description = ''
        Plugin generates enums from CSV files.
      Just select csv file and target package. First column in file is your enum name, all other columns are values.
      '';
    };
  }) {};

  envfile = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EnvFile";
    plugname = "EnvFile";
    plugid = "net.ashald.envfile";
    version = "3.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7861/83765/EnvFile-3.2.1.zip";
      sha256 = "12mmyz8a506faph62hz5nbicsaz19qclfgsn7vmqxgg5fcxm1irl";
      name = "EnvFile-3.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Ashald/EnvFile";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Ashald/EnvFile/blob/develop/LICENSE";
        free = false;
      };
      description = ''
        EnvFile
      Compiled with Java 1.8
      
        GitHub |
        Issues
      

      Env File is a plugin for JetBrains IDEs that allows you to set environment variables for your run configurations
      from one or multiple files.
      

      Supported formats:
      
        .env
        YAML dictionary
        JSON dictionary
      

      
      All formats assume that both keys and values are strings.
      

      Supported Platforms:
      
        PyCharm
        IDEA
        RubyMine
        GoLand
        Cursive
      '';
    };
  }) {};

  eorm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Eorm";
    plugname = "Eorm";
    plugid = "com.denghb.eorm.plugin";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12618/107252/eorm-idea-plugin.zip";
      sha256 = "0v9zhlrgw8xqpnmlzxr3qydkv9h3viqrxa14wpw3gwcdkc7m8600";
      name = "Eorm-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/deng-hb/eorm-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Eorm plugin
      Used for Eorm-spring
      Eorm based spring-jdbc JdbcTemplate &amp; NamedParameterJdbcTemplate a every every good ORM framework.
      v1.0.6
      Fix Windows Message Dialog Can not close.
      v1.0.5
      Update Entity Generator
      v1.0.4
      Add Eorm entity generator tool
      Menu &gt; Code &gt; Eorm Entity Generator
      '';
    };
  }) {};

  epsilon-languages-editors = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Epsilon-Languages-Editors";
    plugname = "Epsilon Languages Editors";
    plugid = "tech.kinori.epsilon.grammars";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15202/100953/epsilon-intellij.jar";
      sha256 = "1il95psppgnh04nmlm2qkbrc4b8jp9ij6yq7cvjia3a0yaf9xlh6";
      name = "Epsilon-Languages-Editors-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://kinori.tech/";
      license = lib.licenses.mit;
      description = ''
        This plugin provides editors with basic highlighting and error reporting for Epsilon languages.
      '';
    };
  }) {};

  equals-and-hashcode-deluxe-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Equals-and-HashCode-Deluxe-Generator";
    plugname = "Equals and HashCode Deluxe Generator";
    plugid = "Equals and HashCode Deluxe Generator";
    version = "1.0.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6875/19201/EqualsHashCodeDeluxeGenerator.jar";
      sha256 = "0mb31ndmwwq0xkn785jhrmdnrd84qxan34zjb2fsv8nfi5fz99vj";
      name = "Equals-and-HashCode-Deluxe-Generator-1.0.12.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mjedynak/equals-hash-code-deluxe-generator-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Generates equals() and hashCode() using Guava library or Objects class from Java 7. Usage: 
 
 ALT + INSERT -&gt; equals() and hashCode() deluxe (inside Java Editor).
      '';
    };
  }) {};

  ergokeys = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ErgoKeys";
    plugname = "ErgoKeys";
    plugid = "com.github.amibiz.ergokeys";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11347/107288/ergo-keys-1.11.jar";
      sha256 = "01aa91yq1k896ws6hrhqv0y3f3xcchvq6mmmq6ddjygfiayqzx47";
      name = "ErgoKeys-1.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/amibiz/ergo-keys";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/amibiz/ergo-keys/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Supercharge your productivity with the most efficient keybinding for IntelliJ family of IDEs.
    
    
    A modal keybinding for IntelliJ family of IDEs (like vim), but based on command frequency and ergonomics.
    
    Inspired by xah-fly-keys, independently implemented as a plugin for IntelliJ.
    
    
    Shift-Space  activate Command Mode
Alt-Space    activate Command Mode

F (qwerty)   activate Insert Mode
U (dvorak)   activate Insert Mode
      '';
    };
  }) {};

  erlang-hot-loader = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Erlang-Hot-Loader";
    plugname = "Erlang Hot Loader";
    plugid = "io.github.QCute.ErlangHotLoader";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14050/99953/ErlangHotLoader.jar";
      sha256 = "0vzxbay1p4fllyalmlf30rx70fwy1vvz1ncimy4pn6cp0a15hh0d";
      name = "Erlang-Hot-Loader-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://qcute.github.io";
      license = lib.licenses.gpl3Only;
      description = ''
        An Erlang Hot Loader
      Hot Load Current Module File to Spec Node.
      See Build Menu or Use Shift + Alt + H to Compile and Load Current Module.
      '';
    };
  }) {};

  error-item-line-marker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Error-Item-Line-Marker";
    plugname = "Error Item Line Marker";
    plugid = "com.gamache.intellij.ErrorItemLineMarker";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9625/34193/erroritem.jar";
      sha256 = "1mak5qixpflzqqdp9h0hjd3raj1vij05pq8zs08sp5mg6173g3yx";
      name = "Error-Item-Line-Marker-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cgamache";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/cgamache/erroritem/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Displays an icon in the left gutter to indicate an error on the line.
      '';
    };
  }) {};

  es6-intentions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Es6-intentions";
    plugname = "Es6 intentions";
    plugid = "com.juanpany.es6.intentions";
    version = "0.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8366/40165/es6-intentions-intelliJ.zip";
      sha256 = "1h70lpk6rh8sn4xzzam5myg5xzi63rwk4am50d5injaismj8cwkk";
      name = "Es6-intentions-0.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/juan-tonina/es6-intentions-intelliJ";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/juan-tonina/es6-intentions-intelliJ/blob/master/LICENSE";
        free = false;
      };
      description = ''
        ES6 custom actions.
      '';
    };
  }) {};

  escape-string-to-unicode = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Escape-String-to-Unicode";
    plugname = "Escape String to Unicode";
    plugid = "com.piegoesmoo.escape";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7614/17919/EscapeString.jar";
      sha256 = "1p3ilz6110b47vvmzkgii6skpf40brmgpx6sci39qhp8jfsz28r7";
      name = "Escape-String-to-Unicode-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Escapes selected strings to unicode
      '';
    };
  }) {};

  escape-from-searcheverywhere = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Escape-from-SearchEverywhere";
    plugname = "Escape from SearchEverywhere";
    plugid = "org.masamotod.idea.EscapeFromSearchEverywhere";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10562/44445/escape-from-searcheverywhere.jar";
      sha256 = "1cmidg4wmks10y17aw25g52azz56c3brkvffcghr4jdzdnzf5c00";
      name = "Escape-from-SearchEverywhere-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://masamotod.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/masamotod/idea-escape-from-searcheverywhere/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Make it be possible to close the 'Search Everywhere' popup by the ESC key.
      '';
    };
  }) {};

  esper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Esper";
    plugname = "Esper";
    plugid = "Esper";
    version = "3.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12696/71813/Esper-3.0.0.zip";
      sha256 = "1j22nvqlllk8gk4z7asqdngx0sggsx3pfylrb0yikj4s26gyhym6";
      name = "Esper-3.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://esper.io/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://eulatemplate.com/live.php?token=jompmfymwrnvdktphnmwsmb4y07lovax";
        free = false;
      };
      description = ''
        This plugin allows developers to communicate
        to their Esper endpoints straight 
        from Android Studio.
      '';
    };
  }) {};

  espresso-lightgram = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Espresso-Lightgram";
    plugname = "Espresso Lightgram";
    plugid = "com.noctumsempra.themes.espresso.lightgram";
    version = "1.0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15772/107253/Espresso_Lightgram.jar";
      sha256 = "0cwkgmcqh4kjspywxdvfzks78wbr52dg51zmnilb0fcww9nzmjg0";
      name = "Espresso-Lightgram-1.0.3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/lcom86";
      license = lib.licenses.gpl3Only;
      description = ''
        Espresso Lightgram is a Full Theme plugin (UI + Editor color Scheme)

      It fusions 2 wonderful things I love:
      
      
        An adapted version of the UI theme "Espresso Light"
       (thanks Rasarts, I fixed/corrected 2 colors).
        An adapted version of the editor color scheme "Gruvbox Light Medium" 
       (thanks Vincent Parizet, I enhanced 3 or 4 colors).
      
      
      A couple images of this "theme fusion"! 
      
        
          
            
          
        
        
          
            
          
        
      
      
        The name "Espresso Lightgram" is because this plugin 
      is based on Espresso Light for the UI,
      and there is also a HUGE vintage/ig vibe in those colors.
      
      I really love this combination of light schemes.
      
      
        I don't claim to be author nor have any copyright of/over the aforementioned plugins/themes.

        I just took what I love from both

        and fixed the things that I found MOST annoying for me.

      
      
      
        In Espresso Light, when you hover a menu element, the shortcut key (aka "accelerator")
        can't be read cause font color of the hovered menu element is white and the elem's bg is beige. 
        I've chosen to use 2 beautiful tones of fucksia that were in the theme itself. 
        
          
            
              
            
          
        
      

      
        Important: The fact that I fusioned a UI theme and a Color Scheme plugin is not casual.
        When you want to set a UI and a Color Scheme that is not associated with that UI theme,
        you have to set the UI first in Settings -&gt; Appearance, then OK the dialog,
        then open the Settings again, go to Editor -&gt; Color Scheme, then set it, then hit apply WITH CARE
        because you're gonna get asked if you wanna turn the entire UI with the same darkness as the Color Scheme
        (hence with the potential risk of accidentally rollbacking the UI setting we've just set earlier!) 
        

        So I decided to RTFM and dive into this awesome experience of fine tuning my IDE's aesthetics. 
        After all... I stare at it LOTS of time per day. I better LOVE how it looks!
         
      

      Enjoy!
      '';
    };
  }) {};

  espresso-light-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Espresso-light-theme";
    plugname = "Espresso light theme";
    plugid = "rasarts.espresso.light.theme";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12317/67837/espresso_light_theme.jar";
      sha256 = "145807ak61d4a5rlpj2k6wmggph09aq3ii7j1rlycpgm52npxsz3";
      name = "Espresso-light-theme-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://rasarts.github.io/";
      license = lib.licenses.mit;
      description = ''
        Espresso light theme for IntelliJ
      '';
    };
  }) {};

  evaluate-arithmetic = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Evaluate-Arithmetic";
    plugname = "Evaluate Arithmetic";
    plugid = "arithmetic_plugin";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13778/90877/arithmetic_plugin-1.3.2.zip";
      sha256 = "1mch1rrjz8y2lakgq5gzlj3mshl344d1gbg0s9724bz1kq7x5hzq";
      name = "Evaluate-Arithmetic-1.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jaredkhan/IntelliJEvaluateArithmetic";
      license = lib.licenses.gpl3Only;
      description = ''
        Evaluate selected arithmetic expressions wherever they are.
    Select the expression you want to evaluate, select Find Action... &gt; Evaluate Math Expressions
      '';
    };
  }) {};

  evaluate-async-code = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Evaluate-async-code";
    plugname = "Evaluate async code";
    plugid = "com.uriyyo.evaluate_async_code";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14476/108578/evaluate-async-code-1.11.zip";
      sha256 = "12jj9qdqmpxwk2g1dpf171b8v5ly6ahwrv3a8v22cxi31m2q6im9";
      name = "Evaluate-async-code-1.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/uriyyo/pycharm-evaluate-async-code";
      license = lib.licenses.asl20;
      description = ''
        Finally, you can use async/await during debugging your code.
        Currently supports: evaluate an expression, conditional breakpoints, console window, python console.
      '';
    };
  }) {};

  evangelion-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Evangelion-Color-Scheme";
    plugname = "Evangelion Color Scheme";
    plugid = "color.scheme.Evangelion";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11146/51021/Evangelion.jar";
      sha256 = "0hayhcnvf672l6wqw53sckj4m962qavm5k8g88fq4gmz04hnfql8";
      name = "Evangelion-Color-Scheme-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The Color Mode derived from Evangelion unit 1.

vertical indentation highlighting is not supported :)
      '';
    };
  }) {};

  evangelionu02-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EvangelionU02-Color-Scheme";
    plugname = "EvangelionU02 Color Scheme";
    plugid = "color.scheme.EvangelionU02";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11244/51274/EvangelionU02.jar";
      sha256 = "0nsrb0pwd0svgnrnyr2ns62ska5aps5jgwx2kq9xwqp0cfzj9gkr";
      name = "EvangelionU02-Color-Scheme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Evangelion Unit 02 eye-friendly version
      '';
    };
  }) {};

  eventbus-navigator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EventBus-Navigator";
    plugname = "EventBus-Navigator";
    plugid = "cn.vove7.ide.plugin.eventbus_navigator";
    version = "1.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13140/70525/EventBus-Navigator.jar";
      sha256 = "1afvqgm5gs3d30v26pkij60jgi23xdnrgs6b21xca1nc91hvq3kn";
      name = "EventBus-Navigator-1.2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/Vove7/EventBus-Navigator";
      license = lib.licenses.gpl3Only;
      description = ''
        EventBus-Navigator

    中文介绍
    
    Kotlin language support
    Support encapsulated post function
    Support primitive type
    based on likfe/eventbus3-intellij-plugin
    
    Preview
    Receiver function what is annotate with @Subscribe
    Kotlin subscriber function
    
    Kotlin publisher expression
    
    Java subscriber function
    
    Java publisher expression
    ...
    Make a encapsulated post function as a poster function
    Right click at a function name.
    
    then you can find this icon
    
    Install
    
    Marketplace
    
    IDEA or Android Studio Settings/Plugins/Marketplace search EventBus-Navigator
    
    download EventBus-Navigator.jar file.
    
    Settings/Plugins/ Install Plugin from Disk.
    Thanks
    
    likfe/eventbus3-intellij-plugin
    kgmyshin/eventbus3-intellij-plugin
      '';
    };
  }) {};

  eventbus3-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "EventBus3-IDEA";
    plugname = "EventBus3-IDEA";
    plugid = "com.likfe.ideaplugin.eventbus3";
    version = "2020.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8603/99749/EventBus3-IDEA-2020.0.2.zip";
      sha256 = "1g5k6ab0919cawwd6k7bmpirp6fswmqh5lc86i3k7wqz670yp36f";
      name = "EventBus3-IDEA-2020.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/likfe/eventbus3-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        2020.* 即将适配 Kotlin,建议升级到 Android Studio 4.1及以上以使用最新版本

    Provides actions which allow you quickly move around the event bus.(now it only for EventBus 3.x)
    
      EventBus.post to @Subscribe or onEventMainThread
      EventBus.postSticky to @Subscribe or onEventMainThread
      @Subscribe to EventBus.post
    
    为 EventBus 提供快速索引和跳转（当前只支持 EventBus 3.x 版本）
    
      从 EventBus.post 到 @Subscribe 或者 onEventMainThread
      从 EventBus.postSticky 到 @Subscribe 或者 onEventMainThread
      从 @Subscribe 到 EventBus.post
      '';
    };
  }) {};

  excelreader = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ExcelReader";
    plugname = "ExcelReader";
    plugid = "com.chesterccw.excelreader";
    version = "2.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14722/106738/ExcelReader-2.0.3.zip";
      sha256 = "11f42097486ajqxw64sm6qa5qw0dhc9pklf4kwvxncwlfy3za74i";
      name = "ExcelReader-2.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.xuegaogame.com";
      license = lib.licenses.asl20;
      description = ''
        This is a plugin for Excel file.
      You can read the file content in IDEA.
      Don't need to open excel application.
      Three formats of [xls, xlsx, csv] are supported.
      '';
    };
  }) {};

  exceptions-in-code = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Exceptions-in-code";
    plugname = "Exceptions in code";
    plugid = "com.jetbrains.isaev.issues.in.code";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7537/16972/ExceptionsInCode.zip";
      sha256 = "03h880hv40jcf0a6vbnf3i7kdh1gpi2ka6i8hdpygs3qlrxss6iv";
      name = "Exceptions-in-code-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.yourcompany.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.yourcompany.com";
        free = false;
      };
      description = ''
        Shows containing java exceptions issues from most popular bugtracking systems in the IDEA editor
      '';
    };
  }) {};

  exchange-code-block = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Exchange-Code-block";
    plugname = "Exchange Code block";
    plugid = "com.github.zxj5470.exchange-intellij";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11173/50279/exchange-intellij-1.0.jar";
      sha256 = "0xvr26mv669clkx9lzifvg4d0gaf26m5m0w8f02n3lrg5g80ni5p";
      name = "Exchange-Code-block-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/zxj5470";
      license = lib.licenses.gpl3Only;
      description = ''
        Exchange Code by ctrl/command + alt + C V
      '';
    };
  }) {};

  exclude-componentn = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Exclude-ComponentN";
    plugname = "Exclude ComponentN";
    plugid = "justbucket.excludeComponentN";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14667/91148/ExcludeComponentN.jar";
      sha256 = "17rxyyzzkqgpiq9c6vcnd6isllvgyr0xhf364gp7zdw881gi06yx";
      name = "Exclude-ComponentN-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Plugin to filter out Kotlin componentN() methods
      '';
    };
  }) {};

  exclude-symlinks = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Exclude-Symlinks";
    plugname = "Exclude Symlinks";
    plugid = "ru.neofusion.ExcludeSymlinks";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9613/85485/idea-exclude-symlinks-plugin.jar";
      sha256 = "1p1j3c6gnd1cxrsm4r50ih86rq2kdpzap0kzvjsrgpsr6y7aiids";
      name = "Exclude-Symlinks-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/NeoFusion/idea-exclude-symlinks-plugin";
      license = lib.licenses.mit;
      description = ''
        Walks subdirectories recursively, marks symlinks as excluded.
      
      Usage: right-click on a directory in the Project tool window and select "Mark All Symlinks as Excluded" from the context menu.
      '';
    };
  }) {};

  excludefileaction = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ExcludeFileAction";
    plugname = "ExcludeFileAction";
    plugid = "com.cyl.idea.plugin.ExcludeFileAction";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15004/105263/ExcludeFileAction-1.2.zip";
      sha256 = "0g3by838qqg5xgr739fh1kznxr9bh1ja4z7nh7ll99d6ljddclsm";
      name = "ExcludeFileAction-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        exclude specific file action in the project view popup menu.
      '';
    };
  }) {};

  execute-gradle-task = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Execute-Gradle-Task";
    plugname = "Execute Gradle Task";
    plugid = "de.tomtec.idea.plugin.gradle.run";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8872/91224/ContextGradleTask-1.2.jar";
      sha256 = "02chah986y5azgzhf4zaqpcl7a5nyg28x16xbvc5i5zxq0wf5cl1";
      name = "Execute-Gradle-Task-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.tomtec.de/";
      license = lib.licenses.asl20;
      description = ''
        Plugin to be able to execute a gradle task from a context menu action on a module. 
    You can also use Ctrl + Alt + G to trigger the Execute dialog in an editor. If used in the editor 
    the current module path will be used as the base for running a task.
      '';
    };
  }) {};

  execution-god-recorder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Execution-God-Recorder";
    plugname = "Execution God Recorder";
    plugid = "Execution-God-Recorder";
    version = "2020.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15379/102175/god_mode_runner_plugin.zip";
      sha256 = "1kp2w9sbrjn3lqa3bsp032qfglcp2cs5xn241cbc3qyzflmbfvzy";
      name = "Execution-God-Recorder-2020.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/truebold";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode";
        free = false;
      };
      description = ''
        Important: it only works with JDK 8 or higher


Have you ever wondered what classes/methods are called if you do something in an application e.g. call an endpoint, click on a button etc.

This plugin lets you record execution of your application (you can start recording at any point in time
    and stop it when you are ready) and shows:


    Stack Traces for any user selected method: you can navigate between stack frames the same
        way you do it during a normal debugging session
    
    Covered lines are shown in green and others in red
   Previous values of variables and the line number and class where they were changed


Also you can:

    Save the recording to a file
    Load a previously saved recording, you can also send the recording to anybody who can view it if
        he/she has the same project opened
    




Manual (Help) - also take a look at the screenshots, they can help a lot:

1. Start Recording session:

    Start your application with the new debugger called Debug with God Mode Debugger
    Start a recording session by pressing the green recording icon in the Console View. If it doesn't appear, go to Tools -&gt; God Recorder -&gt; Start God Recorder
When you are ready, you can stop the recording by pressing the same icon (which will be red this time, not green).  If it doesn't appear, go to Tools -&gt; God Recorder -&gt; Stop God Recorder
Wait a couple of seconds and coverage information will appear in your codebase. A green line appears next to the code which was covered during the recording. Also, there is a small icon next to each method which was covered. By pressing that icon, you can view the full stack trace which went through that method. A maximum of 5 different stack traces are shown in different Tool Windows.

2. View variable history (limited to fields of project classes for now):

    To view variable history, you do not need to start a recording session (you don't need to press the green recording icon at all, just use the new debugger provided with the plugin to start the project).
    When a breakpoint is hit, right click on the field of a class you want to inspect in the Debugger Tab
and then choose -&gt; See Variable History.... If no variable history has been saved for that field, an error message will pop up, else several tabs(max 3) will open up
showing the history of the variable.



Reset (Delete Recording information from source code):

To remove coverage information, icons next to methods, blue execution line shower etc. go to Tools -&gt; God Recorder -&gt;
 Remove God Recorder highlights (Shift + Alt+G is the shortcut)



Why and when to use it:




    To quickly see which lines are executed in certain classes in response to an event. Can speed up debugging quite
        a lot. If you know which
        parts are executed, you know where to place a breakpoint.
    
 Makes debugging a lot easier. Have you ever wondered what was the last value of a certain field before it was set?
    
    Have you ever wondered where the value of a field came from (who set that value)?
    


Limitations:

    Not for production use!
    Variable history is only shown for fields for now, and only for classes present in the project. Doesn't work for library classes.



Credits:
'Recording button' Icon made by Freepik from www.flaticon.com

IntelliJ IDEA Code Coverage Agent: https://github.com/JetBrains/intellij-coverage
      '';
    };
  }) {};

  execution-history-recorder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Execution-History-Recorder";
    plugname = "Execution History Recorder";
    plugid = "Execution-History-Recorder";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14968/96158/execution-history-recorder-plugin.zip";
      sha256 = "0p6wdac174q6lr4gdf4ck81b14k53cxx2wcmkkwwxld3bcmyfgvb";
      name = "Execution-History-Recorder-1.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csabagabor";
      license = lib.licenses.gpl3Only;
      description = ''
        Tutorial

   
Important: it only works with JDK 8 or higher


Have you ever wondered what classes/methods are called if you do something in an application e.g. call an endpoint, click on a button etc.

This plugin lets you record execution of your application (you can start recording at any point in time
    and stop it when you are ready) and shows:


    Sequence diagram with all the classes/methods that were called, you can click on any method and it will
        lead to the execution point
    
    Variable information (values of variables at different places during execution)
    Stack Traces: which contain variable information as well, you can navigate between stack frames the same
        way you do it during a normal debugging session
    
    Covered lines are shown in green and not covered lines in red (just like a coverage runner)


Also you can:

    Save the recording to a file
    Load a previously saved recording, you can also send the recording to anybody who can view it if
        he/she has the same project opened
    




Manual (Help):

There are 2 ways to use it.

    1. Either use the the usual Run and Debug buttons inside IDEA and then just hit the Green Recording button
        inside the Console View to start recording.
        The button will turn red. When you are done, press the button again, and the sequence diagram will pop
        up
    2. If option 1. doesn't work, you can run/debug your project with the 2 new run/debug buttons and start the
        recording from Tools -&gt; History Recorder -&gt; Start History Recorder
    ** It is important to only include the classes/packages that you need for the recording(can be changed in Run Configuration Menu - History Recorder Settings),
     else the recording will take more time.
    By default, it includes all the classes in the project.


Reset (Delete Recording information from Source Files):

To remove coverage information, icons next to methods, blue execution line shower etc. go to Tools -&gt; History Recorder -&gt;
 Remove History Recorder highlights (Alt+G is the shortcut)



Why and when to use it:



    To generate a sequence diagram automatically from a given use case (calling endpoint, clicking on button etc.) -
        diagram can be exported
    
    To quickly see which lines are executed in certain classes in response to an event. Can speed up debugging quite
        a lot. If you know which
        parts are executed, you know where to place a breakpoint.
    
    To record execution of something, save it and then after some time load it again without going through the same
        Debugging session
    
    You can save execution when a bug happens and the resulting recording can be loaded into IDEA and inspected by
        other people as well
    
    Works really well with Microservices and with the Spring Framework





Credits:
'Recording button' Icon made by Freepik from www.flaticon.com

Variable extraction is based on the code provided by https://github.com/cnhguy/FootPrint

Sequence diagram provided by https://github.com/Vanco/SequencePlugin

IntelliJ IDEA Code Coverage Agent: https://github.com/JetBrains/intellij-coverage
      '';
    };
  }) {};

  execution-sounds = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Execution-sounds";
    plugname = "Execution-sounds";
    plugid = "org.jetbrains.execsound";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11498/53849/execution-sounds-1.5.zip";
      sha256 = "0gmzzhj2i9pl8msi71g8dcp617g6czwynnvg2k114h3yvpnmnxgj";
      name = "Execution-sounds-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "www.vk.com/tomas0808";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://termsfeed.com/eula/52b06eb9fc4208ef687a2ed5a6a42690";
        free = false;
      };
      description = ''
        simple plugin for playing sound for exit code 0 after run
    and playing other sound with no 0 code
      '';
    };
  }) {};

  expert-ai-studio = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Expert.ai-Studio";
    plugname = "Expert.ai Studio";
    plugid = "ai.expert.studio";
    version = "2.4.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15289/106117/cogito-ide-2.4.12.zip";
      sha256 = "0agcrpznk0fy3m9idlhr3w72rbymll3kiig3jhx6abbmxp6g1yf3";
      name = "Expert.ai-Studio-2.4.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.expert.ai";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://policies.expert.ai/studio/specificterms/";
        free = false;
      };
      description = ''
        Enables project development with the expert.ai cognitive technology.Expert.ai Studio is a fully integrated development environment for building, testing and deploying custom language models leveraging expert.ai natural language understanding (NLU) technology. It is designed to help data scientists, computational linguists and software engineers to create advanced and unique solutions to extend the scope of intelligent process automation and make knowledge discovery more effective.Expert.ai Studio provides an advanced and simple to use environment to support entity and relationship extraction and automatic document categorization, it includes sophisticated testing and reporting tools for validating your model and it enables users to deploy it on their own computer or cloud infrastructure through the integration with expert.ai Edge NL API.Features:low-code IDE (Integrated Development Environment) optimized to design linguistic applications for Categorization and Entity Extraction;inline knowledge graph navigator to easily integrate a unique network of concepts into your project;a library manager to ingest corpora and annotate documents quickly (only necessary if you want to use our quality measurement tools);quality measurement tools to keep track of precision and recall values of your application, and their evolution over time;AI project builder for entity extraction and document classification;tight integration with natural language understanding engine;powerful editor with syntax highlighting and autocomplete with IntelliSense;quality Dashboard for measuring precision and recall with respect to a golden corpus;version control support with SVN and GIT native connectors;fully scriptable and extensible workflow;custom scripting integration;computational linguistics practitioners, being them data scientists, taxonomists, librarians, have used Studio to successfully build NLP solutions to the most diverse business cases, from chatbots in Customer Care departments to email routing in phone companies, from Risk Engineering in Insurance to asset management reports in Financial Services;More info at https://www.expert.ai/nl-suite/expert-ai-studio/
      '';
    };
  }) {};

  export-to-directory = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Export-To-Directory";
    plugname = "Export To Directory";
    plugid = "com.htz.plugin.export";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10192/44449/ExportToDirectory.jar";
      sha256 = "190y36zfxh3wxs7iznlnc2rkdskggaglvcd0w1zsdf8bl9v99cdi";
      name = "Export-To-Directory-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tendey";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tendey";
        free = false;
      };
      description = ''
        导出项目文件并保持文件结构。插件运行在IDEA 2017.1，jdk 1.6上没有问题，有问题请邮件联系 
举例： 
 选择一个文件夹 D:\E\F 
 
 如果选择的是正常的项目文件 C:\A\B\项目名\XXX\...\CC.txt, 文件将会导出在 D:\E\F\项目名\XXX\...\CC.txt  
 如果选择的是外部引入的module的文件F:\W\K\外部模块名\XXX\...\CC.txt 文件将会导出在D:\E\F\外部模块名\XXX\...\CC.txt  
  如果选择的是引用的jar ,文件将会导出在 D:\E\F\ExternalReference+时间戳\CC.jar  
 如果导出的文件太多，请耐心等待，直到提示框出现。 
 你可以下载源代码自己定制。 
 Export files to directory and hold there path structure 
 The plugin run at IDEA 2017.1，jdk 1.6 have no error,if you have error,please email; 
 eg. 
 export to director D:\E\F 
 
 if select a project file ,its path is C:\A\B\YourProjectName\XXX\...\CC.txt, and then ,it will be exported in D:\E\F\YourProjectName\XXX\...\CC.txt  
 if select an external module file,its path is F:\W\K\ExternalModuleName\XXX\...\CC.txt and then ,it will be exported in D:\E\F\ExternalModuleName\XXX\...\CC.txt  
  if select a jar which in external libraries ,and then it will be exported in D:\E\F\ExternalReference+timestamp\CC.jar  
 if too much files,please wait,until the complete dialog show. 
 you can download sources to create your custom plugin.
      '';
    };
  }) {};

  exposejavadoc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ExposeJavadoc";
    plugname = "ExposeJavadoc";
    plugid = "com.capsulode.intellij.plugin.javadoc.ExposeJavadoc";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12351/62050/ExposeJavadoc-1.0.1.zip";
      sha256 = "0mbdcc54rpm3ms7m8v3xipackbc1kprk9xb37xp101yk6lfml06y";
      name = "ExposeJavadoc-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/terrason/IntellijPlugin-ExposeJavadoc";
      license = lib.licenses.mit;
      description = ''
        This plugin expose a `''$field.javadoc` property to the template when generating Getter or Setter.
    More usage see: https://github.com/terrason/IntellijPlugin-ExposeJavadoc
      '';
    };
  }) {};

  extsee = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ExtSee";
    plugname = "ExtSee";
    plugid = "com.gmail.blueboxware.extsee";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10346/100452/extsee-1.0.6.zip";
      sha256 = "1rmhy4rns2iqbwz0zf6iggjsmf13rja18fnmxmcwj5mrh0j7893l";
      name = "ExtSee-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BlueBoxWare/ExtSee";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/BlueBoxWare/ExtSee/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin adds Kotlin extension functions and extension properties which are defined for a Kotlin or Java class
    to the Structure View of that class.

    

    See github.com/BlueBoxWare/ExtSee for more information.
      '';
    };
  }) {};

  extended-code-sense = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Extended-Code-Sense";
    plugname = "Extended Code Sense";
    plugid = "extended-code-sense";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5026/8467/extended-code-sense_8467.jar";
      sha256 = "1wz5n25s950002abxvqn0dcgw05by9pifkrm3v40jj2gajkg9dg4";
      name = "Extended-Code-Sense-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ivan-veselovsky/repka/tree/master/extended-code-sense";
      license = lib.licenses.asl20;
      description = ''
        Provides some platform code-sense functionality enhancements.
      '';
    };
  }) {};

  external-laf-switch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "External-LAF-switch";
    plugname = "External LAF switch";
    plugid = "com.github.mutcianm.external-laf-switch";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13770/101145/external-laf-switch-1.3.zip";
      sha256 = "1hncpcxfdz7hxlc4j1d068xj6l3p7gxinniny5zmvbqk4mz40yks";
      name = "External-LAF-switch-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mutcianm/intellij-external-laf-switch";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows changing IDEA look and feel externally from a script or any other application on the local machine.
Currently only allows to switch between "Darcula" and "IntelliJ" themes via shortcuts "dark" or "light".
Other LaFs must be referred by their full name.
To apply change write "dark" / "light" or full LaF name into `tcp://localhost:16666`.
Port can be changed via `autolafswitch.port` registry variable.
      '';
    };
  }) {};

  external-tools-text-replace = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "External-Tools-Text-Replace";
    plugname = "External Tools Text Replace";
    plugid = "ru.neofusion.ExternalToolsTextReplace";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15539/105158/idea-external-tools-text-replace-plugin.jar";
      sha256 = "1fzvq7id0275yc4fcyl668a9prswmxx90785a8nmzhribpw0d12c";
      name = "External-Tools-Text-Replace-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/NeoFusion/idea-external-tools-text-replace-plugin";
      license = lib.licenses.mit;
      description = ''
        Extension for External Tools allows to replace text selection with external program stdout result.
      
      Usage:
      
      Add new external tool (use SelectedText as an argument)
      Select some text in the editor
      Invoke tool from the External Tools Replace context menu group
      '';
    };
  }) {};

  externalizable-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Externalizable-Generator";
    plugname = "Externalizable Generator";
    plugid = "su.nlq.idea.ExternalizableGenerator";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9847/36947/idea-externalizable-plugin-0.1.jar";
      sha256 = "0yaa5dhkd3959bn8c78cmwypgk132b97mmpcxa7arxvpm8r77jdz";
      name = "Externalizable-Generator-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nolequen/idea-externalizable-plugin";
      license = lib.licenses.asl20;
      description = ''
        The plugin allows to generate externalizable code for Java classes easy and safe.
      '';
    };
  }) {};

  externalizer4j-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Externalizer4j-Plugin";
    plugname = "Externalizer4j Plugin";
    plugid = "Externalizer4j Plugin";
    version = "2016.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7931/26024/externalizer-jps-plugin.zip";
      sha256 = "0mjb4w7zad0wqfs5xcgmk5f9wl432kx08xypnd0jdhwxzcs5ak96";
      name = "Externalizer4j-Plugin-2016.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The serialization compiler: Externalizer4j analyzes and converts Serializable classes into Externalizable ones without any coding. Automatically optimize serialization with every build from now on. 
 The serialization logic is highly optimized and always safe. 
 Enjoy the benefits of optimize serialization for your applications. Speed up many Java technologies: 
 
 RMI 
 JMS 
 Session beans 
 Servlet 
 Clustering 
 Distributed computing (ex. JGroups, Hazelcast) 
 Distributed caches 
 
 This full featured plugin is FREE to use for personal and commercial use. Commercial support is available. See documentation and FAQ Contact us on google+ at https://www.google.com/+Externalizer4j
      '';
    };
  }) {};

  extra-actions = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Extra-Actions";
    plugname = "Extra Actions";
    plugid = "cz.daku.intellij.extraActions";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8213/36425/extra-actions.jar";
      sha256 = "0ah0nq6mrmwxsc57rarfc0jnch9hl77pgnc203nl67yxxjl1zyif";
      name = "Extra-Actions-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/danielkurecka/intellij-extra-actions";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://github.com/danielkurecka/intellij-extra-actions";
        free = false;
      };
      description = ''
        This plugin provides some additional actions: 
Split Selection into Lines 
Adds a new caret at each line of the selection, it works the same way as in Sublime Text. Recommended shortcut: CTRL+SHIFT+L 
Split Selection 
Splits selection into multiple carets by custom character(s). Recommended shortcut: CTRL+SHIFT+ALT+L 
Toggle Quotes 
Switches between single and double quotes inside a string literal. It works in most languages and with multiple carets. For JavaScript/CoffeeScript a plugin "JavaScript Intention Power Pack" must be enabled. Recommended shortcut: CTRL+' 
Break Quotes 
Splits string literal at the caret position and adds concatenation operators with the caret between them. For example: var a = "Hello |world."; will become var a = "Hello " + | + "world.";. It works in most languages and with multiple carets. Recommended shortcut: CTRL+. 
Move Caret to Next/Previous Paragraph 
Moves caret to the first empty line. Recommended shortcut: CTRL+DOWN/UP 
Move Caret to Next/Previous Paragraph with Selection 
Moves caret to the first empty line with selection. Recommended shortcut: CTRL+SHIFT+DOWN/UP 
Select in Project 
Shows current file in the project tool window. Recommended shortcut: CTRL+SHIFT+Y 
Search Online 
Searches the selection or word at the caret via Google. Recommended shortcut: SHIFT+F1 
Shortcuts 
No shortcuts are set by default. This is done to prevent conflicts. You can easily set them by going to Settings|Keymap|Plugins|Extra Actions.
      '';
    };
  }) {};

  extra-icons = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Extra-Icons";
    plugname = "Extra Icons";
    plugid = "lermitage.intellij.extra.icons";
    version = "1.44.0.201";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11058/107894/Extra_Icons-1.44.0.201.zip";
      sha256 = "13j3xzyd39l1rm8d3p63qlbmz12nf0jhcd6i1fm6cgp338jz4g2n";
      name = "Extra-Icons-1.44.0.201.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jonathanlermitage";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jonathanlermitage/intellij-extra-icons-plugin/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Add icons for files like Travis YML, Appveyor YML, etc.
      See Settings &gt; Appearance &amp; Behavior &gt; Extra Icons to select extra icons to (de)activate.
      If you find this plugin helpful, you can buy me a coffee. Thank you! 👍
      See changelog
      and readme on GitHub.
      Check also my plugins.
      '';
    };
  }) {};

  extra-features-for-eclipse-plugins-development = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Extra-features-for-Eclipse-plugins-development";
    plugname = "Extra features for Eclipse plugins development";
    plugid = "org.intellij.eclipse.development.extra";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7333/17180/eclipse-from-idea-development.jar";
      sha256 = "1krscnfdsazr615v44p31jnh1wr5wyvm24mbnk7klz48j9ng03yp";
      name = "Extra-features-for-Eclipse-plugins-development-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/VladRassokhin/eclipse-from-idea-development";
      license = lib.licenses.asl20;
      description = ''
        Some additional features for painless Eclipse plugins development process
 
 
Features: * Navigate from [plugin|feature|site].xml '%property' in respective properties file
      '';
    };
  }) {};

  extracttext = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ExtractText";
    plugname = "ExtractText";
    plugid = "com.fish.bin.extract.text";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13144/70373/ExtractText.jar";
      sha256 = "11qq34jcxxadsdr5r2jmgc2fv59byb0syc2f47pjgylgqxj7y82k";
      name = "ExtractText-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Fish-Bin/ExtractText";
      license = lib.licenses.asl20;
      description = ''
        A plugin for extract text.
       Automatically reads hardcoded text from XML into resource files.
      '';
    };
  }) {};

  eye-health = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Eye-Health";
    plugname = "Eye Health";
    plugid = "lekanich.eye-health";
    version = "2020.3.04-2020.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14665/107932/Eye-Health-2020.3.04-2020.3.1.zip";
      sha256 = "1ckyk2c72ql6yhf27h7makgwlnnjsinzdhi6bxajffhcv3yh85s7";
      name = "Eye-Health-2020.3.04-2020.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.bsd3;
      description = ''
        This tool will help you manage your staring time to the display.
    It suggests a few exercises. You can configured duration of your work time and the following rest.
    It will help you remember that you may want to take a break and do small exercises for you eyes.
      '';
    };
  }) {};

  eziogenturbo = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "EzioGenTurbo";
    plugname = "EzioGenTurbo";
    plugid = "com.ezio.gen.turbo";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12278/63831/plugin-gen-turbo.jar";
      sha256 = "1bi6x1512h9hdswas7nqjfxdr643hwxsw74qc9sl382f13nyy5w8";
      name = "EzioGenTurbo-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/EzioL";
      license = lib.licenses.asl20;
      description = ''
        A generating Spring MVC DO's DAO and Service plugin
      '';
    };
  }) {};

  fcm-push-sender = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FCM-push-sender";
    plugname = "FCM push sender";
    plugid = "com.abeade.plugin.fcm.push";
    version = "0.7.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12104/76694/fcm-push-plugin.jar";
      sha256 = "1b2d3m8rbk27qafchsszh852na87s0pmcg26fydnfajq9zlcd5pz";
      name = "FCM-push-sender-0.7.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/abeade";
      license = lib.licenses.asl20;
      description = ''
        Sends push notifications using Firebase Cloud Messaging (FCM).
      Uses Stetho's prefs dumpapp plugin to find the application Firebase Registration ID token in app shared preferences
      '';
    };
  }) {};

  fidl = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FIDL";
    plugname = "FIDL";
    plugid = "fuchsia.developer.plugin.fidl";
    version = "0.14";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11105/88177/fidlplugin.jar";
      sha256 = "1bb0xlyjfn923s4dq8xj73z1rp5smb5jjwxk5fdfxkgmmxiwnb6g";
      name = "FIDL-0.14.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://fuchsia.googlesource.com/intellij-language-fidl/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://fuchsia.googlesource.com/intellij-language-fidl/+/master/license";
        free = false;
      };
      description = ''
        FIDL Plugin for IntelliJ.
     Features 
    
     Syntax and Semantic Highlighting 
     Error highlighting
      '';
    };
  }) {};

  figlet = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FIGlet";
    plugname = "FIGlet";
    plugid = "cn.yiiguxing.plugin.figlet";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12005/59047/intellij-figlet-1.2.zip";
      sha256 = "1jm5jnqvil4kk84naj91xmyci7gqb64j6n1z8j38hq3bbjgmp4yi";
      name = "FIGlet-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/YiiGuxing/intellij-figlet";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/YiiGuxing/intellij-figlet/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A FIGlet-based ASCII Art generator.
      
      Source code
      
      Issue tracker
      '';
    };
  }) {};

  fmvpplugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FMVPPlugin";
    plugname = "FMVPPlugin";
    plugid = "com.dhc.fmvp";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10751/46036/FMVP-plugin.jar";
      sha256 = "0cjcnfh7vz42jpicbvwd9pxpmvzsis04vimclbjcd5ikva3dpycz";
      name = "FMVPPlugin-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chengzichen/Flyabbit";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/chengzichen/Flyabbit";
        free = false;
      };
      description = ''
        MVP plug-ins
 
most HTML tags may be used
      '';
    };
  }) {};

  ftp-bridge = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FTP-Bridge";
    plugname = "FTP Bridge";
    plugid = "FTP Bridge";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/158/712/FTP_Bridge_712.zip";
      sha256 = "1wq6zxqk666hiy68ci96f2v2qv5r31fv7isjb7ghh5h8knna2fkm";
      name = "FTP-Bridge-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Simple File Transfer Utility.
      '';
    };
  }) {};

  fxml-declaration-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FXML-Declaration-Helper";
    plugname = "FXML Declaration Helper";
    plugid = "com.eagles13.fxmldeclarationhelper";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7821/23855/FXMLGenerator.jar";
      sha256 = "0yalh7kaswyvqh54006vxk6nac3piix2xm2l060imcp2jrykbsri";
      name = "FXML-Declaration-Helper-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This extension lets you easily extract control declarations from FXML files, and copy them to the clipboard, whereupon you can use them!
      '';
    };
  }) {};

  fxmlhelper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FXMLHelper";
    plugname = "FXMLHelper";
    plugid = "net.scrumplex.fxmlhelper";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9376/31474/FXMLHelper.jar";
      sha256 = "1j9pim7m6lsbgpg46n9zqzxipgh78rn8nhfjvr6rpi8q7fx606vp";
      name = "FXMLHelper-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://scrumplex.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Scrumplex/FXMLHelper/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Adds handy tools to your JavaFX project.
      '';
    };
  }) {};

  fxmlmanager = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FXMLManager";
    plugname = "FXMLManager";
    plugid = "cz.bios.idea";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14854/98276/fxmlmanager.jar";
      sha256 = "1a1xgxvxwchnn8zmmgy4j1350yf5qg24i5lha6421ghj85yk8nis";
      name = "FXMLManager-1.1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bios.cz";
      license = lib.licenses.asl20;
      description = ''
        FXMLManager!
  When clicking right mouse button on .fxml file, there is new menu item "Update Controller from FXML".
  Clicking this item will modify FXML Java Controller:
  
    Remove all @FXML fields that are missing in FXML and their getters/setters
    Add all @FXML fields that are missing in Controller
    @Deprecate all ActionEvent methods that are missing in FXML
    Create all ActionEvent methods that are missing from Controller
      '';
    };
  }) {};

  fabric-for-android-studio = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fabric-for-Android-Studio";
    plugname = "Fabric for Android Studio";
    plugid = "com.crashlytics.tools.androidstudio";
    version = "4.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8002/65412/FabricAndroidStudioPlugin.zip";
      sha256 = "1sc7aja9g5jmlmrz8kfsryl4ibnchi2sngdd6aax1pi2y86dbik2";
      name = "Fabric-for-Android-Studio-4.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://fabric.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://fabric.io/terms";
        free = false;
      };
      description = ''
        Fabric for Android Studio

//Features

Kits.
Fabric launches with two core Kits - Crashlytics &amp; Answers. More on that below.

SDK Onboarding.
Instead of reading through dozens of pages or watching videos to learn how to integrate an SDK, our plugin quickly and smoothly walks you through adding Kits to your app so you can spend more time coding. It's that easy.

Build Tools support.
We've tightly integrated our plugin capabilities with Gradle, Maven, and Ant, giving you all the power of Fabric from your command line build tools.

Multi-Organization Support.
Part of multiple organizations? Want to switch between them? You can! Just click the small arrow in the upper left corner to bring up the list of your organizations.

Live Updating.
If you or your teammates close issues, delete an app, or add an app on the web or through the IDE plugins, it will update live. Those changes will be reflected immediately in your Fabric plugin.

Automated Deobfuscation.
Using Crashlytics and ProGuard? Our plugins and build tools know you when build and auto-upload your mapping files to our servers, giving you deobfuscated stack traces on your Crashlytics dashboard.

Issues View.
You can see the list of your Crashlytics issues right on your desktop! If you want more details, simply click through and it will load the issue in your browser.

Have questions? Shoot us an email at support@fabric.io. Need access to Fabric? Visit Fabric.io.

Third party licenses
      '';
    };
  }) {};

  facebook-chat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Facebook-chat";
    plugname = "Facebook chat";
    plugid = "Facebook chat";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5916/8991/Facebook_chat_8991.zip";
      sha256 = "1h9g2h0y35f6q8fppav9xlbf7x442xmdqqvzdichsvxvmiadx83s";
      name = "Facebook-chat-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        facebook chat
      '';
    };
  }) {};

  factorio-lua-api-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Factorio-LUA-API-Support";
    plugname = "Factorio LUA API Support";
    plugid = "moe.knox.factorio.autocompletion";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13330/105152/factorio_autocompletion-1.3.2.jar";
      sha256 = "18f23mypa9jlj854hnkpjsacfmibqlj3i1srg02incs6pnh6wwip";
      name = "Factorio-LUA-API-Support-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/knoxfighter/intellij-factorio-autocompletion";
      license = lib.licenses.mit;
      description = ''
        Adds Support for the Factorio LUA API. This implements a full code completion.
    EmmyLua has to be installed for this plugin to work.

    To use the code completion, it has to be activated under `Settings &gt; Languages &amp; Frameworks &gt; Factorio Autocompletion`
      '';
    };
  }) {};

  failed-line-inspection-for-kotlin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Failed-Line-Inspection-for-Kotlin";
    plugname = "Failed Line Inspection for Kotlin";
    plugid = "Failed Line Inspection for Kotlin";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11943/87785/kotlin-failed-line-inspection.zip";
      sha256 = "185q9dc7ibznvw95f2qz1z0xm1x4x5i2rw5ccdks9i8h0qr7a845";
      name = "Failed-Line-Inspection-for-Kotlin-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/kotlin-failed-line-inspection";
      license = lib.licenses.asl20;
      description = ''
        Inspection for IntelliJ Kotlin plugin to highlight expression with a failed assertion.
        See also https://youtrack.jetbrains.com/issue/KT-29445.
      '';
    };
  }) {};

  faker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Faker";
    plugname = "Faker";
    plugid = "pl.tigersoft.intellij.faker";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14607/93381/faker-intellij-plugin-1.1.2.zip";
      sha256 = "14v0gxg4fbaphm3m86v1w8571in5yd6lvf4nlhkahig2iak0clln";
      name = "Faker-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://tigersoft.pl";
      license = lib.licenses.asl20;
      description = ''
        Generates word examples for the selected category

Address, name, phone number and many many more words can now be inserted into your code.
	No more coming up with data for testing. Just Alt + Insert.
Built on top of java-faker


Release (20200730.175418)


Features


	Insert dialog -
		enables word insertion from editor level
	

More Information

	Home
      '';
    };
  }) {};

  falco = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Falco";
    plugname = "Falco";
    plugid = "com.tencent.falco.falco-sdk-plugin";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11459/62828/Falco_tools_1.3.jar";
      sha256 = "0mzyrzb9lrq31idzlay67wq9vcy8lbncb3nmjxnns5wvkxc4sc6q";
      name = "Falco-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.tecnet.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.tecnet.com";
        free = false;
      };
      description = ''
        falco plugin,use this plugin to add biz,remove biz...
      '';
    };
  }) {};

  fancy-music = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fancy-Music";
    plugname = "Fancy Music";
    plugid = "intellij.music";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13231/88608/intellij-music-1.0.2.zip";
      sha256 = "0n9828ybx9jwz6bx8k6wi97px00apbkphfsk4q4mas399r6hsbk1";
      name = "Fancy-Music-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/FirstTimeInForever/intellij-music";
      license = lib.licenses.mit;
      description = ''
        When you are typing, there will be ring out a beautiful background music.
      '';
    };
  }) {};

  fast-java = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fast-Java";
    plugname = "Fast Java";
    plugid = "cn.anseon.plugin.id";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15885/108329/fast-java-plugin-1.0.zip";
      sha256 = "0qiagx20ssmmqb7f7cy6p9q3la9mzxkx6grg5pw2w5lziba8pg5q";
      name = "Fast-Java-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.anseon.cn";
      license = lib.licenses.asl20;
      description = ''
        Fast-Java-Plugin
		fast-java-plugin is a fast code generation tool.
		support build #IU-181.*
		
			Contains directories.
			
				domain
				controller
				service
				service.impl
			
		
		At the same time, it supports relying on Fast-Java library, Fast-Java library, an agile development library based on MongoDB.
      '';
    };
  }) {};

  fast-mouse-scrolling = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fast-Mouse-Scrolling";
    plugname = "Fast Mouse Scrolling";
    plugid = "com.jetbrains.fast.mouse.scroll";
    version = "1.5.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12388/104278/fast.mouse.scroll-1.5.7.zip";
      sha256 = "18x0v32128rp8j57issqsa2mabjyz3cph82pas0acdz6vv9yw4sz";
      name = "Fast-Mouse-Scrolling-1.5.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com/";
      license = lib.licenses.asl20;
      description = ''
        Supports browser-like scrolling with middle-click in IDE.
    
    Horizontal scrolling can be enabled in 'Settings | Editor | General | Appearance'.
    Mouse shortcut can be customized in 'File | Settings | Keymap | Plugins | Fast Mouse Scrolling | Start Fast Mouse Scrolling'.
      '';
    };
  }) {};

  fast-project-open-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Fast-Project-Open-plugin";
    plugname = "Fast Project Open plugin";
    plugid = "Fast Project Open plugin";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1567/11212/Fast_Project_Open_plugin_11212.jar";
      sha256 = "0sysc8rpdjxgrqk3gv9md3d55dd5qbsg5lplcbb71v3m56dl07zg";
      name = "Fast-Project-Open-plugin-1.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1567/license.txt";
        free = false;
      };
      description = ''
        Opens project by taking path from clipboard
      '';
    };
  }) {};

  fast-scrolling = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Fast-Scrolling";
    plugname = "Fast-Scrolling";
    plugid = "de.santiv.fastscrolling";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7573/26620/FastScrolling.jar";
      sha256 = "1anafi4ljjrpvp608bydswikyg690yaf4sr7plbcsvldhqbmlyad";
      name = "Fast-Scrolling-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://santiv.de/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://santiv.de/";
        free = false;
      };
      description = ''
        Fast-Scrolling is a small plugin, that allows you to scroll up and down faster in a big file, by holding a configurable key (the default key is 
[CTRL]) and moving the mouse wheel.
 If you any problems try to change the hotkey to 
[ALT]. 
 Inspired by the scrolling behavior of Eclipse.
      '';
    };
  }) {};

  fastdebug = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FastDebug";
    plugname = "FastDebug";
    plugid = "FastDebug";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12260/61035/FastDebugPlugin.jar";
      sha256 = "0s8kjsvdbg5yy9mjn3cmsvdg8lq1fl2kc1dcfjfis5qk07rll4j0";
      name = "FastDebug-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        FastDebug for Debugger in IDEA. 
     An Extension for Debug Plugin, Some Connection will be mock when the unit test is debugging.
      '';
    };
  }) {};

  fasttransform = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FastTransform";
    plugname = "FastTransform";
    plugid = "com.yuxuan66.fastTransform";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13318/73051/ehi-fastTransform-1.0.5.zip";
      sha256 = "0vr5466a5mv8xylqkxp23x381ixky9p5bbgc033pgw501hlhbx2q";
      name = "FastTransform-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.yuxuan66.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://license.coscl.org.cn/mulanpsl";
        free = false;
      };
      description = ''
        FastTransform,Fast,Fast Transform,Transform,code generate,code tools
        Convenient and fast text conversion from one key to uppercase, lowercase, hump, underline, etc., giving you unparalleled development efficiency experience 
        issues: issues
        中文:
        从一键到大写、小写、驼峰、下划线、到英文 等方便快捷的文本转换，给您无与伦比的开发效率体验,变量命名自动推荐
        
            快捷键:
            快速转换: alt + shift + w
            智能推荐: alt + shift + e
        
        问题反馈: issues
        QQ群:875477818
        More Help Info.
        Blog 雨轩博客.
      '';
    };
  }) {};

  favorite-actions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Favorite-Actions";
    plugname = "Favorite Actions";
    plugid = "org.dandoh.favacts";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13196/72014/favorite-actions-0.0.3.zip";
      sha256 = "16wbp4srhfpbl4ajmcvj9d6lc5xi1h3bmmilprci6xn7d5lkrjc6";
      name = "Favorite-Actions-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dandoh";
      license = lib.licenses.asl20;
      description = ''
        This plugins add support for Favorite Actions.

You can add/remove actions to your project's favorite actions, and select action to run from the favorite actions list.


Pull requests and contributions are welcome.
Features:
Tool Window

    Favorite Actions

Actions

    Add Action to Favorites
    Show Favorite Actions (Ctrl-j/Cmd-j - Change if this conflicts with your keybinding)


Todo:

    Add voice control
      '';
    };
  }) {};

  favoritefolders = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FavoriteFolders";
    plugname = "FavoriteFolders";
    plugid = "FavoriteFolders";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5940/99182/favoritefolders-idea-plugin-1.3.2.zip";
      sha256 = "0wvy48vdf944jk3a77k35kcvd2g8fafxp74m5294z6223lmcirrx";
      name = "FavoriteFolders-1.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xBlackCat/favoritefolders-idea-plugin/";
      license = lib.licenses.asl20;
      description = ''
        Adds favorite folders into FileChooser dialog toolbar.
      '';
    };
  }) {};

  favoritessplitmodefalse = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FavoritesSplitModeFalse";
    plugname = "FavoritesSplitModeFalse";
    plugid = "FavoritesSplitModeFalse";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7061/11431/FavoritesSplitModeFalse.jar";
      sha256 = "17f1iz9ylvnqhirs99qkwpac9fmcc4cwkbg8jsvbrl0ijsf9x7ny";
      name = "FavoritesSplitModeFalse-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://serbis.freemagi.ga/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://serbis.freemagi.ga/";
        free = false;
      };
      description = ''
        set Favorites split mode to false
      '';
    };
  }) {};

  fcbox-lotus-swagger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fcbox-Lotus-Swagger";
    plugname = "Fcbox Lotus Swagger";
    plugid = "com.fcbox.test.lotus-swagger";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13351/72568/lotus-swagger-1.0.zip";
      sha256 = "1w87cks41kj186d3nl554vjvyyqgc39zkbkk22iv1l4nl8lijlz4";
      name = "Fcbox-Lotus-Swagger-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.fcbox.com";
      license = lib.licenses.asl20;
      description = ''
        English:
        This plugin provides the following two functions:
        
            
                Generate swagger annotations quickly.
            
            
                Synchronize interface definition to lotus test platform.
	        
        
        中文：
        本插件提供如下2种功能：
        
            
                快速生成Swagger注解：
            
            
                
                    在右键菜单中选择"Generate Swagger Annotation"，在弹出窗口中选择方法或变量，即可为它们生成Swagger的注解。
                
            
            
                将接口定义同步至清荷测试平台：
	        
            
                
                    首次使用前，请先设置登录清荷平台的用户名和密码。
                    在右键菜单中选择"Configure Lotus Settings"，在弹出窗口中填写丰巢工号和域密码并保存。
                
                
                    在右键菜单中选择"Sync Interface Def To Lotus"，在弹出窗口中输入相应内容，提交之后即可将接口定义同步至清荷平台。
      '';
    };
  }) {};

  fetranslate = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FeTranslate";
    plugname = "FeTranslate";
    plugid = "com.zhkeen.flyrise.fe.translate";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10706/52367/FeTranslate.zip";
      sha256 = "1ydzc4m5w3fbhpc5b9d4x4ynnr1vrq1b0h0r24l7ip5cxay01vbk";
      name = "FeTranslate-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/FeTranslate";
      license = lib.licenses.bsd3;
      description = ''
        This plug-in is used for multilingual translation of FE enterprise operating platform
      Note: 
      This plugin needs to connect FE database, the database configuration file location for the properties/JDBC properties, without this document, need to build this file can only be normal use  
      Usage:
      1. Select the item to be translated and press the shortcut key [CTRL + F1]. If the item to be translated is not recorded in the database, a translation result confirmation window will appear
      2. If you need to translate JS in HTML and JSP, press the shortcut key [CTRL + F2]
      3. If you want to view the translation results, you need to select the code of the translation block
      '';
    };
  }) {};

  felix-scr-annotation-processor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Felix-SCR-Annotation-Processor";
    plugname = "Felix SCR Annotation Processor";
    plugid = "net.chilicat.felixscr";
    version = "1.6.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7009/15933/felix-annotation-processor.zip";
      sha256 = "19141236fbxn8hnn9ng2wyg218imajp4gc5c6l8dfgm3w8xys5nk";
      name = "Felix-SCR-Annotation-Processor-1.6.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chilicat/felix-annotation-processor";
      license = lib.licenses.mit;
      description = ''
        A Felix SCR Annotation processor for for IntelliJ.  The plugin will add a compiler plugin to the IntelliJ build chain which will detect if a module uses Felix SCR annotations. In case the compiling module uses Felix SCR annotations it will create a service component XML and add it to the MANIFEST.MF.   The plugin also delivers also a bunch of code inspections which might be useful.  Features: 
   
   Compiler plugin to process Felix SCR Annotations. 
   Generates a service component xml in the build output. 
   Add service component xml to the manifest (overwrite/merge). 
   Click-able error messages in case SCR generator fails. 
   Basic Inspection for Felix Annotations (missing bind/unbind method). 
   Auto Refactoring - The &quot;Refactor&quot; menu offers a new Action for XML files which allows you to convert a Service Component XMl automatically into Felix SCR Annotatations 
    What is supported: The plugin currently supports only Felix Annotations 1.9.0 or greater   What is not supported The plugin doesn't support JavaDoc parsing.  If you want to provide feedback feel free to drop me a email or to post a issue on the github repository
      '';
    };
  }) {};

  fernsprecher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fernsprecher";
    plugname = "Fernsprecher";
    plugid = "ws.logv.Fernsprecher";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15633/105922/Fernsprecher-1.0.zip";
      sha256 = "17s93ja3p8sp980la58m1kygggdldarfgpnkkn3j3vpiiy6abmvi";
      name = "Fernsprecher-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://logv.ws";
      license = lib.licenses.asl20;
      description = ''
        View your IntelliJ based IDE logs directly in your browser. Useful for plugin development or language developers using MPS.
    Especially on Windows where you do no longer need to modify the startup file to get a Java console showing the logs.
      '';
    };
  }) {};

  file-expander = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "File-Expander";
    plugname = "File Expander";
    plugid = "com.github.camork.fileExpander";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11940/96072/fileExpander-1.6.zip";
      sha256 = "0cq88dgq2hqgqwwfdgzpfrqfm1a96vsx356a763nf78kqc01zi5h";
      name = "File-Expander-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/camork/file-expander-plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        File Expander
    
    This plugin can explore archive-based file in project view
    
    Browse archive-based file in Intellij project view
    
    Supported file type:
    
        zip-based type (.zip .jar .war .epc etc)
        .gz
        .tar
        .tar.gz and .tgz
        .7z
        Nested archive file
	
	
	
	
	GitHub Page
      '';
    };
  }) {};

  file-link-executor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "File-Link-Executor";
    plugname = "File Link Executor";
    plugid = "me.fornever.commandlink";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12787/89557/file-link-executor-0.1.0.zip";
      sha256 = "1sm6aq2i9c0fnh865gwx2hmfbqnypx3d4r1yn77c6851r8l1c0jr";
      name = "File-Link-Executor-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://fornever.me";
      license = lib.licenses.mit;
      description = ''
        This plugin adds an ability to execute scripts from links in the console output.
      '';
    };
  }) {};

  file-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "File-Manager";
    plugname = "File Manager";
    plugid = "com.jetbrains.intellij.file-manager";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10888/85103/file-manager-0.1.2.zip";
      sha256 = "12bm7xpnj82sgxdv8p2ibk7gydd2jaq6vi21xb5w4av68svjdadx";
      name = "File-Manager-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Provides 'File Manager' toolwindow which can be used to browse, edit, copy, move and delete files on your local file system.
      '';
    };
  }) {};

  file-name-grabber = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "File-Name-Grabber";
    plugname = "File Name Grabber";
    plugid = "File Name Grabber";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6826/10711/File_Name_Grabber_10711.jar";
      sha256 = "1m4zaaw63nykqw4f00kcrf8j0gmcxzna7m4ks9kzbp6ka3gsb4c1";
      name = "File-Name-Grabber-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mjedynak/file-name-grabber-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Copies name of the current file to clipboard
      Usage:
      
          ALT + CTRL + SHIFT + F inside a file (shortcut).
          Edit -> Copy File Name (from Edit menu).
      '';
    };
  }) {};

  file-path-autocomplete = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "File-Path-Autocomplete";
    plugname = "File Path Autocomplete";
    plugid = "com.pinkfloyded.idea-file-path-autocomplete.idea-file-path-autocomplete";
    version = "0.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11088/89385/idea-file-path-autocomplete-0.4.1.zip";
      sha256 = "0zsmwi76i091c9gzaz2k1ybbw1ndffz7xsj7yjbn6nra4d58svr7";
      name = "File-Path-Autocomplete-0.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/PinkFloyded/idea-file-path-autocomplete";
      license = lib.licenses.mit;
      description = ''
        Auto-completes file paths.
      '';
    };
  }) {};

  file-size = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "File-Size";
    plugname = "File Size";
    plugid = "File Size";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4439/7147/File_Size_7147.jar";
      sha256 = "1d26y3g8m00hl4kskl4nbvvlg3bpa16ymzc6ifv1d08iqw5las00";
      name = "File-Size-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://jsrana2.wixsite.com/jsrana";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://jsrana2.wixsite.com/jsrana";
        free = false;
      };
      description = ''
        A simple and quick way to know the file size. 
    This plugin shows the size of selected file in status bar.
    Change Log 1.1
    
    The file size is now appended with '*' when a file is modified
    Clicking on file size in status bar now shows more information about file in a dialog
    Ability to open file's folder from the dialog
    Ability to configure command to open folder
      '';
    };
  }) {};

  file-template-variables = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "File-Template-Variables";
    plugname = "File Template Variables";
    plugid = "org.jetbrains.idea.project.template.variables";
    version = "0.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7398/34209/FileTemplatesVariable.jar";
      sha256 = "00c5q7ha23dw2ml3srm43125vmq41azi14hgxp6fgcqxl32d4g7y";
      name = "File-Template-Variables-0.4.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vkravets/FileTemplatesVariable";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7398/license.txt";
        free = false;
      };
      description = ''
        This plugins allow to specify or override any variables in the File Template functionality per Project
      '';
    };
  }) {};

  file-completion-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "File-completion-plugin";
    plugname = "File completion plugin";
    plugid = "idea.plugins.thirdparty.filecompletion";
    version = "1.04";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9510/36537/ideafilecompletion.zip";
      sha256 = "1qbbj5bmkw82sj8ffakbgx6p58l335bps785y4cf3ld3m22mj067";
      name = "File-completion-plugin-1.04.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/venkato/ideafilecompletion";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/venkato/ideafilecompletion";
        free = false;
      };
      description = ''
        Features: 
 
  File name completion  
  Open file by 'Goto declaration' standard shortcut  
  Open file in external tool  
  Java and groovy support  
 
File name completion : 
 
Open file in external tool : 
 
Parent support :
      '';
    };
  }) {};

  fileassociations = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FileAssociations";
    plugname = "FileAssociations";
    plugid = "FileAssociations";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9/30/FileAssociations_30.zip";
      sha256 = "19l7nbaf1b768fizhzfx5p8h627pjbp9ln1i48yh9b5zrhhazhh8";
      name = "FileAssociations-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin support for file assotiations for IntelliJ application
      '';
    };
  }) {};

  find-pull-request = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Find-Pull-Request";
    plugname = "Find Pull Request";
    plugid = "com.github.shiraji.findpullrequest";
    version = "1.7.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8262/97218/find-pull-request-1.7.2.zip";
      sha256 = "1lr32anxmyzlg2qafp76wwpp0f0y1dbnjbkdy6ra80nqdq2bfnam";
      name = "Find-Pull-Request-1.7.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/8262?pr=";
      license = lib.licenses.asl20;
      description = ''
        This plugin has 3 features
       
         Find the pull request or the merge request of the selected line
         Copy the pull request or the merge request URL
         List the pull request or the merge request number
       
      The supported git hosting services are GitHub, GitLab, Bitbucket.

      1. Find Pull Request
      

      2. Copy Pull Request URL
      

      3. List Pull Request
      

      
      Source |
      Issues
      '';
    };
  }) {};

  find-duplicates-inspection = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Find-duplicates-inspection";
    plugname = "Find duplicates inspection";
    plugid = "com.example.intellijidea.plugins.findduplicates";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9663/90045/inspection.jar";
      sha256 = "1gns6nk2pk17mxv8nyg6n97wcfqv0cqdjmkc8yv6dpijwhxy7cq2";
      name = "Find-duplicates-inspection-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/markiewb/idea-find-duplicate-class-inspection-plugin";
      license = lib.licenses.asl20;
      description = ''
        (Experimental) Inspection, which finds a class with the same fully qualified name. The files can be diffed or deleted.
      '';
    };
  }) {};

  findviewbyme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FindViewByMe";
    plugname = "FindViewByMe";
    plugid = "com.jaeger.findviewbyme";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8261/99886/FindViewByMe.jar";
      sha256 = "10q96vfnyxp5vqrfjz4xaw14qmwkvr7yr4g51c63r6ap2114f6as";
      name = "FindViewByMe-1.4.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://laobie.github.io";
      license = lib.licenses.asl20;
      description = ''
        A plugin for android developer, with the plugin you can generate "findViewById" code quickly.
      '';
    };
  }) {};

  findviewforandroid = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FindViewForAndroid";
    plugname = "FindViewForAndroid";
    plugid = "me.majiajie.ideaplugin.findviewforandroid";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10931/105015/FindViewForAndroid-1.3.1.zip";
      sha256 = "0dp4gknzpb677m0m5lxnalv5xm93iax0wk0ym110j1hd32k4asy8";
      name = "FindViewForAndroid-1.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tyzlmjj/FindViewForAndroid";
      license = lib.licenses.asl20;
      description = ''
        Generate Android 'findViewById' and 'ViewHodler' code.Support for Java and Kotlin.
      '';
    };
  }) {};

  findviews = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FindViews";
    plugname = "FindViews";
    plugid = "com.dongqing.plugin.findviews";
    version = "4.0-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12609/73540/findviews-4.0-SNAPSHOT.jar";
      sha256 = "1a7ls9sa25s2igh5ai0pqgbhj58a2gwmah1y691s253knr5dp6mg";
      name = "FindViews-4.0-SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/a741762308/FindViews";
      license = lib.licenses.asl20;
      description = ''
        auto generate findViewById code in activity ,fragment or adapter etc,and support Kotlin or Java.
      自动生成activity、fragment、adapter等findViewById代码，支持Kotlin和Java.
      '';
    };
  }) {};

  finder-info = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Finder-Info";
    plugname = "Finder Info";
    plugid = "com.kstenschke.finderinfo";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7528/16936/finderinfo.jar";
      sha256 = "07lcgpn69216i1rzr0mgp160qq528lnyygycnnpr1sn4zl710lzr";
      name = "Finder-Info-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kstenschke/finderinfo-plugin";
      license = lib.licenses.mit;
      description = ''
        Extends the project files popup menu with an option for showing file informations in the Mac OSX finder. Having the files component focussed, the keyboard shortcut [CMD] + [I] opens the finder file informations as well. Additionally, opening the file information brings all finder windows to the front. Please note: this plugin works on Mac OSX only.
      '';
    };
  }) {};

  firebase-rules-syntax-highlighter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Firebase-Rules-Syntax-Highlighter";
    plugname = "Firebase Rules Syntax Highlighter";
    plugid = "co.anbora.labs.firebase-syntax-highlighting";
    version = "2.2.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15189/108573/firebase-syntax-highlighting-2.2.1-SNAPSHOT.zip";
      sha256 = "18pqi0zz7242c4z6a6s15slsf5rvflsyz30h00q8jnhxczr86pry";
      name = "Firebase-Rules-Syntax-Highlighter-2.2.1-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://anbora.co";
      license = lib.licenses.mit;
      description = ''
        Provides support for the Firebase rules language.

      Features:
      
          Syntax highlighting
          Syntax checking
          Code formatting
      
      Actions:
      
          Right click -&gt; New -&gt; Firestore rule file
          Right click -&gt; New -&gt; Storage rule file
      '';
    };
  }) {};

  firefox-search = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Firefox-Search";
    plugname = "Firefox Search";
    plugid = "Firefox Search";
    version = "0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1440/4110/Firefox_Search_4110.zip";
      sha256 = "0h2v1pvx82xi75hq0sdc7iy47crmwx2wla6rv2lra1lx5yrq7sid";
      name = "Firefox-Search-0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Searches for the current word or selection via Firefox search plugins. The plugin directory is user-specified,
            so it may be the live Firefox search plugins directory or a separate directory containing only relevant
            search providers.
        
        
            Additionally, the plugin is extensible via writing new search plugins. Both .xml and .src formats are
            supported.
        
        
            Certain search engines prefer to group phrases using quote marks, e.g. Google, so it's possible to define
            these.
      '';
    };
  }) {};

  fishbook = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FishBook";
    plugname = "FishBook";
    plugid = "icu.jogeen.fishbook.id";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15584/106284/FishBook.jar";
      sha256 = "0kxys9p99r415iw5j6ykv6w28qy3bvh90gri2pk3hdgchpfzdy4z";
      name = "FishBook-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jogeen/FishBook";
      license = lib.licenses.asl20;
      description = ''
        It allows you to read novels on your local hard drive and get a reading experience like a Kindle. It can remember your reading progress like a bookmark, so that you can continue to read next time, and provides page turning function.
        instructions:
        1. You need to prepare an e-book
        2. Search fishbook in setting for basic information setting
        3. You can read e-books in the side window of IDE
        touch fish
      '';
    };
  }) {};

  fishreduxtemplate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FishReduxTemplate";
    plugname = "FishReduxTemplate";
    plugid = "com.bakerj.flutter.fishreduxtemplate.id";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12139/99653/FishReduxTemplate.jar";
      sha256 = "025r3d5k1fja48zjmj6a8wq2dn591n0d7i51dd0fhpbimbqza092";
      name = "FishReduxTemplate-1.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BakerJQ/FishReduxTemplateForAS";
      license = lib.licenses.asl20;
      description = ''
        Template Code Generator for Fish Redux
      How to use:
      Select the package folder, right click -&gt; New -&gt; FishReduxTemplate
      '';
    };
  }) {};

  fitnesse = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FitNesse";
    plugname = "FitNesse";
    plugid = "FitNesse";
    version = "1.11.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7908/94791/idea-fitnesse-1.11.0.zip";
      sha256 = "1nry0cfki33213j96340rf09xagzcsg7rr0i2xljg9lv1vjkkqrr";
      name = "FitNesse-1.11.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fitnesse/idea-fitnesse";
      license = lib.licenses.asl20;
      description = ''
        Language support for ">FitNesse, the fully integrated standalone wiki and acceptance testing framework.

This plugin provides syntax highlighting, auto-completion and execution of FitNesse test suites all from within your IDE.
      '';
    };
  }) {};

  fitnesse-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Fitnesse-Integration";
    plugname = "Fitnesse Integration";
    plugid = "FitnesseInt";
    version = "0.7.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1143/5583/FitnesseInt_5583.jar";
      sha256 = "07gyfnam0dbv967vh8ic35kb0q0r0l5p82m6iz5dkrm4wqg9f1lw";
      name = "Fitnesse-Integration-0.7.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://fitnesse4idea.sourceforge.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://fitnesse4idea.sourceforge.net";
        free = false;
      };
      description = ''
        This plugin provides integration with Fitnesse
        Acceptance Testing Framework(www.fitnesse.org).
        there is a mailing list for feature requests,
        bugs, and other comments:
        http://tech.groups.yahoo.com/group/fitnesse_plugin
        Here are the features:
        
            syntax highlighting
            start/stop and configuration of fitnesse
            server
            navigation between wiki markup and fixture
            (not implemented yet)
            stubbing of tables and fixtures (not
            implemented yet)
        
        How to use:
        
            When the plugin is installed the syntax
            highlighting takes over *.txt files and
            provides fitnesse wiki highlighting.
            To disable support goto  File > Settings
            > Fitnesse
            To run fitnesse go to Run > Edit
            Configurations... > Add New Configuration, and
            select Fitnesse Server. Then you can configure
            the parameters for running fitnesse from
            within IDEA. 
        
        Known Isuues:
        
            When wanting to disable syntax highlighting
            of *.txt files it is neccessary to restart IDEA.
            I am not sure why.
            An unwanted default port of 0 is set when
            creating a new fitnesse run configuration.
            The Fitnesse Run/Debug Configuration does
            not work under linux even though the command
            works fine on the command-line.
      '';
    };
  }) {};

  fixsgc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FixSgC";
    plugname = "FixSgC";
    plugid = "com.yxf.plugin.fix.sgc";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13514/74499/FixSgC.jar";
      sha256 = "01c72lky1m9xk5fnpic45j18xl5j3kwsvcc4k3qp831z0j5wva9i";
      name = "FixSgC-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dqh147258";
      license = lib.licenses.mit;
      description = ''
        Used to fix the conflict with sou gou input method that it would change language when using "Ctrl + Alt + [*]" shortcut if "Ctrl" is set as the shortcut for changing language in sou gou input method.
      It is just available for Windows.
      '';
    };
  }) {};

  fixkture = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fixkture";
    plugname = "Fixkture";
    plugid = "io.github.pelletier197.fixkture";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15520/105076/fixkture-1.2.0.zip";
      sha256 = "0p3mn6b1hh8yv6m3nx3v637rrb39zl7vmf1m896kcdvpki7vl75y";
      name = "Fixkture-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pelletier197";
      license = lib.licenses.mit;
      description = ''
        Do you write tests (I sincerely hope you do)? Are you tired of writing test fixtures for your 30 fields DTO? Here's the solution!

    This plugin allows you to generate a fixture of any desired class, for both Kotlin and Java (even though you should consider switching to Kotlin, since is a way far superior language). Fields of this class will be given arbitrary values when being generated.
    
    Usage
    
    Anywhere in your test class, hit ctrl+shift+G. You'll be prompt to select a target class, and the fixture will be automatically resolved!
    
    Generated code
    
    This plugin supports complex data models and most common types from Java/Kotlin Standard Library
    For classes with ambiguous constructors, you'll be prompt to choose which constructor to take to instantiate the class
    For collections, it will automatically generate a collection of the right type, with one element in it
    Recursive objects are supported. The recursion will however stop at one level
    
    Contribute
    
    Feel free to create an issue on Github or even to open your own PR. I developed this project for personal usage, but i'm open to suggestions or improvement ideas.
      '';
    };
  }) {};

  flagiarism = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flagiarism";
    plugname = "Flagiarism";
    plugid = "Flagiarism";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9311/77484/Flagirism.jar";
      sha256 = "1g7b9sx6y71zxhp3ih2h7pli52cx55apzgs4ch8dab5g8vxd106m";
      name = "Flagiarism-2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        The plugin matches root package names to top-level domains
       and replaces 'package' icon with the flag or favicon.
      
      Resource bundles with names like 'name_lang.properties' are also affected.
      '';
    };
  }) {};

  flameviewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FlameViewer";
    plugname = "FlameViewer";
    plugid = "com.github.kornilovaL.flamegraphProfiler";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10305/83368/intellij-plugin-1.0.zip";
      sha256 = "0wbywxj1zv1jbsk7qh1b92p28w9b7a9dpfaspz6lyhhaysdi895h";
      name = "FlameViewer-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kornilova203/FlameViewer";
      license = lib.licenses.mit;
      description = ''
        Flamegraph Viewer
Upload file to FlameViewer

    Click Tools | Open FlameViewer...
    Upload a file of a supported profiler:
        
            jfr files generated by Flight Recorder
            Yourkit csv files. To generate csv file from a snapshot run following script: java -jar -Dexport.call.tree.cpu -Dexport.csv /lib/yjp.jar -export ~/Snapshots/.snapshot
            Files in flamegraph format
            fierix files generated by bundled Fierix profiler (IntelliJ IDEA only)
        
    


Java performance recording. Quick start
Use Flight Recorder to profile your program and then open FlameViewer:

    Run JVM with following VM options: -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:StartFlightRecording=duration=30s,filename=my_recording.jfr -XX:FlightRecorderOptions=stackdepth=256
    Open FlameViewer Tools | Open FlameViewer...
    Upload my_recording.jfr

Fierix (only IntelliJ IDEA)
Fierix is a bundled instrumentation Java profiler that allows to save parameters of method calls, specify what methods will be instrumented and view a call tree.

    To specify methods that will be recorded open Tools | Fierix | Edit Configuration...
    To run program with profiler select the desired run configuration and choose Run  with Fierix
    Also you can configure profiler to save value of method's parameters or it's return value. This should be done if you want to see how parameters influence method's performance. To enable this option check 'Save' checkbox beside type of parameter(s) when editing pattern in configuration.
    To open results click Tools | Fierix | Open Results...


Detailed description at github.com/kornilova203/FlameViewer
      '';
    };
  }) {};

  flares---kotlin-inspections = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flares---Kotlin-Inspections";
    plugname = "Flares - Kotlin Inspections";
    plugid = "com.magicbytes.flares";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11477/53605/enum-sorter-0.1.1.jar";
      sha256 = "0hpks8f36jnwl2i2ncwa2316wc9xbairpxyhadxhnzk0k2mjcvpq";
      name = "Flares---Kotlin-Inspections-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.facebook.com/magycBytes/";
      license = lib.licenses.asl20;
      description = ''
        This Plugin offers multiple inspections for Kotlin. It includes inspection as:
    Sorting Enum cases alphabetically
      '';
    };
  }) {};

  flash-wizard = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flash-Wizard";
    plugname = "Flash Wizard";
    plugid = "com.mahesh.flashwizard";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10848/47112/FlashWizard.jar";
      sha256 = "17lwbnyv94hq2mfp70zjlnzcs0pq0492x6641mfazvsaszm12m4h";
      name = "Flash-Wizard-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.mahesh.com";
      license = lib.licenses.bsd2;
      description = ''
        Android Studio Plugin for Flash Wizard.

      Copyright (c) 2018 Mahesh Technologies Corp. All rights reserved.
      
      most HTML tags may be used
      '';
    };
  }) {};

  flashlight = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flashlight";
    plugname = "Flashlight";
    plugid = "com.qbutton.Flashlight";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15717/106657/Flashlight-1.0.zip";
      sha256 = "005zsa72l1adw9d734cvhajsrar7pm3j568f00qn5cxjh1sqz6yn";
      name = "Flashlight-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/arsok/flashlight-idea-plugin/";
      license = lib.licenses.mit;
      description = ''
        Is it too dark? 
    Maybe you want to find something in your room or just lighten things up a little? 
    Now you can do it right from your favorite IDE!  
    After installation seek light in Tools menu!  
     P.S. Awesome icon was made by
    photo3idea_studio
      '';
    };
  }) {};

  flatocean = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FlatOcean";
    plugname = "FlatOcean";
    plugid = "com.your.ltc.flatocean.id";
    version = "2.9.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14914/100961/FlatOcean.jar";
      sha256 = "0skwp45r1xj2ws20z4d0wc4hfyrcrr2z10m9bb8dri9gs43y51y2";
      name = "FlatOcean-2.9.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LucasTempass/FlatOcean";
      license = lib.licenses.mit;
      description = ''
        A flat theme for JetBrains IDEs for those who can't stand being away from the ocean.
        
         &gt; Samples:

        

        

        

         &gt; Usage
        
        First install the theme via Settings | Plugins, then go to Settings | Appearance &amp; Behavior |
            Appearance and select FlatOcean. Enjoy.
      '';
    };
  }) {};

  flatbuffers-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flatbuffers-Support";
    plugname = "Flatbuffers Support";
    plugid = "io.github.stefansjs.flatbuffersplugin";
    version = "0.2+16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14326/103296/flatbuffers-plugin-0.2+16.jar";
      sha256 = "032hi3fi2f8gmxhargg14vzj36nc64sbggywkcd9r9692nfyjfgg";
      name = "Flatbuffers-Support-0.2+16.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://stefansjs.github.io/flatbuffers-intellij-plugin/";
      license = lib.licenses.asl20;
      description = ''
        Editing support for flatbuffers schema files (.fbs)
      '';
    };
  }) {};

  floobits = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Floobits";
    plugname = "Floobits";
    plugid = "com.floobits.unique.plugin.id";
    version = "1.7.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7389/98635/intellij-plugin.zip";
      sha256 = "1j0jx7651v0vsncawlvl8c9yl2qiwbz8jz4776fv1vj5zn9yg0im";
      name = "Floobits-1.7.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://floobits.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7389/license.txt";
        free = false;
      };
      description = ''
        Floobits lets you collaborate on code in real-time across multiple text editors and IDEs.
      You need a Floobits account. Create one at https://floobits.com
      Features include being able to see other people's cursor and highlights, being able to summon, and also follow edits
      automatically.
      '';
    };
  }) {};

  flow = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flow";
    plugname = "Flow";
    plugid = "com.flow.intellij";
    version = "20200213183746";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8362/78156/flow-20200213183746.zip";
      sha256 = "0466iyv5ap6x8sp39y9j4rqbjnzw8mzb4sp299vqj1irxdlf6qy8";
      name = "Flow-20200213183746.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://findtheflow.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/8362/license.txt";
        free = false;
      };
      description = ''
        Flow helps developers better understand their application by allowing them to visualize and explore what happens at runtime through an interactive web interface.

    Learn more at http://findtheflow.io
      '';
    };
  }) {};

  fluent-formatter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fluent-Formatter";
    plugname = "Fluent Formatter";
    plugid = "com.mengzz.FluentFormatter";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15631/107075/FluentFormatter-1.5.zip";
      sha256 = "03knsw1nrl53h5l4df4arc97iizg1wbqywmih9x7i22jwhrnn2zl";
      name = "Fluent-Formatter-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Mengzuozhu/FluentFormatter";
      license = lib.licenses.gpl3Only;
      description = ''
        GitHub
    Formats the selected Java code in a fluent style, and generates the chained methods for the Java builder.

    
    

    
    Features
     ● Wrap the invocation of each chained method on a separate line    
     ● Generate the all chained methods for the builder    
    

    
    Usage
    Fluent format 
    Select the code -&gt; press Alt+Enter -&gt; select Fluent format

    
    Fluent build 
    Cursor at the code of Java builder -&gt; press Alt+Enter -&gt; select Fluent build
      '';
    };
  }) {};

  fluent-setter-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Fluent-Setter-Generator";
    plugname = "Fluent Setter Generator";
    plugid = "org.twinnation.intellij-fluent-setter-generator";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12096/61782/intellij-fluent-setter-generator-1.0.3.jar";
      sha256 = "0r6ihyh94inhsi4ih3zd5bnn0fzkf6rb2jzivppf548s33f0mqd6";
      name = "Fluent-Setter-Generator-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/TwinProduction/intellij-fluent-setter-generator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.wtfpl.net/";
        free = false;
      };
      description = ''
        Plugin that allows you to generate fluent setters starting with "with..." directly in the target class.
            Heavily inspired by Michael Bareja's Fluent setter generator
      '';
    };
  }) {};

  fluent-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fluent-Tool";
    plugname = "Fluent Tool";
    plugid = "github.mengzz.intellij-fluent-tool";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15784/108546/intellij-fluent-tool-1.3.zip";
      sha256 = "042hlxwkmk0r1yw1rbnfqizp173mfcks72bddir98y518shjnp3q";
      name = "Fluent-Tool-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Mengzuozhu/intellij-fluent-tool";
      license = lib.licenses.gpl3Only;
      description = ''
        GitHub
    The Java Fluent Tool can help you generate and format the fluent style Java code.

    
    

    
    Features
     ● Format the Java code in fluent style   
     ● Generate the fluent called methods   
     ● Generate the fluent setter for Java class    
     ● Generate the fluent static constructor for Java class    
     ● Generate the fluent method template for Java class    
    

    
    Usage
    Fluent format 
    Select the code -&gt; press Alt+Enter -&gt; select Fluent format

    
    Fluent call 
    Cursor at the end of Java method call -&gt; press Alt+Enter -&gt; select Fluent call

    
    Fluent Setter 
    Open the file of Java class -&gt; press Alt+Insert -&gt; select Fluent Setter

    
    Fluent Static Constructor 
    Open the file of Java class -&gt; press Alt+Insert -&gt; select Fluent Static Constructor

    
    Fluent Method 
    Open the file of Java class -&gt; press Alt+Insert -&gt; select Fluent Method
      '';
    };
  }) {};

  fluffy-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Fluffy-Progress-Bar";
    plugname = "Fluffy Progress Bar";
    plugid = "FluffyProgressBar";
    version = "0.666";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15514/104706/FluffyProgressBar.jar";
      sha256 = "0zsd9yi67a14j737b5gypds6hj40vma8b6l6lf9nxq4z0j4d9j7q";
      name = "Fluffy-Progress-Bar-0.666.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/khipis/FluffyProgressBar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        Beautiful progress bar with awsome character from your favorite movie.
      Plugin makes your time, wasted on project sync wait or indexing more fun
      and hypnotized by the virtual world you ever dreamt of!
      '';
    };
  }) {};

  fluter-storm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fluter-Storm";
    plugname = "Fluter Storm";
    plugid = "com.github.beansoftapp.flutter.storm";
    version = "2020.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14718/101768/flutter-storm.zip";
      sha256 = "0fx5wq2f65sd0sw4fqz6c2xhp8mbsyi21pmvijxs2v62jxinc9vi";
      name = "Fluter-Storm-2020.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/beansoftapp/flutter-storm-support/issues";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Fluter Storm (former Flutter Storm)
Unofficial WebStorm/PhpStorm/GoLand/PyCharm/CLion/RubyMine plugin for developing Flutter applications.
AppCoder and Rider currently only supports open Flutter project folder.
Flutter and the related logo are trademarks of Google LLC. We are not endorsed by or affiliated with Google LLC.
Based on Official Flutter IDEA plugin with bugs fix and support for *Storm IDE
and IDEA CE/Ultimate(Android Studio not fully supported). Provides extra features such as tool window, color editor, image previewer etc.

    Features
    
      Allow manually refresh Flutter device list (after switch Flutter channel or switch SDK path)
      Support view or switch flutter channels, enable web or desktop features, recreate project files, build web or desktop release application
      Flutter official IDE features like code edit, refactor, run, debug, hot reload, hot restart; Flutter performance, outline inspector
      Create New Flutter project on *Storm IDE
      Fix UI freeze when creating New Flutter project on *Storm IDE and IDEA/Ultimate
      Visual color editor for Colors.xxx, Color.fromARGB and Color.fromRGBO
      Single click in pubspec.yaml and Dart source code to open dependency package's source file or view homepage in web browser
      Preview Image.asset('images/ble.png') icon as editor line marker and click to open
      Auto complete of font name and image path when edit Dart string
      Autocomplete Pub Packages in pubspec.yaml
      Highlight and Update Pub Packages in pubspec.yaml
      View Pub Package's Documentation in pubspec.yam,  press Ctrl+Q to show additional information
      Preview project images as an icon in your project explorer, supports png, svg, jpg, etc
      Debug Android devices over wifi with just one click
      Display colorful terminal output
      Start Xcode, Android Studio on Mac with one click
      list and run android emulator(avd)
      list all iOS simulator, start device and run as target
      take screenshot
      Flutter Pub Get
      Flutter Pub Upgrade
      Flutter Pub Outdated
      Flutter Logs
      Flutter test
      flutter upgrade
      fultter build ios and android
      fultter clean
      Reveal project folder in Finder/Explorer
      Generate Widgets: When creating a new file, choose the "New Flutter Widget" option.
      Generate Blocs: When creating a new file, choose the "New Flutter Bloc" option.
    

Installation

    First, please setup your Flutter dev env:
    
       https://flutter.dev/docs/get-started/install,
    Then install this plugin to your IDE, then you will find a Flutter Storm toolbar. Follow the guide to install the Dart plugin to
    adds Dart and enables Flutter specific functionality.


      WANING: Please uninstall Official Flutter plugin before installing this plugin, there might be conflicts.
        Or uninstall Fluter Storm before you installing the Official Flutter plugin to ensure stability.
        [❌] If you found Android Studio 4.1 can't start up issue, please delete Fluter Storm plugin locally:
        Mac:
        open “~/Library/Application Support/Google/AndroidStudio4.1/plugins” 
        Windows:
        C:\Users\UserName\AppData\Roaming\Google\AndroidStudio4.1\plugins
        Remove the plugin folder flutter-storm, then start Android Studio again.
      

Screenshots:
      '';
    };
  }) {};

  flutility = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flutility";
    plugname = "Flutility";
    plugid = "com.neebal.flutility";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13023/105720/flutility-plugin.zip";
      sha256 = "140qdckyxvyxv03dl7ky7j6qw6h9fcszn9vvyxhkaphr7yhk6n2w";
      name = "Flutility-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.neebal.com";
      license = lib.licenses.asl20;
      description = ''
        Simple yet useful utility tools for Flutter developers | Auto generator for index.dart with all the exports defined
    
    🧙 Right click on module package to see Flutility generating your index files
      '';
    };
  }) {};

  flutter-app-template-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flutter-App-Template-Generator";
    plugname = "Flutter App Template Generator";
    plugid = "com.github.hayoi.haystack";
    version = "1.3.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12313/64148/haystack.zip";
      sha256 = "058ykdsarxyfkdvavzw6ak54wgnavwbml4nz21ivjyc53aixfwfd";
      name = "Flutter-App-Template-Generator-1.3.01.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hayoi/haystack";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=pmgwnfsnzljh3lbr4rlj6erc7choxl2w";
        free = false;
      };
      description = ''
        A plugin help to generate Flutter project template with your model entities.
    
    Insert some Widget templates in your source file.
    Using Redux to manage state and update UI.
    json to dart entities class, support int, bool, String, double, Datetime.
    generate restful api base on your json entities.
    generate database module.
    generate some pages with BottomNavigatorBar, Draw, AppBar TopTabBar, ListView(bind model entry from restful api or Database), Login, if you want.
    generate CustomScrollView pages with FixedExtentLit, Grid, BoxAdapter as you wish
    
    
    
    
    
    
    
    
    
    
    Usage:
    
    Install the plugin, Create a Flutter project with AS/IDEA.
    Right click the lib folder, select New --&gt; Generate App Template.
    First, click "Init Project" button to init.
    Second, configure your page info: page name, model json and so on. click the "OK" to generate code.
    New feature: Flutter UI. usage: right click in the editor, select Flutter UI and select the widget you want to add
    
    Edit template file for your project:
    The ftl files is locate in the path:
    Your PC home path/.haystack_template_cache/
      '';
    };
  }) {};

  flutter-assets-ref-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flutter-Assets-Ref-Generator";
    plugname = "Flutter Assets Ref Generator";
    plugid = "com.shenyong.flutter.refgenerator";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13629/85634/AssetsRefGenerator_v1.0.1.jar";
      sha256 = "124vdaki81251957mm2f2mnabb6h92ch3ly67mb0z5h96hnpp8fx";
      name = "Flutter-Assets-Ref-Generator-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ChinaStyle812/AssetsRefGenerator";
      license = lib.licenses.mit;
      description = ''
        Makes it easier to use assets in Flutter project. Just like using R.drawable.xxx in Android!
  

  
  
    
      GitHub |
      中文文档
    
  

  Features
  
    Update assets declaration in pubspec.yaml automatically.
    generate a res.dart file contained assets definition.
  

  Getting started
  
    Open your Flutter project.
    Create assets directory named asset,assets or images, and put your asset files in the directory.
    Click the action button  in the Toolbar.
    Now you'll see the pubspec.yaml file has been updated and a res.dart file also has been created under lib.
      '';
    };
  }) {};

  flutter-build-runner-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flutter-Build-Runner-Helper";
    plugname = "Flutter Build Runner Helper";
    plugid = "cn.neday.excavator";
    version = "1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14442/95430/build-runner-helper_1.9.jar";
      sha256 = "1d7f6bfyqmkw7qfgg8fyzyj3lwldf81yyi802xvgbx7k0sy6062f";
      name = "Flutter-Build-Runner-Helper-1.9.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.neday.cn";
      license = lib.licenses.asl20;
      description = ''
        A plugin for Android Studio that speeds up your day to day flutter development.
      Flutter Build Runner Helper, to make it easier to execute build_runner commands.
      Adds the following build_runner commands to Android Studio:
        
            Build : flutter packages pub run build_runner build
            Rebuild : flutter packages pub run build_runner build --delete-conflicting-outputs
            Watch : flutter packages pub run build_runner watch
            Clean : flutter packages pub run build_runner clean
        
            Kill Gradle : Kill Gradle if a current task is running
            Kill Flutter : Kill Flutter if a current task is running
        
        
        There are two basic ways to invoke a command:
        
            Click the action button in the Toolbar.
            Use the shortcut key.
      '';
    };
  }) {};

  flutter-enhancement-suite = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flutter-Enhancement-Suite";
    plugname = "Flutter Enhancement Suite";
    plugid = "de.mariushoefler.flutter_enhancement_suite";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12693/84148/Flutter_Enhancement_Suite-1.3.3.zip";
      sha256 = "00a6bvac7vd4h1mqmwr8rz3ga7bxg3lmnjd8qswcrmf7hbqwknks";
      name = "Flutter-Enhancement-Suite-1.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/marius-h/flutter_enhancement_suite";
      license = lib.licenses.gpl3Only;
      description = ''
        The essential plugin for making working with Flutter easier than ever!
        
        Tools for managing your pubspec.yaml, snippets &amp; more


        Features

        Autocomplete Pub Packages
        When adding a new package to your pubspec.yaml file, suggestions will show up. After auto-completing the name, the latest version will be added automatically.
        
            
        


        Update Pub Packages
        If there's a new version available for a package, it will be highlighted. You can update these packages by opening the quick fix menu (Show Intention Actions) and choosing "Update
            package".
        
            
        


        View Pub Package's Documentation
        When auto-completing packages or viewing packages inside your pubspec.yaml, press Ctrl+Q to show additional information for the package such as its documentation or a link
            which leads to examples showing how to use the plugin. In order to get a larger dialog for reading the documentation, click the settings icon in the documentation dialog and select the
            option "Open as tool window".
        
            
        


        Dart &amp; Flutter Code Snippets
        A bunch of snippets/LiveTemplates for quicker coding. Use Ctrl+Q when hovering over a snippet to get a preview of it.
        
            Dart snippets (Show snippets)
            Flutter snippets (Show snippets)
            Flutter Hooks snippets (Show snippets)
        
        


        Generate Widgets
        When creating a new file, choose the "New Flutter Widget" option.
            Enter the name for your widget and select its type.
        
            
        


        Generate Blocs
        When creating a new file, choose the "New Flutter Bloc" option.
        Enter a name for your bloc and it will automatically generate all required classes for you.
        Please note: This requires you to add the package "bloc" to your pub dependencies.
        


        Edit Linting Rules
        When viewing the "analysis_options.yaml" file,
            select the "Linter Rules Editor" tab at the bottom to see all linting options available.
        
        
            
        


        Icon Previews
        Preview icons from different icon packs in the sidebar.
            Please note: This requires you to add the package "flutter_vector_icons" to your pub dependencies. The only compatible iconpacks for now are FontAwesome, Ionicons
            and MaterialCommunityIcons.
      '';
    };
  }) {};

  flutter-generator-snippets = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flutter-Generator-Snippets";
    plugname = "Flutter Generator Snippets";
    plugid = "io.github.tbm98.flutter_generator_snippets";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15774/107937/flutter_generator_snippets-1.1.jar";
      sha256 = "10rs7bnkrrkxwa8i5fdhmjhvxp1mr8k4yqbmydq3nmhsl1grhgyj";
      name = "Flutter-Generator-Snippets-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://tbm98.github.io";
      license = lib.licenses.bsd3;
      description = ''
        This plugin help you to write generator's template quickly
      '';
    };
  }) {};

  flutter-intl = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flutter-Intl";
    plugname = "Flutter Intl";
    plugid = "com.localizely.flutter-intl";
    version = "1.12.0-2019.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13666/100003/Flutter_Intl-1.12.0-2019.2.zip";
      sha256 = "1chmhbj7jb4z0f63d7s5bv1rrjmm1pfx53x6mskvfax4ig0l5p45";
      name = "Flutter-Intl-1.12.0-2019.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://localizely.com";
      license = lib.licenses.bsd3;
      description = ''
        This i18n plugin creates a binding between your translations from .arb files and your Flutter app. It generates boilerplate code for official Dart Intl library and adds auto-complete for keys in Dart code.
    This plugin is also available for Visual Studio Code: Flutter Intl for VS Code
    CLI tool intl_utils can be used for manual invocation or in CI/CD systems.
    Star us on GitHub, and follow us on Twitter
      '';
    };
  }) {};

  flutter-plugins = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flutter-Plugins";
    plugname = "Flutter Plugins";
    plugid = "com.mobiledi.flutter_plugins";
    version = "1.9.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13459/88575/TryingToBuild__1_.zip";
      sha256 = "1l32m42vjwq0d64l18aypkhssmll7s7xybran2w238y4b6wqiabx";
      name = "Flutter-Plugins-1.9.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/mobiledi/flutter-plugin/src/master/";
      license = lib.licenses.asl20;
      description = ''
        Plugin help to add and generate common Flutter plugins and utility classes directly from the IDE. Also, generate common screen templates
    
    Add plugins directly.
    Create common screens like login, sign-up, profile etc.
    Plugin setup readme files added.
    
    Usage:
    
    Install the plugin, Create a Flutter project with AS/IDEA.
    Right-click the lib folder, New --&gt; Add --&gt; Add Plugin (For adding flutter plugins).
    Select the required plugins and click copy to clipboard and paste in pubspec.yaml file and then click Ok to generate utility files.
    Right-click the lib folder, New --&gt; Add --&gt; Add Screen Template (Select the widget you want to add).
      '';
    };
  }) {};

  flutter-pub-version-checker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flutter-Pub-Version-Checker";
    plugname = "Flutter Pub Version Checker";
    plugid = "pl.pszklarska.pubversionchecker";
    version = "1.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12400/96823/FlutterPubVersionChecker-1.2.5.zip";
      sha256 = "09y9x1ndayn5hn0gfmrlj5rp07s7l45zk4abxm67dlx53dsx0dvk";
      name = "Flutter-Pub-Version-Checker-1.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/pszklarska/FlutterPubVersionChecker";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Plugin for checking the latest Pub packages versions.
    It will automatically run inspection in your pubspec.yaml file to check all dependencies and compare versions
    with the latest versions from Pub package repository.
      '';
    };
  }) {};

  flutter-riverpod-snippets = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flutter-Riverpod-Snippets";
    plugname = "Flutter Riverpod Snippets";
    plugid = "org.tbm98.flutter-riverpod-snippets";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14641/107936/flutter-riverpod-snippets-1.4.jar";
      sha256 = "1dl4yz8lidd208n038xxhkyikzmn4nc7ffipszdp3bh2gswn0z3r";
      name = "Flutter-Riverpod-Snippets-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://tbm98.github.io";
      license = lib.licenses.bsd3;
      description = ''
        The snippets makes using flutter riverpod more simple.
    It support auto generate some snippets while developers coding in Flutter project and them use Flutter riverpod package.
      '';
    };
  }) {};

  flutter-snippets = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Flutter-Snippets";
    plugname = "Flutter Snippets";
    plugid = "com.herbert.george.flutter-snippets";
    version = "1.2.0-stable-1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12348/104876/flutter-snippets-1.2.0-stable-1.zip";
      sha256 = "1fgxpjj3hky3f149kkf4rv12mwlzd4ni4bvxlc15f6zv9szj5722";
      name = "Flutter-Snippets-1.2.0-stable-1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/georgeherby/flutter-snippets";
      license = lib.licenses.gpl3Only;
      description = ''
        For full details of the available snippet, please visit here
      '';
    };
  }) {};

  flutter-lime = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flutter-lime";
    plugname = "Flutter lime";
    plugid = "com.gionchat";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15071/99173/Flutter_Lime.jar";
      sha256 = "0vnylcyqp9vxaypi6iga0zh7d93sgy11i1vp9qhcck16qyb7b8wh";
      name = "Flutter-lime-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/15071-flutter-lime/versions/stable/99162";
      license = lib.licenses.asl20;
      description = ''
        Flutter plugin for Intellij IDEA and Android Studio，help you add Live Templates to your IDE saving time writing the boilerplate in Flutter.
        
Provides live templates for Flutter to save time writing boilerplate.
The following commands are supported:

  
    Shortcut
    Description
  
  
    alertDialog
    Creates a showDialog that returns with AlertDialog
  
    
    animBldr
    Creates an AnimationBuilder
  
    
    aspectRatio
    Creates an AspectRatio
  
      
    column
    Creates a Column Widget
  
      
    container
    Creates a Container Widget
  
  
    customClipper
    Creates a CustomClipper
  
  
    customPainter
    Creates a CustomPainter
  
    
    customScrollV
    Creates a CustomScrollView
  
  
    futureBldr
    Creates a FutureBuilder
  
    
    layoutBldr
    Creates a LayoutBuilder
  
  
    listViewBldr
    Creates a ListView.builder()
  
    
    importMat
    Adds Material Import
  
    
    importCup
    Adds Cupertino Import
  
  
    orientatBldr
    Creates a ListView.builder()
  
      
    row
    Creates a Row Widget
  
    
    scfAll
    Creates a Scaffold containing an Appbar, BottomNavigationBar and FloatingActionButton
  
      
    scfAppBar
    Creates a Scaffold containing an Appbar
  
   
    scfAppBarFab
    Creates a Scaffold containing an Appbar and Floating Action Button
  
  
    scfAppBarBtmNav
    Creates a Scaffold containing an Appbar and Bottom Navigation Bar
  
    
    singleChildScrollV
    Creates a SingleChildScrollView
  
  
    streamBldr
    Creates a StreamBuilder
  
    
    stfulBldr
    Creates a StatefulBuilder
  
      
    text
    Creates a Text Widget
      '';
    };
  }) {};

  flutterassetautocompletion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FlutterAssetAutoCompletion";
    plugname = "FlutterAssetAutoCompletion";
    plugid = "com.ixigua.flutter_asset_iteral";
    version = "1.7.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13971/101241/flutter_asset_iteral-1.7.3.zip";
      sha256 = "1qhpmfzx6pd3ms24llj729c65imksbgwjrmik01q0k3y588zg9f5";
      name = "FlutterAssetAutoCompletion-1.7.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.ixigua.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        Automatically help you complete the path of assets when you type a Dart string

Register assets to pubspec with one click!

Support preview of multiple image formats such as png, svg, jpg, gif and more
Support for assets declared in pubspec.yaml

  normal assets like:


    assets:
      - path/to/assets_directory
      - path/to/image.png


  assets in "lib" directory like:


    assets:
      - image.png


  assets declared in pubspec.yaml of other packages


  assets in lib/ of other packages and declared in pubspec.yaml of current package like:


    assets:
      - packages/fancy_images_lib/image.png

Support for fonts

  fonts declared in pubspec.yaml of other packages


  normal fonts declared in pubspec.yaml like:


    fonts:
      - family: Andale Mono
        fonts:
          - asset: fonts/Andale Mono.ttf


  iOS pre-installed fonts

IOS_9_FONT_LIST:
          "PingFang HK",
          "PingFang SC",
          "PingFang TC",
          "Kohinoor Bangla",
          "Hiragino Sans",

IOS_8_FONT_LIST:
          "Academy Engraved LET",
          "Al Nile",
          "American Typewriter",
          "Apple Color Emoji",
          "Apple SD Gothic Neo",
          "Arial",
          "Arial Hebrew",
          "Arial Rounded MT Bold",
          "Avenir",
          "Avenir Next",
          "Avenir Next Condensed",
          "Bangla Sangam MN",
          "Baskerville",
          "Bodoni Ornaments",
          "Bradley Hand",
          "Chalkboard SE",
          "Chalkduster",
          "Cochin",
          "Copperplate",
          "Courier",
          "Courier New",
          "DB LCD Temp",
          "DIN Alternate",
          "DIN Condensed",
          "Damascus",
          "Devanagari Sangam MN",
          "Didot",
          "Diwan Mishafi",
          "Euphemia UCAS",
          "Farah",
          "Futura",
          "Geeza Pro",
          "Georgia",
          "Gill Sans",
          "Gujarati Sangam MN",
          "Gurmukhi MN",
          "Heiti SC",
          "Heiti TC",
          "Helvetica",
          "Helvetica Neue",
          "Hiragino Kaku Gothic ProN",
          "Hiragino Mincho ProN",
          "Hoefler Text",
          "Iowan Old Style",
          "Kailasa",
          "Kannada Sangam MN",
          "KhmerSangamMN",
          "KohinoorDevanagari",
          "Kohinor Telugu",
          "LaoSangamMN",
          "Malayalam Sangam MN",
          "Marion",
          "Marker Felt",
          "Menlo",
          "Noteworthy",
          "Optima",
          "Oriya Sangam MN",
          "Palatino",
          "Papyrus",
          "Party LET",
          "San Francisco",
          "Savoye Let",
          "Sinhala Sangam MN",
          "Snell Roundhand",
          "Superclarendon",
          "Symbol",
          "Tamil Sangam MN",
          "Telugu Sangam MN",
          "Thonburi",
          "Times New Roman",
          "Trebuchet MS",
          "Verdana",
          "Zapf Dingbats",
          "Zapfino",


  Android pre-installed fonts

          "sans-serif",
          "sans-serif-light",
          "sans-serif-thin",
          "sans-serif-condensed",
          "serif",
          "Droid Sans",

Submit Issues
      '';
    };
  }) {};

  flutterassetsgenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FlutterAssetsGenerator";
    plugname = "FlutterAssetsGenerator";
    plugid = "com.crzsc.FlutterAssetsGenerator";
    version = "1.0.0-203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15427/107151/Flutter_assets_generator-1.0.0-203.jar";
      sha256 = "1rki5i0663y87i26hx91cx3nihw48znhbcch4ibmnxv1cxg9rg5c";
      name = "FlutterAssetsGenerator-1.0.0-203.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cr1992/FlutterAssetsGenerator";
      license = lib.licenses.mit;
      description = ''
        FlutterAssetsGenerator
It's a plug-in that generates an asset index which we can easily find.It can be used on Android Studio or Idea.
Installing
Drag it to your IDE to install.
How to use

define your assets dir in pubspec.yaml.


Build -&gt; Generate Assets class
Alt/Opt + G





It will generate assets.dart on lib/generated.

Simply use it like: 
Image.asset(
          Assets.imageLoading,
          width: 24,
          height: 24,
          fit: BoxFit.contain,
        )

Plugin will observe your changes on assets path and update file.
Settings

You can customize generated fils's path, split it with "/".
      '';
    };
  }) {};

  flutterjsonbeanfactory = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FlutterJsonBeanFactory";
    plugname = "FlutterJsonBeanFactory";
    plugid = "com.ruiyu.ruiyu";
    version = "3.7.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11415/106184/Flutter_i18n-3.7.6.zip";
      sha256 = "0pv8s37bkildx1zy67pciizlx3kcgl09mff2p8vg0lb0ill9fcnx";
      name = "FlutterJsonBeanFactory-3.7.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zhangruiyu/FlutterJsonBeanFactory";
      license = lib.licenses.asl20;
      description = ''
        Json to dart beans are provided, and dart files ending in entity are provided to generate dart bean factory for use.
     right click on package -&gt; `New`-&gt;`Dart bean clas file from JSON`　And Then you will know how to use
     If you change the fields in the class, just press the shortcut alt + j to regenerate the tojson and fromjson methods. The generated method regenerates all helper classes and JsonConvert classes (the same as the shortcut alt + j) each time an entity file is created in the generated/json directory.
     If you need generic conversions in your network requests, use the jsonconvert.fromjsonast method directly.
     If no helper files are generated, you can delete the .idea directory and restart your idea
     you must add intl: any to pubspec.yaml.
      '';
    };
  }) {};

  flutterjsonhelper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FlutterJsonHelper";
    plugname = "FlutterJsonHelper";
    plugid = "com.lyle.plugin.flutter";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11614/59378/plugin_flutter_json.jar";
      sha256 = "145z8a2skx1qlk47pv852qrsxfxx00jw5s0f4x3c94k0i0g8smf6";
      name = "FlutterJsonHelper-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xlyasdasd/FlutterJsonHelper";
      license = lib.licenses.asl20;
      description = ''
        plugin to transform json to flutter / dart file.
      操作演示：
      '';
    };
  }) {};

  flyway-migration-creation = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Flyway-Migration-Creation";
    plugname = "Flyway Migration Creation";
    plugid = "com.alexanderpa.flyway.migration.creator";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8597/95937/FlywayMigrationCreationPlugin.jar";
      sha256 = "0yf1sm5spsnk2wzbm8xrci1yjsfsjjq4bs90wi0yiklp862gyj5d";
      name = "Flyway-Migration-Creation-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This plugin adds new menu item to easily create new flyway migrations.
      '';
    };
  }) {};

  focus-on-active-task = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Focus-on-Active-Task";
    plugname = "Focus on Active Task";
    plugid = "org.jeto.taskfocus";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9824/84706/TaskFocus-1.0.jar";
      sha256 = "1axxlb90qrgibppn8n2s8nxxnwxb10i8wjszcz0ndqgpcbh3wd4i";
      name = "Focus-on-Active-Task-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://pleesher.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=bzpuzjaioam0fdx9rq7ihwilgzywymlo";
        free = false;
      };
      description = ''
        Focuses the project tree view on the active task, only displaying relevant files/paths.
      '';
    };
  }) {};

  focustask = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FocusTask";
    plugname = "FocusTask";
    plugid = "FocusTask";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6833/10718/FocusTask_10718.jar";
      sha256 = "185l0bjsh7g81izx2270vnx9b36ilz7f1fwif5jnvihjfr3gxyas";
      name = "FocusTask-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Allows the user to run a script when IntelliJ loses focus, like synchronizing files in tomcat etc
        etc.
      '';
    };
  }) {};

  fold-call-blocks = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fold-Call-Blocks";
    plugname = "Fold Call Blocks";
    plugid = "jones.foldcallblocks.fold-call-blocks";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13225/93310/fold-call-blocks-0.0.5.zip";
      sha256 = "0lrmqkhra54675mzq6f5z8padqk91hycv18qq5hzzb5w5cwfcyr7";
      name = "Fold-Call-Blocks-0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/g-rath/fold-call-blocks-plugin";
      license = lib.licenses.mit;
      description = ''
        This plugin lets you fold custom call blocks, computing the folding placeholder
    based off the first argument of said call blocks.

    This is particularly useful for tests, as it lets you fold test functions
    using their titles as the placeholder text.
    
    Icons made by Vaadin from www.flaticon.com is licensed by CC 3.0 BY
      '';
    };
  }) {};

  foldingplus = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FoldingPlus";
    plugname = "FoldingPlus";
    plugid = "com.github.ArtsiomCh.CommentFolder";
    version = "0.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12007/89368/CommentFolder.jar";
      sha256 = "1giyj1mpb5bxdbpd5f45jk19xk53zpi2nj8hh8mm23fn4cjgi6sr";
      name = "FoldingPlus-0.1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/ArtsiomCh/CommentFolder";
      license = lib.licenses.asl20;
      description = ''
        Enable folding everywhere (fix IDEA-212623) for multi-line comments block (fix IDEA-106702) :

/* multi
   line
   comments
   block
*/ 
      Enable folding for multi-line array initializer block:

    int[] array = {
            0,
            1,
            2,
            3};
 
      Enable folding for multi-line String:

    String str =
            "multi"
            + "line "
            + "String";
 
      Enable folding for multi-line arguments list (functions, etc.):

    Collections.addAll(
        collection,
        "contains",
        ...
        "version_compare");
      '';
    };
  }) {};

  footprint = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FootPrint";
    plugname = "FootPrint";
    plugid = "com.footprint.footprint-plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12051/59301/footprint-plugin-1.0.zip";
      sha256 = "0vchhz091z712p5bs8bd4n6dsscdmmmyf76m6wr3zn90hri03wz7";
      name = "FootPrint-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cnhguy/FootPrint";
      license = lib.licenses.mit;
      description = ''
        FootPrint is a simple variable history viewer that integrates with the IntelliJ debugger.
      '';
    };
  }) {};

  forfaster = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ForFaster";
    plugname = "ForFaster";
    plugid = "XianYu Co,.Ltd";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10829/58607/ForFaster.jar";
      sha256 = "1xa5dlvxhs9vnbiqg5i5vnhxnpj9p5iw9jnidazi69a9a7zgcd8y";
      name = "ForFaster-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/codingbooo/ForFaster";
      license = lib.licenses.asl20;
      description = ''
        for faster.
      ---by codingbo
      '';
    };
  }) {};

  force-shortcuts = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Force-Shortcuts";
    plugname = "Force Shortcuts";
    plugid = "Force Shortcuts";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8357/37064/force-shortcuts.jar";
      sha256 = "0f3cll3ciimkj6vi7idpz658p3x5mqbrlzr5nspf5kama0190h28";
      name = "Force-Shortcuts-0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/treytrahin/force-shortcuts-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        Forces the user to use keyboard shortcuts by blocking click action and displaying the keyboard shortcut in a popup. Can be toggled on/off from the "Tools" drop down in the menu bar
      '';
    };
  }) {};

  forest-night = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Forest-Night";
    plugname = "Forest Night";
    plugid = "com.github.jef.forest-night";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14491/98141/forest-night-1.2.0.zip";
      sha256 = "07z5mlgzlhxva1vszhwfnc7x4lkd2afxvwvnlzhygpxb0fnc8vzb";
      name = "Forest-Night-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jef.codes";
      license = lib.licenses.mit;
      description = ''
        Forest Night - JetBrains Theme 
 
Forest Night theme for JetBrains.

Install
Open Settings -&gt; Plugins, switch to the Marketplace tab and search for Forest Night.
Acknowledgments

  Thanks to @sainnhe for giving us a great theme: Forest Night
  Thanks to Mark Skelton for giving such a great example of what theme build system could look like: One Dark Theme
      '';
    };
  }) {};

  forge-gradoservice-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Forge-GradoService-Plugin";
    plugname = "Forge GradoService Plugin";
    plugid = "com.gradoservice.plugin.forge";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10450/52525/Forge_GradoService_Plugin-1.4.zip";
      sha256 = "12nzxa4npahfnwhpnzqrvn20gm3qcgbqy6xpc68npv4i4i9rxz79";
      name = "Forge-GradoService-Plugin-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gradoservice.ru/policies/privacy?lang=en";
        free = false;
      };
      description = ''
        Forge GradoService Plugin
         Plugin for working with Forge
         How to start using?
      '';
    };
  }) {};

  formatfieldpyramid = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FormatFieldPyramid";
    plugname = "FormatFieldPyramid";
    plugid = "site.wangxing.plugin.format.field.pyramid";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13274/72079/my-plugin.jar";
      sha256 = "0ssspdsp754ir625gzs2sfrvpsj0flbf30556waynh444gr9w8ax";
      name = "FormatFieldPyramid-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkwx/intellj-format-fields-plugin";
      license = lib.licenses.asl20;
      description = ''
        这个插件可以将Java文件的全局字段排序，按代码的长度由短到长排序。
           不选中内容，默认格式化整个文件，这时idea会自动根据属性的修饰符分组。选中内容，只会格式化选中内容，而且完全按长度排序，不分组，建议选中内容格式化。
           This plug-in can sort the global fields of Java files, from short to long, according to the length of the code
           Unselected, the entire file is formatted by default, and idea is automatically grouped by the modifier of the property, which unfortunately cannot be changed at this time. 
        Selected content, will only format selected content, and completely sorted by length, no grouping, it is recommended that selected content format. 
        
        你可以在code菜单里找到它，或者使用快捷键shift alt j,但是可能会有快捷键冲突
        You can find it in the code menu Or use shortcuts shift alt j.But there may be a shortcut conflict 

        

        格式化例子见下,For example:

        
        int i;
         @Resource
        Service service;
         boolean bool;
        

        After handle:

        
        int i;
         boolean bool;
        @Resource
        Service service;
      '';
    };
  }) {};

  formatincrementer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FormatIncrementer";
    plugname = "FormatIncrementer";
    plugid = "redEyeGuy.rsunder10.plugin";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10355/42213/incrementor.zip";
      sha256 = "14cd429gdkvhbzpq34izvgzsvgbyn5qvzfn12kapdhv2f0hr64hc";
      name = "FormatIncrementer-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.rsunder10.com";
      license = lib.licenses.mit;
      description = ''
        Have you ever stuck in a situation where you wanted to insert the incremented number on every caret in the editor, If so then you are in luck!, Have fun. -by rsunder10(RedEyeGuy)
      '';
    };
  }) {};

  fortify-on-demand = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fortify-On-Demand";
    plugname = "Fortify On Demand";
    plugid = "fortify.fod";
    version = "19.3.2005";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9943/66998/FoD_IntelliJ_Plugin_19.3.zip";
      sha256 = "0ggzqih8nl9lh4hsrv6qlj3bb5axkwawrq0v0v8v8byah085xhp3";
      name = "Fortify-On-Demand-19.3.2005.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://software.microfocus.com/about/software-licensing";
        free = false;
      };
      description = ''
        Fortify on Demand is a Software as a Service (SaaS) solution that enables your organization to
      build and expand a Software Security Assurance program quickly, easily, and affordably.
      An application submitted to Fortify on Demand undergoes a security assessment where it is
      analyzed for a variety of software security vulnerabilities. With this IntelliJ extension,
      you can upload your code to Fortify on Demand for static assessment.
      
      To reach Fortify product support, go to the Micro Focus Software Support website at 
      https://softwaresupport.softwaregrp.com/. 
      
      (c) Copyright 2017-2019 Micro Focus or one of its affiliates. 
      
      The information contained herein is subject to change without notice.
      The only warranties for Micro Focus or one of its affiliates products and services are set forth in the express warranty statements accompanying such products and services.
      Nothing herein should be construed as constituting an additional warranty.
      Micro Focus or one of its affiliates shall not be liable for technical or editorial errors or omissions contained herein.
      '';
    };
  }) {};

  fragment-kewinstance-inspection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Fragment-kewInstance-Inspection";
    plugname = "Fragment kewInstance Inspection";
    plugid = "com.github.shiraji.kewinstanceinspection";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8430/27692/Fragmet_kewInstance_Inspection-1.1.0.zip";
      sha256 = "12yzan5wsrgnnracs5pz4dy5kjwcagkwakkkfhg7i3747lsm9mwq";
      name = "Fragment-kewInstance-Inspection-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = lib.licenses.asl20;
      description = ''
        This plugin add a custom inspection that checks Fragment implements a companion object method of creating its instance. If the class is abstract, it won't warn to implement newInstance method.
      '';
    };
  }) {};

  fragment-newinstance-inspection = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Fragment-newInstance-Inspection";
    plugname = "Fragment newInstance Inspection";
    plugid = "com.github.shiraji.newinstanceinspection";
    version = "0.1.0";
    src = fetchurl {
      url = "https://github.com/shiraji/new-instance-inspection/releases/download/v0.1.0/new-instance-inspection.jar";
      sha256 = "0pc6kf5g8w6gh19ia7d89025kil6nbj8kqcs2ag9mj7w8wg3jq2v";
      name = "Fragment-newInstance-Inspection-0.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = lib.licenses.asl20;
      description = ''
        This plugin add a custom inspection that checks Fragment implements a static method of creating its instance. If the class is abstract, it won't warn to implement newInstance method.
      '';
    };
  }) {};

  frame-switcher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Frame-Switcher";
    plugname = "Frame Switcher";
    plugid = "FrameSwitcher";
    version = "3.24.6-193";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7138/99192/FrameSwitcher.zip";
      sha256 = "0ld9n90zfa3sr5mdrwyablkm8lhc9rd1r6dcj50npzakxmr5i059";
      name = "Frame-Switcher-3.24.6-193.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/FrameSwitcher";
      license = lib.licenses.asl20;
      description = ''
        Plugin for more convenient switching between projects/frames/windows than is alt-tab or Window menu.
  	
  		
  			Switch or reopen a project - ALT + F2 (repeat for selecting a next item)
			
				Shift+Enter - reopen a project in the current window.
				Ctrl+Enter - reopen a project in a new window.
				Delete - closes project or removes a recent project from the history.
			
		
  		
  			Close projects - CTRL + ALT + F2
		
  	
  	Or set your own shortcut in Settings | Keymap.
    
  	See File | Settings | Other Settings | FrameSwitcher for options like using mnemonics instead of speed search, max recent projects size and other...
  	You can also include the whole workspace in the settings, so that all projects gets added to the list.
	

      (Big thanks to Eugene Mustaphin for contributions.)
      '';
    };
  }) {};

  franky = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Franky";
    plugname = "Franky";
    plugid = "me.serce.franky";
    version = "0.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8619/28587/Franky-0.1.6.zip";
      sha256 = "1kzb4ax7waplm1w9rcp0qs9kpr0kr8qbnq29644avxwz4flchip7";
      name = "Franky-0.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://serce.me";
      license = lib.licenses.asl20;
      description = ''
        Franky - a simple profiler that always speaks frankly. 
 Goal of this project is creating a profiler which 
 
 Is truthful, because it is built on the top of private JVM API (AsyncGetCallTrace) 
 Can attach to any JVM on the fly 
 Easy to understand because UI is based on famous flame graphs 
 Have a rich integration with IDE with navigation and inspections showing you how to improve your code based on profiling results (actually, Franky is a plugin for IntelliJ IDEA)
      '';
    };
  }) {};

  freasy-monad-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Freasy-Monad-Plugin";
    plugname = "Freasy Monad Plugin";
    plugid = "com.thangiee.freasy-monad";
    version = "0.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8604/30193/freasy-monad-plugin-0.5.1.zip";
      sha256 = "11y6nrp8wm539g3560w05880scwh4yh71kdza26yhagms2397a9c";
      name = "Freasy-Monad-Plugin-0.5.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Thangiee/Freasy-Monad";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Thangiee/Freasy-Monad";
        free = false;
      };
      description = ''
        Enable proper Intellij highlighting for Freasy-Monad macros.
      '';
    };
  }) {};

  free-mybatis-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Free-MyBatis-plugin";
    plugname = "Free MyBatis plugin";
    plugid = "cn.wuzhizhan.plugin.mybatis";
    version = "2018.05.17";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8321/45956/free-idea-mybatis-2018.05.17.zip";
      sha256 = "01vp5apjjfqmsijkgmdfk30jrkflzb4rr3xinni2jkickcfsca4v";
      name = "Free-MyBatis-plugin-2018.05.17.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/wuzhizhan";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitee.com/wuzhizhan/free-idea-mybatis/raw/master/license";
        free = false;
      };
      description = ''
        Free Mybatis plugin 
          A idea plugin for mybatis 
          free-idea-mybatis is an enchange plugin for idea to supoort mybatis,here is the main functions:
        
        generate mapper xml files
        navigate from the code to mapper and from the mapper back to code
        auto code and error tips
        support mybatis generator gui
        generate swagger model annotation
        

        free-idea-mybatis是一款增强idea对mybatis支持的插件，主要功能如下：
        
        生成mapper xml文件
        快速从代码跳转到mapper及从mapper返回代码
        mybatis自动补全及语法错误提示
        集成mybatis generator gui界面
        根据数据库注解，生成swagger model注解
      '';
    };
  }) {};

  free-navigation-bookmarks = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Free-navigation-bookmarks";
    plugname = "Free navigation bookmarks";
    plugid = "today.mingyue.fnb";
    version = "1.0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14323/87351/mingyue-fnb.jar";
      sha256 = "1ahczh0zadvm72q22s3nway8pxq755pjd3kzw14gz77q2dh55x9x";
      name = "Free-navigation-bookmarks-1.0.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://mingyue.today";
      license = lib.licenses.asl20;
      description = ''
        Free navigation bookmarks - 自由导航标签
      add bookmark by shortcut key (control alt d) - 添加 通过组合快捷键 (control alt d)
      add bookmark by shortcut key (shift alt d) - 添加(带行号) 通过组合快捷键 (control alt d)
      next bookmark by shortcut key (shift alt w) - 下一个 通过组合快捷键 (shift alt w)
      prev bookmark by shortcut key (shift alt q) - 上一个 通过组合快捷键 (shift alt q)
      Hold Shift and drag all 按住Shift拖动全部
      Close. Alt-Click to Close Others  按住Alt点击，关闭其它所有 ; Shift-Click to Close All  按住Shift点击，关闭所有
       Email:lzwaq@hotmail.com
       Weixin:13681733001
      '';
    };
  }) {};

  freebuilder-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "FreeBuilder-Plugin";
    plugname = "FreeBuilder Plugin";
    plugid = "in.sdqali.intellij.freebuilder-plugin";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10705/45577/intellij-freebuilder-plugin-1.0.0.zip";
      sha256 = "006flpp9dfw2sw7gs6vd6m58cvscp5ldhha1f9sha2y567g23g6m";
      name = "FreeBuilder-Plugin-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sdqali.in/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://sdqali.in/";
        free = false;
      };
      description = ''
        This plugin allows users to apply FreeBuilder annotations and Builder classes on Java classes.
      '';
    };
  }) {};

  fridaymario = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FridayMario";
    plugname = "FridayMario";
    plugid = "FridayMario";
    version = "0.1.5-easter-beta";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7599/26421/friday-mario.jar";
      sha256 = "1m1q0p6q5wdb4vp2c957f2j33kn1qasifsl6shgjzwb83ip3kafy";
      name = "FridayMario-0.1.5-easter-beta.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/friday-mario";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/dkandalov/friday-mario";
        free = false;
      };
      description = ''
        The first plugin in the world to gamify development in IntelliJ IDEs.
 Basically, it plays sounds from Mario video game on various actions.
 See 
youtube video.

 To start/stop use "Main menu -&gt; Tools -&gt; Start/Stop Friday Mario".
      '';
    };
  }) {};

  frozen-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Frozen-Idea";
    plugname = "Frozen Idea";
    plugid = "FrozenIdea";
    version = "0.0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6749/94034/frozen-idea-0.0.4.0.zip";
      sha256 = "042m09yb0gw57npyldl93si1bx2z2b8hn0hx2313gzgs2y8p0ihv";
      name = "Frozen-Idea-0.0.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://code.google.com/p/ice-framework-idea-plugin/";
      license = lib.licenses.asl20;
      description = ''
        ZeroC ICE framework support - code generator and navigation
      '';
    };
  }) {};

  full-line-code-completion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Full-Line-Code-Completion";
    plugname = "Full Line Code Completion";
    plugid = "org.jetbrains.completion.full.line";
    version = "0.2.10-202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14823/108590/full-line-0.2.10-202.zip";
      sha256 = "0wl2bak77wi11b6qc1rrnijgy7clnbyqfc3yddiz7fsy78f23c08";
      name = "Full-Line-Code-Completion-0.2.10-202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        A prototype for showing full line code completion variants in IntelliJ
      '';
    };
  }) {};

  func-comment = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Func-Comment";
    plugname = "Func Comment";
    plugid = "com.kiexujiaqi.func-comment";
    version = "1.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11925/97242/func-comment-1.1-SNAPSHOT.zip";
      sha256 = "0yqi0ir9vid9jfamcl84ff83aqj0nd8hrnnwx0x67d2d3aw3zmwa";
      name = "Func-Comment-1.1-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kiexu/func-comment";
      license = lib.licenses.mit;
      description = ''
        A plugin to help add comment above function definition in GoLand.
      '';
    };
  }) {};

  fundtool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FundTool";
    plugname = "FundTool";
    plugid = "com.fundtool.plugin.id";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15028/96832/fundtool-plugin.jar";
      sha256 = "1i5majmyihlp1gqhj1as0r96gpjd61mrc8jr1jw55fx9w1gn74d6";
      name = "FundTool-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.fundtool.com";
      license = lib.licenses.asl20;
      description = ''
        fund tool简介
     This is a plug-in that can view fund income, data comes from net of eastmoney
     这是一个基金动态查询查询，数据来源于天天基金网。
      '';
    };
  }) {};

  fyhelper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "FyHelper";
    plugname = "FyHelper";
    plugid = "com.foryou.plugin.mvvm";
    version = "0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13292/74526/FyHelper_0.4.0.jar";
      sha256 = "1jhjvgcrcl7b6vi1vqbn8m3xkv6fpgbiywnksr6jqfdpd7zymwcw";
      name = "FyHelper-0.4.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.fuyoukache.com/android-component-tools/FYHelper";
      license = lib.licenses.asl20;
      description = ''
        Plugin for generate fy mvvm code template.
      '';
    };
  }) {};

  gdg-cross-talk-show = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GDG-Cross-Talk-Show";
    plugname = "GDG Cross Talk Show";
    plugid = "com.zl.gdg.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15360/107207/GDG-Plugin.zip";
      sha256 = "0fxjyggknbzrgp6w98rs1sh5wmz7ws9zbasj5in4ymmc0wd11dvd";
      name = "GDG-Cross-Talk-Show-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://wishes-blog.cn/archives/idea%E7%9B%B8%E5%A3%B0%E6%8F%92%E4%BB%B6#%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E5%8F%8A%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE";
      license = lib.licenses.asl20;
      description = ''
        Free Guo Degang Crosstalk plugin
        Tired at work? it’s better to take a break and listen to a cross talk~
        How to use:
        
            Configure audio cache file download path: " Setting - Other Settings - GDG Setting"
            Double click the list to play
            You can search by custom artist name.  
            Enter keywords and click the 'Go' button to search.
            [bug: Can't play some artist's audio,this problem will be resolve by next version.]
            
            You can adjust the playback progress
        

        enjoy it! :)
        
        
        郭德纲相声插件
        代码写累了吗？不如摸一会儿鱼，听段儿相声吧~~~
        使用喜马拉雅的API，插件会先从目标网址获取音频，因为源格式为M4A，因此在下载完成后还会自动进行转码，待转码成MP3后才会进行播放。初次下载请耐心等待！
        
             可在：" Setting - Other Settings - GDG Setting"  配置音频缓存文件下载路径 
              双击列表进行播放 
              可以按艺术家(自定义关键字)搜索曲目功能  
        输入艺术家名字后，点击"Go"按钮进行搜索。[部分搜索结果播放可能会有问题导致播放不出来。预计下个版本解决]
              拖动进度条调整进度
      '';
    };
  }) {};

  gdscript = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GDScript";
    plugname = "GDScript";
    plugid = "gdscript";
    version = "0.30.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13107/101383/intellij-gdscript.zip";
      sha256 = "014f46srxd9bdx4kyhfh1p4y2r2wwsxzdr9d5sim1ssqlb8lnxjp";
      name = "GDScript-0.30.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/exigow/intellij-gdscript";
      license = lib.licenses.mit;
      description = ''
        Adds support for Godot Engine and GDScript language.
		Features:
		
			Syntax highlighting
			Code completion
			res:// completion
			Syntax-aware code selection
			Run scene
			LSP support (experimental)
      '';
    };
  }) {};

  gfi-fablab-header = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GFI-Fablab-header";
    plugname = "GFI Fablab header";
    plugid = "fr.ythollet.header";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12774/66005/GFI_Fablab_header.jar";
      sha256 = "0cn2g675mp4fvpx9v2z5z6yzxddx4671bz24kj5xxx8pwcd4r63m";
      name = "GFI-Fablab-header-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gfi.world";
      license = lib.licenses.asl20;
      description = ''
        Add GFI Fablab header on your files (alt + h).
      Update the header (alt + s).
      
      You must create an environment variable MAIL=[user@mail] and restart.
      '';
    };
  }) {};

  gideabrowser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GIdeaBrowser";
    plugname = "GIdeaBrowser";
    plugid = "com.gafner.giv";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14458/105549/GIdeaBrowser-1.0.6.zip";
      sha256 = "083wjvxsqd6qz4wmlf7n2rv0ih08vwjb3x2kx5z40vnf672zr38k";
      name = "GIdeaBrowser-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Jonatha1983/GIdeaBrowser";
      license = lib.licenses.mit;
      description = ''
        Embedded Web Browser in a ToolWindow. 
Watch YouTube coding session directly in the IDE.

The goal of this project is to add more browser capability inside the IDE.
      '';
    };
  }) {};

  glsl-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GLSL-Support";
    plugname = "GLSL Support";
    plugid = "GLSL";
    version = "1.19";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6993/70936/GLSL4Idea.jar";
      sha256 = "1xgf3kmrgwrgndpfbws1iixdwl8gkmqaranx28ab4iks5fjjadsd";
      name = "GLSL-Support-1.19.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Darkyenus/glsl4idea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/licenses/lgpl.html";
        free = false;
      };
      description = ''
        Support for GLSL - the OpenGL Shading Language
      '';
    };
  }) {};

  gmusic = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GMusic";
    plugname = "GMusic";
    plugid = "net.accelf.intellij.gmusic";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14996/104915/gmusic-0.2.1.zip";
      sha256 = "1flvik6nlz6x4acbzqwnka6nh6a30n53vfcbr200fskw0n3kcs04";
      name = "GMusic-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Connects IntelliJ to Google Play Music Desktop Player

Features
See the title of currently playing songSupports WSL environment
      '';
    };
  }) {};

  gn = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GN";
    plugname = "GN";
    plugid = "com.google.idea.gn";
    version = "0.1.2-14-gd3f428c";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14705/104606/gn-0.1.2-14-gd3f428c.zip";
      sha256 = "034vii625bgj6ra8j2dhfb2zxspwyk0i3wiznkyf4ghj3jqvczx6";
      name = "GN-0.1.2-14-gd3f428c.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/google/intellij-gn-plugin";
      license = lib.licenses.bsd3;
      description = ''
        GN Plugin for IntelliJ.
     Features 
    
      Basic syntax highlighting
      Very basic target parsing
      Click-through navigation for resolved label references
      Very basic formatting
    
    Note that this is a GN language plugin, it helps you author and edit .gn
    files; it does not support importing a project model from a GN-based
    project.
      '';
    };
  }) {};

  gnome-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GNOME-Keymap";
    plugname = "GNOME Keymap";
    plugid = "com.intellij.plugins.gnomekeymap";
    version = "201.6251.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13090/80584/GNOMEKeymap.zip";
      sha256 = "0v2iqdpzsb5bc5h9angv25rgwll4fs92cs28kw3q8swrkpfkb688";
      name = "GNOME-Keymap-201.6251.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        GNOME keymap for all IntelliJ-based IDEs.
    Use this plugin if GNOME keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  gnu-gettext-files-support--po = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GNU-GetText-files-support-.po";
    plugname = "GNU GetText files support (*.po)";
    plugid = "org.jetbrains.plugins.localization";
    version = "134.SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7123/14699/localization.jar";
      sha256 = "0rf5wgasw04b4k00xh3mvh6n80nac5785ssq3bqv3yhbqds1p18q";
      name = "GNU-GetText-files-support-.po-134.SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        This plugin enables support for GNU GetText files (*.po)
      '';
    };
  }) {};

  grouter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GRouter";
    plugname = "GRouter";
    plugid = "com.grouter.idea.plugin";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12941/87686/GRouter_IDEA_Plugin.jar";
      sha256 = "0ag0x07wk971hfljn8zlqql0vb57zha24nc2qaq9ha8qrbwinj3h";
      name = "GRouter-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/taoweiji";
      license = lib.licenses.asl20;
      description = ''
        用于Android GRouter组件化框架，快捷跳转到对于的实现类的插件，更多资料参考 https://github.com/taoweiji/grouter-android
      '';
    };
  }) {};

  gui-popup--inspect = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GUI-Popup--Inspect";
    plugname = "GUI Popup & Inspect";
    plugid = "org.exbin.utils.guipopup";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12762/84763/guipopup-intellij-plugin-0.1.1.jar";
      sha256 = "0ykzjr32jq96zk2kg19pnd0782jdrr9kzvf8rm3hy6kfv20drrl2";
      name = "GUI-Popup--Inspect-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hajdam/guipopup-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Registers popup menu and inspect function for all regular components in IDE.

Use right click or Shift-F10 to show typical popup menu on various input boxes
Use Alt + Shift + Ctrl/Mac + F12 to show component inspector dialog


Preview


License
Apache License, Version 2.0

Links
Sources: https://github.com/hajdam/guipopup-intellij-plugin
      '';
    };
  }) {};

  gw-encoder-decoder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GW-Encoder-Decoder";
    plugname = "GW Encoder-Decoder";
    plugid = "com.guidewire.encoder";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11300/52069/encoder-1.0.5.jar";
      sha256 = "058x63njn11xvy363gpvppscaasp7mcr79mzp217l8hd89wmhx58";
      name = "GW-Encoder-Decoder-1.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.guidewire.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/mabaurre/gw-encoder-decoder-plugin/blob/335c7ed8fb60a05fa1ebaa3abab1ed52688e863e/eula";
        free = false;
      };
      description = ''
        This plugin allows you to easily encrypt/decrypt using AES, encode/decode Base64 and encode MD5.
      '';
    };
  }) {};

  gwt-platform-gwtp-intellij-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GWT-Platform-GWTP-IntelliJ-IDEA-Plugin";
    plugname = "GWT-Platform (GWTP) IntelliJ IDEA Plugin";
    plugid = "com.arcbees.plugin.idea";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7318/21348/gwtp-idea-1.2.1-bin.zip";
      sha256 = "1vpk7fvaw5ixxljfa2xhx8a24lgs1phk960230m0x31q5a48a7h9";
      name = "GWT-Platform-GWTP-IntelliJ-IDEA-Plugin-1.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.arcbees.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The GWTP IDEA plugin provides tools for GWT-Platform framework in IntelliJ IDEA.
      '';
    };
  }) {};

  gantt = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gantt";
    plugname = "Gantt";
    plugid = "Gantt";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/247/1154/Gantt_1154.jar";
      sha256 = "0ghxkfvl2gnfs6ygp5yp6wqmnw2nj312nkc7i59abz9nmz9dnsab";
      name = "Gantt-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Gantt Task Management.
        
        Simple tool to organize tasks in a PERT diagram. The tasks are visualized in a Gantt chart.
      '';
    };
  }) {};

  gapstyle-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GapStyle-Color-Scheme";
    plugname = "GapStyle Color Scheme";
    plugid = "color.scheme.GapStyle";
    version = "3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10559/106803/GapStyle3.1.jar";
      sha256 = "1xc69m01wshz6h5iqi38r7h0vs6vilx9brpjqvfxf3xq2mxqvp4s";
      name = "GapStyle-Color-Scheme-3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gaplo917/GapStyle";
      license = lib.licenses.mit;
      description = ''
        GapStyle is a productivity-oriented color scheme with a list of supported languages.
    GapStyle is designed base on key theme color of 'Darcula' and 'Monokai'.
    Each supported language is tailor made and carefully tuned with rationale.
    
    Objective 1: Optimize languages' color schemes to boost productivity on reading/writing code (Especially the language your are not familiar)
    Objective 2: Quickly learn similar syntax with a universal designed color across different languages. 
    Supported Languages: Kotlin, Java, Swift, Dart, Scala, Javascript, Go, Python, Android Logcat, Android Native (C / C++), Objective-C, SQL, HTML, CSS, PHP
      '';
    };
  }) {};

  geek-and-poke = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Geek-And-Poke";
    plugname = "Geek And Poke";
    plugid = "com.abelsky.idea.geekandpoke";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7088/11757/geek-and-poke.jar";
      sha256 = "0sb3dxjnxhl5kd2yy3gfnk5x2ig2xa7cscppnrdcqwkjzl2xbpd7";
      name = "Geek-And-Poke-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andy722/idea-comics";
      license = lib.licenses.asl20;
      description = ''
        Displays comic strips from the famous Geek And Poke, http://geekandpoke.typepad.com
      '';
    };
  }) {};

  genallsetter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GenAllSetter";
    plugname = "GenAllSetter";
    plugid = "com.mars.genAllSetter.genAllSetter";
    version = "2.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13688/106216/genallsetter2kt-2.0.3.zip";
      sha256 = "0dwhdxlzrlk3lnab9422z0l4mg09fypnz0skbgjws2rrw6hyj3cb";
      name = "GenAllSetter-2.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        GenAllSetter
Github | Issue

这是一个快速调用Java对象的所有Set方法的插件，它可以让你告别手动挨个调用赋值语句的痛苦，避免遗落并可以减少工作量。注意，该插件仅适用于Android Studio 和 Intellij IDEA。

使用

热键

你只需要记住Generate的热键即可，在mac上为⌘ + N， 在Windows上为Alt + Insert

演示

Generate All Setter

如果只是想调用Java对象的所有Set方法，你可以这样做，在new对象的语句上唤出Generate菜单，选择 Generate All Setter。



Generate All Setter With Default Value

Generate All Setter 不会帮你填写内容，如果你想自动填写默认值，你可以选择Generate All Setter With Default Value.



Generate All Setter And Getter

插件还提供了从当前方法内部搜寻可以生成Get方法的参数或者是本地变量。勾选后，插件会在参数或本地变量中寻找同名同类型的成员变量并自动填充get方法，达到类似于BeanUtils的效果。这对于对象转换来说很有用





Generate All Builder

除了set方法以外，插件还添加了对常见的Lombok @Builder 链式赋值的支持，你仅仅需要在Object.builder()上唤起Generate菜单，选择你想要的功能即可。



如果你觉得这个插件不错的话？

请在 Github 上给我个小星星分享给别人，让更多人知道这个插件。
      '';
    };
  }) {};

  genprotobuf = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GenProtobuf";
    plugname = "GenProtobuf";
    plugid = "com.protobuf.free.gen.plugin.GenProtobuf";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11423/85146/genProtobuf.zip";
      sha256 = "1bh4xdxkhrpjcq13jlf1bx3kgx4gbmmif0nbpfg84rq17xrfp397";
      name = "GenProtobuf-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.bsd3;
      description = ''
        generate code from .proto files (they must have a .proto extension).

      GenProtobuf adds two right click menu entries "quick gen protobuf here" and "quick gen protobuf rules" to the project
      area and "Configure GenProtobuf" and "Generate all Protobufs" to the tools menu.

      quick gen protobuf here will quickly generate code for selected protobuf files in a single selected langauge
      as configured under "Configure GenProtobuf" in the tools menu placing the output in the same directory as the
      selected protobuf files.

      quick gen protobuf rules will generate code for selected protobuf files according to the rules set with
      "Configure GenProtobuf" in the tools menu and place the output in the configured output location.

      Finally you can use Generate all Protobufs under the tools menu
      and it will apply the rules set in Configure Genprotobuf (again under the tools menu,) to all the protobuf files
      it finds in your project.

      As stated in the descriptions above you can configure this plugin from the Configure GenProtobuf menu that gets
      added to the tools menu. You are able to set what programming language to use for the quick gen options and
      toggle different languages to be generated for protobuf files as well as different directories for the various
      language outputs.

      Whenever you generate code from a .proto file a tool window is created to display the resulting textual output.
      '';
    };
  }) {};

  generatable = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generatable";
    plugname = "Generatable";
    plugid = "ru.korgov.intellij.Generatable";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7733/19236/Generatable.jar";
      sha256 = "1kir66s9n7jpq5h9p69s387vspb99likqv5n5ziylbjsmpw9sjfb";
      name = "Generatable-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/korgov/Generatable";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/korgov/Generatable";
        free = false;
      };
      description = ''
        Plugin added some actions to Generate menu: 
 
 Generate inner Builder class 
 Generate All: getters, equals and hashCode, toString, Constructor, Builder 
 See also: 
 
  FuGen - You can create custom generate-actions by templates on the fly!
      '';
    };
  }) {};

  generate-android-resource = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-Android-Resource";
    plugname = "Generate Android Resource";
    plugid = "com.eddyyuan.plugin.android.AndroidResourceGenerated";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8429/34308/AndroidResourceGeneratedPlugin.jar";
      sha256 = "0brv8n6swbmqi2aji1m30p0zzpsv8fr29inzclkvgp85gb46vlqz";
      name = "Generate-Android-Resource-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Androidyuan/AndroidResourceGeneratedPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Androidyuan/AndroidResourceGeneratedPlugin";
        free = false;
      };
      description = ''
        A quick way to help you extract an existing Java or XML string/demin/color etc to a resource.
 
 You just write like "@string/example/exmpleVaule" in Java or Layout , the words will be replaced by "xxx.getResource().getString(R.string.example)" in Java or "@string/example" in Layout and "&lt;string name="example"&gt;exampleValue&lt;/string&gt;" will be generated in strings.xml.
      '';
    };
  }) {};

  generate-document = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-Document";
    plugname = "Generate Document";
    plugid = "Generate Document";
    version = "2.4-IC";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13086/82918/generate-document.jar";
      sha256 = "1hyanbv9la0ja1qa04s3n7bmfq55199i34g2mjw5h353p67z76kh";
      name = "Generate-Document-2.4-IC.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yzhengfei/generate-document";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/yzhengfei/generate-document/blob/master/Generate%20Document%20EULA";
        free = false;
      };
      description = ''
        API development tool, automatically generate interface documents
    
    GitHub |
    Issues |
    Demo
    
    
        
            English
            
                Java code comments automatically converts user-defined template documents
                
                  Features
                  
                    Support for generating spring rest documents
                    Support for user-defined document template settings
                    User-defined methods/field filtering
                    User-defined annotation extraction method description or field description
                    Support multiple Java files to generate documents
                  
                
            
        
        
            Chinese
            
                Java文档生成工具，无代码入侵，支持REST、Dubbo等接口定义，用户可以自定义文档模板，支持数据库ER图
                
                  功能
                  
                    自动生成Spring REST、Dubbo等接口文档(默认自带Confluence、Markdown模板)
                    文档模板用户自定义设置
                    支持方法、字段过滤，自动忽略过滤方法、字段的解析
                    支持嵌套泛型解析
                    支持自定义注解提取注释、字段名、默认值等
                    支持多文件生成文档
      '';
    };
  }) {};

  generate-findviewbyid = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-FindViewById";
    plugname = "Generate FindViewById";
    plugid = "com.dengzii.plugin.findview";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13081/105187/FindViewGenerator.jar";
      sha256 = "0jyysjccbb6n07d8h8i74y3fpyk8s9mn6jznnrnzvj63r8x6dmcw";
      name = "Generate-FindViewById-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dengzii/FindViewGenerator";
      license = lib.licenses.mit;
      description = ''
        Generate findViewById code automatic in android, support Java and Kotlin
      '';
    };
  }) {};

  generate-kotlin-data-classes-from-json = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Generate-Kotlin-data-classes-from-JSON";
    plugname = "Generate Kotlin data classes from JSON";
    plugid = "com.mighty16.json.kotlin.class";
    version = "0.9.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10054/108097/JSONToKotlinClass.zip";
      sha256 = "1vzcazcqwzv9djw0wb2ddgac5728499qpm011b55h1dalncprnyi";
      name = "Generate-Kotlin-data-classes-from-JSON-0.9.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Mighty16/JSONToKotlinClass";
      license = lib.licenses.mit;
      description = ''
        Plugin generates Kotlin data classes from JSON text.
        It can find inner classes in nested JSON. You can disable undesirable fields in class,
        change field name, set it's type to optional, specify default value and add annotations for popular json
        libraries.

        Features:

        • json highlight and validation
        • nested json parsing
        • var/val support
        • default value support
        • generation to single file
        • annotations for Gson, Moshi, Jackson

        If you like this plugin please rate it or give it a star on
        GitHub page
        
        If you have any questions or suggestions let me know
        mighty16.developer@gmail.com
      '';
    };
  }) {};

  generate-module-from-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-Module-From-Template";
    plugname = "Generate Module From Template";
    plugid = "com.dengzii.plugin.template";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13586/104443/GenerateModuleFromTemplate.jar";
      sha256 = "19i8wc7a8v551vswv00a8k8f484rli7i311b3l1zgjdzznli820d";
      name = "Generate-Module-From-Template-1.5.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dengzii";
      license = lib.licenses.mit;
      description = ''
        Create a directory structure from a highly customizable template

Using this plugin, help you create directories and files from the customizable template

Feature
1. Custom directory structure.
2. Support placeholders, and replace it when you create a module.
3. Specify file templates from IDE custom/build-in templates.
4. Passing placeholders to file template as variables.
5. Output/import template file. share your template with your partner.

Usage
1. Configure template in plugin settings: File &gt; Settings &gt; Tools &gt; Module Template Settings.
2. Create directories from the 'Structure' tab, click the right mouse button to operate the file tree.
3. FileTree can use placeholders, the placeholder should like this -&gt; ''${YOUR_PLACEHOLDER_HERE}.
4. The 'File Template' tab lists which template the specified file uses, you can also use placeholders for FileName field.
5. The 'Placeholder' tab's table defines placeholders for replacing filenames and file templates
More information: README

NOTE
- The existing files will be skipped. 
- The Java class file name may depends on ClassName, you better keep the class name and file name consistent, else the file name in the template will not effective.
- The placeholders are best not the same as the built-in property of `Apache Velocity`.
- The dot(.) in the directory name will split and expand as several directories.

Contribute
GitHub
Any question please create issue

Screenshot
      '';
    };
  }) {};

  generate-tests = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-Tests";
    plugname = "Generate Tests";
    plugid = "GenerateTests";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8326/25681/GenerateTestsPlugin.jar";
      sha256 = "1zgzzrsxkpkk64zj9wfmdd364fyf5whm1clrrry3y5lsdzfbbgva";
      name = "Generate-Tests-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jetbrains.com";
        free = false;
      };
      description = ''
        Helper plugin for working with generated tests.
 Needs a run configuration named "Generate Tests" which updates source files with generated tests.
 The plugin adds a toolbar button to run this run configuration (also available with Control-Shift-G) and when the tests are generated it analyzes changes made to the source files and detects tests that have been added. It shows a popup with suggestion to run them.
 Currently only JUnit tests are supported.
      '';
    };
  }) {};

  generate-compareto = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-compareTo";
    plugname = "Generate compareTo";
    plugid = "com.equocredite.generateCompareTo";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15306/101627/generateCompareTo.jar";
      sha256 = "02063h8bihv3iqcasg97fv0v0pvc2cjbazjf6y45yxjzfchkhm7g";
      name = "Generate-compareTo-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/equocredite/generateCompareTo";
      license = lib.licenses.asl20;
      description = ''
        Generates a compareTo() method for the class

      When inside a class, select the new action Generate -&gt; compareTo() to generate a "lexicographic" comparison function based on non-static fields of the class.
      In the following dialog, you can customize the behavior:
      
       Select the fields to use. 
       For each of them, in which order - ascending or descending. 
       Specify nullability for each field of a non-primitive type.
        
         The default is deduced from the presence or absence of @NotNull/@NonNull annotations from any package. 
         You can also specify whether null should me considered the minimum or the maximum value of that type. 
        
      
       Use getter, if there is one, instead of referencing the field directly.
      '';
    };
  }) {};

  generate-header-file-from-opencl--cl-files = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-header-file-from-OpenCL-.CL-files";
    plugname = "Generate header file from OpenCL *.CL file's";
    plugid = "ua.zt.mezon.android.opencl.OpenCLCLGenerator";
    version = "0.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14192/84670/OpenCL_CL_Generator.jar";
      sha256 = "1xnh2v1y3hb96nhsc6n5im1gccxgc0nd9m7h5ljdaym2cw9ax0ax";
      name = "Generate-header-file-from-OpenCL-.CL-files-0.01.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/NickZt";
      license = lib.licenses.mit;
      description = ''
        The plugin will generate * .h with prepared variables for the openCL wrappers function from * .CL files into each const char ** into one single header file.
     based on work  noritsuna@siprop.org" from http://www.siprop.org
      '';
    };
  }) {};

  generate-struct-tags-for-golang-1_2_8 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-struct-tags-for-golang-1_2_8";
    plugname = "Generate struct tags for golang";
    plugid = "com.planetexpress.go_struct_tag_generator";
    version = "1.2.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11556/58065/plugin_without_graddle_1_8.jar";
      sha256 = "1rx4swgwcq7ny050w4gz8vj5ay15yh5nglpbbvi4k92mndml08yq";
      name = "Generate-struct-tags-for-golang-1_2_8-1.2.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Feature:
       Edit struct tags for golang.
       Include:
            
                standard json tags 
                standard bson tags 
                standard both tags 
                camel json tags 
                camel bson tags 
                camel both tags 
                remove tags 
            

        Only need to click the menu once, instead of use autocomplete many times to write every tag.
        
        Usage:
        Select the codes need to convert(need to include the whole struct type, only select the fields won't work)
        Then click the Tags menu (the last one in the main menu).
      '';
    };
  }) {};

  generate-struct-tags-for-golang-20_04_29 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate-struct-tags-for-golang-20_04_29";
    plugname = "Generate struct tags for golang";
    plugid = "net.sutanto.go_field_tag";
    version = "20.04.29";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14222/85121/go-field-tag.jar";
      sha256 = "08bhvd2w355x1vjlqq15bdjc1vxmw96q4rh6kk8g5z32jiklxzys";
      name = "Generate-struct-tags-for-golang-20_04_29-20.04.29.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/sutanto1010";
      license = lib.licenses.asl20;
      description = ''
        Feature:
       Edit struct tags for golang.
       Include:
            
                standard json tags 
                standard bson tags 
                standard both tags 
                camel json tags 
                camel bson tags 
                camel both tags 
                Generate As-Is Both tags 
                remove tags 
            

        Only need to click the menu once, instead of use autocomplete many times to write every tag.
        
        Usage:
        Select the codes need to convert(need to include the whole struct type, only select the fields won't work)
        Then click the Tags menu (the last one in the main menu).
      '';
    };
  }) {};

  generate-fluent-interface = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Generate.Fluent.Interface";
    plugname = "Generate.Fluent.Interface";
    plugid = "Generate.Fluent.Interface";
    version = "0.8.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6141/31541/generate-fluent-inf.jar";
      sha256 = "1cwxm26j441738y8f6ma8y0qcjpm5hc39jp4rsgvcdl8qwi548ha";
      name = "Generate.Fluent.Interface-0.8.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/felixtsu/idea-generate-fluent-interface";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/felixtsu/idea-generate-fluent-interface";
        free = false;
      };
      description = ''
        helps you to create Fluent Interface property accessor methods.
      '';
    };
  }) {};

  generateallsetter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GenerateAllSetter";
    plugname = "GenerateAllSetter";
    plugid = "com.bruce.intellijplugin.generatesetter";
    version = "2.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9360/102507/GenerateAllSetter-2.7.zip";
      sha256 = "18aan56182mxiiddv2y9nqhqbdml9xaq3kr9d588cl6sn3a8qpbm";
      name = "GenerateAllSetter-2.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gejun123456/intellij-generateAllSetMethod";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        GitHub
      |&nbsp;Issues
       一键调用一个对象的所有的set方法
       generate call to class all setter method by alt+enter on the variable class
       generate a converter two object when they have same field
       generate default value when returnType is List Set Map 
       generate call to assertThat on all getter method
       like a user class has setName, setPassword methods
       User user = new User();
       then alt+enter on User
       will generate following
       user.setName("");
       user.setPassword("");
       support all your class set method including super class
       support kotlin
       view more on https://github.com/gejun123456/intellij-generateAllSetMethod
      '';
    };
  }) {};

  generatecopyconstructor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GenerateCopyConstructor";
    plugname = "GenerateCopyConstructor";
    plugid = "de.u-mass.idea.copyConstructor";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7225/21374/CopyConstructorPlugin.jar";
      sha256 = "0cymkjyjfhm9nrh3mywxgl1fd6327nbdmgr51qm9h57qn8x3b7iv";
      name = "GenerateCopyConstructor-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jkovacs.de";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/jkovacs/CopyConstructorPlugin/master/LICENSE";
        free = false;
      };
      description = ''
        Adds an option to generate a copy constructor to the generate menu (alt + ins). 
The action will generate a copy constructor taking an instance of the same class and copying over every field. If there is a copy constructor available in the superclass it will be called as well. 
Also adds a number of inspections that generate warnings if a copy constructor might be faulty (e.g. not all fields copied or superclass constructor not invoked).
      '';
    };
  }) {};

  generateo2o = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GenerateO2O";
    plugname = "GenerateO2O";
    plugid = "com.taobao.wuzheng";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7171/26534/GenerateO2O.jar";
      sha256 = "08drh5852m8v0gypmv7bx00n1r2kaycb6l4yqsdn11ji81p52gjs";
      name = "GenerateO2O-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ykdsg/GenerateO2O";
      license = lib.licenses.asl20;
      description = ''
        This plugin can generate an Object to another Object transfer methods.
      '';
    };
  }) {};

  generatepropertynameconstants = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GeneratePropertyNameConstants";
    plugname = "GeneratePropertyNameConstants";
    plugid = "GeneratePropertyNameConstants";
    version = "0.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6273/33882/genprop.jar";
      sha256 = "1z2109094ki1dj9h2j26anlz24x1dafm28bbq9xi0f80n807qsgr";
      name = "GeneratePropertyNameConstants-0.15.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/thomedw/genprop";
      license = lib.licenses.asl20;
      description = ''
        Adds a new menu Generate Properties in the generate menu (alt + ins) to generate getter, setter and property name constants of fields. See https://github.com/thomedw/genprop
      '';
    };
  }) {};

  generateserialversionuid = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GenerateSerialVersionUID";
    plugname = "GenerateSerialVersionUID";
    plugid = "GenerateSerialVersionUID";
    version = "3.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/185/20016/GenerateSerialVersionUID_plugin_V3.0.3.zip";
      sha256 = "0jqjx14zcz65xdw9yzrw38qd04pjhv0a6lcd7bsh2ilxaf7jb217";
      name = "GenerateSerialVersionUID-3.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Adds a new action 'SerialVersionUID' in the generate menu (alt + ins). The action adds an serialVersionUID field in the current class or updates it if it already exists, and assigns it the same value the standard 'serialver' JDK tool would return. The action is only visible when IDEA is not rebuilding its indexes, the class is serializable and either no serialVersionUID field exists or its value is different from the one the 'serialver' tool would return.
      '';
    };
  }) {};

  generateserializationhelpers = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GenerateSerializationHelpers";
    plugname = "GenerateSerializationHelpers";
    plugid = "GenerateSerializationHelpers";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6255/85755/GenerateSerializationHelpers.jar";
      sha256 = "0lhbb2d04lkg7nspla119f7ang3y0bb2sxb3fb2i51nglfkz11b6";
      name = "GenerateSerializationHelpers-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/stephenc/intellij-generate-serialization-helpers";
      license = lib.licenses.asl20;
      description = ''
        Generates some serialization helper methods that can be hard to remember the signatures of:
  
  readResolve()
  writeReplace()
  readObject(ObjectInputStream)
  writeObject(ObjectOutputStream)
      '';
    };
  }) {};

  generatestaticbuilder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GenerateStaticBuilder";
    plugname = "GenerateStaticBuilder";
    plugid = "GenerateStaticBuilder";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6004/9465/GenerateStaticBuilder_9465.jar";
      sha256 = "0yx8kr97m4ly0n7q20fmx5var6974fl6jx92p7pvf5dh0hsiqppa";
      name = "GenerateStaticBuilder-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Generates a builder in an static inner class
      '';
    };
  }) {};

  generatetestcases = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GenerateTestCases";
    plugname = "GenerateTestCases";
    plugid = "GenerateTestCases";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5847/12525/GenerateTestCases.jar";
      sha256 = "1im5ynyqjvs2m13s481k81hbbxn5dmnrzvhhivqd8vpf5m91f4yp";
      name = "GenerateTestCases-1.0.9.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hablutzel1/GenerateTestCases";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/hablutzel1/GenerateTestCases";
        free = false;
      };
      description = ''
        Plugin to generate unit test methods with meaningful names based in described behaviours with @should tags in interface methods javadoc 
To see how to use it: http://elespaciodejaime.wordpress.com/2011/05/29/generate-test-cases-intellij-plugin/ or http://plugins.intellij.net/plugin/?idea&amp;id=5847 or for a usage video http://www.youtube.com/watch?v=WYET6PECxuc  
Credits for the @should style testing should go to OpenMRS team
      '';
    };
  }) {};

  geocoding-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Geocoding-Plugin";
    plugname = "Geocoding Plugin";
    plugid = "teeschke.geocode";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9235/31103/teeschke.geocode-1.1.1.zip";
      sha256 = "1lc440zkbklk6783wvhngpvbgzcqh9qy3ypahshwwl89qrf9qpw9";
      name = "Geocoding-Plugin-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dnltsk/intellij-geocoding-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/dnltsk/intellij-geocoding-plugin";
        free = false;
      };
      description = ''
        This plugin is made for engineers working with Location-Based-Services / -Applications. Thus you can replace address names by its coordinates (Geocoding) and vice versa (Reverse Geocoding). It enables you to create test-locations quickly or resolve coordinates to its addresses within your IntelliJ Editor.
 
 After you installed the plugin you have a new action group 
Geocode inside your 
Refactoring context menu.
 
 
Shortcuts
 =========
 
Alt + 
Cmd + 
G for geocoding
 
Shift + 
Alt + 
Cmd + 
G for reverse geocoding
 
 
Geocoding Context Menu
 ===================
 

 
 
Create Sample Data Demo
 =====================
 

 
 
Reverse Geocoding Demo
 =====================
 

 
 
Geocoding Plugin Preferences
 =========================
 

 
 License
 =======
 Source Code under Apache 2.0
 Geocoded data is provided under the ODbL via Nominatim / OpenStreetMap®
      '';
    };
  }) {};

  gerrit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gerrit";
    plugname = "Gerrit";
    plugid = "com.urswolfer.intellij.plugin.gerrit";
    version = "1.2.3-146";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7272/102986/gerrit-intellij-plugin-1.2.3-146.zip";
      sha256 = "0pi1q2vapxl3kgs6iic3f6rlnq7gkf8pwhzzymv418z4cqw932cc";
      name = "Gerrit-1.2.3-146.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/uwolfer/gerrit-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Gerrit Code Review Tool Integration
      

      
        Only Gerrit 2.6 or newer is supported (missing / incomplete REST API in older versions)
      

      
        Features:
        
          Do reviews directly from your IDE (voting and commenting)
          List and query changes
          Optimized push dialog for Gerrit operations (refs/for, add reviewers, ...)
          Compare (Diff) changes against your local clone (much more comfortable than in Web UI because of well known syntax highlighting and other IDE features)
          Submit changes
          Notifications for new changes which are waiting for your review
          Cherry-Pick and checkout changes into your local clone
          Star (and unstar) changes
          File and line based comments (Gerrit 2.7 or newer only)
          Usage: Add new comments in file diff window with right click on line; remove not yet submitted comments with a
           click on comment icon. Comments need to be submitted with "Submit" or any "+/-" action.
          
          Clone and set up Gerrit projects directly in IDE (commit-message-hook is automatically added)
          Abandon changes
          Publish and delete draft changes
        
      

      
        If you find any issues, please report them (please use the GitHub issue tracker instead of review comments).
      

      
        This plugin uses gerrit-rest-java-client for
        communication with Gerrit REST API. If you need to build a Java application which needs to communicate with
        Gerrit, this library probably supports you quite a lot.
      

      
        If you like this plugin, you can support it:
        
          Spread it: Tell your friends who are using IntelliJ and Gerrit about this plugin (or even bring them to use these fantastic products!)
          Vote for it: Write your review and vote for it at the IntelliJ plugin repository.
          Star it: Star it at GitHub. GitHub account required.
          Improve it: Report bugs or feature requests. Or even fix / implement them by yourself - everything is open source!
          Donate: You can find donation-possibilities in the README file.
      '';
    };
  }) {};

  get-emoji = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Get-Emoji";
    plugname = "Get Emoji";
    plugid = "com.codyi96.android.get.emoji";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13298/71978/intellij-plugin-get-emoji.jar";
      sha256 = "021w7gdpx4k1b17swr1ggh8gy4nky7rj54zz8i8jjnnxblpvzs2h";
      name = "Get-Emoji-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://codyi96.github.io/";
      license = lib.licenses.mit;
      description = ''
        Enter emoji wherever.😀
      Usage
      
          Press "⌃ + ⇧ + I".
      
	  issues |
	  more
      '';
    };
  }) {};

  gfma = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GfmA";
    plugname = "GfmA";
    plugid = "com.github.hinaser.gfm-advanced";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14683/108475/gfm-advanced-0.0.5.zip";
      sha256 = "1y5407kw9dzyzmqhhispynl4vlv28ng97zpn40nys7ipzz1kgizy";
      name = "GfmA-0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Hinaser";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Hinaser/gfm-advanced/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Yet another GFM(GitHub Flavored Markdown) Preview plugin for intellij platform
    
      Feature
    
    
      
        Preview markdown as GFM(GitHub Flavored Markdown) by
        GitHub Markdown API.
      
      Using embedded Chromium browser (JCef) to display preview.
      
        If internet connection is not available,
        it falls back to offline markdown parser instead.
        
          You may choose offline parser as default markdown parser.
          
            Note that flexmark-java is used as offline markdown parser,
            but not every gfm syntax is parsed with the parser at this time.
            If you want to see precise gfm preview, I recommend to use GitHub Markdown API parser instead.
          
        
      
    
    
      Please see detail at the GitHub README
      '';
    };
  }) {};

  gif-background = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gif-Background";
    plugname = "Gif Background";
    plugid = "com.github.GifBackground";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13465/73956/gifBackground.jar";
      sha256 = "121ybrhkkaj50limpvphr22bibn6dhi7jlnk2gsgxkm37lpyfc16";
      name = "Gif-Background-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BlueDriver/GifBackground";
      license = lib.licenses.mit;
      description = ''
        Set Gif Image Background For IntelliJ IDEA
      '';
    };
  }) {};

  gist-snippet = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gist-Snippet";
    plugname = "Gist Snippet";
    plugid = "com.chuntung.plugin.gistsnippet";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13587/86441/gist-snippet-1.0.2.zip";
      sha256 = "06qq44mmngfnh1466ggh30vc08zz7rbvrh6viarp1c0kg3h5ggxm";
      name = "Gist-Snippet-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gist.chuntung.com";
      license = lib.licenses.mit;
      description = ''
        Getting Started | Donate
    
    A code snippet tool based on GitHub Gist, that provides with a feature to fetch own or starred gists of GitHub accounts.
    It depends on built-in GitHub plugin which should be enabled.
      '';
    };
  }) {};

  gist-templates = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gist-Templates";
    plugname = "Gist Templates";
    plugid = "com.gisttemplates";
    version = "0.3.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7400/15862/gist-templates-plugin.zip";
      sha256 = "0ypblndjzm0hrj2v9yqklvmn4hn4jzqddr1cp4id321wvanx98xf";
      name = "Gist-Templates-0.3.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://geowarin.github.io/gist-templates-plugin/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://geowarin.github.io/gist-templates-plugin/";
        free = false;
      };
      description = ''
        Fetch gists from one or several github gists accounts and use them as templates inside IntelliJ.
 If you like it don't forget to rank and comment the plugin 
on JetBrains site. 
 If you don't, please drop by our github repository and submit an 
issue or propose an improvement !
      '';
    };
  }) {};

  git-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Bar";
    plugname = "Git Bar";
    plugid = "com.marlboro.gitbar";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8151/23326/gitbar.jar";
      sha256 = "0f8ss2rm97wq4pvapxm30sfff870swspxyihiw79s2y02mz62c2j";
      name = "Git-Bar-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/marlboro029/gitbar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/marlboro029/gitbar";
        free = false;
      };
      description = ''
        Plugin creates quick access buttons for use Git. Based on &quot;SVN bar&quot; plugin.
      '';
    };
  }) {};

  git-branch-cleaner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-Branch-Cleaner";
    plugname = "Git Branch Cleaner";
    plugid = "com.ppolivka.plugin.gitcleaner";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10059/90466/Git_Branch_Cleaner.zip";
      sha256 = "0n7qy8vzvb28gh7yca0imyyfxzh4gx12sh58912g07ccydbch0gf";
      name = "Git-Branch-Cleaner-1.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ppolivka.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/PavlikPolivka/gitcleaner/master/LICENCE";
        free = false;
      };
      description = ''
        Simple plugin for deleting unneeded git branches.
      It will list all branches that do not have tracking remotes and allow you to delete them.
      Each deleted branch will also do a check if it's fully merged to current branch.
      Current branch will not be listed.
      Branches that are not merged to HEAD are not selected by default.
      Just use the following action: VCS &gt; Git &gt; Delete Old Branches.
      '';
    };
  }) {};

  git-cn-commit-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-CN-Commit-Template";
    plugname = "Git CN Commit Template";
    plugid = "commit-cn-message-template";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14786/99353/commit-cn-message-template.jar";
      sha256 = "14hiv6sviw90pyp735k7bg2vxbjh9n3lk0xql0jw38amh1sy09zs";
      name = "Git-CN-Commit-Template-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/starryrbs/";
      license = lib.licenses.mit;
      description = ''
        GIT CN Commit Template

        规范你的commit信息

        创建一个代码模板如下: &lt;类型&gt;:(影响范围) &lt;主题&gt; 

        插件Github地址:  GIT CN Commit Template 

         示例:

         1. 打开commit 对话框

         

         2. 填写相关信息,然后点击ok即可
      '';
    };
  }) {};

  git-checkout-files-from-branch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Checkout-Files-From-Branch";
    plugname = "Git Checkout Files From Branch";
    plugid = "GitCheckoutFilesFromOtherBranch";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10795/46772/git-checkout-files-from-branch-0.1.1.jar";
      sha256 = "1q83wckdbmgvyqb6q54ava966lfdn4ppyyq6pv7jz62f07qzwicd";
      name = "Git-Checkout-Files-From-Branch-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ambarth/git-checkout-files-from-branch";
      license = lib.licenses.asl20;
      description = ''
        Checkout files from another git branch 
 
GitHub | 
Jetbrains Repository 
 
 
 Lets you pick files from another git branch that do not exist on the current branch. Currently this is not possible via the "Compare With..." dialog for branches. This plugin adds the missing functionality via a separate dialog.  Usage: VCS -&gt; Git -&gt; Checkout files from branch...
      '';
    };
  }) {};

  git-commit-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Commit-Helper";
    plugname = "Git Commit Helper";
    plugid = "GitCommitHelper";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12602/64449/git-commit-helper.jar";
      sha256 = "01a8dx92z1ldja1qjwnp001q4xskna7cs0w8is7c94rc1lcz7zml";
      name = "Git-Commit-Helper-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Adds a button to the commit dialog, that replace commit message with a template.
    github.com/gusevaleksei/git-commit-helper
      '';
    };
  }) {};

  git-commit-message-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-Commit-Message-Helper";
    plugname = "Git Commit Message Helper";
    plugid = "commit-message-helper-idea-plugin";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13477/96290/git-commit-message-helper-1.1.0.zip";
      sha256 = "0a1rrhf71b7zhpayj06lmp83mq2j3wwgr0gindqjjjy1kjyjfmrb";
      name = "Git-Commit-Message-Helper-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AutismSuperman";
      license = lib.licenses.asl20;
      description = ''
        Introduction
                
                
                    A plugin that helps you standardize submissions
                    This plugin is an upgraded version of the source idea plugin git-commit-template,adding a series of
                        personalized configurations.
                    
                
                
                    一个可帮助您标准化提交内容的插件
                    该插件是源自git-commit-template的加强版,添加一系列个性化的配置
                
            
            
                How to use
                
                
                
            
            
            
                Configuration
                
                    If you want to change the type of submission.You can open the following location: 
                 Configuration path: File -&gt; settings-&gt;Other Settings-&gt; CitCommitMessageHelper-&gt;type

                
                    
                
                If you want to personalize your submission template.You can open the following location: 
                 Configuration path: File -&gt; settings-&gt;Other Settings-&gt; CitCommitMessageHelper-&gt;template
      '';
    };
  }) {};

  git-commit-message-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Commit-Message-Plugin";
    plugname = "Git Commit Message Plugin";
    plugid = "git-commit-message-plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10100/41246/GitCommitMessagePlugin.jar";
      sha256 = "14wxs62d85myn6yla9wn58liz2rbs5shj2k07bd8i2p316jf4570";
      name = "Git-Commit-Message-Plugin-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JanGatting/GitCommitMessage";
      license = lib.licenses.asl20;
      description = ''
        Create Git commit messages.
 The structure is defined within a template, that is customized by the user himself.
 Ticket names are extracted from current git branches, that is defined by a RegEx
 e.g. feature/JiraId-1234 (git branch) - JiraId-1234 (ticket)
 
 
Donate using 
PayPal
      '';
    };
  }) {};

  git-commit-message-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Commit-Message-Template";
    plugname = "Git Commit Message Template";
    plugid = "com.rspn.git";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14762/107900/git-commit-message-template-1.1.jar";
      sha256 = "1sh9403dqvy42mk07xq57fpa0327gp78kid6qw6qkc2fz6wvcpjb";
      name = "Git-Commit-Message-Template-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/rsperezn/git-commit-message-template";
      license = lib.licenses.asl20;
      description = ''
        Simply press Ctrl+K/Cmd+K in the 'Commit Changes' dialogue, and the commit message will be prepoluated with the ticket/issue
that you are currently working on. This information will be extracted from your current branch, and uses predefined regex patterns,
 or you can create your own under Settings &gt; Other Settings &gt; Git Commit Message Template.
      '';
    };
  }) {};

  git-commit-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Commit-Template";
    plugname = "Git Commit Template";
    plugid = "commit-template-idea-plugin";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9861/101199/commit-template-idea-plugin.jar";
      sha256 = "05wrhfgaccgnz2h4dd14g9wqix4bxq16km87x4vpi8qalcmy8chx";
      name = "Git-Commit-Template-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MobileTribe/commit-template-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/MobileTribe/commit-template-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Create a commit message with the following template:

        
        &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
        &lt;BLANK LINE&gt;
        &lt;body&gt;
        &lt;BLANK LINE&gt;
        &lt;footer&gt;
      '';
    };
  }) {};

  git-commit-template-check = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-Commit-Template-Check";
    plugname = "Git Commit Template Check";
    plugid = "commit-template-check-plugin";
    version = "1.8.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14822/102225/commit-template-check-plugin-1.8.0.zip";
      sha256 = "0npbk0iy0ir851rx2jhdpvi1x1a4rr4hzsa7yzmv3gs6qnvdb2dh";
      name = "Git-Commit-Template-Check-1.8.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/godfather1103";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/godfather1103/commit-template-check-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        English Readme：
Create a commit message with the following template,It also provides the operation of checking the format of commit:

&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
&lt;BLANK LINE&gt;
&lt;body&gt;
&lt;BLANK LINE&gt;
&lt;footer&gt;

Starting from version 1.7.7, it supports adding JIRA information to scope.
The plug-in is based on Git Commit Template

中文说明：
该插件可以按照如下模板去生成commit的内容，并提供了检测commit的格式的操作:

&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
&lt;BLANK LINE&gt;
&lt;body&gt;
&lt;BLANK LINE&gt;
&lt;footer&gt;

从1.7.7版本开始支持添加jira信息到scope中。
该插件是在Git Commit Template的基础上开发完成

捐赠(Donate)

你的馈赠将助力我更好的去贡献，谢谢！
Your gift will help me to contribute better, thank you!

PayPal

支付宝(Alipay)


微信(WeChat)
      '';
    };
  }) {};

  git-commit-template-for-pingan = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Commit-Template-For-PingAn";
    plugname = "Git Commit Template For PingAn";
    plugid = "Git Commit Template For PingAn";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13956/81067/commit-template-for-pingan.jar";
      sha256 = "03awgm1q89zyvl4whiqsh0r2if3r6kdx1m88vvmlpnmz8c3w42dh";
      name = "Git-Commit-Template-For-PingAn-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yzhengfei";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/yzhengfei/generate-document/blob/master/Generate%20Document%20EULA";
        free = false;
      };
      description = ''
        Create a commit message with the following template:

        
# 提交描述
Desc:

# 提交类型：3选1
#
#   ReqDev = 需求开发
#   BugFix = 修复Bug
#   FaultFix = 故障修复
Type:

# 如果是需求开发，请填写 需求ID
# 如果是修复Bug，请填写 BugID
# 如果是故障修复，请填写 故障ID
# 请填写纯数学，多个以逗号分隔（英语逗号）
ID:
      '';
    };
  }) {};

  git-config-commit-template = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-Config-Commit-Template";
    plugname = "Git Config Commit Template";
    plugid = "com.telesoftas.ijplugin.gitconfigcommittemplate";
    version = "0.1-27";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14689/92396/Git_Config_Commit_Template-0.1-27.zip";
      sha256 = "1kpxbp62v3prgaqxpkq00sd0189yfvfbzbslg544l5rj5pj8ys7j";
      name = "Git-Config-Commit-Template-0.1-27.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.telesoftas.com";
      license = lib.licenses.asl20;
      description = ''
        This Plugin enables Intellij to integrate `git config commit.template` parameter to commit workflow.
      It also removes commented lines from the message before commit.
      '';
    };
  }) {};

  git-conflict = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-Conflict";
    plugname = "Git Conflict";
    plugid = "cc.duduhuo.git-conflict";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10656/87947/git-conflict-1.0.4.zip";
      sha256 = "15w0s82hd48r1hg14wm6629d6pl2g1a3916rm77z7jxdlv2wcv6b";
      name = "Git-Conflict-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liying2008/git-conflict";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/liying2008/git-conflict/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Highlight git conflict contents for easy conflict handling.
      '';
    };
  }) {};

  git-custom-commit-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Custom-Commit-Template";
    plugname = "Git Custom Commit Template";
    plugid = "yijun.sun.gitcommittemplate";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13526/75306/git-commit-template-plugin.jar";
      sha256 = "123zx490a262kqr5ca3xr3c9h6nrhycc9fzv2vqac45g54mkdgd7";
      name = "Git-Custom-Commit-Template-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Will read "git-message-template.txt" file in project root dir(If not exists, will create default one).
      When commit, click "Paste Custom Message" button, will input file content.
      '';
    };
  }) {};

  git-extender = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Extender";
    plugname = "Git Extender";
    plugid = "gr.jchrist.gitextender";
    version = "0.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7835/107196/gitextender-0.6.0.jar";
      sha256 = "1mp5k4nxxc5g9yzc0m4rvhxfnzxhh40hw7lmm0r3h8dwvqc89ywr";
      name = "Git-Extender-0.6.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JChrist/gitextender";
      license = lib.licenses.asl20;
      description = ''
        Git Extender adds an option to Update All
        local branches tracking a remote for all git roots in the current project
        Local branches that will be updated are the branches that exist locally and have been configured
        to track a remote branch.
        It requires IDE version 2020.3 or higher and Java 8+
        It tries to fast-forward commits in remote branches to local branches.
        It can be configured through the settings to attempt a simple merge,
        if the local branch cannot be merged to the tracked remote using fast-forward only.
        In this case, if there are conflict errors, the merge will be aborted and an error notification will be shown.
        The update, then, should be performed manually for the reported branch, in order to resolve the conflicts.
        Any possible uncommitted changes to the current branch will be stashed
        After updating a branch, if there were any file changes, they will be displayed in
        IntelliJ Version Control tab.
        Currently, the correct list of file changes (updated, created, removed) will be displayed.
        However, when performing a diff for files in a branch other than the currently checked
        out, the diff will most probably be incorrect.
        This plugin is available under Apache License, Version 2.0
      '';
    };
  }) {};

  git-file-case-fixer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-File-Case-Fixer";
    plugname = "Git File Case Fixer";
    plugid = "com.vladsch.git-file-case-fixer";
    version = "1.0.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10533/66794/git-file-case-fixer.1.0.16.jar";
      sha256 = "0wqg1hn114gnm1z0k5024whhnarwixf5q1fialx0cwdra6yl9c6j";
      name = "Git-File-Case-Fixer-1.0.16.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/vsch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/vsch/git-file-case-fixer/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Git File Case Mismatch Plugin
            Detect and fix file case mismatch between git and the file system
            Adds Before Commit check for file case mismatches between git and the file system
                with corrective actions:
            
                Change git file case to match file system
                Change file system case to match git
      '';
    };
  }) {};

  git-flow-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Flow-Integration";
    plugname = "Git Flow Integration";
    plugid = "Gitflow";
    version = "0.7.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7315/105877/gitflow4idea-0.7.5.jar";
      sha256 = "1z1v48rc3dl0sid0qv2jjjgy10sljsp8awa3zr587wld07z58vjm";
      name = "Git-Flow-Integration-0.7.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.opherv.com";
      license = lib.licenses.asl20;
      description = ''
        Git Flow Integration
      '';
    };
  }) {};

  git-machete = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-Machete";
    plugname = "Git Machete";
    plugid = "com.virtuslab.git-machete";
    version = "0.8.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14221/107444/git-machete-intellij-plugin-0.8.2.zip";
      sha256 = "1g5sdazv87dvjcskpl2p0b30j1rygzqpn7l08yrnb0i58fnkhbk9";
      name = "Git-Machete-0.8.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://virtuslab.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/VirtusLab/git-machete-intellij-plugin/master/LICENSE";
        free = false;
      };
      description = ''
        Probably the sharpest git repository organizer and rebase/merge workflow automation tool you've ever seen! 

This plugin adds an extra tab in the Git tool window that gives an instant answer to the questions:

  What are the branches in this repository?
  What needs be merged/rebased/pushed/pulled?


The bird's eye view provided by Git Machete makes rebases/push/pulls hassle-free
even when multiple branches are present in the repository:
master/develop, your topic branches, teammate's branches checked out for review etc. 

Along these lines, Git Machete helps create and maintain small, focused, easy-to-review PRs.

You can read more at the plugin's GitHub repository,
as well as at the git-machete CLI GitHub repository.
      '';
    };
  }) {};

  git-open = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-Open";
    plugname = "Git Open";
    plugid = "io.github.huzunrong.git-open";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14940/97800/git-open-intellij-plugin-1.0.0.zip";
      sha256 = "1lgk7g9q33d246hnw7vz91l7x9fj8daw3baadpv889rcbvd4s99w";
      name = "Git-Open-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Find git info (project/file url) in your project and open it in browser. Path: ContextMenu -&gt; Git -&gt; Open in Browser. The default keymap is: cmd/ctrl shift 0
    
    在浏览器中快速打开项目中的git远程页面，包括项目主页、文件所在页。操作路径：ContextMenu -&gt; Git -&gt; Open in Browser。默认快捷键：cmd/ctrl shift 0
      '';
    };
  }) {};

  git-pair = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Pair";
    plugname = "Git Pair";
    plugid = "com.smilingrob.gitpair";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8135/63057/GitPair.jar";
      sha256 = "1917bdf9m5ll800ikxyan4a7bmw72dg0gd2h2bx111ifi71zgyq2";
      name = "Git-Pair-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://smilingrob.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/RoboPlugins/git-pair.idea/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Pair programming plugin.
    See who is paired, and pick your teammates in the status bar.
    Changes the name and email address of your local git user so when you commit you commit as all of the checked people.
    
    
    
    
        Does not depend on or use the git pair plugin, just uses git.
        Supports solo, trio, N, and un-paired development.
        Alphabetically sorts, deterministic paired emails.
        Supports email prefix so pair mail can go to a Google Apps alias, prefix+rob+grumpy@example.com (means prefix@example.com on Google).
    
    Source code available on GitHub.
      '';
    };
  }) {};

  git-quick-branches = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-Quick-Branches";
    plugname = "Git Quick Branches";
    plugid = "com.github.novotnyr.idea.git.quickbranches";
    version = "4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12042/76657/git-quickbranches-idea-plugin-4.zip";
      sha256 = "0di09ynqsxlj6mi5md0ywz4aj5xhnr2lg5bcg63603qb90d9pnsn";
      name = "Git-Quick-Branches-4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/novotnyr/git-quickbranches-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Adds a quick branch switcher for a specific module into Git context menu.
    
    Switch branches on selected modules independently of the
    Execute Branch Operation on All Roots / Synchronous Branch Control preference.
    
    
        It is highly advised to add a Keyboard Shortcut in Preferences,
        in Plugins / Git Quick Branches / Checkout Branch
        to enable super-quick branch change on modules selected in the Project tree.
      '';
    };
  }) {};

  git-scope = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Scope";
    plugname = "Git Scope";
    plugid = "Git Scope";
    version = "3.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10083/107284/git-scope-3.0.4.jar";
      sha256 = "0ws22i3nag2acp65l2qr883afnraf6lssg4dibg0v7119brrwrgn";
      name = "Git-Scope-3.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/comod/git-scope";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/comod/git-scope";
        free = false;
      };
      description = ''
        1. Adds a tool window with a change browser (similar to Version Control) which shows the current diff of your **GIT SCOPE**.
        2. Adapts the Line Status according to your **GIT SCOPE**. Usually this built-in feature shows only the current "HEAD" changes.
        3. Adds a Custom *Scope* (inspections, search/replaces, ect) "Git Scope (Files)", which means search results will be filtered according to **GIT SCOPE**
      '';
    };
  }) {};

  git-status = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Status";
    plugname = "Git Status";
    plugid = "com.syndatis.idea.git-status";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7802/20613/git-status.jar";
      sha256 = "1vwld4wi8kimm2ljyvk2hgl1hzhmhbrhpmkngni92hj6gxribqgx";
      name = "Git-Status-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://syndatis.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://syndatis.com/";
        free = false;
      };
      description = ''
        Enable Git status for modules in project view Known bugs: after Git operations status does not update instantly
      '';
    };
  }) {};

  git-tag-from-commit-dialog = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Tag-From-Commit-Dialog";
    plugname = "Git Tag From Commit Dialog";
    plugid = "com.kablemonck.idea.plugins.GitTagFromCommitDialog";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15086/97219/git-tag-from-commit-dialog.jar";
      sha256 = "046q90d80n7dychmky3a94n986v79dcaavqxcdmkryqsh51a0zgn";
      name = "Git-Tag-From-Commit-Dialog-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/KableM/IdeaGitTagFromCommitDialog";
      license = lib.licenses.asl20;
      description = ''
        Adds an option to tag a commit inside the commit dialog.
      '';
    };
  }) {};

  git-tag-in-status-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Tag-in-Status-Bar";
    plugname = "Git Tag in Status Bar";
    plugid = "io.github.pnancke.gitTag4Intellij";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14795/93225/git-tag-for-intellij-status-bar-1.0.jar";
      sha256 = "03ypjzrq0j2fr56alk4qkk2d6qrq4lxvfxynmnyr5mk85jkxvf0g";
      name = "Git-Tag-in-Status-Bar-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://pnancke.github.io";
      license = lib.licenses.mit;
      description = ''
        Shows the current Git Tag in the Status Bar of IntelliJ. The tags are automatically fetched every minute.
    
    If you encounter any problems with this plugin please create a ticket here:
    https://github.com/pnancke/intellij-git-tag-statusbar/issues/new
    
    Note: This only works if the project uses git.
      '';
    };
  }) {};

  git-time-metric = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-Time-Metric";
    plugname = "Git Time Metric";
    plugid = "io.edgeg.gtm.intellij";
    version = "1.0.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8494/41153/gtm-intellij.jar";
      sha256 = "1d7mglf3s02a5jr638v1qihzbzgp4p7blvd36x29wrj834yf3v1j";
      name = "Git-Time-Metric-1.0.13.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/git-time-metric/gtm-jetbrains-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/git-time-metric/gtm-jetbrains-plugin";
        free = false;
      };
      description = ''
        Simple, seamless, lightweight time tracking for all your git projects

 
Git Time Metrics (GTM) is a tool to automatically track time spent reading and working on code that you store in a Git repository.
 By installing GTM and using supported plug-ins for your favorite editors, you can immediately realize better insight into how you are spending your time and on what files.

 
Installation

 Installing GTM is a two step process. First, it's recommended you install the GTM executable that the plug-in integrates with and then install the JetBrains GTM plug-in. Please submit an issue if you have any problems and/or questions. 

 1. Follow the 
Getting Started section to install the GTM executable for your operating system.

 2. Install the plug-in from your JetBrains IDE, select Preferences -&gt; Plugins -&gt; Browse Repositories... and search for "Git Time Metric".

 
Note - to enable time tracking for a Git repository, you need to initialize it with 
gtm init otherwise it will be ignored by GTM. This is done via the command line. You can run this within the JetBrains IDE terminal.

 
 &gt; cd /path/to/your/project &gt; gtm init 

 To report a bug, please submit an issue on the 
GitHub Page.
 Consult the 
README and 
Wiki for more information.
      '';
    };
  }) {};

  git-branch-compare-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Git-branch-compare-tool";
    plugname = "Git branch compare tool";
    plugid = "com.flyhand.ideaplugin.gittool.branchcompare";
    version = "1.1.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11993/82521/git-branch-compare-tool.jar";
      sha256 = "0ra6l742rww05706k4ivwszrv4shsggqq47rvhwkq6qv0pj3qgrc";
      name = "Git-branch-compare-tool-1.1.16.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.hianzuo.com";
      license = lib.licenses.asl20;
      description = ''
        Get git changed log base on the other branch excluded Cherry-Pick and Merged log list .
      '';
    };
  }) {};

  git-extended-update-index = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Git-extended-update-index";
    plugname = "Git extended update-index";
    plugid = "git-extended-update-index";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11217/75994/Git_extended_update-index-0.0.3.zip";
      sha256 = "0mclycn0jg9xly0n5gqj370szlgyxciwg1gjsgi727m53p07wrbp";
      name = "Git-extended-update-index-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/monosoul/git-extended-update-index-plugin";
      license = lib.licenses.asl20;
      description = ''
        Enables support for the next git commands:
      git update-index
      
        --skip-worktree
        --no-skip-worktree
        --chmod=+x
        --chmod=-x
      '';
    };
  }) {};

  gitblit-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitBlit-Plugin";
    plugname = "GitBlit Plugin";
    plugid = "dk.erikzielke.gitblit";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8343/25736/GitblitPlugin.zip";
      sha256 = "1d5cr682ak6qmrxnch755gfpsl24rps484k1clydax7sd6pk39a6";
      name = "GitBlit-Plugin-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/erikzielke";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/erikzielke";
        free = false;
      };
      description = ''
        This plugin is for easily checking out repositories hosted via GitBlit
      '';
    };
  }) {};

  gitduck-pair-programming-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitDuck-Pair-Programming-Tool";
    plugname = "GitDuck Pair Programming Tool";
    plugid = "com.github.gitduckhq.intellij-plugin";
    version = "1.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14919/107195/gitduck-1.1.5.zip";
      sha256 = "168s3n7d80samf1a97n88bbq4q2g9mpmjz1272zwhj58wd8q5sdi";
      name = "GitDuck-Pair-Programming-Tool-1.1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.gitduck.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitduck.com/terms";
        free = false;
      };
      description = ''
        Cross-IDE code sharing tool for GitDuck
GitDuck is a video chat tool built for developers that has direct integration to the IDE so you can talk, share your code in real-time and easily collaborate with your team. It enables remote developers to work as if they were side by side.

With GitDuck you can code with people using different IDEs, like VS Code,any JetBrains IDEs and others. Review ourwebsite for the complete list of supported IDEs.

Important: The code is only shared P2P encrypted with the video call participants. It never touches our servers.

Watch a demo of GitDuck.

GitDuck is great for

- Remote teams 
- Mentoring and learning to code 
- Pair Programming 
- Code reviews 
- Debugging 





Features

🔎 Locate other developers
Click on someone's name to locate that person.

🔧 Share your terminal
Share your servers output and your current terminal session with the GitDuck shell.

👀 Follow and Unfollow
Check the people's panel and select to follow someone. Now you are going to be seeing everything that this person does.



🔎 Share project or specific folder
Select to share open files only, a specific folder or the whole project.




🗂 Review all files that are being shared
Once shared, you can easily view all files that are open by everyone.

🔒 P2P code sharing
The code is shared P2P encrypted between the video call participants and only team members can join the call. 

How to start using GitDuck?


Create a GitDuck account here and create a team.
Go to your IDE. Go to Preferences &gt; Plugins and search and install the GitDuck plugin.
Now in the bottom right of your IDE you will have an option that says: "Login on GitDuck". Click there to link your IDE to your GitDuck account.
Great! Now join a video call on GitDuck and on your IDE, click on "Start sharing your code" so other people that joined the video call and collaborate in real-time with you.





If you have any questions, don't hesitate to write to help at gitduck.com.
      '';
    };
  }) {};

  gitextensions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitExtensions";
    plugname = "GitExtensions";
    plugid = "com.dmitryzhelnin.intellij.plugin.gitextensions";
    version = "0.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11511/99702/git-extensions-plugin-0.4.3.zip";
      sha256 = "0la733rv8a9jvnz4c3wyvp6m54cqlbalsz4kwciypjkin3jgaxzg";
      name = "GitExtensions-0.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DmitryZhelnin/git-extensions-intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/DmitryZhelnin/git-extensions-intellij/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Adds ability to work with GitExtensions application from IDEs based on the IntelliJ platform
      '';
    };
  }) {};

  gitflowplus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitFlowPlus";
    plugname = "GitFlowPlus";
    plugid = "com.github.xiaolyuh.mrtf-git-flow-4idea";
    version = "1.0.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14056/106533/git-flow-plus-4idea-1.0.13.zip";
      sha256 = "068f0wy9pi2734a0q5q4jb6rk3lrv6xr3xxsiqxlbfkfbcsr9v18";
      name = "GitFlowPlus-1.0.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xiaolyuh/mrtf-git-flow-4idea";
      license = lib.licenses.mit;
      description = ''
        This is a branch management plugin for the  mrtf git flow  (master, release, test, feature) process  Usage Guide . 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp;&nbsp; The main functions are as follows: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. Plug-in configuration files can be added to GIT version management and shared within the team; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. New development branch and repair branch based on origin / master; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. Rebuild test branch and release branch based on origin / master; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4. After the development is completed, merge the development branch into the test branch; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4. After the test is completed, the development branch is merged into the release branch, and the release branch is locked; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5. After the release is completed, merge the release branch into the origin / master branch; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6. Failure to release will unlock the release branch; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7. Only those who lock the release branch can click [release complete] and [release failed]; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8. All executed git commands can be viewed in "Event Log"; 

        
    这是一个适用于mrtf git flow (master,release,test,feature) 流程的分支管理插件 使用指南。

     
    主要功能如下：
     1. 插件配置文件可以加入GIT版本管理，在团队内部共享； 
     2. 基于origin/master新建开发分支和修复分支； 
     3. 基于origin/master重建测试分支和发布分支； 
     4. 开发完成后将开发分支合并到测试分支； 
     4. 测试完成后将开发分支合并到发布分支，并锁定发布分支； 
     5. 发布完成后将发布分支合并到origin/master分支； 
     6. 发布失败将解除发布分支的锁定； 
     7. 只有锁定发布分支的人才能点[发布完成]和[发布失败]； 
     8. 所有执行的git命令都可以在"Event Log"查看；
      '';
    };
  }) {};

  gitgetter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GitGetter";
    plugname = "GitGetter";
    plugid = "com.puke.GitGetter";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9590/33892/GitGetter.jar";
      sha256 = "0lcv4350ffli7sx0g1yw6s7jva4aimgfjfb11j2j974cmgqysvdk";
      name = "GitGetter-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/puke3615/GitGetter";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/puke3615/GitGetter";
        free = false;
      };
      description = ''
        Clone files from your git repository.
      '';
    };
  }) {};

  github-3-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GitHub-3-Color-Scheme";
    plugname = "GitHub 3 Color Scheme";
    plugid = "color.scheme.GitHub 3";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12271/76724/GitHub_3.jar";
      sha256 = "1z14w47a6x0a3rywi6bydl2f462f8jlqkr231gqnh88snv8fyc0c";
      name = "GitHub-3-Color-Scheme-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://makinen.ru/";
      license = lib.licenses.mit;
      description = ''
        JetBrains' IDEA/PhpStorm/PyCharm/DataGrip/GoLand/… theme inspired by the GitHub syntax highlighting style (version 3, early 2020).
      '';
    };
  }) {};

  github-actions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitHub-Actions";
    plugname = "GitHub Actions";
    plugid = "org.github.otanikotani.checks-plugin";
    version = "1.1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13793/104418/view-checks-idea-plugin-1.1.9.zip";
      sha256 = "0mabc3fd2axjpvc0ya5z6g326cpyyyv0q6xxdiqrq2b603713wp9";
      name = "GitHub-Actions-1.1.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Otanikotani/view-github-checks-idea-plugin";
      license = lib.licenses.mit;
      description = ''
        This plugin displays statuses of GitHub Actions
        This plugin is a good alternative to alt-tabbing for every time you push some changes to the branch and want to see whether the repository's checks are passing on your changes.
        Use cases:
        
            Imagine having some GitHub Workflows to set up to run on pull requests that must pass before you can merge the pull request. With this plugin you can see the status and the build log of the workflow
            You did a push into some branch and you want to see how your GitHub Actions that were triggered by that push are doing. You can monitor the status of the actions via this plugin.
        
        
        Features:
        
            Adds a new tab - Workflows - to the Version control tool window that shows the workflow runs (see
                https://developer.github.com/v3/actions/) of the GitHub repository.
      '';
    };
  }) {};

  github-primer-dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GitHub-Primer-Dark-Color-Scheme";
    plugname = "GitHub Primer Dark Color Scheme";
    plugid = "color.scheme.GitHub Primer Dark";
    version = "0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14484/95066/GitHub_Primer_Dark.jar";
      sha256 = "18qkwf6aqzpwf4ccaj98wxjyavbkj081lj41vpb2fav9zkxncnrp";
      name = "GitHub-Primer-Dark-Color-Scheme-0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/n0nz/github-primer-goland";
      license = lib.licenses.mit;
      description = ''
        GitHub Primer Dark Theme for GoLand based on GitHub Primer Colorscheme
      '';
    };
  }) {};

  github-in-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitHub-in-Idea";
    plugname = "GitHub in Idea";
    plugid = "com.biyusheng.github-plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15624/106388/github-plugin-1.0.2.zip";
      sha256 = "1qc8n3f9aamal21zw3kry3hyhsi41zp105lpbilak3lhwn55cyih";
      name = "GitHub-in-Idea-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/f1024557668";
      license = lib.licenses.asl20;
      description = ''
        Search in GitHub plugin makes you to search anyone you want to search by GitHub,
        but you don't need to open the browser.for example:
        1. you select the search words with the mouse,then click the right and choose the Search in GitHub
         then wait a moment,you will see the result list.and you can click the blue words then will directly
         to open the browser and visit the github project
        2. or you can enter anyone you want to search in the Search in GitHub tab's search field,and then you
         can get the search result etc
        if you have any questions,you can send the email to me(1024557668@qq.com)
      '';
    };
  }) {};

  gitlab-integration-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitLab-Integration-Plugin";
    plugname = "GitLab Integration Plugin";
    plugid = "com.neon.intellij.plugins.gitlab";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7447/52232/gitlab-integration-plugin-1.1.2.zip";
      sha256 = "16vn33nbfccd7p6qrdgsdjgrmkq6apig2hnbvlsq4z1isczb9ghg";
      name = "GitLab-Integration-Plugin-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dneves/gitlab-integration-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/dneves/gitlab-integration-plugin/master/LICENCE";
        free = false;
      };
      description = ''
        GitLab Integration plugin:
    
    Lets you interact with gitlab from within your IDE.
    
    Features:
    
        List projects (by namespaces) and their issues
        Filter issues by author, assignee or custom text
        Re-open / close issues (right click)
        Edit issues (double click)
    
    
    Please, leave a comment or drop me an email with any issues/reports.
    
    After plugin install, go to IDE preferences, and look for Gitlab Integration.
    You'll need the host and your API key from your gitlab (which you can find under Profile Settings -&gt; Account)
      '';
    };
  }) {};

  gitlab-projects-2020 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitLab-Projects-2020";
    plugname = "GitLab Projects 2020";
    plugid = "com.failfast";
    version = "2.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14110/105304/GitLabProjects2020.zip";
      sha256 = "0zpzpdsdavfggwxlsnlml1h85xwyfmfdf193jzg7rfjdk82vkfic";
      name = "GitLab-Projects-2020-2.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wudeyong/GitLabProjects";
      license = lib.licenses.asl20;
      description = ''
        GitLab Projects Plugin
        Simple plugin that is adding support for GitLab specific actions to JetBrain IDEs
        Features:
        
            GitLab Checkout support - add GitLab autocompleter to IDE Git checkout dialog
            GitLab Share dialog - allows quick import of new projects to GitLab, user can specify namespace and project visibility
            GitLab Merge Request dialog - user can quickly create new merge requests from current branch
            GitLab Merge Request List dialog - user can list and accept all open code reviews
        
        fork from https://github.com/PavlikPolivka/GitLabProjects
        github: GitLabProjects
      '';
    };
  }) {};

  gitlab-quick-merge-request = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitLab-Quick-Merge-Request";
    plugname = "GitLab Quick Merge Request";
    plugid = "com.github.novotnyr.gitlab-quickmr-idea-plugin";
    version = "19";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11149/105342/gitlab-quickmr-plugin-19.zip";
      sha256 = "1f6pwsf8smh136sdypcz196azdk3my9sfz078xphyl96igbbrcy0";
      name = "GitLab-Quick-Merge-Request-19.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/novotnyr/gitlab-quickmr-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Quickly create Merge Request for GitLab projects
      
      Quickly create merge requests with default settings and submit them with a single click
      Specify your favourite merge request assignees
      Supports GitLab API v4
      '';
    };
  }) {};

  gitlab-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GitLab-integration";
    plugname = "GitLab integration";
    plugid = "ru.trylogic.idea.gitlab.integration";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7319/18427/IDEA-GitLab-Integration.jar";
      sha256 = "01yi0k09wxv9682q214xp88lxchhp803j140lb8cm8qqbwy59zdg";
      name = "GitLab-integration-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bsideup";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/bsideup/IDEA-GitLab-Integration/blob/master/LICENSE";
        free = false;
      };
      description = ''
        GitLab integration plugin. Support &quot;Open file in browser&quot; command.
      '';
    };
  }) {};

  gitlink = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitLink";
    plugname = "GitLink";
    plugid = "uk.co.ben-gibson.remote.repository.mapper";
    version = "3.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8183/79011/GitLink-3.3.3.zip";
      sha256 = "07462ng23d2q30nz4fjx15r574jh1y9s72nxyh7ln1pwj7k8mlyy";
      name = "GitLink-3.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ben-gibson/GitLink";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ben-gibson/GitLink/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Provides a shortcut to open a file or commit in GitHub, Bitbucket, GitLab, Gitea, Gogs or GitBlit using the default 
browser. A Shortcut is also available to copy links to your clipboard. 

After installing select your remote host in Settings → Other Settings → GitLink.
Make sure you have registered your project's root under the version control settings.
Preferences → Version Control (see unregistered roots) 

To open a file in the default browser select View → Open in (your selected host). Shortcuts are also available on
the annotation gutter and VCS log window.
      '';
    };
  }) {};

  gitlive = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GitLive";
    plugname = "GitLive";
    plugid = "app.teamhub";
    version = "10.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11955/108166/GitLive.zip";
      sha256 = "1rfx282n8lf0xqfxhw5gfzpzqyiidpwv8qg1ka5vskkrxfbgl2zm";
      name = "GitLive-10.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.git.live?ref=ide.jetbrains.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://git.live/eula";
        free = false;
      };
      description = ''
        Real-time collaboration and communication for dev teams
Turn your IDE into a collaborative space where you can work together in real-time


    GitLive is to Git what Slack is to Email
    — Nicholas Bransby-Williams CEO, GitLive


GitLive allows you to view, share and edit code together with your team, live, across VS Code and JetBrains


    Check who is online from your team and which repositories, branches and issues they are working on
    Inspect and cherry-pick your teammates’ local changes without performing a commit-push-fetch-merge cycle
    Open a live view of the file a teammate is working on and edit together
    Privacy-first: Easily control what you share including your online status, activity and local changes




Visibility without interruptions
Check who is online and which issues they are working on without disturbing them. The collaborators from your repository are listed in the GitLive window, you can see their activity over the last 24 hours, the repositories they are working on and the files they have changed locally, all in real-time.

Privacy-first: Easily control what you share including your online status, activity and local changes within your GitLive settings



Code together in real-time
Seamlessly launch a real-time collaboration sessions for pair-programming or quick problem solving. Choose to follow your teammate’s cursor or work independently.



View live diffs and cherry-pick your teammate's changes
Instantly open a live diffs of your teammates’ local changes. Acquire their uncommitted changes by cherry picking individual files or complete changesets without going through a commit-push-fetch-merge cycle



Supported platforms

    Interoperable between VS Code and all JetBrains IDEs
    Supported services: GitHub, GitLab, GitLab Self Hosted, Bitbucket &amp; Azure DevOps

Want to learn more?
Check out blog.git.live for the latest updates
      '';
    };
  }) {};

  gitprefix = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GitPrefix";
    plugname = "GitPrefix";
    plugid = "com.github.syuchan1005.emojiprefix";
    version = "2.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9725/83996/GitPrefix.jar";
      sha256 = "0g2fdysa4vl6f2a1xn5avzjgmfsp742358ssila8l1pikrph3psx";
      name = "GitPrefix-2.1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/syu_chan_1005";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/syuchan1005/GitPrefix/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Easy to 'Emoji(or Text) Prefix Commit'
        
        Getting Started
        
            Create GitPrefix File in your project root.
            Write prefix's you want to use
            Commit!
        
        
        
        .gitprefix file sample and detailed explanation is Here!
      '';
    };
  }) {};

  gitea-issues = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gitea-issues";
    plugname = "Gitea issues";
    plugid = "biz.elfuego.idea.issues.gitea";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10896/79445/gitea_plugin.jar";
      sha256 = "1ska2iajgjhr4plyjn96cxrr9f5gd16gj649yysmxhwr7g2nvlv9";
      name = "Gitea-issues-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://elfuego.biz";
      license = lib.licenses.mit;
      description = ''
        Gitea issue tracker integration plugin (http://gitea.io)
      '';
    };
  }) {};

  github-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Github-Tools";
    plugname = "Github Tools";
    plugid = "com.nerdscorner.android.plugin.github";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13366/108254/github-tools-plugin.zip";
      sha256 = "1ajfm61f2szjhm8m9bmfdnbq39v8hxiyli32lyvk37wsd4hb4khh";
      name = "Github-Tools-2.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://diego.marcher.com.uy";
      license = lib.licenses.asl20;
      description = ''
        A small tool to keep track of the Github repositories you have in your organizations along with their pull requests, releases and more!
        Release candidates features
        
            You can create release candidates branches (with their corresponding Pull Request)
            You can create the Apps changelog based on the compilation of the libraries ones
            You can create the libraries version bumps (with their corresponding Pull Request) to get ready for the next sprint!
        
        CI features
        
            TravisCI and CircleCI integration to go directly to the build itself to monitor it.
            You can also trigger a TravisCi build and a CircleCi workflow right from the plugin!
            View branch CI build status
        
        Miscellaneous
        
            Included dependencies comparator to make a comparison of the Android dependencies changes between two branches
      '';
    };
  }) {};

  github-farshid-light-v2-rainglow-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Github-farshid-Light-v2-rainglow-Color-Scheme";
    plugname = "Github farshid Light v2 (rainglow) Color Scheme";
    plugid = "color.scheme.Github farshid Light v2 (rainglow)";
    version = "2.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12015/59609/Github_farshid_Light_v2.6__rainglow_.jar";
      sha256 = "0xnrbmmg6wmvz7h0znl4qza4zvqzmsnw57kr9pw1x69mgjs4c75w";
      name = "Github-farshid-Light-v2-rainglow-Color-Scheme-2.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/farshidnejati";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        
      '';
    };
  }) {};

  github3-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Github3-Theme";
    plugname = "Github3 Theme";
    plugid = "club.nutsoft.Github3Theme";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15418/103982/Github3.jar";
      sha256 = "0cmzhvywbpycb322r0vic7y1kcb856nbhsp2kp5j1rzhijkak9m6";
      name = "Github3-Theme-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jiyuan0125/Github3";
      license = lib.licenses.mit;
      description = ''
        Github3 Theme
  
  To install:
  
  Go to Settings (Preferences) | Plugins, find the theme plugin and install it
  Restart IDE
  Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
      '';
    };
  }) {};

  gitlab-ci = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gitlab-CI";
    plugname = "Gitlab CI";
    plugid = "com.pixelperfect.gitlab-ci";
    version = "1.0.4-203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15457/107997/gitlab-ci-1.0.4-203.zip";
      sha256 = "0da27kx1kaddf1hrvjhaj50c2f58khgn2s6k5b745gx6azm8f3pm";
      name = "Gitlab-CI-1.0.4-203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Manage your Gitlab pipelines from your IDE.
    - List pipelines from your Gitlab project.
    - Check status
    - Trigger, abort and retry pipeline
    - Working with gitlab.com and self hosted gitlab edition
    
    Plugin is shown as a tool panel named "Gitlab CI".

    To work correctly, you'll need to generate a USER_TOKEN for your project with `api` scope.
    * DISCLAIMER: So far you need to create a USER_TOKEN to list pipelines and manage them
    * As soon as GitLab will have update PROJECT_TOKEN permission rules, this token will be preferred.
    You can create as many personal access tokens as you like from your GitLab profile.
    To obtain a USER_TOKEN for your project, follow those steps:
    - Sign in to GitLab.
    - In the upper-right corner, click your avatar and select Settings.
    - On the User Settings menu, select Access Tokens.
    - Choose a name and optional expiry date for the token.
    - Choose the desired scopes.
    - Click the Create personal access token button.
    - Save the personal access token somewhere safe. If you navigate away or refresh your page, and you did not save the token, you must create a new one.
    More info on GitLab Docs

    You will also need to fill your Gitlab project ID:
    Project ID can be found under the section "Project overview" of your GitLab project.

    The token and the project ID need to be set in the settings of the plugin in tool panel.
      '';
    };
  }) {};

  gitmoji = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gitmoji";
    plugname = "Gitmoji";
    plugid = "io.github.biezhi.plugins.gitmoji";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10315/46499/gitmoji-plugin.jar";
      sha256 = "1231ihrfdmm44nsb4xwif9zjbmax49r76d950ijj9isij2xjnp2m";
      name = "Gitmoji-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/biezhi";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/biezhi/gitmoji-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This is a plugin that helps you pick the right emoji expression when git is submitted. 
Usage
 
 » Input the changes you want to submit the content. 
 » reference commit rules. 

  

 
 这是一个帮助你在git提交的时候选择正确的 emoji 表情的插件。  
使用方法
 
 » 输入你要提交的改动内容即可，提交规则可参考 提交日志规则 

  

 
Source Code
      '';
    };
  }) {};

  gitmoji-plus-commit-button = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gitmoji-Plus-Commit-Button";
    plugname = "Gitmoji Plus: Commit Button";
    plugid = "com.github.patou.gitmoji";
    version = "1.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12383/99843/gitmoji-intellij-plugin-1.6.0.zip";
      sha256 = "146y5y879igm07jq371n2qcj886rr8gyaal1ash19p6c0jmk133n";
      name = "Gitmoji-Plus-Commit-Button-1.6.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com/idea";
      license = lib.licenses.asl20;
      description = ''
        Add a gitmoji emoticon in your commits to make them sexier!
    This plug-in will help you to choose and add the gitmoji, via a button in the Commit window, among a predefined list of emoticons coming from reference commit rules.

    
    

    Features :
    
     Button near the Commit History Message allow to dispay the list of gitmoji
     Option to use the code (:sparkles:) or the unicode version (✨)
     Insert or replace the gitmoji before the message (keep the git commit message)
     Shortcut to open the list : ctrl alt g (or cmd alt g on mac)
     Load the list of gitmoji on startup from the repos of gitmoji (fallback to a local list if error).
    

    This plugin is a fork and improvement of Gitmoji Plug In.
      '';
    };
  }) {};

  gitmoji-unicode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gitmoji-Unicode";
    plugname = "Gitmoji-Unicode";
    plugid = "io.github.biezhi.plugins.gitmoji-unicode";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14610/94054/gitmoji-plugin-1.0.5.zip";
      sha256 = "0cipnwv6qjc05qxf0bqlxwdpycmhgqa7x1nlgmfqp0wgy8j597nl";
      name = "Gitmoji-Unicode-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/armanim";
      license = lib.licenses.mit;
      description = ''
        This plugin is built upon the plugin Gitmoji.
      '';
    };
  }) {};

  givwenzen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GivWenZen";
    plugname = "GivWenZen";
    plugid = "org.psliwa.idea.givwenzen";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9632/77494/idea-givwenzen-plugin-0.4.zip";
      sha256 = "0rbnafvq8pawl5cp14sf6xv7ppqq5rhy5n0vhi866z4sz9ir90j1";
      name = "GivWenZen-0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/psliwa/idea-givwenzen-plugin";
      license = lib.licenses.mit;
      description = ''
        Plugin for IntelliJ that provides support for legacy library: GivWenZen
      '';
    };
  }) {};

  glasscode-for-windows = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GlassCode-For-Windows";
    plugname = "GlassCode (For Windows)";
    plugid = "gileli121.glasside.windows";
    version = "1.2.0-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15868/108349/glasscode-1.2.0-SNAPSHOT.zip";
      sha256 = "0lsi5ncxw4s1wshqxjvv3chcwgrhgldb6bvjcxbbnhwzyzlhwnqq";
      name = "GlassCode-For-Windows-1.2.0-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gileli121";
      license = lib.licenses.asl20;
      description = ''
        GlassCode
        This plugin allows you to make your IDE to be fully transparent while keeping the code sharp and bright.
        Introduction
        Adjust the opacity level while keeping the text sharp and bright
        
        Using GlassCode plugin with combination of LiveEdit (WebStorm IDE)
        
        Using GlassCode in Java (IntelliJ IDE)
        
        Using GlassCode with blur effect set to high
        
        
        
        &nbsp;
        Getting started
        
            Download GlassCode plugin
            Install it in your IDE
            It is recommended to use the high contrast theme for the best result or at lest any dark theme. My suggestion is
                to enable the high contrast theme
            
        
        How to use
        Currently, the only way to use this plugin is to click on the GlassCode tab here:
            
            
        
        After that, the following menu will open:
        
        
        
        Click on the Enable checkbox to enable the effect.
        In this menu, the following options available:
        
            Enable on startup - If this option is selected, the transparency effect will start on startup when
                you open project
            
            Use "High Contrast" theme - This option is highly recommended to get the best transparency quality.
                
                If you don't enable this option, at least make sure you use a dark theme. The transparency is not working good
                
                on non-dark themes!
            
            Opacity - This is the opacity of the background only. The image processing algorithm is smart to
                not apply  the opacity to the texts or anything that is not background
            
            Amount of brightness behind the window - This will reduce or decrease the light that you can see
                behind the window.This effect give similar result like when the opacity is high value and the theme is dark.
                In general it is suggested to set this filter to 70% and the opacity to 30%-60% (it depends on what you like)
            
            Type of blur behind the window - This effect have 3 options: None, Medium
                and High. When it set to None, there is no blur effect at all. For
                Medium and High it looks as following:
            
        
        Medium blur:
        
        High blur:
        

        Text extra brightness - This option controls the amount of brightness of your code
        

        Supported IDEs
        
            IntelliJ
            WebStorm
            Phpstorm
            Other JetBrains IDEs (Not tested)
        
        Supported Operating Systems
        
            Windows 10 64bit from version 2004 (20H1) and above
        
        Notes
        
            Currently this plugin is supported only in Windows 10 v2004 and above
            It is highly recommended to use the "High contrast" theme when using the glass effect. The transparency
            Source code of the plugin is fully removed
      '';
    };
  }) {};

  global-file-template-variables = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Global-File-Template-Variables";
    plugname = "Global File Template Variables";
    plugid = "com.github.gcds.global.template.variables";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8008/22010/filetemplate.jar";
      sha256 = "0wipx6h3dnw8xxw65vxr5qipri61whxl1l04mfdww7xwh4k1vdv0";
      name = "Global-File-Template-Variables-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aurimasniekis/GlobalFileTemplateVariables";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/aurimasniekis/GlobalFileTemplateVariables/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugins allow to specify or override any variables in the File Template functionality per Project
      '';
    };
  }) {};

  global-to-local = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Global-To-Local";
    plugname = "Global To Local";
    plugid = "wxb.Global2Lua";
    version = "0.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15478/107219/Gloabl2Local-0.0.7.zip";
      sha256 = "1whss1r0sf00hvgx89w4w47cvwm3byki4gvx38h5n7ywpfhmlqh6";
      name = "Global-To-Local-0.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.epl20;
      description = ''
        Usage:
    Place the cursor on the variable, abd [right click]  -&gt; [Global To Local] will adds local xxx = require("xxx.xxx")/xxx to the head of the file

    Settings：
    1、 ScanPath:the path to scan (the first use of automatic scan), the scan command will scan all of the "*.Lua" in path where "local xxx = require..." (can be manually invoked through Tools/Global To Local/Scan)
    2、Scanfile: offensively view the scan result, modification is invalid
    3、CustomRequire: format "local xxx = xxxxx", multi-line configurable, the content will cover the same name of scan result


    使用：
    光标放到全局变量处，右键-&gt;Global To Local即可添加local xxx = require("xxx.xxx")/xxx到文件头部

    设置：
    1、自动扫描路径(首次使用自动扫描)，扫描命令将扫描该路径所有.lua的local xxx = require...(可通过Tools/Global To Local/Scan手动调用)
    2、扫描结果文件路径(仅供查看扫描结果，修改无效)
    3、自定义等式，格式 local xxx = xxxxx，可配置多行, 结果将覆盖扫描的同名结果
      '';
    };
  }) {};

  globalization = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Globalization";
    plugname = "Globalization";
    plugid = "cn.deemons.plugin.Globalization";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10981/51038/Globalization-0.3.jar";
      sha256 = "13zywqj6vaiaprf5nk8i40szpzjf4f3d7v9qn6fvbsdhbhj9rh5k";
      name = "Globalization-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://deemons.cn";
      license = lib.licenses.asl20;
      description = ''
        Globalization
      '';
    };
  }) {};

  gluon = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gluon";
    plugname = "Gluon";
    plugid = "com.gluonhq.plugin.intellij";
    version = "2.8.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7864/97112/Gluon_Plugin-2.8.4.zip";
      sha256 = "1zxm8qc2j10a7d8jx8amqpgcjfhg15zm5g43qdnb5za5kzcb79cz";
      name = "Gluon-2.8.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://gluonhq.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7864/license.txt";
        free = false;
      };
      description = ''
        Gluon allows developers to create Java applications and their native images targeting Android, iOS, Linux, MacOS and Windows platforms using the same codebase.
      '';
    };
  }) {};

  go-builder-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Go-Builder-Generator";
    plugname = "Go Builder Generator";
    plugid = "com.cn.oddcn.plugin.gobuildergenerator";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10783/47420/PluginGoBuilderGenerator.jar";
      sha256 = "0r8x50yw5jga8ajz0y8n28k1d7paf5475dbs8rphq4b5cblykvql";
      name = "Go-Builder-Generator-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/OddCN/go-builder-generator-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/OddCN/go-builder-generator-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for generating Builder pattern code of Go struct from selected struct code.
      Demo and source code is here.
      How to use:
      1. select the struct code
      2. shortcut: Alt + B
      '';
    };
  }) {};

  go-multifunction-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Go-Multifunction-Generator";
    plugname = "Go Multifunction Generator";
    plugid = "com.cn.ric.plugin.generators";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14898/100190/GoMuiltGenerator.jar";
      sha256 = "0dh8kr1iyf4lm6rq8j88p6npswfmrlq5f0xagg6jpy56b2vlhbva";
      name = "Go-Multifunction-Generator-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gorillazer/GomultiGenerator";
      license = lib.licenses.mit;
      description = ''
        Plugin for generating Builder pattern code of Go struct from selected struct code.
      How to use:
      1. select the struct code
      2. shortcut: 
        Alt + B: create data build 
        Alt + C: create handler func 
        Alt + M: create handler func method 
        Alt + J: create struct tags
      '';
    };
  }) {};

  go-orm-code-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Go-Orm-Code-Helper";
    plugname = "Go Orm Code Helper";
    plugid = "org.shonminh.helper.GenerateModelAction";
    version = "1.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13476/86935/go-orm-code-helper-1.4.2.zip";
      sha256 = "079s7j26rw87490z11fvdqjivc8xahkwn412rgvz5zrwgvn4nf69";
      name = "Go-Orm-Code-Helper-1.4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Shonminh";
      license = lib.licenses.mit;
      description = ''
        Go Orm Code Helper
        ORM code helper for go language, it can generate model struct by creating sql statement. This plugins can be used with versions 2019.1-2020.1.
        
        The main features of this plugin are:
        
            Parse multiple create sql statements in sql file and generate related Go struct code
            GORM is supported for generate ORM code
        
        Please share your feedback and rating scores here&nbsp;&nbsp;|&nbsp;&nbsp;Known issues
        
        To use:
        
            right click and select Generate Model or just print ⌘ + G
        
        
        More feature:
        See go-orm-code-helper and star our Github project, you can get more activities.
      '';
    };
  }) {};

  go-to-hack = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Go-To-Hack";
    plugname = "Go To Hack";
    plugid = "GoToHack";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/82/85196/Go_To_Hack.jar";
      sha256 = "06ajf5n79g542hj0ih15hmjbxhc8jchxfnbrrj5b7srqwr6ybkqg";
      name = "Go-To-Hack-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/javaerb/GoToHack";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/javaerb/GoToHack/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Pulls the Go To submenu items back into the main Editor popup menu, as in earlier versions of IDEA.
      '';
    };
  }) {};

  go-to-occurrence = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Go-To-Occurrence";
    plugname = "Go To Occurrence";
    plugid = "com.frost_fox.goto";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10398/42557/goto_plugin.jar";
      sha256 = "1yxqdkrm1ywwnrs5fhjgwq0v71vkgnz8d47n1malk29bxkz1v4al";
      name = "Go-To-Occurrence-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/FrostF0X";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/FrostF0X";
        free = false;
      };
      description = ''
        Plugin is build for fast navigation through sources. After firing plugin by assigned keystroke you are able to write down text you want move to in pop-up area. While modifying text closes occurrence of input text will be marked as selected in editor. After pressing enter caret will be moved to the start of that occurrence.
      '';
    };
  }) {};

  go-to-project = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Go-To-Project";
    plugname = "Go To Project";
    plugid = "org.github.erikzielke.gotoproject";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7359/35663/GoToProject.jar";
      sha256 = "1mb5j649ji59gzjm6292qc94swiihxqzalmjhwa7c7k14aggcwaa";
      name = "Go-To-Project-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/erikzielke/GoToProject";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/erikzielke/GoToProject";
        free = false;
      };
      description = ''
        Enables opening project windows with speed search
      '';
    };
  }) {};

  go-method-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Go-method-generator";
    plugname = "Go method generator";
    plugid = "com.kondratevpavel.plugins.goland.gomethodgenerator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10517/44009/GoMethodGenerator.jar";
      sha256 = "1rgfryxcr6jybv0k6mc9aln99cgcngq8br6nqq6wp76mkpxxhhs8";
      name = "Go-method-generator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bobbykitten.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/BobbyKitten/Intellij-go-method-generator/blob/master/LICENSE";
        free = false;
      };
      description = ''
        You can use this plugin to simplify creating methods for structs in GoLang. 
 Type (StructName).(MethodName with signature) and press CTRL + ALT + SHIFT + G (may be changed in settings). 
 
For example: 
 
 type MyStruct struct {} MyStruct.MyMethod MyStruct.MyMethod() MyStruct.MyMethod(s string) MyStruct.MyMethod(s string) string and so on...  
 If there is no such struct nothing will happen.
      '';
    };
  }) {};

  goarchlint-file-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GoArchLint-File-Support";
    plugname = "GoArchLint File Support";
    plugid = "com.github.fe3dback.intellijgoarchlint";
    version = "0.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15423/107795/intellij-go-arch-lint-0.5.0.zip";
      sha256 = "0s06knbv6rkg8l8ra5k52yj4hp3hgdpl6ydzpj70bms48wn5dv9g";
      name = "GoArchLint-File-Support-0.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fe3dback";
      license = lib.licenses.asl20;
      description = ''
        This is IDE plugin for go arch lint:
https://github.com/fe3dback/go-arch-lint

Features

Json Schema validation/completion (versioned) (done)Basic code completion (done)Reference provider, refactoring (wip)Linter integration (mapping)Go language realtime imports inspection

Supported IDE's

Plugin should work in all jetbrains IDE's products.

Tested on GoLand 2020 and IntelliJ IDEA Community
      '';
    };
  }) {};

  gosense-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GoSense-Color-Scheme";
    plugname = "GoSense Color Scheme";
    plugid = "color.scheme.GoSense";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12570/64138/GoSense.jar";
      sha256 = "0y2909jr7djxrf6bh3janda9jsx9b7pm6nbcyyb8cicbicdlyqkr";
      name = "GoSense-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://nanohard.net";
      license = lib.licenses.asl20;
      description = ''
        Uses Material Deep Ocean as a base. It was made to address colors for Golang specifically.
      '';
    };
  }) {};

  gototabs = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GoToTabs";
    plugname = "GoToTabs";
    plugid = "com.jpospisil.gototabs";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7784/85947/GoToTabsPlugin.jar";
      sha256 = "0zla21sndfhrxfrxv71j4wb1yz10hmvqhr2nvw4f1msbz66xf10a";
      name = "GoToTabs-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jiripospisil/idea-gototabs";
      license = lib.licenses.asl20;
      description = ''
        DEPRECATED: It took a few years but switching between tabs is now supported out
        of the box (Keymap -&gt; Other -&gt; Tabs). You don't need this plugin anymore. Revolutionary.
        

        The plugin adds menu actions allowing you to go to a specific tab. You can of
        course assign keyboard shortcuts the individual actions and for example achieve
        the behavior known from other editors/IDEs where you can switch between tabs
        with alt+&lt;num&gt;.

        To prevent any conflicts, the plugin doesn't assign any shortcuts by itself, you
        need to do it manually in the Keymap (section Main menu -&gt; Window -&gt; Editor Tabs
        -&gt; Go To Tabs).
      '';
    };
  }) {};

  goyacc-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GoYacc-Support";
    plugname = "GoYacc Support";
    plugid = "idea.goyacc";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11444/85363/idea-goyacc.zip";
      sha256 = "0jy7lblqhs49mrhmnyhn1xknmyv71ybs2lvpnc149kbgkxvq8a9w";
      name = "GoYacc-Support-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zyguan/idea-goyacc";
      license = lib.licenses.mit;
      description = ''
        Language support for cznic's version of goyacc.
      '';
    };
  }) {};

  goanno = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Goanno";
    plugname = "Goanno";
    plugid = "org.leo.goanno";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14988/108474/goanno.jar";
      sha256 = "0j9692a0nnmg7fr603wrq8vgcxdbvmsly2631db7k7d8665h8y6q";
      name = "Goanno-2.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/loveinsky100/goanno/";
      license = lib.licenses.asl20;
      description = ''
        Auto generate comments for golang
      This plugin provides auto generate comments for golang on-the-fly within Intellij/Goland
      Like the plugin? Star the Project
      Got an issue? Report to Issue Tracker
      How to use?
      1.(control + commend + /) on golang function code
      2.Right click -&gt; Generate -&gt; Goanno
      Feature
      1.Normal function
      2.Interface function
      3.Customer Comment Template
      Now you can select "Tools - Goanno Setting" edit you custom template

      使用此插件可以自动生成函数注释模版
      喜欢本插件，点个星星吧！ github地址
      有bug？点击此处提交
      如何使用
      1.在函数上方点击快捷键(control + commend + /)
      2.右键 -&gt; Generate -&gt; Goanno

      功能
      1.普通函数
      2.接口中的函数
      3.支持自定义模版
      通过Tools-Goanno Setting编辑模版信息
      '';
    };
  }) {};

  goctl = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Goctl";
    plugname = "Goctl";
    plugid = "cn.xiaoheiban.go-zero";
    version = "0.7.14";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15100/108470/Goctl-0.7.14.zip";
      sha256 = "1xj43qpz8j2ycvnldcm8vy6hk97k0c0npy0n3njdv7bddbklqr2j";
      name = "Goctl-0.7.14.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.xiaoheiban.cn";
      license = lib.licenses.asl20;
      description = ''
        TAL support for JetBrains products.
     
     
     Support for Api programming language of tal.
     
     
     go-zero is a web and rpc framework for golang that with
     lots of engineering practices builtin. It’s born to ensure the stability of the busy services with resilience design,
      and has been serving sites with tens of millions users for years
     
     
     Features
     
        Api File Import
        Find reference
        Add context menu
        Highlighting of api
        Grammar and lexer check
        Duplicate define check
        Keyword completion contributor
        Support Code format
      '';
    };
  }) {};

  gold-section = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gold-Section";
    plugname = "Gold Section";
    plugid = "Gold Section";
    version = "2.26.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2/8/Gold_Section_8.jar";
      sha256 = "10fziy5wazz7b9p0vr2hxjip2nhni9y21kfyp06k60jc53kck6qq";
      name = "Gold-Section-2.26.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Gold Section 2(GS2) is a design tool for building nice palette for HTML
        documents by method of "gold section" (in base of one is magical number 1.618033985017358...).
      '';
    };
  }) {};

  google-autofactory-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Google-Autofactory-Support";
    plugname = "Google Autofactory Support";
    plugid = "mr.intellij.plugin.autofactory";
    version = "0.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9807/36526/external1";
      sha256 = "0sxz4zjmjnj6wi0bsxvab2i4s0mxjp4scs0q1wgbsb7nc4fyn2im";
      name = "Google-Autofactory-Support-0.2.4";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/matan129/autofactory-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/matan129/autofactory-intellij-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Provides support for Google's AutoFactory. 
 
 Implements various inspections for AutoFactory misusing 
 Gutter icons for quick navigation to "autfactoried" constructors / usages search
      '';
    };
  }) {};

  google-closure-require-statement-checker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Google-Closure-Require-Statement-Checker";
    plugname = "Google Closure Require Statement Checker";
    plugid = "Google Closure Require Statement Checker";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7106/45128/ClosurePlugin.jar";
      sha256 = "0h7vchj97gbn4rdkwcm2q7qlipgrmjpsmmj7iizpaa63fnnwkdyr";
      name = "Google-Closure-Require-Statement-Checker-2.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/serkangunes/ClosurePlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/serkangunes/ClosurePlugin";
        free = false;
      };
      description = ''
        This plugin adds another inspection for javascript files to check whether all the google closure classes are imported properly. If the class is not imported it will give an error. It is possible to click on the error statement and get a quick fix bubble to auto import those missing classes
      '';
    };
  }) {};

  google-code-search = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Google-Code-Search";
    plugname = "Google Code Search";
    plugid = "Google Code Search";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1123/2699/Google_Code_Search_2699.jar";
      sha256 = "138zrd706y0v4cjsyrzlhgsqj02r1vr1w5rnyyfn6mmd4dbifa5q";
      name = "Google-Code-Search-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1123/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1123/sourceCode.zip";
        free = false;
      };
      description = ''
        Enables to search source code in Google
            
            Note: Google Code Search only supports the languages which are supported in IntelliJ IDEA (maybe via plugin).
            At this time, they're C, C++, Java, JavaScript, JSP, SQL, Ruby and Python.
      '';
    };
  }) {};

  google-developer-tibau-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Google-Developer-Tibau-Color-Scheme";
    plugname = "Google Developer Tibau Color Scheme";
    plugid = "color.scheme.Google Developer Tibau";
    version = "0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10244/41178/Google_Developer_Tibau.jar";
      sha256 = "0vz2ymybzi61qzaafnsfnmvxlqkj5fzyyjyvv3gzrhq95ikpv1pj";
      name = "Google-Developer-Tibau-Color-Scheme-0.9.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/richellyitalo";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/richellyitalo";
        free = false;
      };
      description = ''
        Google Developer Tibau by @RichellyItalo
      '';
    };
  }) {};

  google-library-version-querier = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Google-Library-Version-Querier";
    plugname = "Google Library Version Querier";
    plugid = "com.wuyr.google_library_query";
    version = "3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14251/92476/GoogleLibraryVersionQuerier.zip";
      sha256 = "01psyvwqqfrkzwi1khanaw4xbri68hwk8ih7p6k57hj7ga2x07p8";
      name = "Google-Library-Version-Querier-3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/wuyr";
      license = lib.licenses.asl20;
      description = ''
        A plugin to facilitate adding library dependencies and choice historical versions.
      
      Github:  github.com/wuyr/GoogleLibraryVersionQuerier
      
      Powered by wanandroid.com, maven.aliyun.com
      '';
    };
  }) {};

  google-sceneform-tools-beta = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Google-Sceneform-Tools-Beta";
    plugname = "Google Sceneform Tools (Beta)";
    plugid = "google-sceneform-tools";
    version = "1.15.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10698/77614/google-sceneform-tools-1.15.0.zip";
      sha256 = "0k132bpazh3d0xhgia50kvjnd68gm8668kr5ap63qrzrcsg54zvr";
      name = "Google-Sceneform-Tools-Beta-1.15.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://developers.google.com/ar/develop/java/sceneform/import-assets";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://developers.google.com/terms/";
        free = false;
      };
      description = ''
        The Google Sceneform Tools (Beta) plugin is designed to help you work with 3D assets and the Sceneform SDK to build AR apps in Android Studio. It requires Android Studio versions 3.1 and above.
        Features:
        
          Simple and convenient asset import flow
          Asset viewer, so you can see how your assets look before you deploy
          Automatic configuration of gradle dependencies
        
        To learn more about how to use the plugin, visit the Sceneform plugin page on our developer site.
        
        
        The Sceneform Tools plugin is still in Beta. You can find Known Issues here. We also want to hear from you if you encounter any bugs - please share your feedback on our GitHub issues page and help us build a better experience.
      '';
    };
  }) {};

  google-translate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Google-Translate";
    plugname = "Google Translate";
    plugid = "Google Translate";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1460/8709/Google_Translate_8709.jar";
      sha256 = "13k3kijk7ygm4xxsadv5ffcb5gg8z2xb5jjyvh7b09i5i74ysis9";
      name = "Google-Translate-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/google-translate-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/google-translate-idea-plugin";
        free = false;
      };
      description = ''
        This plugin performs translations in Editor window from one language to another. It uses translate.google.com service behind the scene.
      '';
    };
  }) {};

  google-translator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Google-Translator";
    plugname = "Google Translator";
    plugid = "cn.manchesterlee.plugin.translator";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11502/53886/google-translator.zip";
      sha256 = "1v3achry6pjlz9y0alr2dq0agricbmm302g6qdkih2fs0nhzzxgb";
      name = "Google-Translator-0.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://manchesterlee.github.io";
      license = lib.licenses.gpl3Only;
      description = ''
        基于Google Translator的翻译插件
      Github https://github.com/ManchesterLee/Google-Translator---Intellij-IDEA
      '';
    };
  }) {};

  googleprotobuftool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GoogleProtobufTool";
    plugname = "GoogleProtobufTool";
    plugid = "com.self.plugins.protobuf";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13562/102716/ProtobufTool.zip";
      sha256 = "1c6ciabwhzj6pc739kf88va4rw93dg1nr4dc510z9lbf3ryjlaxj";
      name = "GoogleProtobufTool-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yqcgit/GenJavaProtobufIdeaPlugin";
      license = lib.licenses.asl20;
      description = ''
        generate java protobuf plugin for idea. generate one or more file.
      protobuf生成java文件的IDEA插件.支持生成一个或者多个文件.
      see more detail info: https://github.com/yqcgit/GenJavaProtobufIdeaPlugin
      '';
    };
  }) {};

  googletranslation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GoogleTranslation";
    plugname = "GoogleTranslation";
    plugid = "com.xiuyukeji.plugin.translation";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10121/105089/GoogleTranslation.zip";
      sha256 = "1j4qkgsxrhvbf882v4bnv5kcjgh47w62nvb8v7is2aakn9sdrjkf";
      name = "GoogleTranslation-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/a483210";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/a483210/GoogleTranslation/blob/master/LICENSE";
        free = false;
      };
      description = ''
        GoogleTranslation
      

      
        Home Page
      
      
      

      The plugin is based on the following items
      
      
      
        py-googletrans |
        translate-set |
        ECTranslation |
        TranslationPlugin
      
      
      

      Plugin for translate English to Chinese.
      
      
      General Usage Instructions:
      
        Choose the word you want translate.
        Press CTRL + Alt + 1.
      '';
    };
  }) {};

  gooooogleit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GooooogleIt";
    plugname = "GooooogleIt";
    plugid = "com.puvn.GooooogleItPlugin";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14991/104880/GooooogleItPlugin-1.0.3.zip";
      sha256 = "1b5y63q8qsy5jlipak36y4ryg4kdyh9nxb4zqbxq6k7ps3rfd2fa";
      name = "GooooogleIt-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.linkedin.com/in/puvn/";
      license = lib.licenses.asl20;
      description = ''
        A plugin to google selected text from IDE
      '';
    };
  }) {};

  gorilla-search-find-remote-usages = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gorilla-Search-Find-Remote-Usages";
    plugname = "Gorilla Search: Find Remote Usages";
    plugid = "org.jetbrains.gsearch";
    version = "0.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8421/26515/gorilla-search-0.12.zip";
      sha256 = "0ksp40rqrjywmshvyzr1p9gl3ha3lap8dyj79vacrh8mswb1kiw5";
      name = "Gorilla-Search-Find-Remote-Usages-0.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jetbrains.com";
        free = false;
      };
      description = ''
        Enables 'Find remote usages' action.
      '';
    };
  }) {};

  gps-emulator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gps-Emulator";
    plugname = "Gps Emulator";
    plugid = "com.doglandia.GpsEmulator";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8134/31800/MockLocationPlugin.jar";
      sha256 = "0vqzalx9ny9z9cfrf115jsdg98plkk99chiw05hl7pc4x2rik03r";
      name = "Gps-Emulator-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ThomasKomarnicki/MockLocationPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ThomasKomarnicki/MockLocationPlugin";
        free = false;
      };
      description = ''
        This Intellij plugin allows you to send mock gps coordinates to an Android emulator in an easy to use fasion. The plugin lives within Android Studio so you don't need to interrupt your debugging process by opening DDMS. There are a few different gps emluating tools built in to the plugin to replicate real device location changes:
 
 
 Emulate Gps coordinates from a start location to an end location 
 Emulate a user definable set of gps coordinates 
 Emulate a single Gps coordinate 
 
 The project is hosted on GitHub and is open to contributions and suggestions 
 https://github.com/ThomasKomarnicki/MockLocationPlugin
      '';
    };
  }) {};

  gradianto = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gradianto";
    plugname = "Gradianto";
    plugid = "com.thvardhan.gradianto";
    version = "4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12334/106256/Gradianto-4.4.jar";
      sha256 = "03nn33d3vn26wf95b7978jvyg1vlkk595igy3cx0wnrkj5b4b55z";
      name = "Gradianto-4.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/thvardhan/Gradianto";
      license = lib.licenses.mit;
      description = ''
        About
    
    Gradianto aims to be easy on the eyes while being colorful and bright. Gradianto ships with the gradients found in nature. There is something for everyone.
    
    Sponsors
    
    
    Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from inside your IDE while using jump-to-definition, your keybindings, and other IDE favorites. Learn more
      '';
    };
  }) {};

  gradle-confirmation = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gradle-Confirmation";
    plugname = "Gradle Confirmation";
    plugid = "com.github.shiraji.gradleconfirmation";
    version = "1.0.0";
    src = fetchurl {
      url = "https://github.com/shiraji/GradleConfirmation/blob/master/GradleConfirmation.jar?raw=true";
      sha256 = "1l677qpkl2v1kr96w5ph6cgjj93yrmbii1ajv7gk989i2r5h0ny2";
      name = "Gradle-Confirmation-1.0.0.jar?raw=true";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/GradleConfirmation/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin shows a confirmation dialog before executing gradle tasks.

 
GitHub | 
Issues
      '';
    };
  }) {};

  gradle-dependencies-and-plugins-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gradle-Dependencies-And-Plugins-Helper";
    plugname = "Gradle Dependencies And Plugins Helper";
    plugid = "cn.bestwu.gdph";
    version = "0.1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10033/91695/gradle-dependencies-plugins-helper-plugin-0.1.7.zip";
      sha256 = "1f6pz5w48ld04dp8j3xvsk0jfcmqpj1wvp75s4hgr2vjzz2i144d";
      name = "Gradle-Dependencies-And-Plugins-Helper-0.1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bestwu/gradle-dependencies-plugins-helper-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/bestwu/gradle-dependencies-plugins-helper-plugin/master/LICENSE";
        free = false;
      };
      description = ''
        This is an IntelliJ IDEA plugin for searching dependencies/plugins from JCentral/GradlePlugins inside Gradle projects.
    
    Features
    
      Use Smart Type Completion in dependencies/plugins script block.
      Support *.gradle,*.gradle.kts.
      Use jcenter API for Gradle dependencies queries,Use Gradle Plugins Search for Gradle
        plugins queries.
      
      Support wildcard query *.
      Support search by classname in mavenCentral search.
        use "c:"(classname) or "fc:"( fully-qualified classname ) in dependencies script block.
        example:
        &nbsp;&nbsp;compile("fc:org.junit.Test")
        &nbsp;&nbsp;compile("c:Junit")
      
      Support `Use AliRepo Search`,`Use Maven Central Repository Search`,`Use Nexus2 Repository Search`(Nexus2),`Use Artifactory Repository Search` options.
      
      Add specified repository to repositories.
      '';
    };
  }) {};

  gradle-dependencies-formatter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gradle-Dependencies-Formatter";
    plugname = "Gradle Dependencies Formatter";
    plugid = "com.github.platan.gradle-dependencies-formatter";
    version = "0.5.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7937/41640/idea-gradle-dependencies-formatter-0.5.3.zip";
      sha256 = "19izbq2ajjbgcz7fmvagy9gcvm36qpzfiyiiljy6dm29fdy7z53n";
      name = "Gradle-Dependencies-Formatter-0.5.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/platan";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/platan/idea-gradle-dependencies-formatter/master/LICENSE";
        free = false;
      };
      description = ''
        Features
      
        Convert a string notation to a map notation
        Convert a map notation to a string notation
        Sort dependencies
        Paste a Maven dependency as a Gradle dependency
      '';
    };
  }) {};

  gradle-dependencies-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gradle-Dependencies-Helper";
    plugname = "Gradle Dependencies Helper";
    plugid = "GradleDependenciesHelper";
    version = "1.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7299/78338/Gradle.Dependencies.Helper-1.16.zip";
      sha256 = "0l5729i716vd3c8wwapcfzfm0b88ap3yyfa97vlbhy3v2c2gv9jr";
      name = "Gradle-Dependencies-Helper-1.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/siosio/GradleDependenciesHelperPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/siosio/GradleDependenciesHelperPlugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        library is searched in Smart Code Completion by Maven repository
      '';
    };
  }) {};

  gradle-dependency-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gradle-Dependency-Helper";
    plugname = "Gradle Dependency Helper";
    plugid = "com.kaygisiz.gradlehelper";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10159/53654/Gradle-Dependency-Helper.zip";
      sha256 = "0sp42j64prdmlryv9a22909m2wmvhmdafhvk6wygk5ad21pa38dx";
      name = "Gradle-Dependency-Helper-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kaygisiz/Gradle-Dependency-Helper";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/kaygisiz/Gradle-Dependency-Helper/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Gradle Dependency Helper helps you to find and add external dependencies then sync project from anywhere in project.
      '';
    };
  }) {};

  gradle-modules-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gradle-Modules-Generator";
    plugname = "Gradle Modules Generator";
    plugid = "com.github.antipovandrey.generator";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11987/58475/generator-1.0.2.zip";
      sha256 = "04qbs68rhxannb2q31cm5d7p1rb136n7bly576a4rpicsc750iyj";
      name = "Gradle-Modules-Generator-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AntipovAndrey";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://termsfeed.com/eula/45e8a267524c4770af8428bf1cd30c16";
        free = false;
      };
      description = ''
        Reduce boilerplate routine in multi-module gradle projects.
    To make it works, follow these steps: 
    
        Create a directory called gradle_templates in the root of your project.
        Create subdirectories in that folder. Their names don't matter.
        Inside of each folder create a config.yml file and define a name of your module.
        Also, create additional folders - static and template and put your files in them.
    
    All content from a static directory will be copied inside of your created module. 
    In a template folder you can put Apache Velocity templates which will be resolved before copying.
    For now, you can use only module.baseName variable in your templates. It will be a value that you enter in the dialog when Ctrl + Alt + G was pressed. 
    config.yml is a Velocity template as well.
    Besides name property in a config you can use a directories property to define a list of directories to be created. You should use it when your directory name depends on a module.baseName and use empty directories inside of a static folder in other cases.
      '';
    };
  }) {};

  gradle-plugin-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gradle-Plugin-Support";
    plugname = "Gradle Plugin Support";
    plugid = "com.zxy.idea.plugin.gradle-plugin-support";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11525/54132/gradle-plugin-support-1.1.jar";
      sha256 = "150wq6jf22i1cg867bdihgg7d00rz18b1ikzb7c9fz92w7j9zdrg";
      name = "Gradle-Plugin-Support-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Sunzxyong";
      license = lib.licenses.asl20;
      description = ''
        Helps to create and develop a standard Gradle Plugin project. Includes generate the standard Gradle Plugin module、BuildSrc module and Groovy Class.

Support Android Studio 3.0.0+
      '';
    };
  }) {};

  gradle-stop = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gradle-Stop";
    plugname = "Gradle Stop";
    plugid = "com.github.shchurov.gradlestop";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9187/29763/Gradle_Stop.zip";
      sha256 = "13pr2s1bbylz1v7rbcfaswsnzw91mzw19569wgghphzymi47jdnc";
      name = "Gradle-Stop-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shchurov/GradleStop";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shchurov/GradleStop/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A small plugin that allows you to stop any running Gradle process in one click. For instance, it can help you cancel the building process. Note that it requires you to have gradlew executable in the project directory (it's there by default when using Android Studio). After the installation you can find "Gradle Stop" button on Main Toolbar and inside Run Menu. Please leave all your bug-reports and feature-requests on 
Github page.
      '';
    };
  }) {};

  gradle-view = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gradle-View";
    plugname = "Gradle View";
    plugid = "Gradle View";
    version = "4.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7150/72650/gradle-view-4.0.0.zip";
      sha256 = "0blrg49dq181wk1b29alb25q6fl8wrmpmz93xy8ibgf3az9zmkwk";
      name = "Gradle-View-4.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rholder/gradle-view";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/rholder/gradle-view/master/LICENSE";
        free = false;
      };
      description = ''
        What is this?
        Show a split tree rollup of the dependencies for each Gradle configuration in use by a project.

        Why would I need this?
        
            Dependency wrangling isn't easy in a large Java project. This IntelliJ IDEA plugin was built to add a little
            more sanity to the tedious task of analyzing dependencies by rolling up the entire dependency graph into a
            pair of more easily digestible trees derived from a serialized version of Gradle's dependency graph. The
            Dependency List provides a lexicographically sorted set of all the dependencies for each configuration in
            your project and all of its sub-projects. The Dependency Hierarchy shows a nested view of each Gradle
            configuration in your project and all of its sub-projects. Grey dependencies in the tree indicate it was
            included by a previous dependency that was added before (and can be safely omitted if it is explicitly
            being included).
        

        Features
        
            Built on the Gradle Tooling API 5.6.2, but should work on other recent versions
            Visual highlighting to indicate dependencies in use and replacement versions
            Lexicographically sorted listing for all Gradle configurations
            Load any project's Gradle dependencies, not just the one currently open inside IntelliJ
            Toggle the showing of replaced dependencies
      '';
    };
  }) {};

  gradlemaven-navigation = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GradleMaven-Navigation";
    plugname = "Gradle/Maven Navigation";
    plugid = "tv.twelvetone.gradle.plugin.navigation";
    version = "1.0.48";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9857/67825/GradleNavigationPlugin.jar";
      sha256 = "1n0vbwh773yk66qp01hcam6w3chkp6lm0ivqxhr92hxvwqvvfds7";
      name = "GradleMaven-Navigation-1.0.48.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.tv.twelvetone.tv/docs/developer-tools/intellij-plugins/maven-gradle-navigation/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://creativecommons.org/licenses/by-nd/4.0/";
        free = false;
      };
      description = ''
        Overview
Open our customized popup dialog and choose from a variety of context-sensitive destinations, including tree nodes,
    goals, and tasks.
    For each destination choose from context-sensitive actions such as go, open, run, and debug.

Say goodbye to bland popup menus and fatigue invoking nested trees. You can configure options under Settings/Appearance/Gradle
    Navigation.  Make sure to assign to the popup command to a convenient, unused function key!


Supported Technologies
Gradle, Maven, Android, IntelliJ, JPA, Babel, Webpack, NPM

Features

    Destination Popup A popup window is also provided with buttons to either go to tasks or
    groups in the Gradle tree, or run tasks directly. You can easily customize the content and order of items in the
    popup. 
    The navigation popup now includes links to various project and module settings,
    along with Android resource directories, the Maven project tree, and Maven POM files (if they exist in
    conventional locations)



    Menu Items - The Gradle/Maven Navigation Plugin for IntelliJ adds additional features to the
    standard Gradle and Maven plugin.
    You can now swivel between the source editor, the project view, and the Gradle view. A custom popup
    displays common destinations and user configured tasks and groups. Commands are added to various context menus in
    the Project Tree, Gradle Tree, and Editor Window.


  Goto Gradle/Maven - project, task, or group



    Goto Project - gradle settings or build, source root, or resource root



    Gradle Users: This plugin works for both single-project and multi-project Gradle builds.
      '';
    };
  }) {};

  grafter-macro-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Grafter-Macro-Support";
    plugname = "Grafter Macro Support";
    plugid = "org.sth.grafter-macro-support";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9387/31599/grafter-macro-support.zip";
      sha256 = "09524bigza9jv3p1pg1d8gr445n4zrzw8jdlcvp1gk8z55r2dbxb";
      name = "Grafter-Macro-Support-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shanethehat/grafter-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shanethehat/grafter-intellij-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Provides syntax support for the Grafter library
      '';
    };
  }) {};

  grammar-kit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Grammar-Kit";
    plugname = "Grammar-Kit";
    plugid = "org.jetbrains.idea.grammar";
    version = "2020.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6606/85530/grammar-kit-2020.1.zip";
      sha256 = "0ql5n2mapsxhdkcwd12rm4l1vv38a5hnblizdvznhp6yj3833z4w";
      name = "Grammar-Kit-2020.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/Grammar-Kit";
      license = lib.licenses.asl20;
      description = ''
        BNF Grammars and JFlex lexers editor. Readable parser/PSI code generator.
      '';
    };
  }) {};

  grammar-kit-folder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Grammar-Kit-Folder";
    plugname = "Grammar-Kit Folder";
    plugid = "com.mishin870.gkf";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12983/68314/GrammarKitFolder.jar";
      sha256 = "0bpsb33vi8rjjravvgmdyagy04jl3jf88ki6728y2rrjjkxx6bjd";
      name = "Grammar-Kit-Folder-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://t.me/Mishin870";
      license = lib.licenses.mit;
      description = ''
        Folding support for Intellij IDEA Grammar Kit BNF file type
        
        Example:

        
        someRule ::= id*
        //BLOCK someBlock
          class ::= modifiers 'class' id '{' classBody '}' {pin=1}
          method ::= modifiers type id '(' arguments ')' '{' methodBody '}'
        //END
        

        Will be turned into:

        
        someRule ::= id*
        [+]{someBlock}
      '';
    };
  }) {};

  graph-buddy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Graph-Buddy";
    plugname = "Graph Buddy";
    plugid = "com.virtuslab.graphbuddy";
    version = "0.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13467/105943/graphbuddy-0.4.1.zip";
      sha256 = "0iib44ha9wkp3v3ij24xj1zkdn5j9vgqcb5s82421qjgzy4awdl7";
      name = "Graph-Buddy-0.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://graphbuddy.virtuslab.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/VirtusLab/graphbuddy/master/eula.txt";
        free = false;
      };
      description = ''
        Browse your Scala code as a graph. Keep visual track of visited recently places, seamlessly integrated with Code Editor.
            More information can be found here: https://graphbuddy.virtuslab.com
      '';
    };
  }) {};

  graph-database-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Graph-Database-support";
    plugname = "Graph Database support";
    plugid = "com.neueda4j.intellij.plugin.cypher";
    version = "3.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8087/82154/graph-database-support-plugin-3.0.3.zip";
      sha256 = "1zaf956ld8nankyrswvxiffawa7w84pxywyn7015j9ry9s14nw94";
      name = "Graph-Database-support-3.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://technologies.neueda.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/neueda/jetbrains-plugin-graph-database-support/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Integration with Graph Databases
            
        

        
            Features:
        
            Manage data sources.
            Write and execute queries.
            Explore query results in graph or table view.
        
        

        
            Supported databases:
        
            Neo4j 3.4+ (Bolt)
            TinkerPop databases (Cypher for Gremlin translation)
                
                    AWS Neptune
                    JanusGraph
                    Azure Cosmos DB
                    Other TinkerPop-enabled databases
                
            
        
        

        
            Supported query languages:
        
            Cypher
            
                Understands queries in `.cyp`, `.cypher` or `.cql` files.
                Syntax highlight and error reporting.
                Refactoring support for identifiers, labels, relationship types and properties.
                
                    Autocompletion support for identifiers, labels, relationship types, properties and stored procedures.
                    Information gathered from existing queries and configured data sources.
                
                Code reformatting.
                Inspections: database warnings, function checks, type system.
                Auto-inject Cypher language for:
                    neo4j,
                    neo4j-ogm,
                    spring-data-neo4j,
                    neo4j-harness,
                    py2neo.
      '';
    };
  }) {};

  graphddl-language-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GraphDdl-Language-Support";
    plugname = "GraphDdl Language Support";
    plugid = "org.opencypher.graphddl.intellij.plugin";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11454/59106/graphddl-intellij-plugin-0.3.zip";
      sha256 = "1m9v0ncdn1ikaz20grpr03pk4fp9ynkmdkrsillxkbjhyiraph54";
      name = "GraphDdl-Language-Support-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tobias-johansson";
      license = lib.licenses.asl20;
      description = ''
        Rudimentary syntax highlighting for Graph Ddl
      '';
    };
  }) {};

  graphzeal = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GraphZeal";
    plugname = "GraphZeal";
    plugid = "manuh.graphzeal";
    version = "1.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11360/52471/GraphZeal-1.1-SNAPSHOT.zip";
      sha256 = "071vsmha9m818x19vw1zwmkjb6amxg4mq255zwc2lgk3z3lif4qj";
      name = "GraphZeal-1.1-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Manuhmutua/ZealPlugin";
      license = lib.licenses.mit;
      description = ''
        A plugin that makes the apollo GraphQl usage in android studio easy. Sets up all the folders needed for usage and generates the schema .JSON file
    made for GraphQL lovers
      '';
    };
  }) {};

  graql = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Graql";
    plugname = "Graql";
    plugid = "com.intellij.lang.graql";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10402/48897/JetBrains-Graql-Plugin.zip";
      sha256 = "0i9d1zwdq8wz9f4v8wviw9scv19r2ana28zyf4iy20m6m5pqy5kl";
      name = "Graql-1.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sourceplusplus.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/BFergerson/IntelliJ-Graql-Plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Graql language support
      '';
    };
  }) {};

  grav-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Grav-Support";
    plugname = "Grav Support";
    plugid = "net.offbeatpioneer.intellij.plugins.gravsupport";
    version = "0.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9971/105871/Grav_Support-0.6.1.zip";
      sha256 = "060438wq443pzqv16b5mx1mq71xbh7srvbr1j32pwy7fsfim7isw";
      name = "Grav-Support-0.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.offbeat-pioneer.net/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/PioBeat/GravSupport/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Grav Support for IntelliJ PhpStorm, Community Edition and Ultimate
      '';
    };
  }) {};

  graven = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Graven";
    plugname = "Graven";
    plugid = "com.wannabe.graven";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8592/28067/graven.jar";
      sha256 = "09gksvkxhadzdx0pp58936f9kyccm8ffvizv28wcn08pzjrg2981";
      name = "Graven-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wbars/graven";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wbars/graven";
        free = false;
      };
      description = ''
        Plugin for transformation accidentally copy&amp;paste dependencies
      '';
    };
  }) {};

  gray-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gray-Theme";
    plugname = "Gray Theme";
    plugid = "com.jetbrains.grayTheme";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12103/102791/GreyTheme.jar";
      sha256 = "1bgnmqvfrhir8nx3d1miwyir21dwhznc4yv5f4a7my753763zjd9";
      name = "Gray-Theme-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/OlyaB";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/OlyaB/GreyTheme/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A low-contrast light theme with lots of space between text lines. Made for writing in Markdown inside IntelliJ IDEs.
  

  For version 2019.1 and above.
  

  Please note that this theme overrides your font settings. Uncheck "Use color scheme font instead of the default" in Setting | Editor | Color Scheme | Color Scheme Font to return your font settings.
  

  To install:
  
  Go to Settings (Preferences) | Plugins, find the theme plugin and install it
  Restart IDE
  Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
  
  

  Report an issue | On GitHub | How to make a theme
      '';
    };
  }) {};

  grazie-completion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Grazie-Completion";
    plugname = "Grazie Completion";
    plugid = "com.intellij.grazie.completion";
    version = "0.1.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14750/104357/grazie-completion-0.1.13.zip";
      sha256 = "1ayzs6mww2n1qiawgh52rs97zd7nj75603dy2hzd6l6kwr4w3vsx";
      name = "Grazie-Completion-0.1.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Intelligent natural language text completion in the IDE.
        
        
            Suggests subsequent words, phrases, and even whole sentences as you type.
            Takes semantics and context into account.
            Works in Markdown, XML, and Plain text files, as well as Git commit messages.
        
        
        
            Under the hood, the plugin is based on the latest developments in deep learning and
            natural language processing to provide accurate and reliable suggestions.
        
        
        
            Note that the plugin requires internet access and the JetBrains internal access key
            to connect to the Grazie Cloud infrastructure where all processing is performed.
      '';
    };
  }) {};

  grazie-gec = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Grazie-GEC";
    plugname = "Grazie GEC";
    plugid = "com.intellij.grazie.gec";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14983/98561/grazie-gec-0.1.2.zip";
      sha256 = "1icfmkz5a5zg1wvvih98qvp0v3ixmga7z564plfwqkvjiakczh2v";
      name = "Grazie-GEC-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Intelligent spelling and grammar checks for text that you write in the IDE.
    
    
        Checks sentences with respect to semantics and context.
        Works in Markdown and Properties files.
        Only English language is supported right now.
    
    
    
        Under the hood, the plugin is based on the latest developments in deep learning and
        natural language processing to provide accurate and reliable corrections.
    
    
    
        Note that the plugin requires internet access and the JetBrains internal access key
        to connect to the Grazie Cloud infrastructure where all processing is performed.
      '';
    };
  }) {};

  greek-symbols = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Greek-symbols";
    plugname = "Greek symbols";
    plugid = "im.plmnt.plugin.greek";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12793/66454/greek-symbols.zip";
      sha256 = "1a80s9i6xi7a7f61v3dmbhy1bykd6vyrlndqc03ba1x3yd6z0qk3";
      name = "Greek-symbols-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://plmnt.im/";
      license = lib.licenses.mit;
      description = ''
        Live Templates for Greek symbols
      View details in Preferences -&gt; Editor -&gt; Live Templates -&gt; Greek.
      '';
    };
  }) {};

  green-lite-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Green-lite-theme";
    plugname = "Green lite theme";
    plugid = "com.pjialin.green-lite-theme";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12893/74991/green-lite-theme-0.1.2.zip";
      sha256 = "0fknar6mvxwgxm01ffn1i5frn3x71n7l6502kzg9n98nzkzf8f4f";
      name = "Green-lite-theme-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://pjialin.com";
      license = lib.licenses.asl20;
      description = ''
        A simple green theme changed from one dark theme.
      '';
    };
  }) {};

  gregs-deobsfuscation-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gregs-Deobsfuscation-Tools";
    plugname = "Greg's Deobsfuscation Tools";
    plugid = "world.gregs.intellij.plugins.deobfuscation";
    version = "1.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14101/107370/intellij-deobfuscation-plugin-1.2.5.jar";
      sha256 = "0rrn4b46lv3k8nvf578sw16dz8czhr6j35l2nri11viadqncb8br";
      name = "Gregs-Deobsfuscation-Tools-1.2.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://greghibberd.com";
      license = lib.licenses.bsd3;
      description = ''
        A few intellij plugins to assist refactoring obfuscated code
      '';
    };
  }) {};

  grep-console = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Grep-Console";
    plugname = "Grep Console";
    plugid = "GrepConsole";
    version = "11.4.202.000.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7125/107588/GrepConsole.zip";
      sha256 = "0apm4lga2z5br0mlp0w2a0fw8vk849954zc647hcmknj455ii2y0";
      name = "Grep-Console-11.4.202.000.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/GrepConsole";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/krasa/GrepConsole/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Grep, tail, filter, highlight... everything you need for a console (JS/NPM/GoLand/... Terminals are not supported by IntelliJ!). Also can highlight the editor...
	         
		  Features:
		  
			Change colors of matching text.
			Grep output into a new console tab.
			Change output or execute any action using custom groovy scripts or plugins.
			Filter out unwanted lines.
			Workaround for stdout/stderr stream mixing
			Fold output.
			Play sounds on matches.
			Clear Console on matches.
			Tail files*.
		  
		  
		  Editor actions:
		  
			Apply highlights in the editor according to the plugin's console settings. (Main menu | Tools)
			Toggle highlight on all occurrences of the selected text in the editor. (Ctrl+Alt+F3; Editor Popup Menu; Main menu | Tools)
		  
		   
	 		*File Tailing: 
	 		- Main menu | Tools | Open File in Console
	 		- Main Menu | Help | Tail (IntelliJ) Log in Console
	 		- Project View ToolWindow | right click context menu | Tail
	 		- Drag&amp;Drop "Tail File" panel in main toolbar
	 		- http and Windows context menu integration
	 		- Encoding auto-detection
	 		
			Inspired by Grep Console plugin for Eclipse
			Used Remote call plugin implementation for http integration.      
		    
			       
        Donations are welcomed.
      '';
    };
  }) {};

  greycat-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GreyCat-IDEA";
    plugname = "GreyCat IDEA";
    plugid = "com.datathings.greycat.idea";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9771/37126/greycat-idea-plugin.zip";
      sha256 = "00rs29vvhc7d2mihyw8camm0wzxfi9slfdg2zvlph0cn4j1dwz9d";
      name = "GreyCat-IDEA-2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.datathings.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/datathings/greycat-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin aims at ease the edition of GreyCat Model, later use to generate a typing layer for the GreyCat framework.
 
GreyCat is an open source project, source code can be found at http://greycat.ai or http://github.com/datathings/greycat
      '';
    };
  }) {};

  groovy-console-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Groovy-Console-Plugin";
    plugname = "Groovy Console Plugin";
    plugid = "Groovy Console Plugin";
    version = "0.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4660/8542/Groovy_Console_Plugin_8542.zip";
      sha256 = "00s6jab1w5b2k67lh4h53l82mk4jv0srsgxl0jckqyj8wyx279mj";
      name = "Groovy-Console-Plugin-0.1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/4660/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/4660/sourceCode.zip";
        free = false;
      };
      description = ''
        Allows to run Groovy Console in Idea classloader, so that makes testing different APIs really easy
      '';
    };
  }) {};

  groupper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Groupper";
    plugname = "Groupper";
    plugid = "ua.in.dej.groupper";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10353/108178/groupper.jar";
      sha256 = "0ikjz181ljyjizw0l8sidyrcmfk7srrblns83d8r84ka38hzlk5a";
      name = "Groupper-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://dej.in.ua";
      license = lib.licenses.mit;
      description = ''
        This plugin doesn't move/rename files or folders!
      This plugin allow you to group files by name.
      You can group/ungroup files in folder by context menu or group/ungroup all files in project (File -&gt; Settings -&gt; Groupper -&gt; Groping always)
      You can change pattern to any other value (default value: [^\.]{1,}(?=\.) )
      'Hide Folding Prefix' take potability hide part of filename with complete with pattern.
      You can navigate between files in group by popup ( Ctrl + Alt + \ )
      Ctrl + Alt + ' - switch to next file
      Ctrl + Alt + ; - switch to prev file
      '';
    };
  }) {};

  gruvbox-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gruvbox-Color-Scheme";
    plugname = "Gruvbox Color Scheme";
    plugid = "color.scheme.Gruvbox";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12419/81220/Gruvbox.jar";
      sha256 = "02m197w3fpcagh8g0y9g0v4dkgvf9s45qp89j3nhpw6r4s7xrgy1";
      name = "Gruvbox-Color-Scheme-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nzer0nz/Intellij-Gruvbox-Colorscheme-for-Go";
      license = lib.licenses.mit;
      description = ''
        Gruvbox colorscheme for Go Programming Language based on Material Monokai Pro
      '';
    };
  }) {};

  gruvbox-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Gruvbox-Theme";
    plugname = "Gruvbox Theme";
    plugid = "com.vincentp.gruvbox-theme";
    version = "0.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12310/102528/gruvbox-theme-0.4.3.zip";
      sha256 = "1ifbxy080qifcpjlki1gsy42dz8cbk1srbs3ljkhgvq48330csq2";
      name = "Gruvbox-Theme-0.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Vincent-P";
      license = lib.licenses.mit;
      description = ''
        gruvbox is heavily inspired by badwolf, jellybeans and solarized.

    Designed as a bright theme with pastel 'retro groove' colors and light/dark mode switching in the way of solarized. The main focus when developing gruvbox is to keep colors easily distinguishable, contrast enough and still pleasant for the eyes.
      '';
    };
  }) {};

  gsonformat-plus = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GsonFormat-Plus";
    plugname = "GsonFormat-Plus";
    plugid = "GsonFormat-Plus";
    version = "1.6.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15738/107442/GsonFormat-Plus.jar";
      sha256 = "13ib7r1xfhhzik4rkfxgf4gy9nj49977zcfnxvlly5jf617f94hi";
      name = "GsonFormat-Plus-1.6.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/GitHub-Xzhi/GsonFormat-Plus";
      license = lib.licenses.asl20;
      description = ''
        English:
        Quickly to convert a JSON string to an InnerClassEntity class.
        The secondary development based on
         GsonFormat
        , which makes the plugin's function enhanced.
        
        usage
        Use keyboard shortcuts in class
        
            Keyboard Shortcuts
                
                    Alt+S
                    Alt+Insert
                
            
        
        中文：
        快速将JSON字符串转换为实体类。
        基于
         GsonFormat 
        二次开发，增强了插件本身的功能。
        
        用法
        在类中使用快捷键
        
            快捷键（二选一）
                
                    Alt+S
                    Alt+Insert
                
            
        
        openSource
      '';
    };
  }) {};

  gsonformat4databinding = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "GsonFormat4DataBinding";
    plugname = "GsonFormat4DataBinding";
    plugid = "GsonFormat4DataBinding";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10719/45721/GsonFormat4DataBinding.jar";
      sha256 = "06n6p3m3fqscgvn01b0iir4yrj55h29khls9ph8fiklbv57jrci7";
      name = "GsonFormat4DataBinding-1.5.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        quickly to convert a JSON string to an InnerClassEntity class ..
 
 openSource
      '';
    };
  }) {};

  gsonformatplus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GsonFormatPlus";
    plugname = "GsonFormatPlus";
    plugid = "GsonFormatPlus";
    version = "1.5.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14949/106499/GsonFormatPlus-1.5.7.zip";
      sha256 = "0vg8qq67fqgwp72yj9883gd7drrfgnni1rkhfzkvghc1ldk5wf1f";
      name = "GsonFormatPlus-1.5.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mars-men/GsonFormatPlus";
      license = lib.licenses.asl20;
      description = ''
        README_EN
GsonFormatPlus github 
This is a plugin you can generate Json model from Json String.
This Plugin is only for IntelliJ IDEA.
which is base on GsonFormat
and more flexible and convenient. Welcome to issue and PR.
Install

Using IDE built-in plugin system on Windows:

File &gt; Settings &gt; Plugins &gt; Browse repositories... &gt; Search for "GsonFormatPlus" &gt; Install Plugin



Using IDE built-in plugin system on MacOs:

Preferences &gt; Settings &gt; Plugins &gt; Browse repositories... &gt; Search for "GsonFormatPlus" &gt; Install Plugin



Manually:

Download the latest release and install it manually using Preferences &gt; Plugins &gt; Install plugin from disk...
From official jetbrains store from download





Restart IDE.
Usage
1.Use IDE menu

2.Use hotkey
Default Option + s(Mac), Alt + s (win)
You can change the hotkey via: 

3.Use Demo

4.Setting

&nbsp;
SETTING


modulevaluedefaultdescription
Convert Methodobject/arrayFromDatafalseGson convert methodGeneratevirgo modetruevirgo modeGenerategenerate commentsfalsegenerate commentsGeneratesplit generatefalsesplit generate sub classBeanreuse beanfalseTODOFieldname suffixtrueclass suffixFieldfield(private/public)trueaccess levelFieldname prefixtruefield name prefixFielduse serialized nametrueuse serialized nameFielduse wrapper classtrueuse wrapper class，eq: int convert IntegerFielduse lomboktrueuse lombok replace Getter/SetterFielduse number key as maptrueuse number key as map，TODOConvert libraryjackson/fastjsontruejackson/fastjson convert library

&nbsp;
Version Info

1.5.7 by wangzhejun

fix some json5 format bug


1.5.6 by mars-men

remote json dialog ‘VK_ENTER’ listener
update readme


1.5.5 by mars-men

upload to jetbrain plugin center


1.5.2 by wangzejun

support field comment
support json5 format


1.5.1 by mars-men

setting jackson annotation as default
support lombok as option
fix some bug


1.5.0 - 3 years ago by gsonformat

fix several bug
fix unlock setting window size


1.4.0

New: Support for autovalue
New: Support for lombok
New: Support for split generate class


the end
      '';
    };
  }) {};

  gsonorxmlformat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "GsonOrXmlFormat";
    plugname = "GsonOrXmlFormat";
    plugid = "GsonOrXmlFormat";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8435/92765/untitled.zip";
      sha256 = "17gzxlw5nl1pcbxy0dp17ganf31ma4pbkvgqnn989rqn094im2vl";
      name = "GsonOrXmlFormat-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jianshu.com/users/ba75c37d6571/latest_articles";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/8435/license.txt";
        free = false;
      };
      description = ''
        Support GSON and XML to the entity class
      '';
    };
  }) {};

  gtm-enhanced = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Gtm-Enhanced";
    plugname = "Gtm Enhanced";
    plugid = "ee.developest.gtm";
    version = "1.0.0-stable";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15794/108091/gtm-enhanced-1.0.0-stable.jar";
      sha256 = "1m37qvjyqmmj3liqkzhn0zshny2iy8y2gryqnk8v53h4fnlx7rn2";
      name = "Gtm-Enhanced-1.0.0-stable.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DEVELOPEST/gtm-jetbrains";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin for integration with gtm-core for smooth time tracking.
         
        Tracks all times spend editing files within git repository as well as run / build events. 
        Tracked time is saved as git notes and therefore can be pulled / pushed to git. 
        
        Installation consists of 2 steps: 
            1) Install gtm executable from https://github.com/DEVELOPEST/gtm-core
            2) Install plugin from Jetbrains IDE
        
        NB! To enable time tracking in repository you have to manually type "gtm init" in terminal whilst in project directory or click yes upon prompt by IDE
        
        All bugs and feature requests shall be reported to GitHub
      '';
    };
  }) {};

  guava-postfix-completion = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Guava-Postfix-Completion";
    plugname = "Guava Postfix Completion";
    plugid = "uk.co.drache.intellij.guavaPostfixCompletion";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7503/29324/guava-postfix-plugin.jar";
      sha256 = "0jdh6g8wlkdcbhr3n34a8crglwnv7r87paxxjp8q76ccgpcj879n";
      name = "Guava-Postfix-Completion-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ukcrpb6/guava-postfix-plugin";
      license = lib.licenses.asl20;
      description = ''
        Postfix completion templates for guava

      Available templates:

      
         .checkArgumentChecks that the boolean is truecheckArgument(expr)
      

      
         .checkNotNullChecks that the value is not nullcheckNotNull(expr)
      

      
         .checkStateChecks some state of the object, not dependent on the method argumentscheckState(expr)
      

      
         .checkElementIndexChecks that index is a valid element index into a list, string, or array with the specified sizecheckElementIndex(index, size)
      

      
         .checkPositionIndexChecks that index is a valid position index into a list, string, or array with the specified size checkPositionIndex(index, size)
      

      
         .checkPositionIndexesChecks that [start, end) is a valid sub range of a list, string, or array with the specified sizecheckPositionIndexes(start, end, size)
      

      
         .joinJoins pieces of text (specified as an array, Iterable, varargs or even a Map) with a separatorJoiner.on(',').join(iterable)
      

      
         .splitExtracts non-overlapping sub-strings from an input string, typically by recognizing appearances of a separator sequenceSplitter.on(',').split(CharSequence)
      

      
         .immutableListCopyOfCreates an immutable list containing the given elements, in orderImmutableList.copyOf(Array|Collection|Iterator|Iterable)
      

      
         .immutableListOf Creates an immutable list containing a single elementImmutableList.of(Object)
      

      
         .immutableSetCopyOfCreates an immutable set containing the given elements, in orderImmutableSet.copyOf(Array|Collection|Iterator|Iterable)
      

      
         .immutableSetOfCreates an immutable set containing a single elementImmutableSet.of(Object)
      

      
         .fluentIterableCreates a fluent iterable that wraps iterable, or iterable itself if it is already a FluentIterableFluentIterable.from(Iterable)
      

      
         .optionalCreates an optional around the element, if variable is annotated as @Nullable then .fromNullable will be used, .of otherwiseOptional.of(Object)
      

      Postfix completion templates for java 7+

      Available templates:

      
         .requireNonNullRequires that the value is not nullrequireNonNull(expr)
      '';
    };
  }) {};

  guava-equals-hashcode-and-tostring-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Guava-equals-hashCode-and-toString-generator";
    plugname = "Guava equals, hashCode and toString generator";
    plugid = "com.seanlandsman.idea.plugins.guavagenerators";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7244/15793/guavagenerators.jar";
      sha256 = "105b6aspqvlpjybcxjhn7f3diilrz5ngvdvga9g665wknizf0jz8";
      name = "Guava-equals-hashCode-and-toString-generator-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.seanlandsman.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.seanlandsman.com";
        free = false;
      };
      description = ''
        Generates equals and hashCode, as well as toString, utilising the Guava libraries
ALT+INSERT : equals &amp; hashCode and toString options will be shown.
 Given a class with the following fields: private int field1; private String field2; private long field3;
 The following methods would be generated:
 @Override public boolean equals(Object o) { &nbsp;&nbsp;&nbsp;&nbsp;if (this == o) return true; &nbsp;&nbsp;&nbsp;&nbsp;if (o == null || getClass() != o.getClass()) return false;
 &nbsp;&nbsp;&nbsp;&nbsp;TestHarness that = (TestHarness) o;
 &nbsp;&nbsp;&nbsp;&nbsp;return Objects.equal(this.field1, that.field1) &amp;&amp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.equal(this.field2, that.field2) &amp;&amp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.equal(this.field3, that.field3); }
 @Override public int hashCode() { &nbsp;&nbsp;&nbsp;&nbsp;return Objects.hashCode(field1, field2, field3); }
 @Override public String toString() { &nbsp;&nbsp;&nbsp;&nbsp;return Objects.toStringHelper(this) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.add(&quot;field1&quot;, field1) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.add(&quot;field2&quot;, field2) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.add(&quot;field3&quot;, field3) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.toString(); }
      '';
    };
  }) {};

  hap-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "HAP-Support";
    plugname = "HAP Support";
    plugid = "com.hand.ide.plugin.hap-support";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12254/60980/hap-support-0.0.1.jar";
      sha256 = "0v8z7nw37fx6k0m8d39dij61bj5xdkp7dmhq7s6syjp878crrqpi";
      name = "HAP-Support-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.xuzhao.xin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/twtyjvkg/hap-support/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Supports the development of HAND Application Platform with IntelliJ IDEA.
    
    
    donation
      '';
    };
  }) {};

  hcl-appscan = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HCL-AppScan";
    plugname = "HCL AppScan";
    plugid = "com.ibm.appscan.intellij.plugin";
    version = "1.0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10881/102248/intellij_plugin.zip";
      sha256 = "1c95m25nmzy331b16rm26jimz5nlvyfg9g5x9fairyz56zxp40in";
      name = "HCL-AppScan-1.0.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://cloud.appscan.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://help.hcltechsw.com/appscan/asoc/src_intellij_license.html";
        free = false;
      };
      description = ''
        HCL AppScan PluginApply the power of static application security testing with HCL AppScan  -- a SaaS solution that helps to eliminate vulnerabilities from applications before they are deployed. HCL AppScan integrates directly into the SDLC, providing static, dynamic, mobile and open source testing.You can submit static and open source scans directly from the HCL AppScan IntelliJ plugin or use it to view results run by others in your IDE. The results are quickly returned (90% are returned in less than one hour) directly within IntelliJ, having been honed by Intelligent Finding Analytics, which uses IBM’s Artificial Intelligence capabilities to greatly reduce false positives and other noise by an average of more than 98%.  IFA also displays optimal locations for developers to fix multiple vulnerabilities in the code. Click here for more information.Not yet a customer of HCL AppScan? Click here to start a free trial to use with this plugin
      '';
    };
  }) {};

  hdf5-visualizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HDF5-Visualizer";
    plugname = "HDF5 Visualizer";
    plugid = "com.zxwl.HDF5Visualizer.plugin.id";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13205/70942/HDF5Visualizer.zip";
      sha256 = "117pz7w0mcf3mpd50pqd82jic5xzj8d92h6ja4fqmqkzc66mm0lv";
      name = "HDF5-Visualizer-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mail.163.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://account.jetbrains.com/licenses?_ga=2.106168452.660163913.1571621479-1240477839.1568775224";
        free = false;
      };
      description = ''
        This product is used to parse data files (.h5 files) generated by deep learning in ai machine learning.
      Generate a sequential model diagram according to the order of the model during training.
       Clicking on the node in the diagram will display the model data in the table on the right.
      '';
    };
  }) {};

  hll-api-navigator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HLL-API-Navigator";
    plugname = "HLL API Navigator";
    plugid = "com.github.max.hll.api-navigator";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15172/106217/api-navigator-0.1.1.zip";
      sha256 = "080sf0lrbj08mmgswa5v9l2nr38dr89vj09y3qf97l18hcz84mzx";
      name = "HLL-API-Navigator-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        HLL API Navigator is a plugin for improving development efficiency in Hualala
    company FOR NOW. It can help you navigate from method attribute value in a xml file to corresponding java method.



            
Feature:
Jump between xml file attribute value and corresponding java method.
      '';
    };
  }) {};

  hocon = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HOCON";
    plugname = "HOCON";
    plugid = "org.jetbrains.plugins.hocon";
    version = "2020.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10481/79197/intellij-hocon-2020.1.0.zip";
      sha256 = "1fbpfiqkdwzql7vif17dm936qhzlpi4pxgn2j2kqp91q2hzn65wi";
      name = "HOCON-2020.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AVSystem/intellij-hocon";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Standalone HOCON plugin for IntelliJ IDEA
      '';
    };
  }) {};

  hocon-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HOCON-Converter";
    plugname = "HOCON Converter";
    plugid = "HOCON Converter";
    version = "0.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11959/59224/hoconplugin-0.2.3.zip";
      sha256 = "1d4v42ldwc1gczcl65a6niwswpzsgn6hj1wr1kwwc0rjrfgj6yp1";
      name = "HOCON-Converter-0.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dbulla/hocon-converter-plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        This is a plugin for Intellij IDEA which converts HOCON back and forth between map-like and property-like formats.

This can be really useful when you need to change Spring property keys (which are resolved like 

    "''${aaa.bbb.ccc.ddd}"

and your files are in .conf format, like

    aaa {
      bbb {
        ccc {
          ddd = "some value"
        }
      }
    }


    Simply convert the .conf-style file into property-style, then you can search/replace

Features completed

    read in basic properties-formatted file with simple key/value pairs
    read in basic conf-formatted file with simple key/value pairs &amp; maps
    Keep "include" at top of file (in order)
    Top-level lists, like this:
    
cors = [
  "xxxx",
  "yyyy"
]

    Option to "flatten" keys
    Option to move top-level lists to the bottom 
    Single-line comments

What's NOT working

    Lists inside maps or other lists (only top-level lists are working currently)



Planned features

    Auto-detection of if the text is from a .yml file - if so, then it needs to be indented after the `app |-`
        line
      '';
    };
  }) {};

  hp-ali = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HP-ALI";
    plugname = "HP ALI";
    plugid = "com.hp.alm.ali";
    version = "3.17.141.3056.4";
    src = fetchurl {
      url = "https://github.com/janotav/ali-idea-plugin/releases/download/v3.17/ali-idea-plugin.zip";
      sha256 = "1g1dcdjqhn8i81sk7i95lcaqzj9jgnmazmf0ccs8k1c9w60wijdx";
      name = "HP-ALI-3.17.141.3056.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/janotav/ali-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Application Lifecycle Intelligence for HP ALM
      '';
    };
  }) {};

  html-entity = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "HTML-Entity";
    plugname = "HTML Entity";
    plugid = "HtmlEntity";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8408/26451/HtmlEntity.jar";
      sha256 = "1d3zxngdzqvs5ffn6hm9qqx3a4sy1wn3n8qp0xcax6b8bwbzwrzi";
      name = "HTML-Entity-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Reports any occurrences of illegal HTML characters and provides a quick fix to replace them by their equivalent HTML entity, e.g. replaces '©' with '&amp;copy;'.
      '';
    };
  }) {};

  html-to-kotlinx-html = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HTML-to-kotlinx.html";
    plugname = "HTML to kotlinx.html";
    plugid = "io.data2viz.kotlinx.htmlplugin";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12205/87411/kotlinx.html-plugin-1.0.7.zip";
      sha256 = "0dqw6cr3gfbbr97hb2frmrx7lmi8gpx31ji7gng83ljysfh1d714";
      name = "HTML-to-kotlinx.html-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://data2viz.io";
      license = lib.licenses.asl20;
      description = ''
        An Intellij plugin to copy/paste from HTML to kotlinx.html.

This plugin simplifies the transformation of HTML code to a kotlinx.html project by automatically
doing the conversion during a copy/paste.
      '';
    };
  }) {};

  hacker-news = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hacker-News";
    plugname = "Hacker News";
    plugid = "sh.spinlock.idea.hackernews";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13701/83339/idea-hacker-news.jar";
      sha256 = "0syhmdam9rmlgyzzj6l41wr8i2v7i9cdfvqfy4c98nigdv88xd9w";
      name = "Hacker-News-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SpinlockLabs";
      license = lib.licenses.mit;
      description = ''
        Allows you to browse Hacker News from inside your IDE.
      '';
    };
  }) {};

  hadouken-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hadouken-Progress-Bar";
    plugname = "Hadouken Progress Bar";
    plugid = "hadouken.progress.bar";
    version = "1.00";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12453/62874/HadoukenProgressBar.jar";
      sha256 = "1wmq35jpx2cx2ljk072sxzh2dwjhqny515h2kjwdsdjiz7lnaz49";
      name = "Hadouken-Progress-Bar-1.00.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.mozilla.org/en-us/mpl/2.0/";
        free = false;
      };
      description = ''
        Awesome progress bar for IJ based IDEs. Based on the Nyan Progress Bar by Dmitry Batkovich
      '';
    };
  }) {};

  hagrid = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hagrid";
    plugname = "Hagrid";
    plugid = "Hagrid";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/33/79/Hagrid_79.jar";
      sha256 = "0cg4n6l0cvqp8nvaas827m877m4g15ndzyvbh99s14p1b7k98ci5";
      name = "Hagrid-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The Hagrid plugin gives a quick overview of all possible key mapping conflicts.
      '';
    };
  }) {};

  hakuna-matata-postfix-completion = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hakuna-Matata-Postfix-Completion";
    plugname = "Hakuna Matata Postfix Completion";
    plugid = "com.cesards.intellij.hakunamatata";
    version = "0.4.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8447/26783/HakunaMatata.jar";
      sha256 = "1lin39np0md3azkgxrdlxszy8fkahw8m1kc293230ia5mcp8n4yn";
      name = "Hakuna-Matata-Postfix-Completion-0.4.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cesards/HakunaMatataIntelliJPlugin";
      license = lib.licenses.asl20;
      description = ''
        The main purpose of the plugin is adding postfix completion and live templates we can use in our day to day development. 

 
Available live templates: 
 
  prsf – Inserts '\'private static final'\' statement –  
  prsfi – Inserts '\'private static final int'\' statement –  
  prsfs – Inserts '\'private static final String'\' statement –  
  ifElse – Inserts '\'if else'\' statement –  
  time – Inserts '\'Timber.e(exception, String)'\' statement –  
  timd – Inserts '\'Timber.d(String)'\' statement –  
  timv – Inserts '\'Timber.v(String)'\' statement –  
  timm – Inserts '\'Log method name and its arguments'\' statement –  
  timw – Inserts '\'Timber.w(Exception, String)'\' statement –  
  timi – Inserts '\'Timber.i(String)'\' statement –  
  timr – Inserts '\'Log result of this method'\' statement –  
  timwtf – Inserts '\' Timber.wtf(Exception, String)'\' statement –  
 
 
Available postfix completion templates: 
 
  .emptyCheck  
  .newInstanceWithAssignment  
  .newInstanceReplacement  
  .ifElse  
  .assertEquals  
  .assertNotEquals  
  .assertSame  
  .assertNotSame  
  .assertThat  
  .assertTrue  
  .assertFalse  
  .whenThen  
  .whenThenCallRealMethod  
  .whenThenAnswer  
  .whenThenReturn  
  .whenThenThrow  
  .verify  
  .verifyNoMoreInteractions  
  .verifyZeroInteractions  
  .doNothingWhen  
  .doReturnWhen  
  .doThrowWhen  
  .mock  
 
 
 Do you want more information about the live templates and postfix completions included in the plugin?  Have a look to the repository's README file
      '';
    };
  }) {};

  halcyon-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Halcyon-Theme";
    plugname = "Halcyon Theme";
    plugid = "com.ADMARIl.halcyon-jetbrains";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14093/100083/halcyon-jetbrains-1.0.1.zip";
      sha256 = "16f5d7ljnnvlb6i0z6g1apbj0vc1653vyb61b8fbkyxp4nabzccy";
      name = "Halcyon-Theme-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ADMARIl/halcyon-jetbrains";
      license = lib.licenses.mit;
      description = ''
        A minimal, dark blue theme for the JetBrains suite of IDEs based on
    Brittany Chiang's VSCode theme. Please consider leaving a review for this theme!
    
    
    
    
    Due to the way JetBrains handles syntax highlighting, there are some slight differences in coloring from the original.
    
    Setup
    
        Open the Plugins panel in your IDE. File → Settings → Plugins
        Search for Halcyon Theme
        Click Install to install it
        Click Ok to apply the changes
        Restart the IDE when prompted
        If the theme isn't automatically chosen, go to File &gt; Settings &gt; Appearance &amp; Behavior &gt; Appearance &gt; Theme &gt; Halcyon
    
    Updating
    While the IDE should prompt you when an update is available, there is occasionally an issue where the theme isn't applied after an update
    
        To fix this, go to File → Settings → Editor → Color Scheme and ensure Halcyon is selected under the Scheme dropdown.
        Next, ensure Halcyon is selected under File → Settings → Appearance &amp; Behavior → Appearance → Theme
        If the previous two steps didn't fix your issue, try restarting your IDE; otherwise, please open an issue.
      '';
    };
  }) {};

  halo-toolkit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Halo-Toolkit";
    plugname = "Halo Toolkit";
    plugid = "org.xujin.halo.toolkit-intellij";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13967/81268/HaloToolKit-1.0.0.zip";
      sha256 = "1f9c6immzgp1nbf45rjch4ip928k7kp6qnyd2813c2xaijw4hw1h";
      name = "Halo-Toolkit-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://xujin.org";
      license = lib.licenses.asl20;
      description = ''
        Halo, Chinese Name is 光环. We are committed to the construction of the middle platform,
Business Architecture Governance And Code Anti-Corrosion. This framework is Based on DDD, CQRS,
Extension Point,And Process Choreography etc.



    The Halo Toolkit is an open-source plug-in for JetBrains IDEs that makes it easier to develop  Halo applications.
    The toolkit helps you create, develop, and debug Halo applications built using the Halo Framework.



    See Installing the Halo Toolkit for
    JetBrains in the Halo Toolkit for JetBrains User Guide.



    If you come across bugs with the toolkit or have feature requests, please raise an issue.

Features
Enhances Your Productivity When Developing Applications Based on Halo Framework

    
        New Project Wizard - Supporting Wizard-based Rapid Building of Mid-platform Applications and Traditional Applications
         Learn More
    
    
        Maintain Business domain And Application Relationship -Click the icon in front of @Domain in the application Spring Application startup
        entry program to quickly
                maintain the relationship between application and business domain.
        Learn More
    
    
        Resource Explorer - View your AWS Lambda remote functions &amp; related CloudFormation stacks
        Learn More
    
    
        Configure Halo Server - Halo Server in Halo Setting supports custom code generator server and Halo Admin
        visual server URL
         Learn More
    
    
        Manage Data Sources - Data Source in Halo Setting supports data source management
        Learn More
    
     
        Enable feature configuration Managemen - Halo Config in Halo Setting supports closing and opening plug-in functionality
        Learn More
    

    
        Right Click Creation - Right-click support for creating 13 Java classes, including creating entities, domain services,
                processes, repositories, Controller, etc.
        Learn More
    

     
        Support Select Database Connection - Right-click Create Data Object Support Select Database Connection and Wizard Create Engineering Support Select Database Connection.
        Learn More
      '';
    };
  }) {};

  handlebarsmustache = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HandlebarsMustache";
    plugname = "Handlebars/Mustache";
    plugid = "com.dmarcotte.handlebars";
    version = "144.2131";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6884/22895/handlebars-144.2131.zip";
      sha256 = "0nby788915wk0ijx5biqv1hk4ibdq74sgf97f54q1bxdvfiwmlm5";
      name = "HandlebarsMustache-144.2131.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dmarcotte/idea-handlebars";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/6884/license.txt";
        free = false;
      };
      description = ''
        Support for Handlebars and Mustache template languages
Features

Customizable highlighting for the template syntax
Completion for closing tags and braces as well as for HTML tags
Files with the .html extension can be treated as Handlebars or Mustache files
Automatic indentation when typing
      '';
    };
  }) {};

  handy-export-jar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Handy-Export-Jar";
    plugname = "Handy Export Jar";
    plugid = "org.yanhuang.plugins.intellij.exportjar";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11438/107300/handy-export-jar.jar";
      sha256 = "0aggpsq6g5wazcm1p4jmq07pjidcwhwlw3ra6010jrpf35pn9jip";
      name = "Handy-Export-Jar-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zhyhang/export-jar";
      license = lib.licenses.mit;
      description = ''
        Quickly export java project's class, resource, source file to jar, like Eclipse's action of export to jar. 
      
      Usage: 
      select files, right click mouse, click "Export Jar..." to perform export 
      click VCS menu  "Export Jar from Local Changes..." to export local changes
      NOTES: export local changes not include un-version-control changes 
      in Local Changes dock panel, right click mouse, click "Export Jar from Local Changes..." to export local changes
      in normal commit changes dialog, click "Export Jar..." in commit button group to export local changes
      '';
    };
  }) {};

  happy-commit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Happy-Commit";
    plugname = "Happy Commit";
    plugid = "happy-commit";
    version = "1.0.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15138/98059/happy-commit.jar";
      sha256 = "012z5b8nyhrmr9zibmk0d6ssnynw38ka187xz0ava1sbph4sczfp";
      name = "Happy-Commit-1.0.2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/NWYLZW/happy-commit";
      license = lib.licenses.asl20;
      description = ''
        Create a commit message with the following template:
      
      You can create a `.commit-template.json` file in the project root directory
      Then customize the template that needs to be submitted
      You can also click the initialize button in the submit panel to generate the specified template content
      

      创建模板提交消息:
      
      你可以在项目根目录下创建一个`.commit-template.json`文件
      然后在其中自定义需要提交模板
      也可以在提交面板点击初始化按钮生成指定模板内容
      '';
    };
  }) {};

  hash-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hash-Generator";
    plugname = "Hash Generator";
    plugid = "ru.itbasis.plugins.intellij.hashGenerator";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7633/18116/HashGenerator.zip";
      sha256 = "1x2rasckc5jx34ld8dcffxwm79bvgpdjxyjwrfkwzq4z0h0zlgk7";
      name = "Hash-Generator-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BorzdeG";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/BorzdeG";
        free = false;
      };
      description = ''
        Plugin to calculate Hash code for the text string
      '';
    };
  }) {};

  hashicorp-terraform--hcl-language-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HashiCorp-Terraform--HCL-language-support";
    plugname = "HashiCorp Terraform / HCL language support";
    plugid = "org.intellij.plugins.hcl";
    version = "0.7.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7808/92199/intellij-terraform-0.7.10.zip";
      sha256 = "1imc9ndrxsmbqzmjam1n8172i17krwzwhg6b72bx0cdmgks4q2yj";
      name = "HashiCorp-Terraform--HCL-language-support-0.7.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/VladRassokhin/intellij-hcl/";
      license = lib.licenses.asl20;
      description = ''
        This plugin adds support for HashiCorp Configuration Language (HCL)
    and HashiCorp Interpolation Language (HIL), as well as their
    combination used in Terraform configuration files (.tf).
     The HCL format is also used for Nomad (.nomad files).
    Features:
    For file formats using HCL (.hcl, .tf, .nomad):
    
      Syntax highlighting
      Structure outline in the 'Structure' tool window
      Code formatter with the 'Reformat code' action available
      Code folding
      The 'Comment/Uncomment' action
    
    For HIL files:
    
      Syntax highlighting
    
    Terraform specific support:
    In both configuration files and interpolations:
    
      Autocompletion
      Find Usages / Go to definition for resources, providers, variables and their properties
      Rename Refactoring
      Introduce Variable Refactoring (for string property values)
      Several inspections
      Report usage of deprecated properties
      Unresolved reference checks (in interpolations)
      Check required/missing properties in resource/provider
      Predefined Terraform methods autocompletion in interpolations
      (WIP) Better properties validation (type checking)
      (WIP) Working with dependent modules
      (WIP) Type-specific autocompletion in interpolations
      '';
    };
  }) {};

  haskforce = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HaskForce";
    plugname = "HaskForce";
    plugid = "com.haskforce";
    version = "0.3.42";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7602/60248/haskforce-0.3.42.zip";
      sha256 = "1v97vggkfk5i5m0ffvxv9xpxb5swhj8y920afafsym0g70yyv4my";
      name = "HaskForce-0.3.42.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/carymrobbins/intellij-haskforce";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/carymrobbins/intellij-haskforce/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for Haskell language support.
      '';
    };
  }) {};

  haskell-conceal = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Haskell-Conceal";
    plugname = "Haskell Conceal";
    plugid = "zjhmale.haskell-conceal";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8268/26075/haskell-conceal-1.3.3.zip";
      sha256 = "03517054qb0wbkn79gadcdmf3943ic0dnczipfd911aa7pdy74ik";
      name = "Haskell-Conceal-1.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zjhmale";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zjhmale";
        free = false;
      };
      description = ''
        Make your haskell code more readable with IntelliJ IDEA-based IDEs
      '';
    };
  }) {};

  hasteit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HasteIt";
    plugname = "HasteIt";
    plugid = "de.lukweb.hasteit";
    version = "1.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8488/106057/HasteIt-1.16.zip";
      sha256 = "1n9xnlc7qwgr806fnphzin9fa0ajzxb36yy4ja9d5xw361ndrafw";
      name = "HasteIt-1.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LukWebsForge/ShareIt";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/LukWebsForge/ShareIt/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Share files and code with one click to hastebin.
      '';
    };
  }) {};

  hastebin-uploader = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hastebin-Uploader";
    plugname = "Hastebin Uploader";
    plugid = "net.fischa.hasteupload";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14995/101533/Hastebin-Uploader-1.5.zip";
      sha256 = "14nmz8pnxfr3nkj80nl77g6as5m9f6f0s6sb056yns4idxwdikhd";
      name = "Hastebin-Uploader-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.fischa.net/?ref=haste";
      license = lib.licenses.asl20;
      description = ''
        Quickly create hastebin pastes from within the IDE.
        Upload code snippets directly to the official hastebin instance
        or your custom hastebin server.

        

        Your custom hastebin server can be configured on the application level. (Settings -&gt; Tools -&gt; Hastebin Uploader)

        

        Fork of the HasteIt plugin by LukBukkit.
      '';
    };
  }) {};

  hatchery = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hatchery";
    plugname = "Hatchery";
    plugid = "edu.umontreal.hatchery";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10290/42071/hatchery-0.2.1.zip";
      sha256 = "0a1yhv31a7mvppw4zcjj7j7r05z2v9rkl1gfspxdwq27bcxksga4";
      name = "Hatchery-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.duckietown.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/duckietown/hatchery/blob/master/LICENSE.pdf";
        free = false;
      };
      description = ''
        Hatchery is plugin for developing applications for the Robot Operating System (ROS).
      '';
    };
  }) {};

  haxe-toolkit-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Haxe-Toolkit-Support";
    plugname = "Haxe Toolkit Support";
    plugid = "com.intellij.plugins.haxe";
    version = "1.3.1-for-IDEA-2020.x";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6873/96617/intellij-haxe-2020.jar";
      sha256 = "1a0chnpzr6vzm4q6dfqc6wpfjh16w0xylyh8z0d5vvrbgfaw3476";
      name = "Haxe-Toolkit-Support-1.3.1-for-IDEA-2020.x.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/HaxeFoundation/intellij-haxe";
      license = lib.licenses.asl20;
      description = ''
        The Cross-platform Toolkit
            
          
          
              
            Documentation:
              Project Web Site
            
            
              Release Notes:
              README
            
            
              Source Code:
              GitHub
            
            
              Support:
              Community Discourse
            
            
              Enterprise Support:
              Bishton Software Solutions
            
            
              
              BECOME A PATRON
            
          
          
            
            Professionally maintained by Bishton Software Solutions
            
          
      
      
      This jar is compatible with IDEA 2020.x
      It was built using IDEA build 2020.2.1
      '';
    };
  }) {};

  hazelcast-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hazelcast-Tools";
    plugname = "Hazelcast Tools";
    plugid = "com.hazelcast.idea.plugins.tools";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8272/25037/hazelcast-tools-1.1.zip";
      sha256 = "0cc848jqmakl8vl895kkvcqg1418nq92q6ggkfhr37g297lhbcpj";
      name = "Hazelcast-Tools-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.asimarslan.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/asimarslan/hazelcast-tools/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Hazelcast Tools 
 
GitHub | 
Issues 
 
 This plugin enable 
Hazelcast support. These features are available: 
 
 
 Hazelcast serialization code generator from user selected fields 
 Hazelcast Portable Serialization readPortable and writePortable method generator 
 Hazelcast IdentifiedDataserializable Serialization readData and writeData method generator 
 Hazelcast Dataserializable Serialization code generator method generator
      '';
    };
  }) {};

  hdiv = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hdiv";
    plugname = "Hdiv";
    plugid = "com.hdivsecurity.hdiv-intellij-plugin";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12504/63495/hdiv-intellij-plugin-1.0.1.zip";
      sha256 = "154yy72cmggpzim5bxd4qdwsmzmim4rb2yvc2xkr8macp29vg4gk";
      name = "Hdiv-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://hdivsecurity.com";
      license = lib.licenses.asl20;
      description = ''
        Hdiv IntelliJ plugin
    
    
      This plugin allows to integrate Hdiv vulnerability detection features inside your favorite IDE.
      The plugin marks the vulnerable source code file and line helping the developer to easily fix the error.
      '';
    };
  }) {};

  hdmpdataauth = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "HdmpDataAuth";
    plugname = "HdmpDataAuth";
    plugid = "com.upcwangying.plugins.data-auth-idea-plugin";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12750/66169/data-auth-idea-plugin-1.0.7.jar";
      sha256 = "11jpq63zbdwkwd6xiay5x0pxffd1z4f3903sd6bil4jm8i037y76";
      name = "HdmpDataAuth-1.0.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://upcwangying.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/upcwangying/data-auth-idea-plugin/master/LICENSE.md";
        free = false;
      };
      description = ''
        HdmpDataAuth
          
          How to use?
          
          
            Put the cursor on the method name or class name. 
            Click `Tools -&gt; DataAuthGroup` to automatically generate the data permission focus solution.
          
          
          
          If you have any questions during use, you can submit an issue on the GitHub repository.
          
          
          如何使用？
          
          
            将光标放到方法名或者类名上. 
            依次点击 `Tools -&gt; DataAuthGroup` 即可自动生成数据权限相关注解. 
          
          
          
          如果在使用过程中有任何疑问，可以在 GitHub 仓库上提交issue。
      '';
    };
  }) {};

  header-updater = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Header-Updater";
    plugname = "Header Updater";
    plugid = "fr.alban.petiot";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11309/51927/Header_Updater.jar";
      sha256 = "0b2l9ji7nxhpvkkqggx1hi16xmf2i31f70f7njzgwl6wr6sz32zf";
      name = "Header-Updater-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://git.cluster.games/Alban_P/header-updater-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://git.cluster.games/alban_p/header-updater-plugin/raw/master/license";
        free = false;
      };
      description = ''
        a use header creator/Updater
      '';
    };
  }) {};

  heads-or-tails = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Heads-or-Tails";
    plugname = "Heads or Tails";
    plugid = "lekanich.HeadsOrTails";
    version = "2020.3.01-2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14142/104395/HeadsOrTails-2020.3.01-2020.3.zip";
      sha256 = "1z8zx3450g4rvwwicq6wh1iknngdivhwh5lh1ffxksx3kall8w7x";
      name = "Heads-or-Tails-2020.3.01-2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.bsd3;
      description = ''
        Coin flipping or 'head or tails' is the way of resolving argues (internal or external) by the will of gods. 
        You're throwing a coin in the air and checking on which side it landed. 
        
        Usage instruction:
        Go to the Menu bar and choose 'Tools' on the menu.
        On the top, you should see the 'Head or Tails' option. 
        Choose a side 'head' or 'tail' and press the option. 
        You can find the side of the coin in the event log in the left bottom.
      '';
    };
  }) {};

  healenium = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Healenium";
    plugname = "Healenium";
    plugid = "com.epam.healenium.hlm-idea";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14178/107447/Healenium-1.0.4.zip";
      sha256 = "0hp7pk1gkmgwask98lkpc91zibh24smzj9pr4dh0ry1vxrk1zg8d";
      name = "Healenium-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://healenium.io/";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ IDEA plugin for updating selenium locators via context menu.
        Healenium improves stability of Selenium-based test cases, handling changes of updated web elements.
      '';
    };
  }) {};

  hector-the-inspector = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hector-the-Inspector";
    plugname = "Hector the Inspector";
    plugid = "dev.hashnode.bas.the.inspector";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15111/107103/HectorTheInspector.jar";
      sha256 = "1hvlg3a879phhnvqpgjihmggbpsdajrlrgzk8xkw3fvh1r9k1wcr";
      name = "Hector-the-Inspector-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/InspectorBas";
      license = lib.licenses.asl20;
      description = ''
        Hector the Inspector returns! This plugin adds Hector the Inspector back to the status bar, where he has
      been missing since 2020.2. Hector shows the current inspection profile in use and clicking on Hector opens
      the inspection settings.
      '';
    };
  }) {};

  helsing = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Helsing";
    plugname = "Helsing";
    plugid = "com.github.igrmk";
    version = "3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12553/99497/Helsing.jar";
      sha256 = "0z6q01ws06kqxvj660nds6k8rrwx9lbw645x53m4bb3dy5bbgkqq";
      name = "Helsing-3.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/igrmk";
      license = lib.licenses.mit;
      description = ''
        Dark color theme for working under the sunlight.
            It is designed to be visible even in enormously bright environment.
            Here are some tips for working on plain air.
            
                
                    Wear dark.
                    Your screen will reflect your bright clothes.
                    Even a matte display won't help if the sun will be shining on your white T-shirt.
                
                
                    Try to find a shadow.
                    But try to not use trees.
                    A lot of trees produce tiny drops of a resin.
                    They are hard to clean from your screen.
                
                Set the brightness level to the maximum.
                
                    Have a cleaning cloth with you.
                    A dust is very distracting in the sun.
      '';
    };
  }) {};

  hiberbee-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hiberbee-Theme";
    plugname = "Hiberbee Theme";
    plugid = "com.hiberbee.intellij.hiberbee-theme";
    version = "2.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12118/97579/Hiberbee_theme-2.1.0.zip";
      sha256 = "11ik103mrqiq8km2lz7m0m5piyvqj38j1axifv6ps33ch4ylirhv";
      name = "Hiberbee-Theme-2.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hiberbee";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/Hiberbee/jetbrains-ide-theme/master/LICENSE";
        free = false;
      };
      description = ''
        Monokai Pro &amp; MacOS Mojave inspired color themes, with bright colors &amp; dark mode, with common color code for all languages. See description &amp; screenshots on Github. Check the sources, iTerm2 and macOS Terminal and XCode color schemes also available
      '';
    };
  }) {};

  hibernate-inspections = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hibernate-Inspections";
    plugname = "Hibernate Inspections";
    plugid = "marcglasberg.HibernateInspectionsPlugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7866/35671/HibernateInspectionsPlugin.zip";
      sha256 = "09ad1wmfvpy2h3w1snsgsvqhc4wr8yyd0w7zbckrywcizl9y2gh7";
      name = "Hibernate-Inspections-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/marcglasberg/HibernateInspectionsPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/marcglasberg/HibernateInspectionsPlugin";
        free = false;
      };
      description = ''
        Hibernate silently fails in certain situations, leading to bugs which are difficult to track down.
 This plugin helps finding and fixing some of these problems. Under 
Settings &gt; Inspections &gt; Hibernate inspections it adds the following inspections: 
 
 Persisted class is final 
 Final method of a persisted class uses direct field access 
 Embeddable subclasses embeddable
      '';
    };
  }) {};

  hide-tool-windows-ex = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hide-Tool-Windows-Ex";
    plugname = "Hide Tool Windows Ex";
    plugid = "com.github.shiraji.hidetoolwindowsex";
    version = "0.0.4";
    src = fetchurl {
      url = "https://github.com/shiraji/HideToolWindowsEx/releases/download/v0.0.4/HideToolWindowsEx.jar";
      sha256 = "0dlxcl862nhw770mdrscxwkiirb12kdw1wjq11abchpk2ss8q0kv";
      name = "Hide-Tool-Windows-Ex-0.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/HideToolWindowsEx/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin adds the functionality to hide tool windows when the developer start typing. It has the same functionality to hide (all/side) tool windows including restorin the windows.
      '';
    };
  }) {};

  high-contrast-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "High-Contrast-Theme";
    plugname = "High Contrast Theme";
    plugid = "com.github.chencn.intellij-high-contrast-theme";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14075/82885/intellij-high-contrast-theme.jar";
      sha256 = "1f8l8hrmvvwmx3g1z623vrk5w9gq4h4yyrrdxgj74bg3sq4vdjnd";
      name = "High-Contrast-Theme-0.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chencn/intellij-high-contrast-theme";
      license = lib.licenses.asl20;
      description = ''
        High Contrast Theme
   
        
            Github  |  Gitee
      '';
    };
  }) {};

  highlightbracketpair = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HighlightBracketPair";
    plugname = "HighlightBracketPair";
    plugid = "io.github.qeesung.component.HighlightBracketPair";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10465/46216/HighlightBracketPair-1.1.2.zip";
      sha256 = "1dkimq917cm3c66mzmi1hshd1gmid9vmr0fixzs3fmwcfv5qgn1y";
      name = "HighlightBracketPair-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://qeesung.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/qeesung/HighlightBracketPair/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Color highlight the Bracket Pair in editor. Inspired by 
Sublime BracketHighlighter Plugin 

 Supported Languages: Java, Groovy, Kotlin, Scala, Haskell, Python, JavaScript, TypeScript, Golang, Ruby, Erlang, Rust, Html, Xml, Json, Css...
 

 

 

 Click 
github for more information.
      '';
    };
  }) {};

  highlightsconsoleabsolutepath = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HighlightsConsoleAbsolutePath";
    plugname = "HighlightsConsoleAbsolutePath";
    plugid = "com.cyl.idea.plugin.HighlightsConsoleAbsolutePath";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14973/105262/HighlightsConsoleAbsolutePath-1.1.zip";
      sha256 = "1j6r0x1ir9m5f7hx8qh72c2ki3f1a3qf39qx3ivdj8d3d736xmkd";
      name = "HighlightsConsoleAbsolutePath-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        highlights absolute path as hyperlinks in console output.
    extract from android plugin.
      '';
    };
  }) {};

  holdr = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Holdr";
    plugname = "Holdr";
    plugid = "me.tatarka.holdr.intellij.plugin";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7570/19403/holdr-plugin-1.2.0.jar";
      sha256 = "14z089k0c0qk1b7651q5b5r3ihjqjf9hcxil0iq2ms796z2w1zzr";
      name = "Holdr-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/evant/holdr";
      license = lib.licenses.asl20;
      description = ''
        IDE integration with 
Holdr.
      '';
    };
  }) {};

  hotornot-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HotOrNot-Plugin";
    plugname = "HotOrNot Plugin";
    plugid = "HotOrNot Plugin";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3799/6368/HotOrNot_Plugin_6368.zip";
      sha256 = "0nyji7646961gnn9vl5ybfvsiq4kgn5gslf73k7y0mppibfvn2w2";
      name = "HotOrNot-Plugin-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Something productive to do while waiting for your build to complete.
      '';
    };
  }) {};

  hotswapagent = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HotSwapAgent";
    plugname = "HotSwapAgent";
    plugid = "com.hotswap.agent.plugin";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9552/48858/hotswap-agent-intellij-plugin.zip";
      sha256 = "1k2a51zb2b9z0jb9ma4cnkpqhczypfqyxlc91p974v1gd4d4j21y";
      name = "HotSwapAgent-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        This plugin intends to simplify the usage of HotSwapAgent.
      Agent provides real hotswap functionality together with DCEVM which extends JVM class redefinition functionality.
      '';
    };
  }) {};

  houdini-python-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Houdini-Python-Support";
    plugname = "Houdini Python Support";
    plugid = "ca.rightsomegoodgames.HythonPlugin";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12877/67388/HoudiniPythonSupport.jar";
      sha256 = "1i54kjwx5xly3kqrhnr9hn32dc5qg7k7nwri9clscx4np7sfc6bd";
      name = "Houdini-Python-Support-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/cmcpasserby";
      license = lib.licenses.mit;
      description = ''
        Houdini Integration and SdkFlavour for PyCharm.
    This allows python to work with hython.exe as if it was a regular python install.
    This Plugin is only required on Windows since on MacOS Houdini's Python is exposed as a regular python install.
      '';
    };
  }) {};

  hrisey-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hrisey-Plugin";
    plugname = "Hrisey Plugin";
    plugid = "Hrisey Plugin";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7462/16270/hrisey-plugin-0.2.0.jar";
      sha256 = "1g5dr2x0kxcrmdppgjaa4vpm60k0sax2x7jd52r8zq12c44ysij8";
      name = "Hrisey-Plugin-0.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mg6maciej/hrisey-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mg6maciej/hrisey-intellij-plugin";
        free = false;
      };
      description = ''
        A plugin that adds first-class support for Hrisey (Lombok for Android)
      '';
    };
  }) {};

  html-to-kotlin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Html-To-Kotlin";
    plugname = "Html To Kotlin";
    plugid = "convert.html.text.to.kotlin.plugin";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7957/21555/HtmlToKotlinPlugin.zip";
      sha256 = "18g3fvwgkpq33l7glccpdnzhmy20yjqqbsp75fp51gqmvk1afgs9";
      name = "Html-To-Kotlin-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Plugin converts html text to kotlin code on copy/paste action.
      '';
    };
  }) {};

  htmlexport = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "HtmlExport";
    plugname = "HtmlExport";
    plugid = "HtmlExport";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3828/13259/htmlexport.jar";
      sha256 = "1gfbqp92wj0zfp0g8wmb22bpai7a52zc3lmh4ldhph736ly9s8s3";
      name = "HtmlExport-0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/htmlexport";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/dkandalov/htmlexport";
        free = false;
      };
      description = ''
        Exports code from editor to HTML with all IntelliJ highlightings: 
 
 uses &lt;pre&gt; and nested &lt;span&gt; tags as output HTML format 
 exports selection or opened file into clipboard or file; 
 shows line numbers; 
 sets most used HTML style as default to make snippet smaller.
      '';
    };
  }) {};

  http-editor-client = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Http-Editor-Client";
    plugname = "Http Editor Client";
    plugid = "ru.basecode.ide.rest.plugin";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9232/30035/idea-rest-client.jar";
      sha256 = "1a9qy8chiw10nzj8fy32ziwp9jfizwcxbi7j5qzd5rjnqhc72nwh";
      name = "Http-Editor-Client-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/danblack/idea-rest-client";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/danblack/idea-rest-client";
        free = false;
      };
      description = ''
        This plugin helps you to run http-requests from an IDEA's text editor
      '';
    };
  }) {};

  http-test-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Http-Test-Support";
    plugname = "Http Test Support";
    plugid = "github.cweijan.plugin.http.test";
    version = "1.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15375/108293/http-test-idea.jar";
      sha256 = "0ybkcaa3wkxy79y1mf413pdsgnzwrzmqhkgxmxlakcilnp7fqm8s";
      name = "Http-Test-Support-1.2.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Looking for Document.
    This plugin create many context action to enhance development experience:

    1. Make all field to private.

    2. Bind all lombok annotation to class.

    3. Create http test to context action.

    You can find them on class element then press alt+enter.
      '';
    };
  }) {};

  hugo-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hugo-Integration";
    plugname = "Hugo Integration";
    plugid = "com.1v0.dev.hugo-intellij-plugin";
    version = "0.3.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13215/104343/hugo-intellij-plugin-0.3.5.zip";
      sha256 = "1kb95m90b8ga3ab0ck6dkb3cfyn2z706gyjfwx6w2xw8qa7q9zlw";
      name = "Hugo-Integration-0.3.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "1v0.dev";
      license = lib.licenses.asl20;
      description = ''
        Integrates Hugo static web site generator
      '';
    };
  }) {};

  humptransfer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "HumpTransfer";
    plugname = "HumpTransfer";
    plugid = "com.fhtiger.plugins.humpTransfer";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12882/67944/humpTransfer.jar";
      sha256 = "11l55m1hv3qx08m3gij9hpqgf61d00kd2sqllq2hhazm54kqb142";
      name = "HumpTransfer-0.1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ghostFlyTiger/plugin.humpTransfer";
      license = lib.licenses.asl20;
      description = ''
        Transfer the code to a hump form or underline.
      Also make reverse
      '';
    };
  }) {};

  hungarianinspection = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "HungarianInspection";
    plugname = "HungarianInspection";
    plugid = "com.kogitune";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7818/25617/HungarianInspectionPlugin.jar";
      sha256 = "1j7pb1vfs6r49wlbvsl2vwjzndjjk12k1q91nqxvmg470cw0x4lz";
      name = "HungarianInspection-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/takahirom/HungarianInspectionPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/takahirom/HungarianInspectionPlugin";
        free = false;
      };
      description = ''
        This plugin provides hungarian notation inspection .
      '';
    };
  }) {};

  hungry-backspace = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hungry-BackSpace";
    plugname = "Hungry BackSpace";
    plugid = "Hungry BackSpace";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/162/723/Hungry_BackSpace_723.jar";
      sha256 = "13l7pxinhgxfx8wnxliilc71gzmar0ss9n2wkhbz8xkjr1jr750s";
      name = "Hungry-BackSpace-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Modifies BackSpace key to hungrily delete whitespace.
      '';
    };
  }) {};

  hungry-backspace-reloaded = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Hungry-Backspace-Reloaded";
    plugname = "Hungry Backspace Reloaded";
    plugid = "com.olegych.hungry.backspace.reloaded";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8546/77335/plugin.jar";
      sha256 = "10zk4rl11nnjd2zzddx4240xcsl3i667lxya4r5dm12grqgji2q4";
      name = "Hungry-Backspace-Reloaded-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/OlegYch/hungry-backspace-reloaded";
      license = lib.licenses.bsd3;
      description = ''
        Modifies BackSpace key to hungrily delete whitespace.
      Updated version of https://plugins.jetbrains.com/plugin/162
      '';
    };
  }) {};

  hybris-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Hybris-Integration";
    plugname = "Hybris Integration";
    plugid = "ccom.intellij.idea.plugin.hybris.impex";
    version = "2020.1.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7525/91691/Hybris-Integration-Pro-2020.1.2.4.zip";
      sha256 = "0wdmnjrih3qz8048n39saijsspyl9idkdbclm6sp67qy2gxdcr1l";
      name = "Hybris-Integration-2020.1.2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://hybris-integration.atlassian.net/servicedesk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gist.github.com/AlexanderBartash/40ec81f301d6e31e875637b84716caf6";
        free = false;
      };
      description = ''
        This is a plugin for SAP Hybris Commerce integration.
          
          
            If you have any questions or issues please us an email
            or use our Service Desk, we are always glad to help you!
          
          

          Free 30 day trial!

          Features:
          
              Import of Hybris extensions to Intellij IDEA with automatic dependency resolution and classpath configuration optimized for fast compilation and correct unit and integration tests execution.
              Import your custom Eclipse, Maven and Gradle extensions together with Hybris platform.
              Automatic configuration of Spring, Web, Ant, Database Connector Intellij IDEA plugins.
              Custom editor for impex files with automatic formatting, "find usages" and "go to declaration" actions, validation and impex import into a remote Hybris instance right from your IDE.
              Custom editor for flexible Search queries with an ability to execute them on a remote Hybris instance right from the IDE.
              Custom editor for items.xml with validation, best-practices analyses, quick-fix autosuggestion and easy navigation through "find usages" and "go to declaration" actions.
              Custom editor for beans.xml with custom automated Intellij refactorings actions.
              Visualization of business process graph (use context menu of the file "Diagrams/Show Diagram", only Ultimate IDEA).
              Enhanced project view tree.
              JRebel and DCEVM support.
              Execution of Flexible Search queries, Groovy scripts, Impexes though IDE using HAC Integration tool.
              Execution of queries on remote Solr instances.
              JSP Debugging.
              Much more!
      '';
    };
  }) {};

  hyperlink = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "HyperLink";
    plugname = "HyperLink";
    plugid = "HyperLink";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/40/4350/HyperLink_4350.zip";
      sha256 = "09911r519gylqc004ic32pxbsv1xl1hnib3sdl97gj4wh84a4lsz";
      name = "HyperLink-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/40/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/40/sourceCode.zip";
        free = false;
      };
      description = ''
        Support for hyper link highlighting in IDEA editors (Ctrl+Mouse) with mouse click to open (Ctrl+Click).
      '';
    };
  }) {};

  hypertheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "HyperTheme";
    plugname = "HyperTheme";
    plugid = "net.nazarsit";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12273/61248/HyperTheme.jar";
      sha256 = "1p4miwhr40qi7xz5pn5936fwklw74aa8vv99a5fxd50x0x5z4fp6";
      name = "HyperTheme-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hassenasse";
      license = lib.licenses.asl20;
      description = ''
        HyperTerm inspired IntelliJ IDEA theme with vivid syntaxcolors and a pitch black UI. Drools on the floor..
      '';
    };
  }) {};

  i-pascal = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "I-Pascal";
    plugname = "I-Pascal";
    plugid = "com.siberika.idea.pascal";
    version = "2.80";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7340/89380/plugin.zip";
      sha256 = "0ar6pf5ap88hvbikv9r8j5vknazqgdi46ai2c97xpkqrq9v9nsx8";
      name = "I-Pascal-2.80.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.siberika.com/ipascal.htm";
      license = lib.licenses.asl20;
      description = ''
        Object Pascal language support for IDEA.
      '';
    };
  }) {};

  i18ntool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "I18NTool";
    plugname = "I18NTool";
    plugid = "vip.okfood.liam.plugin.i18n";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15404/102813/I18NTool.zip";
      sha256 = "07nld45r37vpcc1q1ndlhmjbhrppc1lj5ha6lgqzf615zbxsdjxa";
      name = "I18NTool-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Leo0618";
      license = lib.licenses.mit;
      description = ''
        1. [Internationalized translation export] One-click batch export of the string resources to be translated to Excel.
      
      2. [Internationalization translation import] One-click import of the translated Excel table into the project.
      '';
    };
  }) {};

  icu = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ICU";
    plugname = "ICU";
    plugid = "ICU";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11003/52037/ICU-1.1.0.zip";
      sha256 = "1pqin1cgag65r29vp7ljiyfk8202hc1lh2vbca8a0sm4kd52x96r";
      name = "ICU-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DomBlack/intellij-icu";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/DomBlack/intellij-icu/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin gives IntelliJ syntax highlighting for ICU Resource Bundles.
        
            Features
            
                Syntax Highlighting for both the resource file and the ICU messages.
                Automatic Formatting Support.
                Spell checking of messages.
                Code Folding Support
                Goto Symbol support.
                File Structural View.
                Code Completion for parameter formatting.
      '';
    };
  }) {};

  ide-features-trainer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IDE-Features-Trainer";
    plugname = "IDE Features Trainer";
    plugid = "training";
    version = "0.8.62";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8554/44343/training-0.8.62.zip";
      sha256 = "0v976433jdxi3j5ai7wshmv8x6baa2x1lgz7q7j6sbfiicc2hcn5";
      name = "IDE-Features-Trainer-0.8.62.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-plugins/tree/master/ide-features-trainer";
      license = lib.licenses.asl20;
      description = ''
        Learn basic shortcuts and essential features interactively - right inside the IDE.
      No need to read long manuals or look for screencasts.
      Just install this plugin, and open with the Help | IDE Features Trainer menu item.
    
    
    Found a bug or have a feature to suggest? Welcome to the tracker: https://youtrack.jetbrains.com/issues/IFT
      '';
    };
  }) {};

  ide-perf = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IDE-Perf";
    plugname = "IDE Perf";
    plugid = "com.google.ide-perf";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15104/102421/ide-perf-1.0.3.zip";
      sha256 = "0370y392isb98kmkyvg8lmg4ql9l1jag829rbxwbxs4nzxa3xlss";
      name = "IDE-Perf-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/google/ide-perf";
      license = lib.licenses.asl20;
      description = ''
        This is a performance diagnostic tool for developers working on the IDE itself.
        
        The main feature is a tracer which can trace methods on demand and display
        call counts and overhead measurements in real time as the IDE is being used.
        To open the tracer, select Help &gt; Diagnostic Tools &gt; Tracer.
        
        See also the user guide
        and the source code.
      '';
    };
  }) {};

  ide-timer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IDE-Timer";
    plugname = ".IDE Timer";
    plugid = "com.puke.timer.TriggerAction";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11517/53843/Timer.zip";
      sha256 = "1rxg3wpc55y2axv71gbmykrw6i1y24ix0x7yyn00j5vjfzilcvib";
      name = "IDE-Timer-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://puke3615.github.io";
      license = lib.licenses.asl20;
      description = ''
        Add a configuration for your IDE.
      IDE will callback a string every second, like 2018-12-25 12:18:00.
      You can add a item that contains message and regex by key-short Control + \.
      eg. {
  "items": [
    {
      "regex": "\\d{2}:(00|15|30|45):00",
      "message": "Hi, you should drink some water."
    }
  ]
}
      Once the regular expression matches the string for the callback, the IDE will pop up a message that you configure.
      '';
    };
  }) {};

  idea-code-flattener = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IDEA-Code-Flattener";
    plugname = "IDEA Code Flattener";
    plugid = "name.ekt.jetbrains.plugins.flatten";
    version = "1.0.40-203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9979/105951/flatten-1.0.40-203.jar";
      sha256 = "0rbvyg7djnq0vi1rhnh5wv29zrx46i8qdp7x53f8g2hasmm7q3gb";
      name = "IDEA-Code-Flattener-1.0.40-203.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/eagle-codes/flatten";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://creativecommons.org/licenses/by-nd/4.0/legalcode";
        free = false;
      };
      description = ''
        This plugin flattens the code of your class.
      
      
       Does not change anything in your code, but copies the contents to the clipboard.
        In the clipboard, the resulting code contains dependent classes other than "java.*" packages.
        Package statement is removed, all dependent classes are inlined. (assuming sources are available)
        Unused code of dependent classes are not included.
        A menu item for editor popup menu is registered. (Flatten Class)
        A keyboard shortcut is also available. (Default is Ctrl-Alt-W, you may change via settings)
        Useful for programming contests like hackerrank, codeforces, etc.
      '';
    };
  }) {};

  idea-docbook = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IDEA-DocBook";
    plugname = "IDEA DocBook";
    plugid = "IDEA DocBook";
    version = "1.0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6574/18168/docbook-idea-plugin.zip";
      sha256 = "02l59r8y3pa7lwk4z0784v86qdb22ffa4m26zsv8bbq251qpnrjy";
      name = "IDEA-DocBook-1.0.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/CoreMedia/docbook-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Support for the DocBook format.
      '';
    };
  }) {};

  idea-ebook = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IDEA-EBook";
    plugname = "IDEA EBook";
    plugid = "com.liao.hello_book.plugin.id";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15870/108538/IDEA_EBook.zip";
      sha256 = "1fhrm904lid3bh67vj0m8mbqf58lzwf7wqalmykn16bfdmgk93dd";
      name = "IDEA-EBook-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LiAo-One/IDEA-EBook";
      license = lib.licenses.asl20;
      description = ''
        IDEA EBool can be used to read books, can make your IntelliJ IDEA more interesting.
        
        Plugin description:
        
        E-book reading plug-in developed based on IntelliJ IDEA
        
        Support search, latest chapter query, designated chapter jump, author information, update time query
        
        you will find that IntelliJ IDEA can even write code
        
        How to use:
        
        After installing the plug-in, click the IDEA EBook button on the right side of the screen.
        
        Enter the title of the book in the top search box, then click the search button on the right
        
        Source of search results http://www.xbiquge.la
        
        Click the row of the search result to highlight it. Click the upper right corner to start reading from the
            first chapter
        
        At the bottom of the chapter jump input box, enter the specified chapter number, and then click on the right
            Jump to execute chapter jump
      '';
    };
  }) {};

  idea-jetty-runner = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IDEA-Jetty-Runner";
    plugname = "IDEA Jetty Runner";
    plugid = "JettyRunner-GK";
    version = "1.4.14";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7505/89578/jetty-runner.jar";
      sha256 = "00w9qg1inlz6hf54kc4a96c4g1r96ydciaadl22pki80a0l3paiy";
      name = "IDEA-Jetty-Runner-1.4.14.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/guikeller/jetty-runner";
      license = lib.licenses.mit;
      description = ''
        A plugin that allows you to quickly run Jetty from IntelliJ IDEA. 
      
      If you require full support please consider buying the IntelliJ IDEA Enterprise Edition. 
      This plugin should be Win / Mac / Linux compatible. 
      
      Compatible with servlet-api versions: 3.1, 3.0, 2.5, 2.4, 2.3, 2.2. 
      Protocols: HTTP / 1.1 (RFC 7230), HTTP / 2 (RFC 7540), WebSocket (RFC 6455, JSR 356), FastCGI. 
      Many thanks for the kind contributions on GitHub, cheers guys! 
      
      Minimum requirement: JVM / JDK / JRE v8 
      tags: jetty, container, webapp, runner, tomcat, runner
      '';
    };
  }) {};

  idea-mind-map = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IDEA-Mind-Map";
    plugname = "IDEA Mind Map";
    plugid = "nb-mind-map-idea";
    version = "1.4.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8045/105359/idea-mindmap-1.4.10.zip";
      sha256 = "0s691bxrrg58aw8d16sqi8ac9ak5q0ff8alrglfjhr79a73n7cmj";
      name = "IDEA-Mind-Map-1.4.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.igormaznitsa.com";
      license = lib.licenses.asl20;
      description = ''
        Mind map editor is adapted part of (SciaReto editor). Mind maps are saved as plain-text files in a Markdown compatible format (MMD). It is the best way to keep semantic information among project files, keep links and even sensitive info (in password protected notes encrypted by AES-256).
      '';
    };
  }) {};

  idea-restart = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IDEA-Restart";
    plugname = "IDEA Restart";
    plugid = "IDEA Restart";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5892/8936/IDEA_Restart_8936.jar";
      sha256 = "09p0v899lg3v9as7l2bgizn2q4jzadi1f9avh6sqa7d3pfdw07k9";
      name = "IDEA-Restart-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.codegen.it";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.codegen.it";
        free = false;
      };
      description = ''
        Restart IDEA without Invalidate Caches , Go to File->Restart or ctrl alt R
      '';
    };
  }) {};

  ideastickypaper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IDEAStickyPaper";
    plugname = "IDEAStickyPaper";
    plugid = "IDEAStickyPaper";
    version = "1.0-2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1064/2583/IDEAStickyPaper_2583.zip";
      sha256 = "0y0x81p0px7ahq3fn58z83d20y54rny86qmvw5c6vpwcsz2f9p8h";
      name = "IDEAStickyPaper-1.0-2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1064/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1064/sourceCode.zip";
        free = false;
      };
      description = ''
        Sticky Paper!! sound likes everyone know about it. but what about if it is available with in IntelliJ idea !!!.
Following features are implemented:                                                                                 

1. you can minimize Sticky paper.
2. you can select a bunch of code and click on "send to sticky" or apply short key to create a new sticky paper.
3. share sticky with in your LAN
4. send email over Sticky.
5. short cut to create/open, hide/minimize or display sticky paper
6. Minimize sticky will be stored inside a bottom tab.
7. Sticky configuration
8. Sticky friend manager
9. Automatic sticky location, background color, size, minimize state, content and title will be stored.
10. Double click on sticky title it will appear with text field and button (Ajax on swing Huh ;))
11. lot more...
                    
Write down your TODO list within sticky paper. etc...
Manage your friend/contact list from sticky friend manager.

I bet it will help you to be more productive. :D
      '';
    };
  }) {};

  ideamacs = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IDEAmacs";
    plugname = "IDEAmacs";
    plugid = "IDEAmacs";
    version = "2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/163/727/IDEAmacs_727.jar";
      sha256 = "0vglfl8nm101p5x6qaasw7lpsnglbxl30mf223iqbs5s2n3djp60";
      name = "IDEAmacs-2.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Provides some emacs-like commands
      '';
    };
  }) {};

  ideom = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IDEOM";
    plugname = "IDEOM";
    plugid = "com.github.MitI_7.IDEOM";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7652/83437/IDEOM_0.3.jar";
      sha256 = "141lf699ihrhn2r5gnmryy979jjc01nkml0bk9zddfkdv5728xvm";
      name = "IDEOM-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MitI-7/IDEOM";
      license = lib.licenses.asl20;
      description = ''
        Customizing the JetBRAINS IDEs.
      Features:
          
              Adding background image in Editors.
              Change icons at Editor.
              Plays sound at certain events(Run, Debug, Breakpoint, console, Open Project, Close Project).
      '';
    };
  }) {};

  idscreate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IDsCreate";
    plugname = "IDsCreate";
    plugid = "com.axter.plugin.IDsCreate";
    version = "1.5.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9505/105332/IDsCreate1.5.3.jar";
      sha256 = "0i4igbp3i2wvmj4ic9rg84w51bvlqa6r09s39w7ymr6ggm8w9cqy";
      name = "IDsCreate-1.5.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://axter.cc";
      license = lib.licenses.asl20;
      description = ''
        Plugin for generating code from selected layout XMLs in java file(via R.layout.xxx)

support declare/findViewById/setOnClickListener.
support ButterKnife Annotate fields and listeners.
      '';
    };
  }) {};

  ijkl-shortctus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IJKL-Shortctus";
    plugname = "IJKL Shortctus";
    plugid = "ijkl-shortcuts";
    version = "1.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9852/87149/ijkl-shortcuts.zip";
      sha256 = "0rpmdvvxh3w4193yrpi17909qpwnwsz5x2icffbhpc53sq2jchl3";
      name = "IJKL-Shortctus-1.15.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/ijkl-shortcuts-plugin";
      license = lib.licenses.asl20;
      description = ''
        Plugin which imposes alt-ijkl navigation shortcuts on currently open keymap.
        The idea is that these shortcuts are more ergonomic for navigation and editing than using keyboard arrows.
        Some of the shortcuts:
        
            alt-i - line up
            alt-j - move to previous word
            alt-k - line down
            alt-l - move to next word
            alt-n - move left
            alt-m - move right
            alt-u - move to start of line
            alt-o - move to end of line
            alt-shift-ijklmnuo - navigate with selection
            alt-d - delete next word
            alt-; - delete next character
        
        Note that in OSX you will need to configure keyboard input source without dead keys.
        This can be done after plugin startup in notification popup.
        
        For more details see GitHub.
      '';
    };
  }) {};

  ip = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IP";
    plugname = "IP";
    plugid = "com.lovoio.investment.pervasive";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15619/105703/investment-pervasive-1.0.4.jar";
      sha256 = "0ghv3jx4jninralwhb9sxrkwp422vdkcbaz9vv51jssj1354k0s4";
      name = "IP-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lovoio/investment-pervasive";
      license = lib.licenses.mit;
      description = ''
        Investment Pervasive !
     A IDEA plugin for stock data. 
     Adopt the data interface of Sina.
     Support US stocks, Hong Kong stocks, A shares, funds, commonly used index, near real-time update view 
     投资无处不在.
     usage : https://github.com/lovoio/investment-pervasive
    采用新浪的数据接口。
    支持美股，港股，A股，常用指数，基金的实时更新查看
      '';
    };
  }) {};

  iss-site-creator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ISS-Site-Creator";
    plugname = "ISS Site Creator";
    plugid = "nl.sitewolfe.isscreator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11138/49847/IIS.zip";
      sha256 = "00mcb6gcs6vc94zpxhj5j2n69crhxd5p252jzawhf1gys7zd5k3n";
      name = "ISS-Site-Creator-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.plansport.com";
      license = lib.licenses.gpl3Only;
      description = ''
        Simple plugin to create local IIS sites from a project easily.
      (Ctrl-Shift-A) -&gt; "Create IIS Site" Just enter the sitename, hostname and path, and an IIS site will be created and a hosts file entry will be added
      Only works on Windows
      '';
    };
  }) {};

  itztranslation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ITZTranslation";
    plugname = "ITZTranslation";
    plugid = "com.itz.translation";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10654/45254/D__IntelliJ_workspace_ITZTranslation_ITZTranslation.zip";
      sha256 = "1x40lwby0q8rp8p52s2kryin5524w9mkywhyg97d08acilp4xjdi";
      name = "ITZTranslation-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This is a simple translation plugin. 
The way that translate zh-CHS to EN or translate EN,ja,ko,fr,ru,pt,es to zh-CHS is supported.
      '';
    };
  }) {};

  iceterm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IceTerm";
    plugname = "IceTerm";
    plugid = "org.jetbrains.plugins.iceterm";
    version = "0.0.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13014/95197/iceterm.jar";
      sha256 = "17f9c5jck2lq66q56448zlp48w6pam6d2gnl5l5w5fn3g2347ipc";
      name = "IceTerm-0.0.15.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.stevium.com";
      license = lib.licenses.asl20;
      description = ''
        IceTerm is a plugin for integrating ConEmu as a tool window inside IntelliJ platform based IDEs.
      The plugin comes with an integrated ConEmu version, so just installing it and running the IceTerm command should be enough to get everything started. 
      Compatible with the versions of ConEmu v19.10.12 and above. 
      Available commands:
      
          IceTerm - Toggles the visibility of the tool window
          Open in IceTerm - Open file location in current ConEmu tab
          Open in new IceTerm Tab - Open file location in new ConEmu tab
      
      Project Settings:
      
          Start directory - a project specific directory in which to start ConEmu
      
      Application Settings:
      
          ConEmu executable path - path to ConEmu.exe
          Start Task - a predefined task, or a command to run on Startup - {cmd} by default
          Escape key - a key used to switch focus back to IDE - ESC by default
      '';
    };
  }) {};

  iceberg-1_08-snapshot = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Iceberg-1_08-SNAPSHOT";
    plugname = "Iceberg";
    plugid = "com.qbitlogic.idea.iceberg";
    version = "1.08-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12984/75896/iceberg-1.08-SNAPSHOT.jar";
      sha256 = "0bzi8zrvhygjx9h6mdimyvdr6mzhkm3zff7mm0m6bhx368b23qc0";
      name = "Iceberg-1_08-SNAPSHOT-1.08-SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.mycode.ai";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.mycode.ai/terms-of-use";
        free = false;
      };
      description = ''
        Deep (Interprocedural) analysis inside your IDE, powered by Infer and [Code]Ai®. Infer is a static analysis tool by Facebook, that scans your code for bugs without running it. CodeAi is a lightweight machine learning API  that helps predict and prioritize warnings based on your focus area to help you stay in the ZONE. Available for Java, C and C++ developers. The results of Iceberg’s  analysis available to you in the IDE. You can fix errors related to memory safety, concurrency, and to security (information flow) while you code.
      '';
    };
  }) {};

  iceberg-0_3_0 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Iceberg-0_3_0";
    plugname = "Iceberg";
    plugid = "com.github.milankinen.ideaicebergtheme";
    version = "0.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15126/105159/intellij-iceberg-theme-0.3.0.zip";
      sha256 = "1hlq5rcmsw5w2as5rlnpisbvxhycrnymhb6bwg15s6b4vr2hjxd5";
      name = "Iceberg-0_3_0-0.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/milankinen/intellij-iceberg-theme";
      license = lib.licenses.asl20;
      description = ''
        Dark blue color scheme for IntelliJ platform, based on Iceberg 
by cocopon.
      '';
    };
  }) {};

  icon-viewer-2 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Icon-Viewer-2";
    plugname = "Icon Viewer 2";
    plugid = "lermitage.intellij.iconviewer";
    version = "1.4.1.193";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13995/103750/Icon_Viewer_2-1.4.1.193.zip";
      sha256 = "0smb85a8xa4y8jljw48dq24b1l72i1c6l9x9x8qkd4fpxdnp0a41";
      name = "Icon-Viewer-2-1.4.1.193.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jonathanlermitage";
      license = lib.licenses.mit;
      description = ''
        This plugin is a maintained fork of the excellent IconViewer plugin.
      Preview project images as an icon in your project explorer.
      Helpful if you have a lot of icons in your project, Icon Viewer 2 gives you a nice preview icon.
      Bigger images are scaled to 16x16. Supported file formats are:
      
        *.bmp
        *.gif
        *.jpg
        *.jpeg
        *.png 
        *.svg (tip: if Extra Icons plugin is active, you may want to disable its SVG support in order to diplay SVG files in place of SVG logo)
      
      Supported when Android Support plugin is activated:
      
        *.webm
        *.webp
      
      Files Supported by bundled TwelveMonkeys library, like *.ico, *.tga, etc. See File formats supported.
      
      For questions, issues or contributions, please see the GitHub project.
      '';
    };
  }) {};

  id-names-suggesting = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Id-Names-Suggesting";
    plugname = "Id Names Suggesting";
    plugid = "com.github.davidenkoim.idnamessuggestingplugin";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15432/103030/ide-plugin-0.0.1.zip";
      sha256 = "1121yx6fs24vrixgzrzwm8sdfnl08l8lgqrb5dkg2s57x9jcc9wy";
      name = "Id-Names-Suggesting-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Provides assistance in naming variables.

      To use the Id Names Suggesting tool, press Alt+Enter on a variable and select Suggest variable name.
      '';
    };
  }) {};

  idea-162-icon-pack = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Idea-162-Icon-Pack";
    plugname = "Idea 162 Icon Pack";
    plugid = "com.kraft.idea162IconPack";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9281/30733/idea162_Icon_Pack.jar";
      sha256 = "1l6x6npl10sqgj3d50rl4k4rpsbc3d6pc15nj4jn16i4m9kp2p03";
      name = "Idea-162-Icon-Pack-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Changes the new "flat" icons to the old 2016.2 ones
      '';
    };
  }) {};

  idea-2016-2-icon-pack = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Idea-2016.2-Icon-Pack";
    plugname = "Idea 2016.2 Icon Pack";
    plugid = "com.bulenkov.idea.Idea11IconPack";
    version = "3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7285/47285/Idea11Icons.jar";
      sha256 = "1q0qm5hzb1fk0yk96hrag5qkssvhz6hc0qq4i7pi15dsg90wiqjr";
      name = "Idea-2016.2-Icon-Pack-3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bulenkov.com";
      license = lib.licenses.asl20;
      description = ''
        Changes new modern icons to the old ones. Welcome back to IntelliJ IDEA 2016.2
      '';
    };
  }) {};

  idea-javadocs2 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Idea-Javadocs2";
    plugname = "Idea Javadocs2";
    plugid = "com.sgota.plugin.idea.javadocs2";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12703/65450/idea-javadocs2.zip";
      sha256 = "0s5xnh1ag0x29sigsgs1b48fpzkdcz20nhhlb1kals34nh70ghgd";
      name = "Idea-Javadocs2-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/freedommedal/idea-javadocs2";
      license = lib.licenses.asl20;
      description = ''
        English:Javadocs Plugin the Chinese language enhanced version,
      Plugin that generates java docs on java class elements, like field,method,
      Thanks to the original author.
      
      Chinese:Javadocs插件的中文增强版,
      在java类元素(如field、method)上生成java文档的插件,
      感谢原作者.
      '';
    };
  }) {};

  idea-setting-explorer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Idea-Setting-Explorer";
    plugname = "Idea Setting Explorer";
    plugid = "com.github.sleepingraven.idea-setting-explorer";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15345/104544/Idea_Setting_Explorer-0.1.0.zip";
      sha256 = "0sk55h8ywygph0g0bp9hv1py7lszn265wnnss4y1jl383qaz5sab";
      name = "Idea-Setting-Explorer-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sleepingraven/";
      license = lib.licenses.asl20;
      description = ''
        Setting Navigation for IntelliJ IDEA.GitHub | IssuesWith Idea Setting Explorer you can search the configurations within your IntelliJ IDEA conveniently and view documentations about them.

The main goal of this plugin is to provide guidance of configurations for developers and facilitate the search of them by:

listing operation steps,describing with pictures,linking to the proper documentation pages,marking them with colored tags,

which displays in lightweight, concise, fast and immersive popups.
      '';
    };
  }) {};

  ideaamp = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaAmp";
    plugname = "IdeaAmp";
    plugid = "IdeaAmp";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1517/5354/IdeaAmp_5354.zip";
      sha256 = "1j07rr82kx6qm458xjr6dc28vgzbkbj83qxv7xis4ykbrlw7flak";
      name = "IdeaAmp-2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://amip.tools-for.net/wiki/amip/ideaamp";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://amip.tools-for.net/wiki/amip/ideaamp";
        free = false;
      };
      description = ''
        Lets you control your media player from IDEA. IdeaAmp uses AMIP to support
    the following media players: Winamp, foobar2000, iTunes, AIMP, QCD/QMP, Apollo.
      '';
    };
  }) {};

  ideaascii = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IdeaAscii";
    plugname = "IdeaAscii";
    plugid = "com.jonathonstaff.ideaascii";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7491/16481/IdeaAscii.jar";
      sha256 = "0wmid2jk31vmk82wink10gf9kl6v9my476jp327mvmsass7qgbf3";
      name = "IdeaAscii-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jonathonstaff.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jonathonstaff.com";
        free = false;
      };
      description = ''
        IdeaAscii is a simple plugin that allows you to easily add comments (typically section headers/breaks) in ASCII text.
 Check out the repo on GitHub for more details:
 
https://github.com/jonstaff/IdeaAscii
      '';
    };
  }) {};

  ideaenhance = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IdeaEnhance";
    plugname = "IdeaEnhance";
    plugid = "com.github.luomingxu.idea";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15769/108124/idea-plugin.jar";
      sha256 = "1nx12ndymh6d4c4282mqjdvmmrcwvfp24pv6dij57rvh6bvclvna";
      name = "IdeaEnhance-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LuomingXu";
      license = lib.licenses.asl20;
      description = ''
        Self-use idea plugin.
      
      Features
      
      From java file jump to its class file
      Jump to module pom file
      Open calss files' dir in Explore
      Gen Arthas redefine cmd
      '';
    };
  }) {};

  idealight-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IdeaLight-Color-Scheme";
    plugname = "IdeaLight Color Scheme";
    plugid = "color.scheme.IdeaLight";
    version = "0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10071/94759/IdeaLight-0.5.jar";
      sha256 = "0a2y5cdw84rz98q12msbp6hhfsdxxmcp9l884cg4pz5hdxl7wdz9";
      name = "IdeaLight-Color-Scheme-0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.dyadix.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode";
        free = false;
      };
      description = ''
        Low-contrast light color scheme with light gray background.
      '';
    };
  }) {};

  ideamantis = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaMantis";
    plugname = "IdeaMantis";
    plugid = "de.domjos.ideaMantis";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9244/49966/ideaMantis.zip";
      sha256 = "0scvcggvakrm9xvzs4b1nvf15avrrmls7jpz75xpw23ziz64pniw";
      name = "IdeaMantis-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://domjos.de";
      license = lib.licenses.gpl3Only;
      description = ''
        IntelliJ-Idea Plugin to create, edit and delete Issues from Mantis BugTracker!
      '';
    };
  }) {};

  ideamousegestures-v9-0-1 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IdeaMouseGestures-v9.0.1+";
    plugname = "IdeaMouseGestures v9.0.1+";
    plugid = "IdeaMouseGestures v9.0.1+";
    version = "1.10.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4982/8279/IdeaMouseGestures_v9.0.1+_8279.jar";
      sha256 = "0d6wjzkk3qpir2ynhfnqjbcx1llqmb6jh67cakrd2mf4w0y0sz2d";
      name = "IdeaMouseGestures-v9.0.1+-1.10.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.smardec.com/products/idea.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.smardec.com/products/idea.html";
        free = false;
      };
      description = ''
        IdeaMouseGestures plugin provides easy way to assign Idea's menu items to mouse gestures.
        Mouse gestures are recognized when the right mouse button is pressed.
        Plugin contains open source (LGPL) components and documentation to add mouse gestures
        recognition and processing for any Swing application (Mouse Gestures library).
        The plugin is open source (LGPL). The distribution can be found at http://www.smardec.com/products/idea.html.
        We appreciate any feedback (positive or negative). This helps us to improve the software.
        Special thanks to Pierre Le Lannic
      '';
    };
  }) {};

  ideatoolbox = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaToolBox";
    plugname = "IdeaToolBox";
    plugid = "com.common.collect.plugin.idea.box";
    version = "1.7.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14787/104904/plugins-idea.zip";
      sha256 = "0iz476shq0l0a0xxi00x35zs28xjzli6ld3a3dghq40qipvzqsy7";
      name = "IdeaToolBox-1.7.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ IdeaToolBox plugin
Features Introduce,Please Forward:  使用介绍

    1.7 Provided create domain from json
    1.6 Provided create api doc from any method
    1.5
         Provided create json from domain
         Provided create domain from mysql table
     
    1.4 Provided create table sql from domain
    1.3 Provided convert camel and underline
    1.2 Provided controller method url copy 
    1.0 Provided generate set|builder setter
      '';
    };
  }) {};

  ideatweet = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaTweet";
    plugname = "IdeaTweet";
    plugid = "com.github.hotchemi.IdeaTweet";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7152/12444/IdeaTweet.zip";
      sha256 = "1vgvkarhw5z4fg8l3ywf1wcslpjr8cszrgag29whyg8g66p1vihf";
      name = "IdeaTweet-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hotchemi/IdeaTweet";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/hotchemi/IdeaTweet";
        free = false;
      };
      description = ''
        Simple tweet plugin.
      '';
    };
  }) {};

  ideatwitter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaTwitter";
    plugname = "IdeaTwitter";
    plugid = "IdeaTwitter";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1827/5262/IdeaTwitter_5262.zip";
      sha256 = "0m9lhw4xfhyrmbph5mdw043ni548zqscbp1j9jw20jj9ypd0gglc";
      name = "IdeaTwitter-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Access Twitter service from IDEA
      '';
    };
  }) {};

  ideavim = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaVim";
    plugname = "IdeaVim";
    plugid = "IdeaVIM";
    version = "0.64";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/164/106200/IdeaVim-0.64.zip";
      sha256 = "0kyylz512sn7n5ahxw761ddnf5yrzygfnp3l4h4g7wn7aq718zll";
      name = "IdeaVim-0.64.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/164";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        Vim emulation plugin for IntelliJ Platform-based IDEs.
      
      IdeaVim supports many Vim features including normal/insert/visual modes, motion keys, deletion/changing,
      marks, registers, some Ex commands, Vim regexps, configuration via ~/.ideavimrc, macros, Vim plugins, etc.
      
      See also:
      
        GitHub repository: documentation and contributing
        Issue tracker: feature requests and bug reports
      '';
    };
  }) {};

  ideavim-easymotion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaVim-EasyMotion";
    plugname = "IdeaVim-EasyMotion";
    plugid = "org.jetbrains.IdeaVim-EasyMotion";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13360/108050/IdeaVim-EasyMotion-1.4.zip";
      sha256 = "0k69dr5xvkv5gh707f0j2nwk247xpycq44kbvfngq92zx1yimrk3";
      name = "IdeaVim-EasyMotion-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AlexPl292/IdeaVim-EasyMotion";
      license = lib.licenses.gpl3Only;
      description = ''
        EasyMotion plugin emulation for IdeaVim.
      See GitHub for the list of supported commands.
      '';
    };
  }) {};

  ideavim-sneak = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaVim-Sneak";
    plugname = "IdeaVim-Sneak";
    plugid = "io.github.mishkun.ideavimsneak";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15348/102800/ideavim-sneak-1.1.1.zip";
      sha256 = "16rwfzxhml99his6cllfcg74w1j7i2ynyrrmmlp4wjw8353327r0";
      name = "IdeaVim-Sneak-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Mishkun/ideavim-sneak";
      license = lib.licenses.gpl3Only;
      description = ''
        Port of vim-sneak – vim's missing motion to ideavim.
    

    
    It helps you navigate in line effortlessly.
    In short, it is like `f` and `F`, but accepting two characters instead of one. It makes your movement at least 1000%
    more precise and accurate.
    

    
    Use `s` plus two characters to search forward in document
    Use `S` plus two characters to search backward in document
    Use `;` and `,` just as with `f` and `F` commands to repeat searches
    

    Add `set sneak` to your ./ideavimrc file for activation
      '';
    };
  }) {};

  ideavimextension = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IdeaVimExtension";
    plugname = "IdeaVimExtension";
    plugid = "IdeaVimExtension";
    version = "1.4.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9615/102429/ideavim_extension.zip";
      sha256 = "15l0hwq7xlwx4w5qdlhysgf1zppl18iqj2svg7pxi0naw4dsfpds";
      name = "IdeaVimExtension-1.4.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hadix-lin/ideavim_extension";
      license = lib.licenses.asl20;
      description = ''
        The plugin is an extension of 'IdeaVim' , can switch to English input method in normal mode and restore input method in insert mode.
      How To Enable:
      auto-switch feature is disabled by default
      
        enable the feature with the commands below, input in normal mode:
      
        :set keep-english-in-normal enable auto-switch feature
        :set keep-english-in-normal-and-restore-in-insert restore input method when return insert mode
        :set nokeep-english-in-normal-and-restore-in-insert keep auto-switch feature, but doesn't restore input method when return insert mode
        :set nokeep-english-in-normal disable auto-switch feature
      
      You can also add `set keep-english-in-normal[-and-restore-in-insert]` to the `~/.ideavimrc` file and restart IDE to enable the feature.

      
      Notice:
      The plugin support MacOS and Windows and Linux(with fcitx)
      
      MacOS need enable en_US OR ABC keyboard
      Windows need enable en_US keyboard
      Linux need fcitx-remote
      
      GitHub RepositorySource and Feedback
      
      为IdeaVim插件增加自动切换为英文输入法的功能
      输入法自动切换功能不会默认启用
      
        编辑器中normal模式下输入输入下面的指令以启用自动切换输入法功能：
      
        :set keep-english-in-normal 开启输入法自动切换功能
        :set keep-english-in-normal-and-restore-in-insert 回到insert模式时恢复输入法
        :set nokeep-english-in-normal-and-restore-in-insert 保留输入法自动切换功能，但是回到insert模式不恢复输入法
        :set nokeep-english-in-normal 关闭输入法自动切换功能
      
      也可以通过将`set keep-english-in-normal[-and-restore-in-insert]`加入到`~/.ideavimrc`文件中并重启IDE来启用插件功能。
      
      注意:支持MacOS和Windows, 通过fcitx-remote支持Linux
      
      MacOS需要开启英语美国键盘或ABC键盘
      Windows需要开启英语美国键盘
      Linux需要使用fcitx输入法，通过fcitx-remote切换
      
      GitHub Repository: 源码和问题反馈
      '';
    };
  }) {};

  identifier-highlighter-reloaded = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Identifier-Highlighter-Reloaded";
    plugname = "Identifier Highlighter Reloaded";
    plugid = "Identifier Highlighter Reloaded";
    version = "1.02.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6318/13131/ih-reloaded.jar";
      sha256 = "00dlps85fqjzp1rimqrwvrnvv09v5vx5cbi7kmia3ccsc2qjhsmn";
      name = "Identifier-Highlighter-Reloaded-1.02.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.wtfpl.net/txt/copying/";
        free = false;
      };
      description = ''
        Gives you one-stroke way to navigate to next/previous identifier occurrence. 
 Use Shift+Alt+Up and Shift+Alt+Down (or assign your own shortcuts in Keymap) to navigate up and down to each identifier occurrence. 
 Make sure that these shortcuts are not mapped to e.g. &quot;Move Line Up&quot; and &quot;Move Line Down&quot; in Keymap. 
 Can be used with or without &quot;Highlight usages of element at caret&quot; enabled. 
 Source available at 
http://github.com/olegych/ih-reloaded.
      '';
    };
  }) {};

  ideolog = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ideolog";
    plugname = "Ideolog";
    plugid = "com.intellij.ideolog";
    version = "202.0.25.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9746/91223/ideolog-202.0.25.0.zip";
      sha256 = "070x63zn7hxf1bdkcc6zplads7mmqhx2r2df97y4pckqn4vdqz2g";
      name = "Ideolog-202.0.25.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/ideolog";
      license = lib.licenses.mit;
      description = ''
        Interactive viewer for '.log' files.
    
      Features:
      
        Code highlighting based of log level: error, warn, info, etc.
        Intention to highlight columns (time, category, threads, stack frames) in log file editor.
        Folding of uninteresting events
        Hyperlinks of stack traces in log
        Navigation to source code that emit log events (F7).
        Go to next error action (Shift + F7)
        Extends selection
        Intention tp highlight distance between events (marks time as red)
        Advanced error stripe (heat map)
        Custom log format more info: https://github.com/JetBrains/ideolog/wiki/Custom-Log-Formats
      
    
    
      Issue tracker: https://github.com/JetBrains/ideolog/issues
      '';
    };
  }) {};

  idle-indexing = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Idle-Indexing";
    plugname = "Idle Indexing";
    plugid = "com.jetbrains.inin";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15173/100468/inin.zip";
      sha256 = "0x29ia3d8cqqviqnva1s2miwbszyg2w850lanmdcg4q4h3qkvyb7";
      name = "Idle-Indexing-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/15173-idle-indexing";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=gnpqvn3i9s8wifnnaqn4j2u1r0cp2khv";
        free = false;
      };
      description = ''
        Makes the UI more responsive by allowing your IDE to index files only when it's idle.
      
      Have you ever noticed your IDE becomes less responsive when it's indexing files during the startup or on opening a project? The Idle Indexing plugin allows your IDE to index files only when the IDE is idle and suspends indexing immediately when the IDE becomes active. The plugin frees up your CPU, so it can be very responsive to your keyboard input and mouse events. The default idle timeout is 3 seconds.
      
      Pros:
      
        More responsive UI ⚡ while indexing is in progress
      
      Cons:
      
        Incomplete code insight results while indexing is in progress
        The IDE disables some actions while indexing is in progress
      
      
      ⬇️ Install the Idle Indexing plugin and check if it improves your experience during indexing.
      
      Please ⭐ rate the plugin or 💬 write a review! 🙏 I really need your feedback to make the plugin better!
      '';
    };
  }) {};

  illuminated-cloud-2 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Illuminated-Cloud-2";
    plugname = "Illuminated Cloud 2";
    plugid = "com.illuminatedcloud2.intellij";
    version = "2.1.5.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10253/108170/IlluminatedCloud2.zip";
      sha256 = "0bfji5i4n0cr3r7x75fvkqimjbwj2wyxbrdhjvis1cpx3h5v4w7l";
      name = "Illuminated-Cloud-2-2.1.5.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.illuminatedcloud.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.illuminatedcloud.com/purchase";
        free = false;
      };
      description = ''
        Illuminated Cloud brings the modern feature set of JetBrains' powerful IDEs to Salesforce
            development. Illuminated Cloud not only saves you time with its intelligent auto-completion for all
            Salesforce programming languages and metadata types, but it also recognizes issues in your code and
            offers suggestions for how to correct them. With Illuminated Cloud's refactoring capabilities,
            you'll be able to own and evolve your Salesforce code base like never before.
        
        
            Illuminated Cloud provides full support for traditional and Salesforce DX development
            models—against both scratch orgs and non-scratch orgs—allowing you to flow seamlessly between
            the various
            models in a single tool. Because Illuminated Cloud extends JetBrains' powerful IDEs, you can leverage their
            extensive capabilities including best-in-class Web application development features (commercial IDEs only),
            seamless version control integration, and first-class integrations with task management and
            bug tracking systems.
        
        
            Illuminated Cloud dramatically simplifies development and deployment of Apex, Visualforce,
            Lightning (Aura and LWC), and other Salesforce metadata types with modern IDE features such as:
        

        
            Intelligent Code Completion and Time-Saving Live Templates
            Extensive Source Code Navigation and Cross-Referencing
            Refactoring
            Code Inspections and Intentions
            Intelligent Source Code Generation
            Content Type-Aware Static Resource Management and Static Resource Bundles
            Integrated API Documentation and ApexDoc Support
            Configurable Source Code Formatters
            Template-Based Source File Creation
            Full Salesforce DX Support
            Offline Apex Debugger
            Integrated Apex Unit Test Execution and Code Coverage Analysis
            Anonymous Apex/SOQL Query Execution and Apex Log Analyzer
            Powerful Connection Management
            Offline Symbol Table Generation
            Flexible and Efficient Metadata Management
        

        Note that Illuminated Cloud is a commercial offering and
        requires an active annual subscription-based license for continued access to its features.
      '';
    };
  }) {};

  image-diff = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Image-Diff";
    plugname = "Image Diff";
    plugid = "de.ehmkah.projects.imgdiff";
    version = "1.8.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12691/105969/imgdiff-1.8.0.zip";
      sha256 = "0r80bda22fj46y36cbm4zwpgbcrvv7jkq9a1ikj11y1mp5m0cjhj";
      name = "Image-Diff-1.8.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.m-krausse.de";
      license = lib.licenses.asl20;
      description = ''
        This plugin shows the diff of two images in the diff view.
     I am happy if you report issues, I am going to fix them.
      '';
    };
  }) {};

  image-icon-viewer-11_0 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Image-Icon-Viewer-11_0";
    plugname = "Image Icon Viewer";
    plugid = "com.mallowigi.imageicon";
    version = "11.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11096/97766/Image_Icon_Viewer-11.0.zip";
      sha256 = "04db5bhq203672x3lbpgsbsgyg7kv9ljzmvfsjvadwmbb32amin8";
      name = "Image-Icon-Viewer-11_0-11.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mallowigi/Image-Icon-Viewer";
      license = lib.licenses.mit;
      description = ''
        Image Icon Viewer
  
  Preview project images right inside the Project View or Tabs.
  
  This is particularly helpful when working with icons, as it gives you a preview without needing to open the file.
      '';
    };
  }) {};

  image-icon-viewer-1_0_5 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Image-Icon-Viewer-1_0_5";
    plugname = "Image Icon Viewer";
    plugid = "com.plugin.image-icon-viewer";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12655/107689/image-icon-viewer-1.0.5.jar";
      sha256 = "1ynn2mlz0x6sm0rqs8vwsjgrsmipyldg9dgs59zqsazj033yrc5j";
      name = "Image-Icon-Viewer-1_0_5-1.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/snsyzf/image-icon-viewer";
      license = lib.licenses.asl20;
      description = ''
        Image Icon Viewer
        
        Preview project images right inside the Project View or Tabs.
        
        Supported extensions by
        ImageIO.getReaderFileSuffixes()
        
        If you need to add more supported image types:
        
            
                Download library from: TwelveMonkeys
            

            
                Put the jar in the lib directory under the IDEA installation directory
            
        
        The default supported extension are: 
        
        
            *.gif
            *.png
            *.bmp
            *.jpg
            *.wbmp
            *.svg
      '';
    };
  }) {};

  imagecomment = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ImageComment";
    plugname = "ImageComment";
    plugid = "com.github.syuchan1005.ImageComment";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11170/51124/ImageComment.zip";
      sha256 = "1w9qmy9fm3xx1pvqjlkhnyyxcjarglyd0lq4q9a5qapq8fa7rfap";
      name = "ImageComment-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/syu_chan_1005";
      license = lib.licenses.mit;
      description = ''
        Getting Started
       
       
         Write `![imageAlt](/path/to/image)` in comment!
      '';
    };
  }) {};

  imageslimming = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ImageSlimming";
    plugname = "ImageSlimming";
    plugid = "com.shanbay.plugins.image.slimming";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10875/48997/ImageSlimming.zip";
      sha256 = "1ppvi2b2ff1a3xganm2k6h22ywkh7vr3nfma0k10i2d42qggvygf";
      name = "ImageSlimming-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shanbay.com";
      license = lib.licenses.asl20;
      description = ''
        Plugin for Image Compress, Support png and jpg, Develop by Kotlin and Using TinyApi lib. 
        The Open Source Code Repository Url: https://github.com/BayMikyou/ImageSlimming
        The Plugin develop blog Url: https://juejin.im/post/5b3453fe6fb9a00e883f37fa

        
            Support compress multiple images simultaneously

            Support png and jpg

            Support have used inputDir and outputDir cache

            Support whole directory pictures compress

            Support single picture and selected multiple images compress

            Support append output file prefix name

            Support AndroidStudio, Intellij IDEA, WebStorm, PyCharm, etc
      '';
    };
  }) {};

  immersive-templatesz = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Immersive-Templatesz";
    plugname = "Immersive Templatesz";
    plugid = "m2mobi.m2plugin";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12237/62263/m2plugin-0.0.2.jar";
      sha256 = "0qgx2g47nw4vq6ghbiw0za711h2whjgsw5bb2zr55x1bdnwwmlxq";
      name = "Immersive-Templatesz-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.m2mobi.com";
      license = lib.licenses.gpl3Only;
      description = ''
        This is the official Immersive templatesz plugin. 

    This grants the user an immersive developer experience for making use of the Immersive MVP templates and much more. MVP stands for Model View Presenter which is a design pattern that can be used within Android development. 

    No longer you need to create an Activity or a presenter or a contract... or a Dagger 2 module. The plugin will provide you with a set of immersive templates that will do all of this for you and your productivity will sky-rocket through the roof. This means much more time to spend on your self improvement and social skills while working.
      '';
    };
  }) {};

  import-figma-resources = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Import-figma-resources";
    plugname = "Import figma resources";
    plugid = "com.abeade.plugin.figma.import";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12037/82677/figma-import-plugin.jar";
      sha256 = "0ppbh2zp0kbhbzjanaimph7k04mfxvgqambik6bgysn2lff8c4ra";
      name = "Import-figma-resources-1.0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/abeade";
      license = lib.licenses.asl20;
      description = ''
        Import figma resources to dpi resource folders.
      '';
    };
  }) {};

  inc-dec-value = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Inc-Dec-Value";
    plugname = "Inc Dec Value";
    plugid = "com.jeremyworboys.incDecValue";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7661/18392/IncDecValue.jar";
      sha256 = "0x2jlgdv5dglrkqvbgcaz7vp8x0j9gnsr6vs668c1f8lj7qwzfq3";
      name = "Inc-Dec-Value-0.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://jeremyworboys.com";
      license = lib.licenses.mit;
      description = ''
        Increment and decrement numbers (integer and floating point) and string casing (upper, lower, capitalize). 
GitHub
      '';
    };
  }) {};

  indent-rainbow = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Indent-Rainbow";
    plugname = "Indent Rainbow";
    plugid = "indent-rainbow.indent-rainbow";
    version = "1.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13308/101424/Indent_Rainbow-1.6.1.zip";
      sha256 = "1r734cclzdsi9vmyybmpsd3g4h57igdv1cq9dxrhgd1x1sgzjf0p";
      name = "Indent-Rainbow-1.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dima74/intellij-indent-rainbow";
      license = lib.licenses.gpl3Only;
      description = ''
        Indent Rainbow Plugin
        A simple extension to make indentation more readable
        
        This extension colorizes the indentation in front of your text alternating four different colors on each step.
      '';
    };
  }) {};

  indices-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Indices-viewer";
    plugname = "Indices viewer";
    plugid = "com.jetbrains.hackathon.indices.viewer";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13029/89057/iv-1.8.zip";
      sha256 = "1vn317xrqvrydlq42agbwg9lr4nyxhwwmw3a3fw3a11ykabmdkk9";
      name = "Indices-viewer-1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ-based IDEs use so-called indices to store code related meta-information. They have a binary representation on disk
        what makes it somehow difficult to analyze their content. The idea of the plugin is to provide an in-IDE viewer for indices
        with abilities to search, filter, and so on.
      '';
    };
  }) {};

  infinitest = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Infinitest";
    plugname = "Infinitest";
    plugid = "Infinitest";
    version = "5.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3146/45792/infinitest-intellij-5.2.0-dist.zip";
      sha256 = "1prm89fqma0dnksc6rklv39dn55b7cdqpfwc1s05l6vc10rha2zl";
      name = "Infinitest-5.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/infinitest/infinitest";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/infinitest/infinitest/master/COPYING";
        free = false;
      };
      description = ''
        Infinitest plugin for Intellij
      '';
    };
  }) {};

  info-bubble-for-python-requirements = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Info-bubble-for-python-requirements";
    plugname = "Info bubble for python requirements";
    plugid = "Pip requirements info bubble";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10506/43901/pip-req-bubble.jar";
      sha256 = "0lxr6w35symdg65pd60l28x8621r16xc42s3bwgmy4qdr2lbm9ma";
      name = "Info-bubble-for-python-requirements-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/akoikelov/pip-req-bubble";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/akoikelov/pip-req-bubble";
        free = false;
      };
      description = ''
        This plugin helps to quickly know information about chosen python library in requirements file
      '';
    };
  }) {};

  ini = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ini";
    plugname = "Ini";
    plugid = "com.jetbrains.plugins.ini4idea";
    version = "145.258.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6981/24756/ini4idea-145.258.2.zip";
      sha256 = "1a63lmpch9fnwg53gwlbl5xlasq761m26xa79c2347fl26hfx9ay";
      name = "Ini-145.258.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Provides ".ini" files support.
The following features are available: 
Syntax highlighting, formatting, code folding, and viewing structure for .ini files
Detection of duplicate properties and sections
The ability to navigate to a property via the Go to Symbol action
      '';
    };
  }) {};

  inject-android-log-tag = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Inject-Android-Log-TAG";
    plugname = "Inject Android Log TAG";
    plugid = "cn.reker.intellij.injectlogtag";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13082/70139/InjectLogTagPlugin-1.0.4.zip";
      sha256 = "04x8ib68znmq94876ixdi01wdv20nrlx45drkifckdw6q54f6n7y";
      name = "Inject-Android-Log-TAG-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/imreker/InjectLogTagPlugin";
      license = lib.licenses.asl20;
      description = ''
        Generate TAG field to use for android.util.Log.
      Forked from https://github.com/tomorrowkey/InjectLogTagPlugin
      '';
    };
  }) {};

  injectioniii-for-appcode = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "InjectionIII-for-AppCode";
    plugname = "InjectionIII for AppCode";
    plugid = "com.injectionforxcode.injection.plugin.id";
    version = "4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7187/97066/Injection.jar";
      sha256 = "0q6q60rvf86jq5r4y5nxyab3yrr30khlqvhjqkhpsrzgcgkd43qj";
      name = "InjectionIII-for-AppCode-4.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/johnno1962/InjectionIII";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/johnno1962/InjectionIII";
        free = false;
      };
      description = ''
        Dynamic Swift Code Injection for App Code.
      Requires InjectionIII from Mac App Store to work.
      '';
    };
  }) {};

  innerbuilder-continued = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "InnerBuilder-Continued";
    plugname = "InnerBuilder Continued";
    plugid = "InnerBuilder Continued";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15818/107661/InnerBuilder_Continued-1.0.2.zip";
      sha256 = "0lpjf83nsj6350lmcfahagd9nr89zrn63lyfv97fkqx2900x67y7";
      name = "InnerBuilder-Continued-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://tripled.io";
      license = lib.licenses.asl20;
      description = ''
        This plugin adds the possibility to add an inner builder to a POJO class.

At time of writing the original plugin did not seem to be under active development anymore so this is a continuation of https://plugins.jetbrains.com/plugin/7354-innerbuilder
      '';
    };
  }) {};

  innerbuilder-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Innerbuilder-Generator";
    plugname = "Innerbuilder Generator";
    plugid = "com.github.janneri.innerbuildergeneratorintellijplugin";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15615/108589/innerbuilder-generator-intellij-plugin-1.1.0.zip";
      sha256 = "0sqgw67ib8rkp5vij19lwdn5khzahhd2cfz1rwy1n2bwyyg8gifj";
      name = "Innerbuilder-Generator-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/janneri";
      license = lib.licenses.mit;
      description = ''
        Generates an inner builder class to a data class / DTO.
Supports recreation: just add a field to the data class and run generate again.

You can configure the generator using the action "Generate Inner Builder...".
The settings are saved and survive IDE restarts.
To quickly generate a builder with the previously selected settings, just hit "shift alt B".
      '';
    };
  }) {};

  input-language-locker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Input-Language-Locker";
    plugname = "Input Language Locker";
    plugid = "com.gilecode.langlocker";
    version = "2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9285/42052/lang-locker.zip";
      sha256 = "1icdxy6bl6v5ycr15b58zpmzlk4s0qrsgvc0i3sxs39yrldyylad";
      name = "Input-Language-Locker-2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://gilecode.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html";
        free = false;
      };
      description = ''
        Blocks unwanted input language changes while working in IDEs 
WARNING: Only for Windows!
      '';
    };
  }) {};

  insert-final-modifier = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Insert-Final-Modifier";
    plugname = "Insert Final Modifier";
    plugid = "Insert Final Modifier";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7449/77823/intellij-final-modifier-plugin.jar";
      sha256 = "1mjpgnyvi02cb5mx4hxwkis20xsf6f1jaif0i4yia2p7ncrqslpq";
      name = "Insert-Final-Modifier-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jgrasl/intellij-final-modifier-plugin";
      license = lib.licenses.asl20;
      description = ''
        Insert final modifier automatically based on Code style issues inspection of Intellij
      '';
    };
  }) {};

  inspection-compare-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Inspection-Compare-Plugin";
    plugname = "Inspection Compare Plugin";
    plugid = "Inspection.Compare.Plugin";
    version = "1.02";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11081/49926/inspection-compare.jar";
      sha256 = "1hsb72rljgy65b229rnw4x15nl7f9mnrqilg2pczrnn4df8wxsvk";
      name = "Inspection-Compare-Plugin-1.02.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AlexeyKozyakov/inspection-compare";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "fpl-1.0.0";
        free = false;
      };
      description = ''
        Compare your offline inspection results
      '';
    };
  }) {};

  inspectionkeybinder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "InspectionKeyBinder";
    plugname = "InspectionKeyBinder";
    plugid = "com.othoslabs.InspectionKeyBinder";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9224/50218/InspectionKeyBinder.jar";
      sha256 = "0kyl6ix5cw95b0and2sqf9fgf3s6162djj49yl8srynv4i5cgdxy";
      name = "InspectionKeyBinder-1.2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://othoslabs.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/m-abboud/InspectionKeyBinder-IntelliJPlugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Allows keyboard shorcuts to be bound to toggle inspections such as the spelling inspection.
      CTRL+K + CTRL+S is the default key binding for toggle spelling.
      '';
    };
  }) {};

  inspire-writing = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Inspire-Writing";
    plugname = "Inspire Writing";
    plugid = "com.airsaid.InspireWriting";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12942/81791/InspireWriting-1.0.4.zip";
      sha256 = "0g0vxw6pbvcfs1lkch3y3a1lv9rzd0wqkhbbk2mdbdw1ff4zhlxj";
      name = "Inspire-Writing-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Airsaid";
      license = lib.licenses.asl20;
      description = ''
        An IntelliJ IDEA plugin is used to inspire you to write code.
    Whenever you write code that exceeds the specified character, the plugin will automatically replace the IDE background image for you.
    Want to see more pictures? Write it up!
      '';
    };
  }) {};

  install-apk = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Install-Apk";
    plugname = "Install Apk";
    plugid = "com.sander.installapk";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12890/67354/InstallApk.jar";
      sha256 = "1q8jkpi0vn4yyvnm82lh7c7wzf3cs81zyqrhhqm5qvclb5b6gi33";
      name = "Install-Apk-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://blog.csdn.net/cufelsd";
      license = lib.licenses.asl20;
      description = ''
        Right click on the apk file and select InstallAPK
      You will see this info in your console:
      ------------------Install Apk start-------------------- 
      Execute command: adb install -r ***.apk                 
      Performing Streamed Install                             
      Success                                                 
      ------------------Install Apk end--------------------
      '';
    };
  }) {};

  instant-patch-remote-java-process = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Instant-Patch-Remote-Java-Process";
    plugname = "Instant Patch Remote Java Process";
    plugid = "org.sanchouss.idea.plugins.instantpatch";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9373/45469/InstantPatchIdeaPlugin.zip";
      sha256 = "0cqqqn34krv1zpkmy9s4dkmpysyqqc3piw38wppaig6cv6kb11bz";
      name = "Instant-Patch-Remote-Java-Process-0.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/sanchouss";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/sanchouss/InstantPatchIdeaPlugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Instant Patch Remote Java process by copying fresh .class files and resource files directly to remote host via secure channels
      '';
    };
  }) {};

  instrumentationtestrunner = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "InstrumentationTestRunner";
    plugname = "InstrumentationTestRunner";
    plugid = "zcchenk";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13342/75767/ITRunner_pro.jar";
      sha256 = "0wr0vs4bssxd1asy1f879aqp314hpl9ccyfa340vi7wxqdlwnk4h";
      name = "InstrumentationTestRunner-1.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.zcchenk.com";
      license = lib.licenses.asl20;
      description = ''
        Instrumentation testing with the adb command.
        Right-click a class or package and click "ApiTest" to test.
      '';
    };
  }) {};

  integration-for-sap-commerce = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Integration-for-SAP-Commerce";
    plugname = "Integration for SAP Commerce";
    plugid = "ccom.intellij.idea.plugin.commerce.integration";
    version = "2019.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12639/64784/Integration-SAP-Commerce.zip";
      sha256 = "1p17jby9vqfnl4k6r61qaa7zfzbllyjsk98r9waznymdlgsrcnkm";
      name = "Integration-for-SAP-Commerce-2019.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Janhouse/sap-commerce-integration-intellij-idea-plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        This is an unofficial community maintained plugin for SAP Commerce (previously Hybris) integration within IntelliJ IDEA.

          This plugin was forked by developers sometime in 2017 and two versions were maintained by original developers - LGPL 3.0 licensed
          one for public contributions and private one that was released on JetBrains plugin repository that possibly contained
          both private changes and public ones from LGPL 3.0 version. By doing so they potentially broke the terms of LGPL 3.0 license.
          If you are using older IntelliJ IDEA version with older plugin version they should provide source code with all
          of the features if you request it.

          Here is a list of features in the free, open source version of the plugin.

          Working features:
          
              ✅ Import of SAP Commerce extensions to Intellij IDEA with automatic dependency resolution and classpath configuration optimized for fast compilation
              ✅ Automatic configuration of Spring, Web, Ant, Database Connector Intellij IDEA plugins
              ✅ Import your custom Eclise, Maven and Gradle extensions together with SAP Commerce platform
              ✅ Custom editor for impex files with automatic formatting, find usages and go to declaration actions, validation and import of impexes into a remote SAP Commerce instance right from your IDE by single click of a button
              ✅ Custom editor for items.xml with validation, best-practices analyses, quick-fix autosuggestion and easy navigation
              ✅ Custom editor for beans.xml with custom automated Intellij refactorings actions
              ✅ Visualization of business process graph (use context menu of the file "Diagrams/Show Diagram", only Ultimate IDEA)
              ✅ Enhanced project view tree
              ✅ JRebel and DCEVM support
              ✅ Execution of Groovy scripts, Impexes through IDE using HAC Integration tool
              And some more
          

          Missing from LGPL version:
          
              🚫 JunitTest runner configuration (but tests can still be run)
              🚫 Execution of Flexible Search queries through IDE using HAC Integration tool
              🚫 Execution of queries on remote Solr instances
              🚫 Custom editor for flexible Search queries with an ability to execute them on a remote SAP Commerce instance right from your IDE by single click of a button
          

          This plugin is a derivative from plugin originally started by Alexander Bartash and released under GPL 3.0 license.
          If you prefer using the now closed source premium featured version of the plugin, visit https://plugins.jetbrains.com/plugin/7525-hybris-integration
      '';
    };
  }) {};

  intelizilla = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "InteliZilla";
    plugname = "InteliZilla";
    plugid = "org.intelizilla";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7132/17287/InteliZilla.jar";
      sha256 = "1s0vq9yrp14prmkh1s8vvrgard4g76bb1khmjbv6fwxsdn76fbnz";
      name = "InteliZilla-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Task Provider for bugzilla
      '';
    };
  }) {};

  intellirc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntellIRC";
    plugname = "IntellIRC";
    plugid = "IntellIRC";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1175/4129/IntellIRC_4129.jar";
      sha256 = "1maq3cz2b33ibikvl8mqkzlb5j6x0y88yz6a1lmhnnvzcxyvmkya";
      name = "IntellIRC-1.3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1175/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1175/sourceCode.zip";
        free = false;
      };
      description = ''
        IntellIRC (or Intelli IRC) is an integrated IRC Client, featuring for example:
	  	
			Managing list of IRC Network and Channel Favorites
			Auto-Connect to Favorites at startup
			Connect to multiple Servers/Channels
			New: Specify a HTTP or SOCKS proxy
			Fully supports IRC features (e.g. Actions)
			Included Identd Server may be enabled if necessary
			Enabling/Disabling Text Formatting/Timestamps
			Conversation logging
      '';
    };
  }) {};

  intelliachievements = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliAchievements";
    plugname = "IntelliAchievements";
    plugid = "eu.andret.intelliachievements.v1";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10294/42546/IntelliAchievements.jar";
      sha256 = "1gjd5wxa2a7rj3bvwa0n6m2pylryvjbmrvymqp0sicx21ggwl3yn";
      name = "IntelliAchievements-0.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/andret2344/intelliachievements";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/andret2344/intelliachievements";
        free = false;
      };
      description = ''
        This plugin adds some fun during coding. Allows you to get and check achievements for writing and running your Java programs, or using your IDE User Interface.
      '';
    };
  }) {};

  intellibot = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliBot";
    plugname = "IntelliBot";
    plugid = "com.millennialmedia.intellibot";
    version = "0.10.143.381";
    src = fetchurl {
      url = "https://github.com/millennialmedia/intellibot/raw/0.10.143.381/intellibot.jar";
      sha256 = "0040sdr20br05i405kkbraaxqaqkl0x0cd8lh2lmx6kqy6wmg8ia";
      name = "IntelliBot-0.10.143.381.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.millennialmedia.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.millennialmedia.com";
        free = false;
      };
      description = ''
        IntelliBot, Robot Framework Support 
The IntelliBot plugin for IntelliJ/Pycharm adds smart editing features to support the Robot Framework. 
Make sure to setup your IDE correctly to gain Python support. 
Find us in Github. 
 
 Feature Set 
 Wiki 
 Issue tracker 
 Complete Change Notes
      '';
    };
  }) {};

  intellibot-seleniumlibrary-patched = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliBot-SeleniumLibrary-Patched";
    plugname = "IntelliBot @SeleniumLibrary Patched";
    plugid = "com.millennialmedia.intellibot@SeleniumLibrary Patched";
    version = "0.10.143.381";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10700/45521/intellibot.jar";
      sha256 = "0n3xhbi04kj6vai57xvwaz54ldn6v19gbl9q7ifnrhmn6qji8094";
      name = "IntelliBot-SeleniumLibrary-Patched-0.10.143.381.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.millennialmedia.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.millennialmedia.com";
        free = false;
      };
      description = ''
        IntelliBot, Robot Framework Support 
The IntelliBot plugin for IntelliJ/Pycharm adds smart editing features to support the Robot Framework. 
Make sure to setup your IDE correctly to gain Python support. 
Find us in Github. 
 
 Feature Set 
 Wiki 
 Issue tracker 
 Complete Change Notes
      '';
    };
  }) {};

  intellicalc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliCalc";
    plugname = "IntelliCalc";
    plugid = "IntelliCalc";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1004/2662/IntelliCalc_2662.jar";
      sha256 = "1gg867rk1492yp6vbbfxdv1cc2mlb9r33pgygag84rmwdn44dlxw";
      name = "IntelliCalc-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1004/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/BartCr/intelli-plugins/master/LICENSE";
        free = false;
      };
      description = ''
        A small calculator integrated in IntelliJ.
        
        The calculator has three modes:
        
            Simple
            A simple calculator with just the basic functions
            Scientific
            A scientific calculator with more advanced functions
            Expression
            Allows to enter an expression containing variables.
        
        
        Use it as a normal simple calculator (with advanced functions) or evaluate expressions directly from your
        editor. To evaluate an expression in the editor, simply select the expression and select Evaluate in the
        editor popup menu or simply press alt F8. Remember that when debugging a program, the alt F8 function will be
        bound to the "Evaluate Expression" action of the IntelliJ IDEA.
        
        The expression mode knows math functions (add, subtract, sin, cos, acotan, ...), logical operators (||, !=, ...)
        and some special functions:
        
            set()
            will set a variable so it can be used in a calculation. Ex. set(x=2)[enter]2*x[enter]returns 4
            clear()
            Clears a stored variable. Ex. clear(x) will clear the variable x. Note that any calculation using x
                will fail until a new x has been set.
        
        Awaiting suggestions to improve the calculator.
      '';
    };
  }) {};

  intelliguard = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliGuard";
    plugname = "IntelliGuard";
    plugid = "IntelliGuard";
    version = "0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4511/12403/intelliguard.jar";
      sha256 = "1kxilsrvc9z9pf34ri2bjwzi173imh0xv188cyzqpasyfsq9d3zp";
      name = "IntelliGuard-0.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ronniekk/intelliguard";
      license = lib.licenses.asl20;
      description = ''
        Java bytecode obfuscation made easy. 
Seamless integration of yGuard in Intellij IDEA. Add Obfuscation facet to your Java module and choose which symbols to keep from obfuscation with IDEA inspections. 
Key features: 
 
 No more hazzles with configuration files. Just hit ALT+ENTER on any symbol in the editor for keep options. 
 Create obfuscated archive directly from the IDE. 
 Refactor support. Kept symbols remain unobfuscated after rename or move. 
 Inspections for common obfuscation pitfalls. 
 Optional (toggleable) gutter icons for obfuscated symbols. 
 Export configuration for yGuard and ProGuard format. 
 
 
Project home: https://github.com/ronniekk/intelliguard
      '';
    };
  }) {};

  intelliguard-2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliGuard-2";
    plugname = "IntelliGuard 2";
    plugid = "IntelliGuard 2";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10974/48477/intelliguard.jar";
      sha256 = "0863p56zcjdz0qvalh89m31a8jf0h27j125j1m3qwj68v8w56mr5";
      name = "IntelliGuard-2-2.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/iGufGuf/intelliguard";
      license = lib.licenses.asl20;
      description = ''
        Java bytecode obfuscation made easy.
        Seamless integration of yGuard in
        Intellij IDEA. Add Obfuscation facet to your Java module and choose which symbols to keep from obfuscation
        with IDEA inspections.
        Key features:
            
                No more hazzles with configuration files. Just hit ALT+ENTER on any symbol in the editor for keep options.
                Create obfuscated archive directly from the IDE.
                Refactor support. Kept symbols remain unobfuscated after rename or move.
                Inspections for common obfuscation pitfalls.
                Optional (toggleable) gutter icons for obfuscated symbols.
                Export configuration for yGuard
                and ProGuard format.
            
        
        Project home: https://github.com/iGufGuf/intelliguard
      '';
    };
  }) {};

  intelliheap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliHeap";
    plugname = "IntelliHeap";
    plugid = "IntelliHeap";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1821/8641/IntelliHeap_8641.zip";
      sha256 = "1n1kjv6f53yjb6vdf2qwa8jnsakinyk65z4dax702im3x3q7pd7s";
      name = "IntelliHeap-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1821/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1821/sourceCode.zip";
        free = false;
      };
      description = ''
        IntelliHeap attaches to an instrumented HotSpot JVM and collects and graphically displays garbage collection,
    class loader, and HotSpot compiler performance data.
    
    The target JVM is identified by its virtual machine identifier, or vmid.
      '';
    };
  }) {};

  intellij-api-watcher = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-API-Watcher";
    plugname = "IntelliJ API Watcher";
    plugid = "com.jetbrains.intellij.api.watcher";
    version = "6.45.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7875/77994/plugin-ui.zip";
      sha256 = "1qhkv7m7w7ppilkcv8hmc72gp6cxcisfdwl9hgvg0s1i4g483ss8";
      name = "IntelliJ-API-Watcher-6.45.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        The plugin provides 'Find External Usages' action which allows developers to quickly find plugins which use
      IntelliJ platform classes, methods or fields and 'Check external usages' option in 'Commit Changes' dialog which
      checks that changes in IntelliJ platform classes don't break external plugins.
      
      Note: it makes no sense to install this plugin if you don't contribute to IntelliJ IDEA sources.
        Also the plugin requires connection to a server which isn't accessible outside of JetBrains internal network.
      '';
    };
  }) {};

  intellij-gitlab-pipeline-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-GitLab-Pipeline-Viewer";
    plugname = "IntelliJ GitLab Pipeline Viewer";
    plugid = "de.sist.gitlab";
    version = "1.26";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13799/100873/gitlab-1.26.zip";
      sha256 = "137d43czpi1zl2af34zd80zs0bbwkll5m080cpw7b0i336hmls80";
      name = "IntelliJ-GitLab-Pipeline-Viewer-1.26.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/ppiag/intellij_gitlab_pipeline_monitor";
      license = lib.licenses.gpl3Only;
      description = ''
        Monitor your GitLab CI pipelines in IntelliJ
    
    
        Display gitlab pipeline statuses for currently checked out branches
        Show notifications for new statuses
      '';
    };
  }) {};

  intellij-haskell = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-Haskell";
    plugname = "IntelliJ-Haskell";
    plugid = "intellij.haskell";
    version = "1.0.0-beta85";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8258/105984/intellij-haskell.zip";
      sha256 = "0fba4xj1xrakvnvimymqv434rmb4slwjxzry18b8k6kd5amday1l";
      name = "IntelliJ-Haskell-1.0.0-beta85.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rikvdkleij/intellij-haskell";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/rikvdkleij/intellij-haskell/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Haskell language support.
        
            This plugin depends mainly on Stack.
            It can create new Stack projects and import existing Stack projects.
            Please README
      '';
    };
  }) {};

  intellij-ide-distribution-cleaner = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliJ-IDE-Distribution-Cleaner";
    plugname = "IntelliJ IDE Distribution Cleaner";
    plugid = "org.nik.distribution-cleaner";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7237/13334/IntelliJDistributionCleaner.jar";
      sha256 = "0grrdm1rmzsmmjnv0qzia1i0234rlyy3ssn05bqgyai0pawap20n";
      name = "IntelliJ-IDE-Distribution-Cleaner-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Adds 'Delete Disabled Plugins' action to 'Tools' menu allowing to delete disabled plugins from distribution of IDE to save disk space
      '';
    };
  }) {};

  intellij-idea-help = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-IDEA-Help";
    plugname = "IntelliJ IDEA Help";
    plugid = "bundled-intellij-idea-help";
    version = "202.8194.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10260/103246/IntelliJIDEAHelp.zip";
      sha256 = "1nc1rz7lpqbfkbxqp875pdzdmr8x9klj7jh3jyzxifk89kvy6nfy";
      name = "IntelliJ-IDEA-Help-202.8194.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.jetbrains.com/legal/agreements/user.html";
        free = false;
      };
      description = ''
        IntelliJ IDEA Web Help for offline use.
      '';
    };
  }) {};

  intellij-idea-properties-sorter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-IDEA-Properties-Sorter";
    plugname = "IntelliJ IDEA Properties Sorter";
    plugid = "de.juserv.intellij-propertiessort";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9883/95661/intellij-propertiessort-0.3.zip";
      sha256 = "1fmqfd1c5xjsas5707f3hql98jcfdycfn1glj9b8vd2ss76hpygd";
      name = "IntelliJ-IDEA-Properties-Sorter-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Jukkales/intellij-propertiessort";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Jukkales/intellij-propertiessort/blob/master/LICENSE";
        free = false;
      };
      description = ''
        If you are working on a project where different IDEs are used, properties files will often cause merge conflicts because of different format and ordering.
        This plugin can sorts and format property files directly in IntelliJ.
        All properties will be sorted alphabetically and the intention can be grouped by keys or over all.
        How to use
        Open a .properties file in IntelliJ, press ALT + INS and select Sort Properties...
      '';
    };
  }) {};

  intellij-kotlin-ui-dsl-preview = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-Kotlin-UI-DSL-Preview";
    plugname = "IntelliJ Kotlin UI DSL Preview";
    plugid = "org.intellij.exposure.DslPreview";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14228/87410/intellij.ui.dsl.preview-0.1.2.zip";
      sha256 = "15crj6mg09j1j856m0kklvk95am5c8n0hzdlgwl4i2fyr7lgsk4a";
      name = "IntelliJ-Kotlin-UI-DSL-Preview-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Instant visual representation of Kotlin UI DSL for JetBrains SDK
      '';
    };
  }) {};

  intellij-safe-push = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-Safe-Push";
    plugname = "IntelliJ Safe Push";
    plugid = "com.jetbrains.idea.safepush";
    version = "203.5447";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15070/100791/safe-push-203.5447.zip";
      sha256 = "0yawr1plh04kmxz526mxwisq52sdl4ab0n453rhsr3fpfacfqabw";
      name = "IntelliJ-Safe-Push-203.5447.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Adds "Safe Push" action to the push dialog which allows to schedule push with additional checks.
    
    
    This plugin is for JetBrains internal use only.
      '';
    };
  }) {};

  intellij-scripting-clojure = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-Scripting-Clojure";
    plugname = "IntelliJ Scripting: Clojure";
    plugid = "org.jetbrains.intellij.scripting-clojure";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12469/63095/intellij-scripting-clojure.zip";
      sha256 = "0k23jspbfcaih8050x8xkbpfxki6jds1wks7ay0wxh1rhgpgf659";
      name = "IntelliJ-Scripting-Clojure-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gregsh/intellij-scripting-plugins";
      license = lib.licenses.asl20;
      description = ''
        Clojure engine for Java Scripting for IntelliJ-based tools
      '';
    };
  }) {};

  intellij-scripting-javascript = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-Scripting-JavaScript";
    plugname = "IntelliJ Scripting: JavaScript";
    plugid = "org.jetbrains.intellij.scripting-javascript";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12548/63855/intellij-scripting-javascript.zip";
      sha256 = "0p4d1m5bygpgaasr2lj8j6b3myl9x9agpkxfiv39xaxzp2iqzx8h";
      name = "IntelliJ-Scripting-JavaScript-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gregsh/intellij-scripting-plugins";
      license = lib.licenses.asl20;
      description = ''
        JavaScript engine for IntelliJ-based tools scripting.
    
    
      org.graalvm.js:js:19.0.0
      org.graalvm.js:js-scriptengine:19.0.0
    
    
    Add -Dpolyglot.js.nashorn-compat=true VM option the IDE via Help | Edit Custom VM Options.
    
    
    GraalVM JavaScript homepage
    
    IntelliJ Scripting homepage
      '';
    };
  }) {};

  intellij-scripting-python = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-Scripting-Python";
    plugname = "IntelliJ Scripting: Python";
    plugid = "org.jetbrains.intellij.scripting-python";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12471/63090/intellij-scripting-python.zip";
      sha256 = "1ggxqq7i9pfa6fv1lz0f32s844qgbifjz7nhx2wnrkq11815v3py";
      name = "IntelliJ-Scripting-Python-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gregsh/intellij-scripting-plugins";
      license = lib.licenses.asl20;
      description = ''
        Python engine for Java Scripting for IntelliJ-based tools
      '';
    };
  }) {};

  intellij-scripting-ruby = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-Scripting-Ruby";
    plugname = "IntelliJ Scripting: Ruby";
    plugid = "org.jetbrains.intellij.scripting-ruby";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12549/63856/intellij-scripting-ruby.zip";
      sha256 = "0gb4ys0v19zgyg3p1xns9jvmap3mxxrp46lk6f992a52ls1l6fxx";
      name = "IntelliJ-Scripting-Ruby-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gregsh/intellij-scripting-plugins";
      license = lib.licenses.asl20;
      description = ''
        Ruby engine for IntelliJ-based tools scripting.
    
    
      org.jruby:jruby-complete:9.2.7.0
    
    
    Add -Dorg.jruby.embed.localcontext.scope=true VM option the IDE via Help | Edit Custom VM Options.
    
    
    JRuby homepage
    
    IntelliJ Scripting homepage
      '';
    };
  }) {};

  intellij-zeppelin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJ-Zeppelin";
    plugname = "IntelliJ Zeppelin";
    plugid = "intellij.zeppelin.";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10023/59604/intellij-zeppelin.zip";
      sha256 = "1z4ybqn519gyf5cq0l1ipv0wiww6clz0nr486f3dvffsfxli64vr";
      name = "IntelliJ-Zeppelin-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chilang";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/chilang/intellij-zeppelin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Use IntelliJ as editor for Apache Zeppelin's notebook.
      Features:
      
        Create new Zeppelin notebook from within IntelliJ .Scala file (CTRL+ALT+SHIFT+ENTER)
        Create and run new code paragraph (ALT+SHIFT+ENTER)
        Run existing code paragraph (SHIFT+ENTER)
        Delete existing paragraph (ALT+SHIFT+D)
      

      Access Zeppelin actions via Tools-&gt;Zeppelin or keyboard shortcuts.
      '';
    };
  }) {};

  intellijcoder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliJCoder";
    plugname = "IntelliJCoder";
    plugid = "IntelliJCoder";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5939/20699/intellijcoder-2.1.jar";
      sha256 = "0laazbj8hcjiyzhyggsh31l00dg8ffapqx3bbd3bs8n5jyjbnw69";
      name = "IntelliJCoder-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fadeyev/intellijcoder";
      license = lib.licenses.mit;
      description = ''
        An IntelliJ IDEA plugin for TopCoder
      '';
    };
  }) {};

  intellijdeodorant = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJDeodorant";
    plugname = "IntelliJDeodorant";
    plugid = "IntelliJDeodorant";
    version = "2020.3-1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14016/106356/IntelliJDeodorant.zip";
      sha256 = "1vf1238nsdqj7zdqaxszawdq92hfx1qfg207kzv2s58cnpgxwchx";
      name = "IntelliJDeodorant-2020.3-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains-Research/IntelliJDeodorant";
      license = lib.licenses.mit;
      description = ''
        Detects code smells in Java code and recommends appropriate refactorings to resolve them.
        Supports following code smells:
            
               Feature Envy problems can be resolved by Move Method refactorings;
               Long Method problems can be resolved by Extract Method refactorings;
               Type Checking problems can be resolved by Replace Conditional with Polymorphism refactorings;
               State Checking problems can be resolved by Replace Type code with State/Strategy refactorings;
               God Class problems can be resolved by Extract Class refactorings.
            
        
        Based on tsantalis/JDeodorant.
      '';
    };
  }) {};

  intellijad = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJad";
    plugname = "IntelliJad";
    plugid = "IntelliJad";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1570/5391/IntelliJad_5391.zip";
      sha256 = "1yf4l62sn94j8xldlmmax1vqyb9jlgdbfvpb4xds9n4dl9q0w21f";
      name = "IntelliJad-1.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1570/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1570/sourceCode.zip";
        free = false;
      };
      description = ''
        IntelliJad integrates the Jad decompiler into IntelliJ.
      '';
    };
  }) {};

  intellijad-9 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IntelliJad-9";
    plugname = "IntelliJad 9";
    plugid = "IntelliJad 9";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4674/8024/IntelliJad_9_8024.zip";
      sha256 = "1qi8637drzdqmg8y8wmpnrw8wg5s75k11q6dxvrrpv0flhfvar1h";
      name = "IntelliJad-9-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/4674/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/4674/license.txt";
        free = false;
      };
      description = ''
        IntelliJad 9 integrates the Jad decompiler into IntelliJ IDEA 9.
      '';
    };
  }) {};

  intellitail = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliTail";
    plugname = "IntelliTail";
    plugid = "IntelliTail";
    version = "3.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/46/12063/IntelliTail.jar";
      sha256 = "0n0iyhsvdf78c5rdggzjs5hs6c5cla2awrgz3bdp2v5w36lql5ks";
      name = "IntelliTail-3.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://intelli-plugins.cvs.sourceforge.net/viewvc/intelli-plugins/IntelliTail/";
      license = lib.licenses.mit;
      description = ''
        Follow your log files inside IntelliJ! This plugin does something similar to Unix Tail. 
 Features: 
 
  Choose the number of lines to display. 
  Pin a file down on a specific position. 
  Mark specific lines as being of interest (Press CTRL when clicking in gutter) 
  Advanced copy features (Press CTRL for rectangular selection). 
  Filtering to display and highlight matching lines, or simply don't display them! 
  Notification on matching lines. 
  Recent file history (Press SHIFT when clicking open file button). 
  Keyboard navigation: 
   
    Cursor keys to navigate in file. 
    Home/End to jump to beginning/end of line. 
    Ctrl Home/End to jump to beginning/end of buffer. 
   
  L&amp;F integrated with IntelliJ L&amp;F. 
   
    Change colors and fonts through the IDEA color configuration. 
    Shift-Click on a tab to close it. 
    Shift-Mousewheel increases/decreases font size.
      '';
    };
  }) {};

  intellitidy = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliTidy";
    plugname = "IntelliTidy";
    plugid = "tv.twelvetone.intellij.plugins.intellitidy";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10384/42510/intellijtidy-plugin.jar";
      sha256 = "0b7d4gz6kb7pbg2psp042xpg0s5h03vyarprc9m6fpy108jzrvzj";
      name = "IntelliTidy-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.twelvetone.tv";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.twelvetone.tv";
        free = false;
      };
      description = ''
        The IntelliTidy plugin for IntelliJ provides a single action for closing all documents and collapsing all trees. See 
IntelliTidy for more information.
      '';
    };
  }) {};

  intellivault = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntelliVault";
    plugname = "IntelliVault";
    plugid = "com.crownpartners.intellivault";
    version = "0.10.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7328/44439/IntelliVault.jar";
      sha256 = "1bqkj8ggzhrmimp08c39isp2876fa5hiaqm3b3rfc8i0rjbkh2i0";
      name = "IntelliVault-0.10.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shsteimer/IntelliVault";
      license = lib.licenses.gpl3Only;
      description = ''
        A plugin for IntelliJ IDEA to interact with a CRX repository via the FileVault tool which is
      packaged with Adobe AEM/CQ.
      This plugin is largely based upon, and liberally borrows from, VaultClipse
      which is a plugin for the Eclipse IDE for interacting with FileVault.
      The plugin source (as well as docs in the form of a README and bug reporting) can be found on Github
      '';
    };
  }) {};

  intellij-scala-repl-for-pants = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Intellij-Scala-REPL-for-Pants";
    plugname = "Intellij Scala REPL for Pants";
    plugid = "com.twitter.scala-repl";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10542/75302/IntelliJ-Scala-Pants-Repl-0.1.4.zip";
      sha256 = "08qx8lqlgz865dczhs7kh9asb9vvzbvw742vmby0fylm67344bcv";
      name = "Intellij-Scala-REPL-for-Pants-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.twitter.com";
      license = lib.licenses.asl20;
      description = ''
        The Scala REPL in Intelllij for Pants project is known to be broken. This plugin
      adds a new button to run a REPL that works with Pants.
      '';
    };
  }) {};

  intellij-solidity = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Intellij-Solidity";
    plugname = "Intellij-Solidity";
    plugid = "me.serce.solidity";
    version = "2.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9475/95691/Intellij-Solidity-2.3.1.zip";
      sha256 = "19c1pqxg5km63zvmdl2586y12s7nr0c459aajbg4378asc7n2a3z";
      name = "Intellij-Solidity-2.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/intellij-solidity";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/intellij-solidity/intellij-solidity/blob/master/LICENSE";
        free = false;
      };
      description = ''
        IntelliJ solidity support

      
        You can support the plugin development by sponsoring ❤️ the plugin on Github, by clicking star on
        GitHub
        and rating it on the plugin page.
      
      
        Contributions are always welcome!
      '';
    };
  }) {};

  intellij-plugin-development-with-maven = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Intellij-plugin-development-with-Maven";
    plugname = "Intellij plugin development with Maven";
    plugid = "com.guidewire.build.ijdevkitmvn";
    version = "0.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7127/29719/ijdevkitmvn-0.4.1-plugin.zip";
      sha256 = "165dm55gz42lv0vnk2wwfd6hcnawq1fywdz0lxdsjd1vnwnlk9hy";
      name = "Intellij-plugin-development-with-Maven-0.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin provides minimal support for developing IntelliJ plugins using IntelliJ Maven integration. 
 First, this plugin imports Maven module as plugin modules (PLUGIN_MODULE) if one of the following is true: 
 
 Packaging is set to 'ij-plugin' 
 Packaging is set to 'jar' and 'ij.plugin' property is set to 'true' 
 Packaging is set to 'jar' and 'com.guidewire.build:ijplugin-maven-plugin' Maven plugin is configured for the module  
 
 Second, it removes all dependencies which have groupId starting with 'com.jetbrains.intellij.' after the import, assuming they would be provided through the IDEA SDK (so you can use these dependencies during the command-line build and have them fulfilled by IDEA SDK automatically when you import your module) 
 Third, this plugin updates plugin descriptor location using one of the following: 
 
 Explicitly configured value in the ijplugin-maven-plugin configuration. 
 Value of the 'ij.pluginDescriptor' property in the POM 
 Default value of "META-INF/plugin.xml"
      '';
    };
  }) {};

  intellijirc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "IntellijIRC";
    plugname = "IntellijIRC";
    plugid = "IntellijIRC";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10789/46328/IntellijIRC.jar";
      sha256 = "0fsm693r5d9zqjafarkn2073a9k6h7l7rqqfsbwzb285gggkg4vc";
      name = "IntellijIRC-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/buyaoshushu/IntellijIRC";
      license = lib.licenses.asl20;
      description = ''
        IntellijIRC is an integrated IRC Client,base source IntellIRC, featuring of IntellIRC: 
 
 Managing list of IRC Network and Channel Favorites 
 Auto-Connect to Favorites at startup 
 Connect to multiple Servers/Channels 
 Fully supports IRC features (e.g. Actions) 
 Included Identd Server may be enabled if necessary 
 Enabling/Disabling Text Formatting/Timestamps 
 Conversation logging 
 featuring add in IntellijIRC: 
 
 Multiple server port support. 
 All Intellij Platform support.Idea/Pycharm is tested. 
 todo: 
 
 Add notify when resive a MSG. 
 
source
      '';
    };
  }) {};

  intelliviz = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Intelliviz";
    plugname = "Intelliviz";
    plugid = "edu.caltech.cms.intelliviz";
    version = "2.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15170/107124/visualizer_plugin-2.1.2.zip";
      sha256 = "03vq9psjnzmr9ac9y6a4ff2cic525llgrviqy486ak67kzw3ki3b";
      name = "Intelliviz-2.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chotzen";
      license = lib.licenses.mit;
      description = ''
        A tool to visualize data structures and objects on the heap, to aid
      in debugging projects in Caltech's CS 2 course.
      '';
    };
  }) {};

  interesting-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Interesting-Theme";
    plugname = "Interesting Theme";
    plugid = "de.timon.schelling.interesting.theme";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12289/61468/interesting-theme.jar";
      sha256 = "06rjhrsmjycfqxldkzrbkd22ziclbwrj1mvbfnd48zr92dja0949";
      name = "Interesting-Theme-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/timon-schelling/Interesting-Theme";
      license = lib.licenses.asl20;
      description = ''
        A dark easy to read theme.
  Designed to make coding more interesting and comfortable.
  
  For version 2019.1 and above.

  

  To install:
  
  Go to Settings (Preferences) | Plugins, find the theme plugin and install it
  Restart IDE
  Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
  
  
  

  Designed by Timon Schelling
      '';
    };
  }) {};

  internalwiki = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "InternalWiki";
    plugname = "InternalWiki";
    plugid = "InternalWiki";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10648/45271/InternalWiki.zip";
      sha256 = "1pfxdhag80i8bvpk99cx8al8rvwmvyx374g8ihlg6d5c5ch54mmg";
      name = "InternalWiki-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fabiopedrosa/internalwiki";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/fabiopedrosa/internalwiki";
        free = false;
      };
      description = ''
        InternalWiki is a plugin written for IntelliJ IDEA and PyCharm. This plugin adds the ability to manage multiple markdown documents within the IDEA itself. These documents are able to reference code locations to make documentation easier. 

InternalWiki is an open source project hosted at 
github and you are always welcome to join this project and contribute.
      '';
    };
  }) {};

  intino = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Intino";
    plugname = "Intino";
    plugid = "io.intino.plugin";
    version = "5.6.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9549/103985/intino-plugin.zip";
      sha256 = "0bm2fdbyvqf05i1hwaxikplvwhy2i2v18vd72fv9l99w95lazivz";
      name = "Intino-5.6.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.intino.io";
      license = lib.licenses.gpl3Only;
      description = ''
        intino integrates several tools for automated software solutions development and deployment. It supports the creation of software production lines that involves:
        platform and product modeling, a layered architecture (including graphical user interface, rest services, persistence, event sourcing...) and continuous integration based on both source code and artifact repositories.
        intino provides several Domain Specific Languages (dsl): proteo dsl for product modeling, meta dsl for platform modeling,
        konos dsl for layered architecture modeling and legio dsl for continuos integration modeling.
      '';
    };
  }) {};

  isortconnect = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IsortConnect";
    plugname = "IsortConnect";
    plugid = "com.github.urm8.isortconnect";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15434/105213/IsortConnect-0.0.4.zip";
      sha256 = "1n4gmzg2h0gf0448zpvfpwq9qrpb4lbm3phi41vay9804havpv05";
      name = "IsortConnect-0.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This plugin uses isortd to sort your imports, reusing your project's pyproject.toml config.
Connect to isortd and format your Python code without overhead of starting a new isort process on each file save/commit
by making http call to running isort daemon

Features supported:
import pyproject.tomlformat on saveformat on action trigger
      '';
    };
  }) {};

  iterm-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Iterm-Plugin";
    plugname = "Iterm Plugin";
    plugid = "com.sonnk.iterm";
    version = "0.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10344/42154/IDEA-Native-Terminal-Plugin.jar";
      sha256 = "1sbsp828mzpj8iifj90l1c4z0hpmmx88b8qq529i0ys6zb831zww";
      name = "Iterm-Plugin-0.0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nguyenkims/IDEA-Native-Terminal-Plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/nguyenkims/IDEA-Native-Terminal-Plugin";
        free = false;
      };
      description = ''
        ITerm Plugin.
 Tweaked from https://github.com/sburlyaev89/IDEA-Native-Terminal-Plugin to launch Iterm instead of Terminal on Mac
      '';
    };
  }) {};

  itrules = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Itrules";
    plugname = "Itrules";
    plugid = "siani.dev.itrules";
    version = "1.9.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7748/29649/itrules-plugin-1.9.2.zip";
      sha256 = "190ycc9s3llj1hs71d3z3hz76lnyihza158gga14j3nidg0gmkgd";
      name = "Itrules-1.9.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.siani.es";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.siani.es";
        free = false;
      };
      description = ''
        Itrules is a rule-based template engine. Itrules can generate HTML, XML, SQL, JSON or any other documents from templates. These templates are a compound of rules that are activated basing on a set of conditions that the users define. The rules have marks that can trigger other rules that define what and how the text will be rendered in this point. Example: def type(Person) ''$Name was born in $Country on $Birthday+ShortDate end
      '';
    };
  }) {};

  ivy-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ivy-Plugin";
    plugname = "Ivy Plugin";
    plugid = "Ivy Plugin";
    version = "3.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2267/9111/Ivy_Plugin_9111.zip";
      sha256 = "1yagy0afmprsmifcp8vqxlshilv6scmpfh4nhxalw6mlnq4rgz46";
      name = "Ivy-Plugin-3.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/intellij-ivy-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/intellij-ivy-plugin";
        free = false;
      };
      description = ''
        Synchronizes IDEA module settings such as classpath and source directories from ivy setup. Creates one IDEA
        module per ivy project
      '';
    };
  }) {};

  ivyidea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "IvyIDEA";
    plugname = "IvyIDEA";
    plugid = "IvyIDEA";
    version = "1.0.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3612/80377/ivyidea-1.0.16.zip";
      sha256 = "1lx90ichn1r3hahr6z0lly3d1779rvlm46b2h3sdgnbb7zm7gzd9";
      name = "IvyIDEA-1.0.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.ivyidea.org";
      license = lib.licenses.asl20;
      description = ''
        Resolves module dependencies through Ivy
        Features:
            
                Apache Ivy integration (up to v2.5.0); no need for external ant build scripts to be called
                Automatic ivy configuration of modules using facets (for modules containing an ivy.xml file)
                Detection of dependencies that are really other intellij modules in the same project; these are added as module references
                Detect source/document/jar type ivy artifacts in dependencies and add them as such to the module
                Creation of a module library with all resolved ivy dependencies
                Ivy configurations that need to be resolved can be chosen for each module
                Properties can be injected into the ivy resolve process
      '';
    };
  }) {};

  j2eecfgfile = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "J2EECfgFile";
    plugname = "J2EECfgFile";
    plugid = "J2EECfgFile";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12701/65285/J2EECfgFile.zip";
      sha256 = "10fdnr0zv1niadr6khd1gnh4nzaazn1plx7q2w07nn28n4lzk57d";
      name = "J2EECfgFile-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://example.com";
      license = lib.licenses.asl20;
      description = ''
        J2EE Configuration File
      
      web.xml
      db.properties
      mybatis-config.xml
      XxxMapper.xml
      applicationContext-mapper.xml
      springmvc.xml
      applicationContext-redis.xml
      applicationContext-shiro.xml
      applicationContext-activemq.xml
      applicationContext-rocketmq.xml
      applicationContext-elasticsearch.xml
      log4j.properties
      log4j2.xml
      '';
    };
  }) {};

  j2me = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "J2ME";
    plugname = "J2ME";
    plugid = "J2ME";
    version = "192.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12318/66702/j2me-192.5.zip";
      sha256 = "0yi0rslfhql4ms5hrkrbmk6gc8i83wnnkgw7grmrl0zm17fa3wpd";
      name = "J2ME-192.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-obsolete-plugins/tree/master/j2me";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/JetBrains/intellij-obsolete-plugins/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Supports building Java Micro Edition (J2ME) applications
      '';
    };
  }) {};

  jar-creator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JAR-Creator";
    plugname = "JAR Creator";
    plugid = "org.example.JarCreatorGradle";
    version = "1.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14534/91164/IntelliJ-Plugins-1.01.zip";
      sha256 = "1v80w9f8lz0k3yjyshi75x2xbp1mx3jsy3hjrn841jjnlflj7vnl";
      name = "JAR-Creator-1.01.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "www.dedalus.eu";
      license = lib.licenses.asl20;
      description = ''
        Getting started
        Create a Jar from selected files
        Press control and select files you want
        Recompile them under "Build"
        Right Click and click on "JarCreator"
        Select your desired destination path
      '';
    };
  }) {};

  jblexploadedrefresh = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JBLExploadedRefresh";
    plugname = "JBLExploadedRefresh";
    plugid = "jebe.liao.JBLExploadedRefresh";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12663/65034/JBLExploadedSourceRefresh.jar";
      sha256 = "1xwvq1nl2dw05lp5ac58s8mzwzrqxkd10impbmj6lm6j4h5j2n6f";
      name = "JBLExploadedRefresh-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://example.com";
      license = lib.licenses.asl20;
      description = ''
        JBLExploadedRefresh intro
    refresh web module files to output path.
    
      JBLExploadedRefresh 简介
     IDEA 创建的非maven web工程，在复制了项目中文件后可能存在不能及时更新输出并访问到；可以使用该插件 试试 刷新在web项目中更新的文件到运行输出路径。
      bug 或问题请邮件。
      '';
    };
  }) {};

  jblhtmltothymeleaf = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JBLHtmlToThymeleaf";
    plugname = "JBLHtmlToThymeleaf";
    plugid = "jebe.liao.JBLHtmlToThymeleaf";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13349/72536/JBLHtmlToThymeleaf.zip";
      sha256 = "0a46znk9yfpnzz3bzz70l79frp4xd5bsm4agcsv35gfqv8365n11";
      name = "JBLHtmlToThymeleaf-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liaojianbin";
      license = lib.licenses.epl20;
      description = ''
        JBLHtmlToThymeleaf intro
    right click html file and select JBLHtmlToThymeleaf.
    it will add namespace(xmlns:th="http://www.thymeleaf.org") attribute to html tag.
    
    
    
      JBLHtmlToThymeleaf 简介
     在 IDEA 目录树中可以右击html 文件（只有选择html文件右击才会出现对于菜单），然后点击 JBLHtmlToThymeleaf 可以在html页面中的
     html标签中添加属性及值：xmlns:th="http://www.thymeleaf.org"
      bug 或问题请邮件。
      '';
    };
  }) {};

  jbljavatoweb = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JBLJavaToWeb";
    plugname = "JBLJavaToWeb";
    plugid = "JBLJavaToWeb";
    version = "1.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10525/83676/JBLJavaToWeb.zip";
      sha256 = "1cb9snsqg0vdjqhgkzppi9i2bfpkc4n7kgv97rgb4k73vdzv9rvs";
      name = "JBLJavaToWeb-1.4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://example.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "fpl-1.0.0";
        free = false;
      };
      description = ''
        JavaToWeb intro
      Transform java module into web module,
      and it generates web.xml which support Servlet 2.5 .
      
      
      JavaToWeb 简介
      转换 java 的模块工程为 web 模块工程；
      生成的 web.xml 文件支持 Servlet 2.5。
      bug 或问题请邮件。
      '';
    };
  }) {};

  jblloveshortcut = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JBLLoveShortCut";
    plugname = "JBLLoveShortCut";
    plugid = "jebe.liao.JBLLoveShortCut";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12669/65113/JBLLoveShortCut.jar";
      sha256 = "12vl4xcmryaq2fkcxwq3shbb3lcs15synl87la7zq7vw2s68lvmv";
      name = "JBLLoveShortCut-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liaojianbin";
      license = lib.licenses.asl20;
      description = ''
        JBLLoveShortCut intro
    IDEA shortcut which JBL use the most and love.
    
      JBLLoveShortCut 简介
      罗列了一下IDEA常用的快捷键。安装之后在IDEA菜单栏中的 Help 帮助菜单中可以找到。
      '';
    };
  }) {};

  jblspringbootappgen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JBLSpringBootAppGen";
    plugname = "JBLSpringBootAppGen";
    plugid = "jebe.liao.JBLSpringBootApp";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12499/83673/JBLSpringBootApp.zip";
      sha256 = "1rk45fdwkz6dbyy4xavykkqk0kfr15b2laz1jdh5c01lykca2r40";
      name = "JBLSpringBootAppGen-1.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liaojianbin";
      license = lib.licenses.epl20;
      description = ''
        JBLSpringBootAppGen intro
    make the spring boot module generate Application.java and application.yml
    
      JBLSpringBootAppGen 简介
      在使用SpringBoot项目的时候都需要创建启动引导类**Application；
      使用该插件可以快速创建启动引导类**Application类内容。
      bug 或问题请邮件。
      '';
    };
  }) {};

  jbehave-debug-single-scenario = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JBehave-Debug-Single-Scenario";
    plugname = "JBehave Debug Single Scenario";
    plugid = "se.fortnox.jbehavesinglescenario.jbehavesinglescenario";
    version = "2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13198/99763/jbehavesinglescenario-2.4.zip";
      sha256 = "1qhkba8170k7qy9j1yxy1404zbwg3x61c97s0qrwsfcyrjk8pq8q";
      name = "JBehave-Debug-Single-Scenario-2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.fortnox.se";
      license = lib.licenses.mit;
      description = ''
        Right click in a scenario of a .story file to run or debug it.
      '';
    };
  }) {};

  jbehave-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JBehave-Support";
    plugname = "JBehave Support";
    plugid = "jbehave-support-plugin";
    version = "1.53";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7268/58998/JBehave_Support.zip";
      sha256 = "1bi4ra34nb27dhsa0swn69c5r10dawmc9bzwr5zwq3jcncxc9vkr";
      name = "JBehave-Support-1.53.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/witspirit/IntelliJBehave";
      license = lib.licenses.asl20;
      description = ''
        The plugin provides the following features:
    
    
     Basic syntax highlighting for JBehave story files
     Jump to step definition in Java or Groovy
     Error Highlighting in story if step was not defined
     Create new story files from a configurable story template
     Comment/uncomment lines in story files
     Code inspections to report unused steps definitions and undefined step usages 
     Run *.story files
     Finding usages of steps methods 
    

    
    Known limitations:
    
    
        Searches complete module classpath, no configuration available to limit scope
        Does not take into account any custom JBehave configuration
    

    Release notes:
    
        New in version 1.5:
    
    
        Ability to find usages of a step method
        Inspections speed has been increased
        JBehave icon has been updated
    
    See the github for more info
      '';
    };
  }) {};

  jbooster-logging-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JBooster-Logging-Plugin";
    plugname = "JBooster Logging Plugin";
    plugid = "org.jbooster.jbooster-logging-intellij-plugin";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9950/39462/jbooster-logging-intellij-plugin-1.2.jar";
      sha256 = "02qggql2n9i0lhscf16yxm8phm9wax8q0h0jj038kf103kh87068";
      name = "JBooster-Logging-Plugin-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://git.oschina.net/jbooster/jbooster-logging-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://git.oschina.net/jbooster/jbooster-logging/blob/master/license";
        free = false;
      };
      description = ''
        A plugin that adds first-class support for Jbooster Logging 
Features 
 
 @Slf4(system = "xxx", module = "yyy") 
 Code inspections
      '';
    };
  }) {};

  jboss-forge-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JBoss-Forge-IDEA-Plugin";
    plugname = "JBoss Forge IDEA Plugin";
    plugid = "org.jboss.forge.plugin.idea";
    version = "2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7515/33997/forge-idea-plugin-2.zip";
      sha256 = "1fp09qslrig7vx94y5fsviz39cgm1fn77imz9rma6plmnrb2rhi4";
      name = "JBoss-Forge-IDEA-Plugin-2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/forge/intellij-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7515/license.txt";
        free = false;
      };
      description = ''
        JBoss Forge 3.x Support
          Execute wizards and interact with the container.
      
      
          Press Ctrl+Alt+4 to show Forge commands. On MacOSX, use Command + Option + 4.
          Requires JDK1.8+ to run.
      '';
    };
  }) {};

  jce-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JCE-Support";
    plugname = "JCE Support";
    plugid = "com.tencent.jceplugin";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11500/85541/jce-support-0.3.1.zip";
      sha256 = "09h7gv47z8yasi3div7alhmxccvq2vqg378vfkzgm1sw8c77fc46";
      name = "JCE-Support-0.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.tencent.com";
      license = lib.licenses.asl20;
      description = ''
        This plugin supports the editing of the Jce/Tars file, providing the following features:
      
            Syntax highlighting
            Code commenting
            Formatting
            Auto Completion
            Static Analysis
            ......
      
      If any question, contact with harveyxu @ wechat work or kongyuanyuan@yuewen.com
      '';
    };
  }) {};

  jcs-jlupin-next-server-intellij-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JCS-JLupin-Next-Server-Intellij-Plugin";
    plugname = "JCS JLupin Next Server Intellij Plugin";
    plugid = "com.jlupin.plugin.nextserver.intellij";
    version = "1.2.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10670/46718/jlupin-next-server-intellij-plugin.jar";
      sha256 = "1jzygcasi6ixjkfp63b534ll8c5bf74nh0mp77p4mgpf0nys2wqs";
      name = "JCS-JLupin-Next-Server-Intellij-Plugin-1.2.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jlupin.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://jlupinnextserver.io/products/licences/21/jlupin-next-server-intellij-plugin/version-1221";
        free = false;
      };
      description = ''
        Development environment plugin to help create applications with microservice architecture for JLupin Next Server. Plugin is licensed under JLUPIN COMMUNITY SOFTWARE license.
      '';
    };
  }) {};

  jcv = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JCV";
    plugname = "JCV";
    plugid = "com.ekino.oss.jcv-idea-plugin";
    version = "3.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13916/105859/JCV-3.0.0.zip";
      sha256 = "1icxbcvpwhpmwvya87mg28ir0hr5cj1brz218vvsmpmp35n3j6gw";
      name = "JCV-3.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ekino/jcv-idea-plugin";
      license = lib.licenses.mit;
      description = ''
        This plugin brings the JCV language support injected in JSON language.

Auto-completion and documentation

Any identified validator will get a quick documentation and even external links to official documentation for official JCV validators:



As you start typing in the JCV template pattern, a list of available validators will be suggested to you:



You will also get parameter values completion if available, for example with the date_time_format from JCV:



Supported validators

Official ones

JCV is a library allowing you to compare JSON contents with embedded validation.
It comes with plenty of pre-defined validators (listed here)
designed to cover the most common needs when validating data with non-predictable values.

JCV-DB reuses these validators and also defines a list of its own
(listed here) that are specific to a database-oriented usage.

This plugin offers autocompletion on all the validators of these two projects to date if detected in your project external libraries.

Using an official validator without the actual library linked to the current project module will give you a warning and can guide you to the Maven Central library page to get it:



Your custom ones

You can define your own custom validator definitions by adding a .jcvdefinitions.json file in the project root directory or just let the plugin do it for you:



Here is an example definition you can customize:

ROOT_PROJECT_DIRECTORY/.jcvdefinitions.json
{
  "validators" : [ {
    "id" : "my_custom_validator",
    "parameters" : [ {
      "description" : "My first param",
      "required" : true,
      "suggested_values" : [ "Value 1", "Value 2" ]
    }, {
      "description" : "Another parameter",
      "required" : false,
      "suggested_values" : [ "Another value to suggest" ]
    } ]
  } ]
}


Replacements suggestions

The plugin can find raw JSON value that can be replaced by official matching validators.



Note that it also supports multi-caret replacement with matching validators for all JSON values find at each caret.



Settings

Color scheme

You can configure the color scheme settings:



Inspections

Here are the available inspections that you can customize:



Intentions

You can find the JCV replacement suggestions on JSON values in the intentions:
      '';
    };
  }) {};

  jcompilo-java-compiler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JCompilo-Java-Compiler";
    plugname = "JCompilo Java Compiler";
    plugid = "JCompilo Java Compiler";
    version = "160";
    src = fetchurl {
      url = "http://repo.bodar.com/com/googlecode/jcompilo/jcompilo/160/jcompilo-intellij-160.zip";
      sha256 = "187vmbxqi10lfdia2zapnfl2a8vdm61z12gn8yprb6wbbs42n4ns";
      name = "JCompilo-Java-Compiler-160.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/jcompilo/source";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/jcompilo/source";
        free = false;
      };
      description = ''
        A pure Java 6+ build tool with advanced compiler features including Tail Call Optimisation
      '';
    };
  }) {};

  jdchange = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JDChange";
    plugname = "JDChange";
    plugid = "Grigoriev";
    version = "0.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13852/80114/CommentDuplicatesPlugin.zip";
      sha256 = "1agiqc0h1zjrnlqqsdgdhxz6hksr8g6kmlabzrvs9ihss0mfacns";
      name = "JDChange-0.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Plugin for IntelliJ Idea to find replicated javadoc comments and edit their common part simultaneously and coherently in one window.
      '';
    };
  }) {};

  jdt-astview = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JDT-AstView";
    plugname = "JDT AstView";
    plugid = "org.santoslab.compilers";
    version = "0.0.1-3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9345/32149/jdt-astview.zip";
      sha256 = "1n8zia77sy66rxqnmsq2mlj3qwm283nnpwy6z1bm96wrsapqg59m";
      name = "JDT-AstView-0.0.1-3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://robby.santoslab.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/ksu-cis-706/jdt-astview/master/license.txt";
        free = false;
      };
      description = ''
        This plugin provides Eclipse JDT AST Viewer for Java source code.
      '';
    };
  }) {};

  jflex-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JFlex-Support";
    plugname = "JFlex Support";
    plugid = "JFlex Support";
    version = "1.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/263/10654/JFlex_Support_10654.jar";
      sha256 = "0yc3wcm2zkb3mrv4kds7yafdwqjn65w60k2a0w623d8lhjkf4nif";
      name = "JFlex-Support-1.5.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jflex-de/idea-jflex";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jflex-de/idea-jflex/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Enables JFlex support in IntelliJ IDEA.
      '';
    };
  }) {};

  jformdesigner = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JFormDesigner";
    plugname = "JFormDesigner";
    plugid = "JFormDesigner";
    version = "7.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/274/104414/external1";
      sha256 = "08p699n2rdfmhhb0c6b2s84wcwcvvw3n0h4pdklk8dm7j36barp4";
      name = "JFormDesigner-7.0.3";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.formdev.com/jformdesigner/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.formdev.com/jformdesigner/license/";
        free = false;
      };
      description = ''
        Advanced Swing GUI designer with
outstanding support for MigLayout, JGoodies FormLayout, GroupLayout (Free Design), TableLayout
and GridBagLayout, which makes it easy to create professional looking forms.

This plugin requires license keys from FormDev Software and
does not work with JetBrains Marketplace licenses.
Use 
JFormDesigner ​(Marketplace Edition) plugin for JetBrains Marketplace licenses.

Key features



  MigLayout support
MigLayout is a superbly versatile and powerful open-source layout manager.
It is grid-based, but also supports docking and grouping.

  GroupLayout (Free Design) support
    GroupLayout support brings
the "Free Design" paradigm to IntelliJ IDEA (as in NetBeans GUI
Builder; formerly Project Matisse). You can lay out your forms by
simply placing components where you want them. Visual guidelines
suggest optimal spacing, alignment and resizing of components. This
makes it easy to design professional-looking GUIs.

  JGoodies FormLayout and TableLayout support
These open-source layout managers allow you to design high quality forms.

  Advanced GridBagLayout support
The advanced GridBagLayout support allows the specification of horizontal
and vertical gaps (as in TableLayout).

  Column and row headers
The column and row headers (for grid-based layout managers) show
the structure of the layout and allow you to insert or delete
columns/rows and change column/row properties.
It's also possible to drag and drop columns/rows
(incl. contained components and gaps).

  Localization support
    Localizing forms using
properties files has never been easier. Specify a resource bundle name
and a prefix for keys when creating a new form and
then forget about it. JFormDesigner automatically puts all strings into
the specified resource bundle (auto-externalizing).

  Beans Binding (JSR 295) support 
Using Beans Binding (JSR 295) helps you
to keep UI state and model in sync. It drastically reduces the amount of
listener code that is usually necessary. 
 
  BeanInfo Annotations 
The @BeanInfo and @PropertyDesc 
annotations make it very easy to specify
BeanInfo information directly in the custom component. Its no longer necessary
to implement extra BeanInfo classes. This drastically reduces time and code
needed to create BeanInfo information. 

  Java code generator or runtime library
Either let JFormDesigner generate Java source code for your forms
(the default) or use the open-source (BSD license) runtime library to
load JFormDesigner .jfd files at runtime. Your choice.

  Generation of nested classes
The Java code generator is able to generate and update nested
classes. You can specify a class name for each component in your
form. This allows you to organize your source code in an
object-oriented way.

  IDE plug-ins and stand-alone application
JFormDesigner is available as IDE plug-ins for IntelliJ IDEA, NetBeans, Eclipse,
JDeveloper and as stand-alone application.
      '';
    };
  }) {};

  jfrog = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JFrog";
    plugname = "JFrog";
    plugid = "org.jfrog.idea";
    version = "1.7.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9834/95840/JFrog-1.7.0.zip";
      sha256 = "0hv200aqqlm4v6bp0vay15ilacxzjwv02wwwn5k82n5ahdp2xjrc";
      name = "JFrog-1.7.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jfrog.com";
      license = lib.licenses.asl20;
      description = ''
        The JFrog plugin adds JFrog Xray scanning of Maven, Gradle, Go and npm project dependencies to your IDE. It allows developers to view panels displaying vulnerability information about the components and their dependencies directly in their IDE. The plugin is compatible with IntelliJ IDEA, WebStorm and GoLand.
      '';
    };
  }) {};

  jira-id-commit-message = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JIRA-id-commit-message";
    plugname = "JIRA id commit message";
    plugid = "org.nemwiz.jira-commit-message";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14310/104911/jira-commit-message-2.0.1.zip";
      sha256 = "1cb63ww9smzjmb7hxm4d8wn46rb34ndcdl8w2ixz0znxs7lgwgld";
      name = "JIRA-id-commit-message-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nemwiz/jira-commit-message-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        A plugin that takes JIRA id from your branch name and appends it to the commit message.
      '';
    };
  }) {};

  jitwatch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JITWatch";
    plugname = "JITWatch";
    plugid = "ru.yole.jitwatch-intellij";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8529/27540/jitwatch-intellij-1.0.zip";
      sha256 = "11rrpv4hg1zpr5s51wmgisjqbd4y2931wvgrh3b33w5rglyd9cnp";
      name = "JITWatch-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yole/jitwatch-intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/yole/jitwatch-intellij/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Viewing HotSpot compilation logs in IntelliJ IDEA. See 
GitHub for documentation.
      '';
    };
  }) {};

  jlink = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JLink";
    plugname = "JLink";
    plugid = "org.jfrog";
    version = "1.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11344/52450/JLink-1.1.5.zip";
      sha256 = "101588pp144c43f1mv6y5x8kn3b0rgjsxaywlr65pajdyppqkcs6";
      name = "JLink-1.1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yoazmenda/JLink";
      license = lib.licenses.asl20;
      description = ''
        Right-click anywhere in the editor and click 'JLink' to create (and copy to clipboard) a sharable link directly to the desired location in the code.
      '';
    };
  }) {};

  jlupin-platform-development-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JLupin-Platform-Development-Tool";
    plugname = "JLupin Platform Development Tool";
    plugid = "com.jlupin.plugin.platform.intellij";
    version = "2.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10940/90492/jlupin-platform-intellij-plugin.jar";
      sha256 = "111khplaj94zzbbimlla7zvf82g17p4nak3asqjpa09s3glcp49c";
      name = "JLupin-Platform-Development-Tool-2.4.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jlupin.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://jlupinnextserver.io/products/licences/21/jlupin-next-server-intellij-plugin/version-1221";
        free = false;
      };
      description = ''
        Development environment plugin to help create applications with microservice architecture for JLupin Platform.

      Plugin is licensed under JLUPIN COMMUNITY SOFTWARE license.
      '';
    };
  }) {};

  jmh-java-microbenchmark-harness = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JMH-Java-Microbenchmark-Harness";
    plugname = "JMH Java Microbenchmark Harness";
    plugid = "ru.artyushov";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7529/100267/idea-jmh-plugin.jar";
      sha256 = "05dh1gkfq1b853q6l26pvdx28i4sqrjcbb4d3q0skrdi1rl7sqfa";
      name = "JMH-Java-Microbenchmark-Harness-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/artyushov/idea-jmh-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/artyushov/idea-jmh-plugin/blob/master/license.md";
        free = false;
      };
      description = ''
        Plugin for generating and running JMH benchmarks from your IDE
      Source code on GitHub
      '';
    };
  }) {};

  jmhack = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JMHack";
    plugname = "JMHack";
    plugid = "at.knittl.intellij.plugins.jmhack";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13868/79588/idea-jmh-plugin.jar";
      sha256 = "0308570w6bz5m2qh910alwp1rqrpg3sl77lvfr8ar727js58ci3p";
      name = "JMHack-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/knittl/idea-jmh-plugin";
      license = lib.licenses.mit;
      description = ''
        Plugin for generating and running JMH benchmarks from your IDE.
      This is a fork of the popular "JMH plugin" plugin.
      '';
    };
  }) {};

  jol-java-object-layout = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JOL-Java-Object-Layout";
    plugname = "JOL Java Object Layout";
    plugid = "JOL";
    version = "1.9.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10953/98807/IdeaJol.zip";
      sha256 = "1dbdzhk9f1i558b780m2im2wffid3qiq9m1ngpqnmjhg20zmxyny";
      name = "JOL-Java-Object-Layout-1.9.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/stokito/IdeaJol";
      license = lib.licenses.asl20;
      description = ''
        Java Object Layout (JOL) is the tiny toolbox to analyze in memory object layout schemes in JVMs.
        It allows you to make an estimate how much memory the object takes. This allows to make a simplest but most efficient performance improvements.
        Just check your DTOs if they fit into 64 bytes of processor's cache line.
        
        For example, in HotSpot VM on 64x processor an empty string "" takes 40 bytes i.e. 24 bytes for String object itself + 16 bytes for an internal empty char array.
        
        
        Source code on GitHub
      '';
    };
  }) {};

  jpa-buddy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JPA-Buddy";
    plugname = "JPA Buddy";
    plugid = "com.haulmont.jpab";
    version = "1.1-201";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15075/106582/jpa-buddy.zip";
      sha256 = "0i9asdfn53mk93c6xbh8fijy7b30zzwgh6fs2dxb4r3fnijx9gpg";
      name = "JPA-Buddy-1.1-201.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        JPA Buddy is an advanced plugin for IntelliJ IDEA intended to simplify and accelerate everything related to JPA and surrounding mainstream Java technology, such as Hibernate, Spring Data JPA, Liquibase and others.
    Take a look at the Features plugin page for more detailed features description.
    For troubleshooting, ideas and feature requests feel free to join the Discord server or email us.
      '';
    };
  }) {};

  jpa-sql = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JPA-SQL";
    plugname = "JPA SQL";
    plugid = "com.obroom.plugin.jpasql";
    version = "2020.12.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15242/104561/jpa-sql.jar";
      sha256 = "0wswjsyprr2hnqhmncd9dnxmpb7gpjqyg055p3rj7i52hdv7r95q";
      name = "JPA-SQL-2020.12.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Restore jpa sql log to original whole executable sql.
  Plugin generate sql statements with replace ? to the really param value.
  Select the console sql log and right click "Restore Sql" menu to restore sql.



❤free for a limited time❤



Recommended plugin: ★Toolset★


A plugin for the IntelliJ-based IDEs, Which can help coding and contains various tools to improve development efficiency.



  ★Plugins★ |
  Manual |
  Issues |
  Email
      '';
    };
  }) {};

  jprofiler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JProfiler";
    plugname = "JProfiler";
    plugid = "JProfiler";
    version = "19.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/253/102746/idea-jprofiler.zip";
      sha256 = "0f23fyxm2ma2bl85jgdm9mj4sdr3nybmrcy77x6pmb36x459hq7i";
      name = "JProfiler-19.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.ej-technologies.com/products/jprofiler/overview.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.ej-technologies.com/buy/jprofiler/licensing.html";
        free = false;
      };
      description = ''
        The official JProfiler plugin for JProfiler by ej-technologies.
    With this plugin, selected run configurations can be profiled with JProfiler from within IDEA.
      '';
    };
  }) {};

  jreader = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JReader";
    plugname = "JReader";
    plugid = "com.github.artsiomch.JReader";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14654/96829/JReader-1.3.jar";
      sha256 = "008wq07mmwrmd597008q136qnwx79hs54ls42f8gmcnnldzyivfa";
      name = "JReader-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ArtsiomCh/JReader";
      license = lib.licenses.mit;
      description = ''
        Helps visually separate public, private and abstract keywords in java/kotlin source. 
    For abstract keywords also shows marks on the right scrollbar to easily navigate there in large java files. 
    Planing to provide possibility of customisation of fonts and colors. 
    Also generification of highlighting rules could be done using regex search rules.
      '';
    };
  }) {};

  jrebel-and-xrebel-for-intellij = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JRebel-and-XRebel-for-IntelliJ";
    plugname = "JRebel and XRebel for IntelliJ";
    plugid = "JRebelPlugin";
    version = "2021.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4441/107732/jr-ide-intellij-2021.1.0.zip";
      sha256 = "0vl8s47msyf8rc7qzqpmkswmca8w46a9598kbddkqxs2kdpcs5nf";
      name = "JRebel-and-XRebel-for-IntelliJ-2021.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jrebel.com//";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://jrebel.com/software/eula/";
        free = false;
      };
      description = ''
        JRebel is a productivity tool that allows developers to reload code changes instantly.
  It skips the rebuild, restart, and redeploy cycle common in Java development.
  JRebel enables developers to get more done in the same amount of time and stay in the flow while coding.
  JRebel supports a majority of real-world enterprise java stacks and is easy to install into existing development environments.
  
  XRebel is a performance tool for Java development which gives developers real time performance insights to help them understand and resolve potential issues faster and earlier, during the development phase.
      '';
    };
  }) {};

  jrebel-mybatisplus-extension = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JRebel-mybatisPlus-extension";
    plugname = "JRebel mybatisPlus extension";
    plugid = "jr-mp-ide-idea";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12682/101246/jr-mp-ide-idea.zip";
      sha256 = "16a1f8827m3sxb33gd30csqj972gy9pbf5703vxpay4qbp7fy170";
      name = "JRebel-mybatisPlus-extension-0.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://githuboy.online";
      license = lib.licenses.asl20;
      description = ''
        JRebel MybatisPlus hot reloading extension for IntelliJ
      '';
    };
  }) {};

  js-graphql = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JS-GraphQL";
    plugname = "JS GraphQL";
    plugid = "com.intellij.lang.jsgraphql";
    version = "2.7.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8097/107865/js-graphql-intellij-plugin-2.7.1.zip";
      sha256 = "1ckfi85bvpfy2cwq1cr73xs7zadmv9qzknbh0wrlgza5dn92im31";
      name = "JS-GraphQL-2.7.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jimkyndemeyer/js-graphql-intellij-plugin/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jimkyndemeyer/js-graphql-intellij-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        GraphQL language support including tagged template literals in JavaScript and TypeScript.
      
      Feature highlights:
      
        Schema-aware completion, error highlighting, and documentation
        Syntax highlighting, code-formatting, folding, commenter, and brace-matching
        Execute queries and mutations with variables against configurable endpoints
        Support for multiple schemas using graphql-config
      
      More information about configuring and using the plugin
      can be found in the documentation.
      '';
    };
  }) {};

  js-toolbox = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JS-Toolbox";
    plugname = "JS Toolbox";
    plugid = "com.karateca.jstoolbox";
    version = "1.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7353/95584/jsToolbox.jar";
      sha256 = "1i3pl70yj5knd1bzxf87z0jyhirl6kvpcyiald2rg3qd81mr65lm";
      name = "JS-Toolbox-1.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.andresdominguez.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/andresdominguez/jsToolbox/blob/master/LICENSE";
        free = false;
      };
      description = ''
        JS Toolbox 

    An Intellij / Webstorm plugin that provides several tools for javascript development.

    Here is a list of available actions:

    
      Go to test [Alt T], [Ctrl Command T] on Mac
      Go to view [Alt V], [Ctrl Command V] on Mac
      Go to constructor [Alt G], [Ctrl Command G] on a mac
      Join multi-line strings and variable declarations [Ctrl SHIFT Alt J], [Ctrl Command J] on Mac
      Open current file in browser [Ctrl SHIFT Alt G], [SHIFT Option Command G] on Mac
      Add a semi-color at the end of the line [Ctrl SHIFT ;], [Command SHIFT ;] on Mac
      Sort the selection using a user-defined splitter [SHIFT alt 1], [Command SHIFT 1] on Mac
    
    See all the JS Toolbox actions from two locations:

    
      From Tools &gt; JS Toolbox
      From the editor, right click &gt; JS Toolbox
    

    Go to test [Alt T], [Ctrl Command T] on Mac
    
      Jump between a javascript file and its unit test. You can configure the
      file name patterns under:
    
    Settings &gt; JS Toolbox
    
      And set values for Unit test suffix and
      File suffix
    
    
      If you need multiple patterns use comma. For example:

      Unit test suffix: "Spec.js,-spec.js"
      File suffix: "-controller.js,.js"

      With this configuration the action will take you from:

      "my-component.js" or "my-component-controller.js"

      to

      "my-componentSpec.js" or "my-component-spec.js"
    

    Go to view [Alt V], [Ctrl Command V] on Mac
    
      Jump between a javascript file and its associated view. You can
      configure the file name patterns under:
    
    
      Settings &gt; JS Toolbox

      And set values for View suffix and
      File suffix

      If you need multiple patterns use comma. For example:

      File suffix: "-controller.js,.js"
      View suffix: "-view.html,.html"

      With this configuration the action will take you from:

      "my-component.js" or "my-component-controller.js"

      to

      "my-component.html" or "my-component-view.html"
    

    Toggle camel and dash case
    
      Select some text and then choose the "Toggle camel and dash case" action
    
    one-two-three
    Will turn into
    oneTwoThree

    oneTwoThree
    Will turn into
    one-two-three

    Go to constructor [Alt G], [Ctrl Command G] on a mac
    
      Jump to the constructor of the current javascript file.
    

    Join multi-line strings and variable declarations [Ctrl SHIFT Alt J], [Ctrl Command J] on Mac

    Join strings and variable declarations

    Turn a multi-line string into a single string. Press Ctrl SHIFT Alt J on any of the string lines or select a
      block of text and join.

    
    var s = 'one ' +
        'two ' +
        'three';
    

    Into a single string:

    
    var s = 'one two three';
    

    Join multiple vars into a single var:

    
    var foo = 1;
    var bar = 2;
    

    Into a single var declaration:

    
    var foo = 1,
        bar = 2;
    

    Open current file in browser [Ctrl SHIFT Alt G], [SHIFT Option Command G] on Mac

    Open the current file in the browser. Configure the URL that you want to use when opening the browser under
      Settings &gt; JS Toolbox.

    Sort the selection using a user-defined splitter [Ctrl SHIFT 1], [Command SHIFT 1] on Mac

    For example, select a bunch of arguments, choose sort, and enter a text (eg. ,) to split and sort the result.
      '';
    };
  }) {};

  json-annotation-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JSON-Annotation-Tool";
    plugname = "JSON Annotation Tool";
    plugid = "cn.mycommons.serializednamegen";
    version = "0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11225/96131/JSON_Annotation_Tool-0.8.zip";
      sha256 = "0rrfp0kxjxr6rxvl2zd7w0scnapd6gljrgxh7c13pgb44x9r7yai";
      name = "JSON-Annotation-Tool-0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LiushuiXiaoxia/SerializedNameGen";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/LiushuiXiaoxia/SerializedNameGen/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Auto add or remove json annotation plugin, such as gson SerializedName, fastjson JSONField, jackson JsonProperty.
       It also support java and kotlin file.
      '';
    };
  }) {};

  json-editor-2_9_1 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JSON-Editor-2_9_1";
    plugname = "JSON Editor";
    plugid = "com.zt.json-editor";
    version = "2.9.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14815/107483/JsonEditor.zip";
      sha256 = "1vrlz5v2sgg5rhqx0dj8bzb0zy09xnjwabfm5x90yky39isc55xn";
      name = "JSON-Editor-2_9_1-2.9.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zt422680855/JsonEditor";
      license = lib.licenses.mit;
      description = ''
        JSON visual editing, support JSON dynamic add, modify, delete nodes and format functions.
      '';
    };
  }) {};

  json-editor-2_0 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JSON-Editor-2_0";
    plugname = "JSON Editor";
    plugid = "com.kaishwarya.json.Editor";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13541/76044/JsonEditor.jar";
      sha256 = "0y5pz149zskzzw48mqssk5vq4dbbb2gkzps3bkh7bz8phjprfaql";
      name = "JSON-Editor-2_0-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/k-aishwarya";
      license = lib.licenses.mit;
      description = ''
        JetBrains IntelliJ IDE plugin for easy viewing and editing of currently opened JSON file in IDE using Tree Structure.
      '';
    };
  }) {};

  json-filepath-navigator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JSON-FilePath-Navigator";
    plugname = "JSON FilePath Navigator";
    plugid = "itaka.intellij.plugin.json.navigator";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10002/47004/JSON-File-Navigator-1.4.jar";
      sha256 = "1jhvlz3yyx9cyip32glzvhilnmsziwd2l34y0mif2gsh7aq6vhxx";
      name = "JSON-FilePath-Navigator-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/IsaoTakahashi/JSON-File-Navigator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/IsaoTakahashi/JSON-File-Navigator/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Navigating to project file from JSON string literal
 
This is extension of Navigate &gt; Declaration function. 
The plugin searches file path in json string value and suggest matched files.
      '';
    };
  }) {};

  json-key-finder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JSON-Key-Finder";
    plugname = "JSON Key Finder";
    plugid = "com.cral.JSONKeyFinder";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15064/107666/JSONKeyFinder-2.0.2.zip";
      sha256 = "0cij7z0kf549an13i1qr5kn3r4f6ynhf1jgl68fndbrydl3w4qh6";
      name = "JSON-Key-Finder-2.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cristibp/presentation/wiki/JSON-Key-Finder";
      license = lib.licenses.asl20;
      description = ''
        If you find it useful, you can donate HERE
    Your donation directly helps the development and the maintenance of this plugin. Thank you!
    
    
    What it does?
    Search for a specific JSON key in your project.
    
    
    How to use it?
    There two ways to find a key:
    
        Search for a key - press CTRL + ALT + SHIFT + F (Windows) or Cmd + Shift + Option + F (MacOS)
        Right click on the selected text and pick the option: Find Key in JSON
    
    
    Key features:
    
        Search through objects and arrays
        Suggestions with existing keys containing the search term
        Preview with the surrounding content for all the occurrences
      '';
    };
  }) {};

  json-model-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JSON-Model-Generator";
    plugname = "JSON Model Generator";
    plugid = "com.moxun.generetor";
    version = "0.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8062/33558/ModelGenerator.zip";
      sha256 = "1p8zswrbiig6z471cnp0s1gmbg969rx4456inj2cliyikvlxbgf3";
      name = "JSON-Model-Generator-0.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/misakuo/JsonModelGenerator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/misakuo/JsonModelGenerator";
        free = false;
      };
      description = ''
        Tool to covert JSON string to Java class.
 
 * Support get JSON string from URL or user's input.
 * Support data conversion library like fastjson.
 * Support auto implementation Java interface.
 * Support generate getter and setter.
 * Support field type inference.

 
Sourcecode and Tutorial
 
Bug report
 
Hope you enjoy it :)
      '';
    };
  }) {};

  json-sorter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JSON-Sorter";
    plugname = "JSON Sorter";
    plugid = "com.ivanovych666.intellij.plugin.jsonsorter";
    version = "1.0.0-beta.3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11104/73515/JSON_Sorter.jar";
      sha256 = "1lrkikl0sqxkn8pvl2idkax8r4y648sfz1w4ik0r2njykf4s5r7g";
      name = "JSON-Sorter-1.0.0-beta.3.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ivanovych666/intellij-json-sorter-plugin";
      license = lib.licenses.mit;
      description = ''
        Reorder JSON Object keys. Supports Alphabetical/natural, normal/reverse, case sensitive/insensitive sort.
      '';
    };
  }) {};

  json-to-dart-class-jsontodartclass = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JSON-To-Dart-Class-JsonToDartClass";
    plugname = "JSON To Dart Class (JsonToDartClass)";
    plugid = "com.github.typ0520.jsontodart";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12737/66020/JsonToDartClass-1.0.8.zip";
      sha256 = "12f0bl78b4d6xy2nplw95rkg2ric62i77f1pg8m9y6k2gasj1wj2";
      name = "JSON-To-Dart-Class-JsonToDartClass-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/typ0520";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin for Dart to convert Json String into Dart data class code quickly

       Fast use it with short cut key ALT + L on Windows or Option + L on Mac

      Features:

        Generating Dart data class from any legal JSON string or any URLs that returns a JSON string as response
        Generating Dart data class from any legal JSON text when right click on directory and select New -&gt; Dart data class File from JSON
        Formatting any legal JSON string
        Support Loading JSON From Paster/Local File/Http URL
        
        

        

        
        
        

      Flutter
      Dart
      Json
      dart:convert
      json_serializable

      
     Full Usage Documentation


        
        Thanks:JsonToKotlinClass
      '';
    };
  }) {};

  json-to-kotlin-class-jsontokotlinclass = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JSON-To-Kotlin-Class-JsonToKotlinClass";
    plugname = "JSON To Kotlin Class (JsonToKotlinClass)";
    plugid = "wu.seal.tool.jsontokotlin";
    version = "3.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9960/81695/JsonToKotlinClass-3.6.1.zip";
      sha256 = "1d75bnrmvqhjsgd46zh4p6xwa9mac2zv8rn9s6py55i6f44cdq55";
      name = "JSON-To-Kotlin-Class-JsonToKotlinClass-3.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/wuseal";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wuseal/JsonToKotlinClass/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for Kotlin to convert Json String into Kotlin data class code quickly

       Fast use it with short cut key ALT + K on Windows or Option + K on Mac

      Features:

        Generating Kotlin class from any legal JSON string/JSONSchema or any URLs that returns a JSON string/JSONSchema as response
        Generating Kotlin class from any legal JSON text when right click on directory and select New -&gt; Kotlin class File from JSON
        Supporting (almostly) all kinds of JSON libs' annotation(Gson, Jackson, Fastjson, MoShi and LoganSquare, kotlinx.serialization(default custom value))
        Customizing your own annotations
        Initializing properties with default values
        Allowing properties to be nullable(?)
        Determining property nullability automatically
        Renaming property names to be camelCase style when selecting a target JSON lib annotation．
        Generating Kotlin class as individual classes
        Generating Kotlin class as inner classes
        Formatting any legal JSON string
        Generating Map Type when json key is primitive type
        Only create annotation when needed
        Custom define data class parent class
        Sort property order by Alphabetical
        Make keyword property valid
        Support Loading JSON From Paster/Local File/Http URL
        Support customize your own plugin by Extension Module
        

        

      kotlin
      Json
      Gson
      Fastjson
      Moshi
      LoganSquare
      Kotlinx

      
      Full Usage Documentation
      '';
    };
  }) {};

  jsononlineviewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JSONOnlineViewer";
    plugname = "JSONOnlineViewer";
    plugid = "com.remoterapp.adbremote.jsonviewer.id";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7838/20303/JSONViewerStudioPlugin.zip";
      sha256 = "0ynkvlldlwrzb25ff4ac46sqcwjcs9kcikdcj77f3p1rj220qs0f";
      name = "JSONOnlineViewer-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Viewer to allow request json data from online endpoints direct in your favourite IDE 
For open viewer go to View &gt; JSONViewer 
Viewer enable add headers or/and request body to any type of request such as POST, GET etc. 
Every request include its headers, httpmethod, body and url is save to history and could be use later (select from history and double click)
      '';
    };
  }) {};

  jsr-310-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JSR-310-Support";
    plugname = "JSR-310 Support";
    plugid = "com.mayreh.jsr310-intellij-plugin";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15832/107761/jsr310-intellij-plugin-0.1.0.zip";
      sha256 = "1icvi9n0knvkbkb442r1a3c1wdnpyg5dlgman6d9lc50ki80zawb";
      name = "JSR-310-Support-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ocadaruma";
      license = lib.licenses.asl20;
      description = ''
        Plugin that adds supports for JSR-310 (Date and Time API).
    Features:
    
    Validate DateTimeFormatter pattern literal.
    Parse text as date-time classes using specified pattern literal on-the-fly.
      '';
    };
  }) {};

  junit-4-surefire-listener = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JUnit-4-Surefire-Listener";
    plugname = "JUnit 4 Surefire Listener";
    plugid = "com.luneo7.junit4.intellij";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15718/107198/JUnit_4_Surefire_Listener-0.0.3.zip";
      sha256 = "02v97fm6fvp70qbzl1xl9qvzg9kx1rzpcnq0r8ifzlq6pc04alc6";
      name = "JUnit-4-Surefire-Listener-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/luneo7/intellij-junit4-surefire-listener-plugin/";
      license = lib.licenses.gpl3Only;
      description = ''
        Junit4 Surefire Listener is a plugin that will read your Maven POM file (when imported/refreshed in IntelliJ) 
Maven Surefire Listener config,
 and when the test is run it will inject the configured listeners, we just have some limitations that IntelliJ uses some wrappers 
(IDEAJUnitListenerEx 
and IDEAJUnitListener)
that removes the default parameters of the JUnit 4 RunListener
because of that we don't have all the original parameters, but we can use the events to trigger some instantiation in the testRunStarted for instance.
      '';
    };
  }) {};

  junit-4-synchronizer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JUnit-4-Synchronizer";
    plugname = "JUnit 4 Synchronizer";
    plugid = "JUnit 4 Synchronizer";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1267/3295/JUnit_4_Synchronizer_3295.jar";
      sha256 = "0ikv1k6gdxbf01ba35wvq4r28bk59nkgi7ryh04054lvbr8wmi0c";
      name = "JUnit-4-Synchronizer-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Creates JUnit 4 test classes/methods for source methods annotated
        with the @Testable annotation.  The test classes are created in a
        'test' package, inside which the application package structure is
        duplicated.  The 'test' package will be created if it does not already
        exist.

        The @Testable annotation is created automatically in the 'test' package
        the first time the synchronizer is run.  @Testable currently has a single
        attribute whereby you can override the name of the test method to be
        created.  For example, @Testable("testIntegerAddition") would create
        a test method named 'testIntegerAddition'.  If no name attribute is
        specified a default name will be created that consists of the name
        of the annotated method prefixed with 'test'.

        Test classes will only be created for those source classes with at least
        one method annotated with @Testable.

        This plugin is available from the 'Tools' menu or from the project view
        popup menu as 'Synchronize JUnit Tests'.

        Instructions:

           #1 - RunSynchronize JUnit Tests once to create the @Testable annotation.
           #2 - Annotate desired source methods with @Testable annotation.
           #3 - Run Synchronize JUnit Tests to create test methods.
           #4 - Repeat steps 2 and 3 as often as desired to create new unit tests.


       Note 1:  If you have a multi-module project simply copy the @Testable annotation
       from the first module (as created during step 1 above) into 'test' packages in the additional modules
       and proceed with steps 2 thru 4 to create the unit tests for these modules.


       Note 2:  An enhancement request has been submitted to JUnit.org (via SourceForge.net)
       to include the @Testable annotation in the JUnit 4 framework.
      '';
    };
  }) {};

  junit-4-to-5-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JUnit-4-to-5-Converter";
    plugname = "JUnit 4 to 5 Converter";
    plugid = "de.wlsc.junit.converter.plugin";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13546/106152/junit-5-converter-1.4.1.zip";
      sha256 = "1xlphscg94g6i83s817kpp2i984kdigq7gxa1q2ns4jbhpsglkch";
      name = "JUnit-4-to-5-Converter-1.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wlsc/idea-junit-5-converter-plugin";
      license = lib.licenses.mit;
      description = ''
        Convert your JUnit 4 tests into JUnit 5 Jupiter with the simple contextual converter to help convert your tests with ease. 
 
 
 In development. More features to come.
      '';
    };
  }) {};

  junit-5-mockito-code-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JUnit-5-Mockito-code-generator";
    plugname = "JUnit 5 Mockito code generator";
    plugid = "com.sunny.plugin.MockitoGenPlugin";
    version = "1.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12833/67505/mockito-code-generator-junit5.jar";
      sha256 = "15j5v576qmhk50jn05pd2jmi2wdmilipg41f193i8802j2r9f2ky";
      name = "JUnit-5-Mockito-code-generator-1.4.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/pelletier197";
      license = lib.licenses.asl20;
      description = ''
        The plugin generates boilerplate Mockito JUnit 5 code that usually needs to be added manually to unit tests.

      
      Auto-generated are:
      
          ExtendWith(MockitoExtension.class) annotation for the class
          Mocked fields for each non-static object declared in the test subject
          Primary type variables and standard final classes (Instant, ZonedDateTime, UUID, Enums) for tested classes and methods
          Field for the test subject with @InjectMocks annotation
          static imports for useful mockito functions like when, verify and AssertJ assertThat if it is available
          Nested classed with @Nested to test each accessible method of the tested class with the fields required in input mocked
      
      

      
        To generate the Mockito code with the plugin hit alt + insert on your test class or choose the action from
      "Generate Action" context menu and hit "Add Mockito JUnit 5 code".

      Another binding exists to ctrl + shift + M that will do the same thing.
      
      
        Project is an open source project available at https://gitlab.com/pelletier197/intellij-mockito-junit-5-code-generator. Feel free to suggest new features or do merge requests.
      
      Plugin was modified from an existing plugin: https://github.com/przemyslawj/mockito-intellij-plugin and then modified to use JUnit 5 and generate nested class methods.
      '';
    };
  }) {};

  junit-to-spock-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JUnit-to-Spock-Converter";
    plugname = "JUnit to Spock Converter";
    plugid = "com.github.masooh.intellij.plugin.groovyfier";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12335/93363/JUnit_to_Spock_Converter-0.2.zip";
      sha256 = "1pc4a257axjv4m9qy3d7sc9r3fmm498jcb5csw4s3r68p84436vh";
      name = "JUnit-to-Spock-Converter-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/masooh";
      license = lib.licenses.mit;
      description = ''
        Converts JUnit tests to Spock specifications. Can also convert Java files to Groovy.
        
            New actions: Code -&gt; "Convert JUnit to Spock"/"Convert Java to Groovy".
        

        Features:
        
            Convert JUnit test to Spock specifications
            Replace test annotations i.e. @Before, @Test, ...
            Convert test names camelCaseNaming() to "camel case naming"()
            Guess when/then/expect blocks
            Replace simple asserts(assertEquals, assertTrue, assertNull) and the according negated ones
        

        Limitations:
        
            This plugin has limitations in converting Java to Groovy as well as the replacement of JUnit features, nonetheless
            it serves as a good start for the conversion.
        

        
            For a complete set of features see the documentation.
      '';
    };
  }) {};

  junit4-parallel-runner = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JUnit4-Parallel-Runner";
    plugname = "JUnit4 Parallel Runner";
    plugid = "JUnit4-Parallel-Runner";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12959/68674/intellij-parallel-test-plugin.jar";
      sha256 = "119ms06ndagbkhycl5zifjxzv36pi43bhr0w4bzqid3b3dl1piwv";
      name = "JUnit4-Parallel-Runner-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csabagabor/junit4-parallel-runner-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        A plugin that allows you to run JUnit4 tests in parallel (using multiple CPU cores/threads).
	  
	  
	   Important: it only works with JDK 7+(because it uses the Fork/Join framework)
	  
      
      Why and when to use it:
      

      
       To speed up running every kind of JUnit4 test including unit tests, integration tests and more...
	   When running multiple test classes, each class is run in a separate thread(no parallelizing is done on method level)
	    and when running a single test class, every method in it is run in parallel
		 
	   It is integrated nicely with the built-in Intellij IDEA runner: works exactly in the same way
			(You can select and run a subset of the tests - no need to run all the tests)
       If you have a CPU with at least 4 cores, it will greatly reduce the running time of your tests
       Works with every kind of framework including Mockito, Spring etc.

      

      
      Note: The more tests you have, the better the speedup will be.
      Let's say you have 1000 tests which need 40 seconds to run and you have a 6 core CPU, 
      using this plugin you can reduce the running time of tests by approx. 4x (down to 10 seconds).
      Also, no parallelizing is done when running a single method from a single class(the single 
       method is executed on a single thread)
      
		
      Warning: Some code is not meant to be run in parallel (sometimes this is the case with integration tests).
      Also, if you have tests which are not independent of each other, they might fail.
      
		

     The Github project sources
    
	  
	  Credits:
    Icons for this plugin were made by Smashicons from www.flaticon.com
	  
	  Also, the plugin includes code from: JUnit Toolbox
      '';
    };
  }) {};

  junitgenerator-v2-0 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JUnitGenerator-V2.0";
    plugname = "JUnitGenerator V2.0";
    plugid = "org.intellij.plugins.junitgen";
    version = "2.0.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3064/19667/JUnitGenerator.jar";
      sha256 = "1p5rm1pk4ji33q4r38ifyx76x8in6br0kv46p7is4hys0i2frkbk";
      name = "JUnitGenerator-V2.0-2.0.12.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/junit-generator-v2";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/junit-generator-v2";
        free = false;
      };
      description = ''
        This plugin generates JUnit tests from right click 'Generate...' menu while focused on a java class. The unit test output code can be customized using a provided velocity template to format the code based on the origin class. 
If a unit test is created where one already exists, the user is prompted for overwrite or merge operation. The merge operation allows the user to selectively create the target file content. 
A future revision will allow the user to generate their own test case macros.
      '';
    };
  }) {};

  jvm-inject = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JVM-Inject";
    plugname = "JVM Inject";
    plugid = "com.alibaba.rdc.jvm-inject";
    version = "1.0-2019.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13482/82923/jvm-inject-1.0-2019.3.zip";
      sha256 = "0ifyj1jp8vrav3x4p2fvbpsg8gvpyarsfpzaljmfzn2h43pp2w6w";
      name = "JVM-Inject-1.0-2019.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.alibaba.com";
      license = lib.licenses.asl20;
      description = ''
        Auto Inject JVM Ops from .jvmrc file. Support use kt-connect socks5 mode
      '';
    };
  }) {};

  jwt-json-web-token-analyzer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JWT-JSON-Web-Token-Analyzer";
    plugname = "JWT (JSON Web Token) Analyzer";
    plugid = "com.github.novotnyr.jwt-intellij-plugin";
    version = "0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9831/94811/jwt-intellij-plugin-0.11.zip";
      sha256 = "0v3kr2fs8nyazs9bapvh62l16vjbnhqz7ks19x115f645rcrmh48";
      name = "JWT-JSON-Web-Token-Analyzer-0.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/novotnyr/jwt-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        JSON Web Token Parser and Analyzer.
    
      Visualize JWT contents in a tabular form
      Verify signature (HS256 and RS256 support)
      Verify validity of timestamp-based claims
      Visualize timestamp-based claims in unix / ISO / human relative format
      Edit claim values: dedicated editor for string, timestamp, boolean, numeric and raw JSON values
      Set default keypair for RS256 validation in Preferences.
      '';
    };
  }) {};

  jailbreakk = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jailbreakk";
    plugname = "Jailbreakk";
    plugid = "com.jereksel.jailbreakk";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13442/74866/ide-plugin-0.0.2.zip";
      sha256 = "1ajrxpfb97594ra4d7w32wgb3rmmqvjdv9c31nlzws9nn73xypyq";
      name = "Jailbreakk-0.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jereksel/jailbreakk";
      license = lib.licenses.gpl3Only;
      description = ''
        Companion Intellij plugin for Jailbreakk Kotlin compiler plugin
      '';
    };
  }) {};

  jakes-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Jakes-Theme";
    plugname = "Jake's Theme";
    plugid = "com.jakecoffman.theme";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12182/77725/jake-theme.jar";
      sha256 = "06hd77b1x7ca8n8sz2xzi7nji9gm2x3irxqw4i4ahpzpcdg5iing";
      name = "Jakes-Theme-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jakecoffman.com";
      license = lib.licenses.mit;
      description = ''
        Jake's Theme: A 100% black background with other Darcula colors
      '';
    };
  }) {};

  japanese-language-pack-- = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Japanese-Language-Pack--";
    plugname = "Japanese Language Pack / 日本語言語パック";
    plugid = "com.intellij.ja";
    version = "203.564";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13964/108510/ja.203.564.jar";
      sha256 = "1093zp699vlrapbda6allchs1mxkylhniws93i7iv9ady93vak10";
      name = "Japanese-Language-Pack---203.564.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Adds Japanese as the IDE interface language.It’s an EAP version, we’re making it better everyday. At the moment partial localization is available.Your feedback is very much appreciated. You can submit it directly from the IDE or via YouTrack either in English or Japanese.IDE の UI を日本語化するプラグインです。早期アクセスプログラム（EAP）で提供中であり、ローカライズ作業はまだ進行中です。現時点では一部のみがローカライズされています。フィードバック大歓迎です！IDE から直接意見を投稿（[ヘルプ] – [バグ・レポートの送信…]）するか、YouTrack にてテンプレートを使用して、英語か日本語でフィードバックをお寄せください。
      '';
    };
  }) {};

  jar-juggler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jar-Juggler";
    plugname = "Jar Juggler";
    plugid = "Jar Juggler";
    version = "0.9b";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1193/3117/Jar_Juggler_3117.zip";
      sha256 = "0bggxpp6bhzrz9k23kz2vqyzyj52m18szfg1r87sw3gfin33sjsy";
      name = "Jar-Juggler-0.9b.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/jarjuggler";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/jarjuggler";
        free = false;
      };
      description = ''
        Library package manager.  It downloads jars, source, and javadocs from maven2 and ivy repositories, then configures them for your project.
      After installing you can launch Jar Juggler under Tools -> Jar Juggler.
      '';
    };
  }) {};

  jar-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jar-Tool";
    plugname = "Jar Tool";
    plugid = "Jar Tool";
    version = "7.17";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/256/8313/Jar_Tool_8313.zip";
      sha256 = "1gs0v2rhjiaprxxkpy9yj3fpvfnpnkhjsj9q7ba8bxz6q5nyyz8q";
      name = "Jar-Tool-7.17.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.yahoo.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.yahoo.com/";
        free = false;
      };
      description = ''
        GUI Based tool to create jar archives easily with facilities
        * to create executable archives
        * create executable archives
        * manifest file generation
        * including excluding classes from multi module IDEA projects
        * including 3rd party libraries
        * building source archives
        * generating ANT script
      '';
    };
  }) {};

  jarporter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jarporter";
    plugname = "Jarporter";
    plugid = "com.jarporter.jarporter";
    version = "0.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13879/99810/jarporter-0.2.4.zip";
      sha256 = "0rpwyhqdh8y2y245yp4sa9xawghsbm8c1akamv3wbpvc6rxyhq4l";
      name = "Jarporter-0.2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Plugin to export, analyze and optimize java code and resources into a jar
      '';
    };
  }) {};

  java-api-code-generation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Java-API-code-generation";
    plugname = "Java API code generation";
    plugid = "com.github.awesomelemon.deep-api-plugin";
    version = "0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10871/47268/deep-api-plugin.zip";
      sha256 = "169balgd9vh23gqqysb0rsnbxqbszw2x2zplilc21s36iny1m8dz";
      name = "Java-API-code-generation-0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/AwesomeLemon";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/AwesomeLemon/deep-api-bayou-intellij-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Java code generation from natural language requests using DeepAPI and Bayou algorithms
      '';
    };
  }) {};

  java-antidecompiler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Java-Antidecompiler";
    plugname = "Java Antidecompiler";
    plugid = "com.bisguard.java.antidecompiler.idea";
    version = "9.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11560/64925/com.bisguard.java.antidecompiler_idea_9.2.3.zip";
      sha256 = "0wqw8mzl4ig6ma9aviyalyqy3b3rl3vqync29ca4w8l3510qarz0";
      name = "Java-Antidecompiler-9.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.bisguard.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://bisguard.com/help/java/eula.html";
        free = false;
      };
      description = ''
        The strongest Java code and resources protection
      '';
    };
  }) {};

  java-applets-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Java-Applets-Support";
    plugname = "Java Applets Support";
    plugid = "com.intellij.applet";
    version = "192.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13148/70219/applets-192.0.zip";
      sha256 = "0msq9cwwbim58smlv24zil4940qnwh25nhgm385cf227dz1mxbhw";
      name = "Java-Applets-Support-192.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-obsolete-plugins/tree/master/applets";
      license = lib.licenses.asl20;
      description = ''
        Supports building and running Java applets
      '';
    };
  }) {};

  java-bean-to-json-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Java-Bean-To-Json-Tool";
    plugname = "Java Bean To Json Tool";
    plugid = "com.hardy.JsonTool";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12019/79691/json-tool-plugin.jar";
      sha256 = "1x1nqimzgvqbcj9bjfpcqscq6svjf4c4iazgqcck48c2y9bml5gm";
      name = "Java-Bean-To-Json-Tool-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/genghaizhou/json-tool-plugin";
      license = lib.licenses.asl20;
      description = ''
        An Simple Json Tool Convert Java Bean To Json or Json-Schema 

         To Json can be used to construct post request 
         To Json-Schema can be apply to create API documents
      '';
    };
  }) {};

  java-bean-to-json = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Java-Bean-to-Json";
    plugname = "Java Bean to Json";
    plugid = "com.linsage";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10336/69192/java2json.jar";
      sha256 = "1gsm0j4kprgp86j2rikm54a799kv262sayxcr143l7s1kdr8pag4";
      name = "Java-Bean-to-Json-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/linsage";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/linsage/java2json";
        free = false;
      };
      description = ''
        GitHub |
      Donate with PayPal |
      
      
      A simple plugin for converting Java bean to JSON
      When you post json request using Postman :)
      '';
    };
  }) {};

  java-decompiler-intellij-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Java-Decompiler-IntelliJ-Plugin";
    plugname = "Java Decompiler IntelliJ Plugin";
    plugid = "jd-intellij";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7100/15663/jd-intellij-0.6.zip";
      sha256 = "01v7khw90fdm3244d8la8qiakp6lg2zyzq673016nhff0hf2akz8";
      name = "Java-Decompiler-IntelliJ-Plugin-0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/bric3/jd-intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://java-decompiler.github.io/";
        free = false;
      };
      description = ''
        JD-IntelliJ is a plug-in for the IntelliJ IDEA platform. It allows you to display all the Java sources during your debugging process, even if you do not have them all. It is based on the famous tools JD-GUI.
      '';
    };
  }) {};

  java-encapsulated-clone-constructor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Java-Encapsulated-Clone-Constructor";
    plugname = "Java Encapsulated Clone Constructor";
    plugid = "com.github.mendess2526.javaclonegenerator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10458/43409/JavaCloneGenerator.jar";
      sha256 = "0c2y88fr56pp0mgn9skvi7s3wzc4d12zqrg5haj4s786p16lpxhv";
      name = "Java-Encapsulated-Clone-Constructor-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/Mendess2526/JavaCloneGenerator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.github.com/Mendess2526/JavaCloneGenerator";
        free = false;
      };
      description = ''
        Allows the user to generate an encapsulated clone constructor
      '';
    };
  }) {};

  java-operator-overloading-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Java-Operator-Overloading-support";
    plugname = "Java Operator Overloading support";
    plugid = "javaoo.idea";
    version = "0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7224/72471/idea-oo-plugin-0.7.jar";
      sha256 = "0jvcvfdlp5xynxlf8x96vwixhgrhy0pcxagrxb3il4rinn1qc3za";
      name = "Java-Operator-Overloading-support-0.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://amelentev.github.io/java-oo/";
      license = lib.licenses.asl20;
      description = ''
        Plugin for Java Operator Overloading support.
      Java8 is required to run the plugin.
      '';
    };
  }) {};

  java-utility-class-can-be-singleton = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Java-Utility-class-can-be-Singleton";
    plugname = "Java Utility class can be Singleton";
    plugid = "com.linuxgods.kreiger.intellij.idea.inspections.utility.singleton";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7798/19875/intellij-idea-inspection-utility-class-can_be-singleton.jar";
      sha256 = "067rmwvllnrzdjj46ipg874js2igsa7s046dfcglzldszfl466qi";
      name = "Java-Utility-class-can-be-Singleton-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kreiger/intellij-idea-inspection-static-dependencies-are-bad";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/kreiger/intellij-idea-inspection-static-dependencies-are-bad";
        free = false;
      };
      description = ''
        Converts Java utility class (only static members) to singleton, changing all references from 
UtilityClass.member to 
UtilityClass.getInstance().member.
      '';
    };
  }) {};

  java-visualizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Java-Visualizer";
    plugname = "Java Visualizer";
    plugid = "com.aegamesi.java_visualizer.plugin";
    version = "2.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11512/90915/visualizer_plugin-2.2.0.zip";
      sha256 = "0h3nlz7yag0b663xm3rn0kmjxznjms2ina0x3nv2v4nflqi0zgqv";
      name = "Java-Visualizer-2.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aegamesi";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/elipsitz/java-visualizer-intellij-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A tool to visualize the call stack and objects on the heap (as a box and
      pointer diagram) while debugging Java applications.
      '';
    };
  }) {};

  java2groovy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Java2Groovy";
    plugname = "Java2Groovy";
    plugid = "com.densebrain.intellij.plugins.groovyconvert";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7626/18040/convert-to-groovy-plugin.zip";
      sha256 = "152x40mvmwdsblsd3vw4kid2p5nsy61szknih6xzmdlkyb061ahc";
      name = "Java2Groovy-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.densebrain.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.densebrain.com";
        free = false;
      };
      description = ''
        Easily convert a java file to groovy file - it just renames it :)
      '';
    };
  }) {};

  java8-postfix = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Java8-Postfix";
    plugname = "Java8 Postfix";
    plugid = "net.orekyuu.java8postfix";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7950/21358/Java8PostFix.jar";
      sha256 = "08fsa0q972wf3kvy86lfwbp677qnvriaz74ac2k47qg8mbkl9257";
      name = "Java8-Postfix-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.orekyuu.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://blog.orekyuu.net";
        free = false;
      };
      description = ''
        Postfix completion templates for java8 
   Template Before After   .stream array.stream Arrays.stream(array)   .lambda someMethod().lambda () -&gt; someMethod()   .opt obj.opt Optional.of(obj)   .optnull obj.optnull Optional.ofNullable(obj)
      '';
    };
  }) {};

  javabeantojson = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JavaBeanToJson";
    plugname = "JavaBeanToJson";
    plugid = "javabean.jtv.com.cn";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12580/64240/JavaBeanToJson.jar";
      sha256 = "08dj1kxjmsh0a5gjcymsrjw19zy3jamyspzpwivh9kviz93qrpqq";
      name = "JavaBeanToJson-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jtv.com.cn";
      license = lib.licenses.asl20;
      description = ''
        JavaBean工具类，可以直接把JavaBean转换为Json对象
    JavaBean Tool Class, which can directly convert JavaBean into Json objects
    
    比如/for example：
    public class TestBean{
          private String name;
          private String age;
          ...
    }
    
    工具生成结果/tool generation results：
    JSONObject item = new JSONObject();
    item.put("name",xxxx.getName());
    item.put("age",xxxx.getAge());
    
    使用方式/Usage:
    单击鼠标右键弹出菜单栏，点击Generate,再点击JavaBeanToJson
    Right-click the mouse to pop up the menu bar, click Generate, and then click JavaBeanToJson
      '';
    };
  }) {};

  javacc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JavaCC";
    plugname = "JavaCC";
    plugid = "com.github.oowekyala.javacc";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11431/98393/intellij-javacc-1.7.zip";
      sha256 = "0kw5chqnjhr8m29i1dks4r6d12nqkhmp7xdx731v7xhs3kc93ka3";
      name = "JavaCC-1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/oowekyala";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/oowekyala/intellij-javacc/master/LICENSE";
        free = false;
      };
      description = ''
        Support for JavaCC and JJTree grammar files.

        
            Offers comprehensive language support for the JavaCC parser generator and its JJTree preprocessor.
            Do you like it? Give it a star on GitHub,
            and rate it at plugins.jetbrains.com. Thanks!
        

        Main features

        
            JavaCC support: Navigate to declaration and find usages, code completion, structure view, quick documentation, etc.
            JJTree support: Navigate to/from node class, additional structure view nodes, node scope highlighting, etc.
            Java language injection: Code completion, quick documentation, usage resolution, etc.
            Inspections and intentions: Including unnecessary parentheses detection, unreachable production detection, ambiguous JJTree node descriptor, etc.
        

        Visit the GitHub README for more details.
      '';
    };
  }) {};

  javacc-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JavaCC-Plugin";
    plugname = "JavaCC Plugin";
    plugid = "JavaCC Plugin";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7422/17981/javacc.jar";
      sha256 = "0ld7i8q61zyinmcgrkrvw5dyy2q5dsi3jwzklwx411045qinfb46";
      name = "JavaCC-Plugin-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Support of JavaCC *.jj files
      '';
    };
  }) {};

  javadoc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JavaDoc";
    plugname = "JavaDoc";
    plugid = "com.github.setial";
    version = "4.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7157/83823/intellij-javadocs-4.0.2.zip";
      sha256 = "091wxjxdl2miv834mbxj7h4i97h629qfbngm35pnx0hd8vdbwa5p";
      name = "JavaDoc-4.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://setial.github.com/intellij-javadocs/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/licenses/gpl.html";
        free = false;
      };
      description = ''
        Plugin that generates javadocs on java class elements, like field, method, etc.
      Home page: http://setial.github.com/intellij-javadocs
      '';
    };
  }) {};

  javadoc-clean-read = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JavaDoc-Clean-Read";
    plugname = "JavaDoc Clean Read";
    plugid = "com.github.ArtsiomCh.JDCleanRead";
    version = "203.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10828/99773/JDCleanRead.zip";
      sha256 = "1qfz7s8pa075g8h28qnskyv2bcwrhajslws6i0ahp85f6djbl8yj";
      name = "JavaDoc-Clean-Read-203.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ArtsiomCh/JDCleanRead";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ArtsiomCh/JDCleanRead/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Making JavaDoc comments more readable by:
       Hiding(folding) HTML tags;
       Unescape HTML escaped chars;
       Text styles for value of tags: &lt;code&gt; | &lt;tt&gt; | &lt;li&gt; | &lt;b&gt; | &lt;i&gt; | &lt;a href/name=...&gt; | @code | @literal | @link | @linkplain | @value;
       Tag and tag's value text styles are customisable at Settings -&gt; Editor -&gt; Color Scheme -&gt; JavaDoc Clean Read. 

     Plugin is paid for commercial IDEs: IntelliJ IDEA Ultimate. 
     Plugin is free(for now) for community/free IDEs: IntelliJ IDEA Community, Android Studio.
      '';
    };
  }) {};

  javadoc-sync-plugin-10 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JavaDoc-Sync-Plugin-10";
    plugname = "JavaDoc Sync Plugin 10";
    plugid = "JavaDoc Sync Plugin 10";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6340/25068/JavaDoc_Sync.jar";
      sha256 = "1ij5y8gb2d29sdpv16x1wws5rlsawscgxdny0q90anjbrdakhmzc";
      name = "JavaDoc-Sync-Plugin-10-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The JavaDoc Sync Plugin will assist you to keep your JavaDoc in sync between interface definitions and the implementations, or method definitions and method overrides. The plugin now uses template based generation of JavaDoc, so that the JavaDoc text can now easily be customized to your needs.

 The JavaDoc Sync Plugin was originally written by Raymond Brandon but was updated for IntelliJ 8 by woofgl 

 The JavaDoc Sync Plugin can: 
 
 
 highlight methods that define the @inheritDoc tag but there's no super method 
 highlight methods that define the @inheritDoc tag but the super method doesn't have javaDoc 
 highlight a class if one or more methods do not define JavaDoc 
 Generate JavaDoc for all methods that do not define JavaDoc according to user defined templates 
 Ignore methods that do not match the configured access modifier level 
 Ignore overridden methods of anonymous classes or inner classes 
 highlight methods that do not have JavaDoc 
 highlight fields that do not have JavaDoc 
 highlight methods of interface implementations of which the JavaDoc differs from the JavaDoc defined at interface level 
 highlight overridden methods/constructors of which the JavaDoc differs from the JavaDoc defined in the super classes 
 
 When the JavaDoc Sync Plugin detects differences between the defining interface or base method and the implementing or overriding method, the user will get quick fixes presented to update the JavaDoc like:
 
 
 Copy JavaDoc from parent 
 Move to parent and introduce reference 
 Replace parent JavaDoc 
 Generate JavaDoc from signature 
 Generate JavaDoc from field 
 Generate JavaDoc for all methods 
 
 To turn on the JavaDoc Sync plugin, go to Settings-&gt;Errors and select &quot;JavaDoc issues&quot;
      '';
    };
  }) {};

  javadoc-sync-plugin-8 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JavaDoc-Sync-Plugin-8";
    plugname = "JavaDoc Sync Plugin 8";
    plugid = "JavaDoc Sync Plugin 8";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3403/5931/JavaDoc_Sync_Plugin_8_5931.jar";
      sha256 = "1jwmr9bf59nl4f3hk9hn0lcnhi24z75z6mrvivibdjy4gx2kf78w";
      name = "JavaDoc-Sync-Plugin-8-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The JavaDoc Sync Plugin will assist you to keep your
        JavaDoc in sync between interface definitions and the
        implementations, or method definitions and method overrides.
        The plugin now uses template based generation of JavaDoc, so
        that the JavaDoc text can now easily be customized to your needs.

        The JavaDoc Sync Plugin was originally written by Raymond Brandon but was updated for IntelliJ 8 by
        Daniel Bingham 

        The JavaDoc Sync Plugin can: 
        
        highlight methods that define the @inheritDoc tag but there's no super method
        highlight methods that define the @inheritDoc tag but the super method doesn't have javaDoc
        highlight a class if one or more methods do not define JavaDoc
        Generate JavaDoc for all methods that do not define JavaDoc according to user defined templates
        Ignore methods that do not match the configured access modifier level
        Ignore overridden methods of anonymous classes or inner classes
        highlight methods that do not have JavaDoc
        highlight fields that do not have JavaDoc
        highlight methods of interface implementations of which
        the JavaDoc differs from the JavaDoc defined at interface level
        highlight overridden methods/constructors of which
        the JavaDoc differs from the JavaDoc defined in the super classes
        
        
        When the JavaDoc Sync Plugin detects differences between the
        defining interface or base method and the implementing or
        overriding method, the user will get quick fixes presented to
        update the JavaDoc like:
        
        Copy JavaDoc from parent
        Move to parent and introduce reference
        Replace parent JavaDoc
        Generate JavaDoc from signature
        Generate JavaDoc from field
        Generate JavaDoc for all methods
        
        
        To turn on the JavaDoc Sync plugin, go to Settings->Errors and select "JavaDoc issues"
      '';
    };
  }) {};

  javafx-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JavaFX-Helper";
    plugname = "JavaFX Helper";
    plugid = "com.github.vljubovic.javaFxHelper";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14727/105930/JavaFXHelper-1.0.5.zip";
      sha256 = "0ip1j53z5ydsx0idlx2f0ixvxmrr5gps4av03qchkd3g1cyv70iv";
      name = "JavaFX-Helper-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vljubovic/javafx_helper_plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        This is a useful plugin for people who create a lot of JavaFX projects. It will automatically
      add JavaFX library and configure VM options every time a JavaFX project is created, opened or cloned.
      '';
    };
  }) {};

  javafx-runtime-demo = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JavaFX-Runtime-Demo";
    plugname = "JavaFX Runtime Demo";
    plugid = "org.jetbrains.javafx-demo";
    version = "1.0-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14664/91076/javafx-demo-plugin-1.0-SNAPSHOT.zip";
      sha256 = "0fgvjaj5abcyd7kd2kv8j05jjlsl2m0qq6q3aznbhz1bqzibfx8d";
      name = "JavaFX-Runtime-Demo-1.0-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yole/javafx-demo-plugin";
      license = lib.licenses.asl20;
      description = ''
        Demonstrates the use of JavaFX through the JavaFX Runtime for Plugins plugin
      '';
    };
  }) {};

  javafx-runtime-for-plugins = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JavaFX-Runtime-for-Plugins";
    plugname = "JavaFX Runtime for Plugins";
    plugid = "com.intellij.javafx";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14250/94514/JavaFX_plugin_1.0.3.zip";
      sha256 = "0dnr1yc5kss9dqajpxyid1cnycixsri8y88ca36vg4xamf3ykjd2";
      name = "JavaFX-Runtime-for-Plugins-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Makes it possible to run IDE plugins that use JavaFX APIs.

Adds the JavaFX 11.0.2 runtime to the IDE. Please note that this plugin itself doesn’t provide any functionality. It is only required to run plugins that use JavaFX APIs, and it will automatically be installed along with them.

Notes for plugin developers
If your plugin uses JavaFX APIs to implement its UI, please add this plugin as a direct or optional dependency of your plugin. To do so, add &lt;depends&gt;com.intellij.javafx&lt;/depends&gt; to the plugin.xml file of your plugin.
      '';
    };
  }) {};

  javaparser-ast-inspector = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JavaParser-AST-Inspector";
    plugname = "JavaParser AST Inspector";
    plugid = "com.github.rogerhowell.JavaCodeBrowser";
    version = "0.4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14245/100955/JavaParser-AST-Inspector-0.4.4.zip";
      sha256 = "1caakqjv6j70hzd9n4npshvvivlvdsiripanrd9q8p3z18j3dm65";
      name = "JavaParser-AST-Inspector-0.4.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MysterAitch";
      license = lib.licenses.mit;
      description = ''
        Browse and navigate the Abstract Syntax Tree (AST) based on the Java code in your editor.

Uses JavaParser v3.15.21 which currently handles Java 1-14, with Java 15 coming soon!
      '';
    };
  }) {};

  javaroadmap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JavaRoadMap";
    plugname = "JavaRoadMap";
    plugid = "com.jrmplugin.jrmplugin";
    version = "0.0.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15694/106481/jrmplugin-0.0.3.zip";
      sha256 = "0pw5jq0irkqharr0bxrzip7r8ffpcyl9l6p9q0d4ihh2pxm9hr1c";
      name = "JavaRoadMap-0.0.1-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://javaroadmap.ru";
      license = lib.licenses.asl20;
      description = ''
        Java Road Map Application.
    Learn enterprise things like Spring, Hibernate and so on in PRACTICE!

    How to use plugin:
    1. Open plugin window in the toolbar: JRM Application.
    2. Fetch source code from official website: javaroadmap.ru.
    3. Solve all tasks step by step, described in the official website.
    4. Send your solution using plugin window and wait until task will be processed and results has been provided.
    That's it.
      '';
    };
  }) {};

  javascript-squeezer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JavaScript-Squeezer";
    plugname = "JavaScript Squeezer";
    plugid = "JavaScript Squeezer";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/268/1336/JavaScript_Squeezer_1336.jar";
      sha256 = "0cipsj5hsdppwgshby9z0px0fij03m38ffafih35d3rfw0rz9ash";
      name = "JavaScript-Squeezer-0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://machak.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://machak.com/";
        free = false;
      };
      description = ''
        JavaScript file compressing by using Rhino mozilla library. Modifications made to Rhino library are taken from Dojo SVN, so credits go to them.
 Sources will be released soon.
      '';
    };
  }) {};

  javax-var-type-hint = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JavaX-Var-Type-Hint";
    plugname = "JavaX Var Type Hint";
    plugid = "com.github.zxj5470.javaxhint";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10557/44592/javaxhint-0.1.2.jar";
      sha256 = "01q1m8szm5jfbx50kglcajynbhs6jix6pi2bh4lnizivvn2s6cqy";
      name = "JavaX-Var-Type-Hint-0.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/zxj5470/JavaX-Var-Hint";
      license = lib.licenses.gpl3Only;
      description = ''
        Usage

    First, make sure you can use java 10 features in your project. 
    Then, press Ctrl - (or ⌘ - on Mac) On a Line or reopen a Java file.

Notes

    Anonymous object has its folding so that you can move the cursor the between the
        identifier and  =  symbol.
    
    
        In other cases, press the key everywhere for a line is OK.
      '';
    };
  }) {};

  javadoc-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Javadoc-Helper";
    plugname = "Javadoc Helper";
    plugid = "Javadoc Helper";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3155/5895/Javadoc_Helper_5895.jar";
      sha256 = "1s6nfqgvy84hl6bxb2s6dzmbrrsj6q3gfyb15hiq6mw8ckyf6759";
      name = "Javadoc-Helper-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/javadoc-helper";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/javadoc-helper";
        free = false;
      };
      description = ''
        Provide following actions:
           
           Set configurable javadoc class tags (like @version ''$Id$)
           Add @Override tag to method which overrides
           Add {@inherited} on javadoc method or remove javadoc which is same as parent
        
        
        Actions are available under Editor popup menu, Project popup and Edit menu.
        You can right-clic on a folder to launch an action recursively.
        Look at plugin "JavaDoc Sync Plugin" for others actions related to javadoc
      '';
    };
  }) {};

  javadoc-utility = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Javadoc-Utility";
    plugname = "Javadoc Utility";
    plugid = "Javadoc Utility";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6120/10601/Javadoc_Utility_10601.jar";
      sha256 = "1cxrfawdi9614n018xzfs8x8d71z2fav3i8xsdwzs3djqah8bm34";
      name = "Javadoc-Utility-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This simple plugin provides the following javadoc features:
            
                Generating getters and setters with javadoc (rus/eng) (press ALT+G).
                Add @inheritDoc tag to the method which overrides (press ALT+I).
        
        
        All plugin features are available in the generate menu.
      '';
    };
  }) {};

  jawa = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jawa";
    plugname = "Jawa";
    plugid = "org.argus.intellij";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10677/45441/jawa-plugin.zip";
      sha256 = "0xip2jrpazzhlvsc67hp3k38jizji7d073452h0r7bm5lqwk45w5";
      name = "Jawa-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://fgwei.arguslab.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "epl-2.0";
        free = false;
      };
      description = ''
        Jawa plugin provides Jawa language support.
      '';
    };
  }) {};

  jbehave-step-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Jbehave-Step-Generator";
    plugname = "Jbehave Step Generator";
    plugid = "org.dimazay.stepgenerator";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10318/46887/StepGeneratorPlugin.jar";
      sha256 = "04b32nhgy40jf6xx8c0jrw657w8k9zlx52028cgdxwqfda5d99m3";
      name = "Jbehave-Step-Generator-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/asterium/IdeaJbehaveStepGenerationPlugin";
      license = lib.licenses.gpl3Only;
      description = ''
        About this plugin
 This plugin is intended to simplify usage of Jbehave framework in Intellij IDEA. Idea of this plugin was borrowed from Visual Studio + Specflow integration tool, that allows to produce step definitions in one-click way. Currently, this plugin allows to generate step definition and insert it into clipboard, as well as insert step definition into selected class
 
 
This plugin how-to:
 
 
 Place caret on step in *.story file you want to generate 
 Press Alt+Enter 
 Select "Generate BDD Step"  Go to file you want your step definition to be placed into and paste ready step definition from standard clipboard (Ctrl+V) 
 Or 
 Select "Generate BDD Step into class" In the dialog select class to insert bdd step into and press "Select"(Enter) Alternatively, click "Select and navigate" (Alt+Enter) to jump to the inserted method  
 Enjoy:) 
 
 
Note:
 This plugin supports automatic parameter extraction. Parameters use the mechanism of Jbehave parameter injection (http://jbehave.org/reference/latest/parameter-injection.html)
 So far here is the list of parameters supported:
 
 
 String - parameters for parametrized scenarios (in &lt;&gt; brackets) 
 Double 
 Integer (confusion between int and long was not tested) 
 Boolean 
 Examples tables
      '';
    };
  }) {};

  jedi-devtools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jedi-DevTools";
    plugname = "Jedi DevTools";
    plugid = "com.bytedance.jedi.jdt";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12628/72720/jedi-devtools-1.0.8.zip";
      sha256 = "11jin7qyqncdvih33mq32314fspqlk5yyi8d3hx0vxsx5ljh0060";
      name = "Jedi-DevTools-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bytedance.com";
      license = lib.licenses.mit;
      description = ''
        Jedi DevTools is set of debug tools for app which developed with jedi-framework.
        JDT helps developers to view any changes of JediViewModel 、DataSource， and it has more useful features 
        with any question call sunjingkai.zearot@bytedance.com
      '';
    };
  }) {};

  jeka = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jeka";
    plugname = "Jeka";
    plugid = "dev.jeka.ide.intellij";
    version = "0.25.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13489/97890/jeka-ide-intellij-0.25.0.zip";
      sha256 = "145mg9ayxl98rvmffry5bzshvs711wi0r4vq46qdrj6s49hckj46";
      name = "Jeka-0.25.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jeka.dev";
      license = lib.licenses.asl20;
      description = ''
        Integrates with Jeka Build Tool by providing :
      
        Scaffolding capabilities to create Jeka projects from scratch
        Synchronize Intellij module dependencies on Jeka definition
        Run/Debug Jeka methods from Java editor
      
      More information at Git Page
      '';
    };
  }) {};

  jelastic-cloud-platform-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jelastic-Cloud-Platform-Integration";
    plugname = "Jelastic Cloud Platform Integration";
    plugid = "Jelastic Cloud Platform Integration";
    version = "1.3.9.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7139/37201/jelastic_idea_plugin.zip";
      sha256 = "0yvpbkzll7lz5jb693c149jpq3yszrpcyi85dgq1v9d5l1h0xds0";
      name = "Jelastic-Cloud-Platform-Integration-1.3.9.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/?idea&id=7139";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7139/license.txt";
        free = false;
      };
      description = ''
        Rate plugin | Free trial | Docs 
 
Jelastic is the Public and Private 
PaaS for Java, PHP, Node.JS, Ruby, Python and Docker apps; available from 50+ datacenters around the Globe. 
 The following Java application servers can be instantly provisioned in the Cloud: 
 
 Tomcat 6, 7, 8, 9; TomEE 7 
 GlassFish 3.1, 4.1 
 JBoss 7.1, Wildfly 8, 9, 10 
 Jetty 6, 8, 9 
 Spring Boot, Dropwizard and any Java CLI application 
 And databases: 
 
  MySQL, MariaDB, PostgreSQL  
  MongoDB, Cassandra, Redis, Neo4J, OrientDB, CouchDB  
 
Sign-up for a free 14-day trial or free tier at 
http://jelastic.com, set your credentials in Preferences/Tools/Jelastic PaaS, and you will be able to manage your Jelastic environments, deploy applications in the cloud, get log files, and perform other operations right within your favorite IDE.   
 Usage manual: 
https://docs.jelastic.com/idea-plugin 
 See our video tutorial 
https://youtu.be/6i73wWak1Oc 
 Contact us about plug-in: 
plugins@jelastic.com
      '';
    };
  }) {};

  jenkins-control-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jenkins-Control-Plugin";
    plugname = "Jenkins Control Plugin";
    plugid = "Jenkins Control Plugin";
    version = "0.13.10-2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6110/103294/jenkins-control-plugin-0.13.10-2020.3.zip";
      sha256 = "0zhri58msri9xgndzf1x3gzwdd9zqkdkmcrl9ibi2g2qlckn9qc3";
      name = "Jenkins-Control-Plugin-0.13.10-2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MCMicS/jenkins-control-plugin/issues";
      license = lib.licenses.asl20;
      description = ''
        Integrates Jenkins in IntelliJ

Features

    View Jobs
    Trigger Jobs
    Show Log for Job (including running)
    Show Job Result as JUnit View
    Multibranch support
    Notifications: Settings -&gt; Appearance -&gt; Notifications -&gt; Jenkins Notifications
      '';
    };
  }) {};

  jenkins-pipeline-linter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jenkins-Pipeline-Linter";
    plugname = "Jenkins Pipeline Linter";
    plugid = "com.github.mikesafonov.jenkins-linter-idea-plugin";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15699/106578/jenkins-linter-idea-plugin-0.1.0.zip";
      sha256 = "1wsc2agcamb5jf9sqnwx22a8b48h5ss1nz4h9l5g6zw5f04p599l";
      name = "Jenkins-Pipeline-Linter-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MikeSafonov";
      license = lib.licenses.asl20;
      description = ''
        jenkins-linter-idea-plugin is an Intellij Idea plugin to validate Jenkinsfiles by 
the Pipeline Linter of a Jenkins server.


Features

Supports declarative pipeline onlyHTTP linter integrationLinting errors highlighting  

Installation

The plugin can be installed with Settings | Plugins | Marketplace and searching for Jenkins Pipeline Linter.

Settings

Settings for the plugin can be found under Settings | Tools | Jenkins Linter.



Usage

Configure Jenkins server connection via plugin settings.Open context menu on file and click Validate by Jenkins Linter
      '';
    };
  }) {};

  jetbrains-internal-authentication = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JetBrains-Internal-Authentication";
    plugname = "JetBrains Internal Authentication";
    plugid = "jetbrains.team.auth";
    version = "211.1027";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14567/101966/space-auth-211.1027.zip";
      sha256 = "072kaw4fjbmamx10mkvlrqiywmijdnlwscpla67d1p833n8w859a";
      name = "JetBrains-Internal-Authentication-211.1027.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        There are internal JetBrains services, which require authentication:
      
        Shared Indexes for Projects
        JPS Caches
      
    

    
    

    
      The plugin maintains the authentication with jetbrains.team
      via OAuth2 protocol and allows our internal services work without VPN.
    

    
    

    For more details, please aks Eugene Petrenko or Ilya Shulgin
    
    
    Sorry, but this plugin is for JetBrains internal use only.
      '';
    };
  }) {};

  jetstyle = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JetStyle";
    plugname = "JetStyle";
    plugid = "JetStyle";
    version = "0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/134/587/JetStyle_587.zip";
      sha256 = "0csgp1234sk4zrnmp7dsfsh9d9k3nnik90b2j7rcl6dr5p4rjd7b";
      name = "JetStyle-0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://jetstyle.sourceforge.net/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/license-1.1";
        free = false;
      };
      description = ''
        Checkstyle Plugin for IntelliJ IDEA
      '';
    };
  }) {};

  jibx-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JiBX-Idea-Plugin";
    plugname = "JiBX Idea Plugin";
    plugid = "com.adamweigold.idea-plugin-jibx";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7443/19962/idea-plugin-jibx.zip";
      sha256 = "18b4qx6xlj2gwz6krnprprhvdrihznnmr0vax0cdhl9zfkmnrc1l";
      name = "JiBX-Idea-Plugin-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aweigold/idea-plugin-jibx";
      license = lib.licenses.asl20;
      description = ''
        Provides JiBX Binding support for Java language  
 To configure version 0.2, you must place all your jibx bindings in a folder called &quot;jibx&quot; in your module's root. Files that are not jibx bindings can not exist in this directory. You must also have jibx configured as a dependency of your module, as it will be used for the actual compilation (not the version included with this plugin).  
 Please contact me via e-mail or github for questions, feature requests, bugs, etc.  
 Future releases will include: 
 
 Configuration of compilation verbosity logging 
 Configurable (or scannable) jibx binding file location 
 Integration of other JiBX 'extras' in the IDE 
 Integration of JiBX validation with Idea's validation 
 Unit tests for plugin's build 
 Want others? Send requests.
      '';
    };
  }) {};

  jindent---source-code-formatter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jindent---Source-Code-Formatter";
    plugname = "Jindent - Source Code Formatter";
    plugid = "jindent.plugin.intellijidea";
    version = "5.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8309/49454/Jindent-IntelliJ-IDEA.zip";
      sha256 = "11ll3jh96mwfyxzwwwbvck934fr66j54vs9s8zcb4ghjhivpa3yv";
      name = "Jindent---Source-Code-Formatter-5.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jindent.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.newforms-tech.com/products/jindent/license";
        free = false;
      };
      description = ''
        Jindent is a powerful source code formatter for Java which empowers you to transform any foreign Java source code to meet your preferred coding style or any common Java code convention.

        Furthermore Jindent can format, generate and complete Javadoc comments on demand.
      '';
    };
  }) {};

  jira-browser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jira-Browser";
    plugname = "Jira Browser";
    plugid = "Jira Browser";
    version = "0.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/230/5160/Jira_Browser_5160.zip";
      sha256 = "1dgdcxqa16fhfi08d8xdzva7a2bjghi4yqkwffhn2jmqnbfcxnl1";
      name = "Jira-Browser-0.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The Jira Issue Browser plugin integrates the Atlassian Jira ( http://www.atlassian.com ) issue tracking
        system into the IntelliJ IDEA development environment. The plugin provides quick access to assigned and
        outstanding issues and the ability to annotate classes/methods worked on whilst developing against an issue.
        The plugin also provides the ability to create, comment, and resolve issues direct fromm the IntelliJ
        environment.
      '';
    };
  }) {};

  jmix = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jmix";
    plugname = "Jmix";
    plugid = "io.jmix.studio";
    version = "0.2.1-202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14340/106607/jmix-studio-0.2.1-202.zip";
      sha256 = "05pfmm4lv0qr0bi6k2m70g15qq0zy3ifnwdj5ccn8x6pwrs981zp";
      name = "Jmix-0.2.1-202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.cuba-platform.com/commercial-software-license/";
        free = false;
      };
      description = ''
        Supports development of applications using Jmix framework.
      '';
    };
  }) {};

  jms-messenger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jms-messenger";
    plugname = "Jms messenger";
    plugid = "jms-messenger";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10949/104592/jms-messenger-1.5.0.zip";
      sha256 = "1kmjk4cwgk9mnv9ywd2i6zmna1wvzfkzva5qk3kikrg486liz358";
      name = "Jms-messenger-1.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/klyashko/jms-messenger";
      license = lib.licenses.asl20;
      description = ''
        Description:
This is a plugin for providing jms support.
Plugin supports:

 browsing messages
 deleting messages
 sending messages

Requirements:

 Jdk 1.8 or higher
 Version of ide 2016 or higher

Usages:
 Designed to be used for development or testing purposes
Supported jms providers:

 Wildfly 10.x.x or higher (Artemis)
 Artemis (via HTTP or TCP)
 ActiveMq (via TCP or SSL)
 Wildfly 9.x.x (HornetQ)
 HornetQ (via HTTP)
 RabbitMQ (via TCP)
 Kafka (via TCP)

Limitation:

 Only sending messages is supported for kafka.
 Only text messages may be send or browse.
 Authorization is not supported for kafka.

Suggestions and bug reports:
 In case of finding bug or having a suggestion about new features or supported providers you can open a ticket on
 Github or contact me directly.
      '';
    };
  }) {};

  joda-beans-code-folding = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Joda-Beans-Code-Folding";
    plugname = "Joda Beans Code Folding";
    plugid = "net.cjkent.jodabeans.folding";
    version = "0.1";
    src = fetchurl {
      url = "https://github.com/cjkent/jodabeansfolding/blob/master/jodabeansfolding.jar?raw=true";
      sha256 = "07m3p4c2h1mzp9dr41bbxd01vmlfw1kk071xrm2v7an4mrivala9";
      name = "Joda-Beans-Code-Folding-0.1.jar?raw=true";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cjkent/jodabeansfolding";
      license = lib.licenses.asl20;
      description = ''
        Provides folding for code generated by Joda Beans.
      '';
    };
  }) {};

  jodd-props-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Jodd-Props-Support";
    plugname = "Jodd Props Support";
    plugid = "org.jodd.idea.props";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5984/11829/jodd-props-idea-plugin.jar";
      sha256 = "07dn49dg7h9v0q6lakyqw8wykgpdzprzwq5c24j9s01vrm4ssbww";
      name = "Jodd-Props-Support-0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://jodd.org/doc/props.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://jodd.org/license.html";
        free = false;
      };
      description = ''
        Enables editing of Jodd props files. Features: 
 
 Highlighting keys and values 
 Highlight profiles in keys 
 Highlight macros in values 
 Customizable highlighting colors 
 Code folding for section blocks 
 Triplequote multiline values
      '';
    };
  }) {};

  joker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Joker";
    plugname = "Joker";
    plugid = "com.joker.intellij.plugin";
    version = "0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11429/74059/joker.zip";
      sha256 = "17gpk9b3jfid7ymq39klqnfxm98fy1rpifhz4k6vz31p2cz6vmjq";
      name = "Joker-0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lijian79/JokerIntellijPlugin";
      license = lib.licenses.asl20;
      description = ''
        English
      Convenient development
      
      中文
      方便开发
      
      directions for use 使用说明
      '';
    };
  }) {};

  jonnyzzz-dependencies = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jonnyzzz-Dependencies";
    plugname = "Jonnyzzz Dependencies";
    plugid = "com.eugenePetrenko.idea.dependencies";
    version = "1.0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7222/16241/jonnyzzz.dependencies.zip";
      sha256 = "1hivvdw7hmnam3g1j1mzcb07aznl8z545dscin9asw7c6cqy6kwg";
      name = "Jonnyzzz-Dependencies-1.0.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.jonnyzzz.name";
      license = lib.licenses.asl20;
      description = ''
        This plugin provide an action to analyze project/modules for unused dependencies
      '';
    };
  }) {};

  jpa-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jpa-Support";
    plugname = "Jpa Support";
    plugid = "com.ifengxue.plugin.jpa-support";
    version = "2.0.5-EAP";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10707/108494/Jpa_Support-2.0.5-EAP.zip";
      sha256 = "0kwad1rnrq3crn1pigsmrh3n89342hdmccf0q7igqg8c714pj4rz";
      name = "Jpa-Support-2.0.5-EAP.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/carter-ya/idea-plugin-jpa-support";
      license = lib.licenses.asl20;
      description = ''
        Generate entity/repository class for JPA/Lombok/Spring Data JPA.
      Support internationalization. Currently supported languages are English, 简体中文.
      Support all databases.
      Support generate source code from Database plugin
      Support custom generate code template
      Support custom db type mapping
      Mac: Command + N or Windows: Alt + Insert and select Jpa Entities
      README
      '';
    };
  }) {};

  jpos-customer-change = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jpos-Customer-Change";
    plugname = "Jpos Customer Change";
    plugid = "com.hd123.plugin.id";
    version = "2.28";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9694/93212/idea-jpos-plugin-2.28.zip";
      sha256 = "0ac21c12cajssjg2vb1pd8451ai6n625bd6n9ib3khc6sgqgz4x6";
      name = "Jpos-Customer-Change-2.28.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.hd123.com/";
      license = lib.licenses.asl20;
      description = ''
        中文
JPOS工程切换插件。上海海鼎信息工程股份有限公司内部使用
配置项：
setting: Settings - Other Settings - jpos setting

key map:
ctrl + alt + C: run模式启动客户切换
ctrl + alt + j: debug模式启动jpos
ctrl + alt + b: debug启动boadmin



English
JPOS customer change tools for Shanghai heading company
How to Use：
setting: Settings - Other Settings - jpos setting

key map:
ctrl + alt + C: for Change Customer in Run Model
ctrl + alt + j: for Run Jpos in Debug Model
ctrl + alt + b: for Run JposBoadmin in Debug Model
      '';
    };
  }) {};

  jschilicat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JsChilicat";
    plugname = "JsChilicat";
    plugid = "JsChilicat";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6189/9818/JsChilicat_9818.zip";
      sha256 = "11ij8787sgg863wxqkys8b8g2mcqldi279mrmndwdivpnq116wka";
      name = "JsChilicat-1.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chilicat/JsChilicat";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/chilicat/JsChilicat";
        free = false;
      };
      description = ''
        JsChilicat is a javascript test framework integration for intellij idea. JsChilicat is based on Rhino and EnvJs
        for headless JavaScript testing.
        As testframework is QUnit in use. The plugin will add a new Run configuration JsChilicat which let you configure
        a source and a test directory.

        It will present the test results in a JUnit style.

        Added local server for Ajax tests. JsChilicate supports now to write a server interface completely in
        java script. It allows the user to write a mock server for AJAX api tests in a easy way.
        Currently is it possible to receive Forms and JSON objects ans to send JSON objects back.
        Please download the latest jsChilicat release bundle form the project page.

        Feedback is welcome.
      '';
    };
  }) {};

  jsgf = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jsgf";
    plugname = "Jsgf";
    plugid = "com.asherbernardi.jsgfplugin";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14099/108411/jsgfplugin-1.0.4.zip";
      sha256 = "01vsj58j57zdyd4b7rqmzxd5ijickxi8hr2pj1n5k2hdh3rcwr5q";
      name = "Jsgf-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/asherbernardi/jsgfplugin";
      license = lib.licenses.asl20;
      description = ''
        This is a plugin for all JetBrains IDEs to support the JSGF file format.

     syntax highlighting
     syntax error checking
     semantic error checking
     go to declaration
     find usages
     automatic renaming
     parenthesis, bracket, brace, and angle bracket matching
     search for symbol includes all declared rule names
     view structure
     code completion
      '';
    };
  }) {};

  json-formatter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Json-Formatter";
    plugname = "Json Formatter";
    plugid = "cn.jxzhang.plugin.json-formatter";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13931/104440/json-formatter-1.3.zip";
      sha256 = "12sd3b6a3p9gyc1bfgirym7dy0rqgmb5gnarfn7j2gckwbrx23n7";
      name = "Json-Formatter-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chocolate213/json-formatter";
      license = lib.licenses.mit;
      description = ''
        Format JSON, Minify JSON, Verify JSON as if you editing a file with .json suffix.
            
            Usage: Paste JSON string into editor, and press Reformat Code (Ctrl + Alt + L in windows) to format code as if you editing a file with .json suffix.
            
            The plugin panel will appear on the right side of the window after installed, and you don't have to restart the IDE. make sure that you have enabled the "Tool Window Bars" in Edit -&gt; Appearance -&gt; Tool Window Bars.
      '';
    };
  }) {};

  json-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Json-Helper";
    plugname = "Json Helper";
    plugid = "com.mroche.JsonHelper";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13873/105181/JsonHelper-1.1.2.zip";
      sha256 = "0sr33mqf5iaab6k4fm4sfgj0mp4i861jhlml2rfyilwhj27maysa";
      name = "Json-Helper-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Easy to use toolwindow that can perform JSON string manipulations directly in your IDE rather than finding websites to do it for you.
git
        This plugin will:
        
            Prettify your ugly json
            Uglify your pretty json
            Escape your json
            De-escape your json
            Support JMES json path search. See here for examples
            Experimental support for variable declaration parsing. E.g. public final String json = "{\"key\":\"value\"}"; becomes raw prettified json
            Json inspection to allow expansion of nested json. Also works in json scratch files
      '';
    };
  }) {};

  json-master = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Json-Master";
    plugname = "Json Master";
    plugid = "me.bytebeats.jsonmstr";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15218/101214/JsonMaster-1.1.1.jar";
      sha256 = "1ssksapcbnqd3nnhqpkaz2yksfg5lkick0pzz0adls48v0spb4vh";
      name = "Json-Master-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bytebeats";
      license = lib.licenses.asl20;
      description = ''
        Weary of converting JSON into Xml/CVS/Yaml in a browser?
    Interested in generating a Java/Kotlin/Dart Class from JSON?
    Tired of validating and formatting JSON in a browser?
    Why don't you install Json Master and do the job inside the IDEA with offline support?
    Json Master is a lightweight plugin for validating JSON and formatting JSON in Xml/CVS/Yaml style and generating a Java/Kotlin/Dart Class from a JSON strings.
    Try install it and spread the word :)
      '';
    };
  }) {};

  json-parser = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Json-Parser";
    plugname = "Json Parser";
    plugid = "com.godwin.json.parser";
    version = "1.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10650/60175/json1.4.2.jar";
      sha256 = "1zl74mz32n50arr1myrjccdgg9ywh6zvx2ak4qjym6w7v8i760m7";
      name = "Json-Parser-1.4.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/godwinjoseph/JSONParser";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/godwinjoseph/jsonparser/blob/master/license";
        free = false;
      };
      description = ''
        Tired of opening the browser for formatting and validating JSON?
Why don't you install JSON Parser and do it inside IDE with offline support?
JSON Parser is a lightweight plugin for validating and formatting JSON strings.
Install and spread the word :)
      '';
    };
  }) {};

  json2dart = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Json2Dart";
    plugname = "Json2Dart";
    plugid = "com.azoft.json2dart";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11460/59278/json2dart.zip";
      sha256 = "1k98yaz498hg8c5nvynnv7y8sdkcjh59ykx1ry2yfchqjjnp3yan";
      name = "Json2Dart-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.azoft.com/";
      license = lib.licenses.asl20;
      description = ''
        Plugin for dart data classes generating from a json for a flutter project.
      '';
    };
  }) {};

  json2dart-safe-convert = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Json2Dart-Safe-Convert";
    plugname = "Json2Dart Safe Convert";
    plugid = "com.lake.json2dart";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14921/95232/json2dart.zip";
      sha256 = "0j3wx1j8drw1ddwbqvz5fmvwmmnf94q9320pji3jr6v77i5qbisp";
      name = "Json2Dart-Safe-Convert-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/windows7lake";
      license = lib.licenses.asl20;
      description = ''
        Flutter plugin use for parsing json to dart class with safe type convert. 

        It will generate a dart file named "safe_convert.dart" to ensure dart object can be converted to correct type, if failed, it will get a default value. 

        When you need a `int` type, but the server offer you a `String` type, it will auto convert `String` to `int` and make sure that, when convert failed, it has a default value such as '0'.
      '';
    };
  }) {};

  json2pojo = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Json2Pojo";
    plugname = "Json2Pojo";
    plugid = "net.hexar.json2pojo";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8533/45807/Json2Pojo.zip";
      sha256 = "1y346z9g96ikj1n5jg4i24n3kc75w4114cby835ni6l4z9cil5mk";
      name = "Json2Pojo-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/HexarA/Json2Pojo";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Allows for easy creation of Java POJOs from JSON, with GSON annotations and accessors. Once installed, just right-click on the destination package and choose "New -&gt; Generate POJOs from JSON", then enter in your root class name and source JSON text. 

 
Source code available on GitHub.
      '';
    };
  }) {};

  json2json_serializable = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Json2json_serializable";
    plugname = "Json2json_serializable";
    plugid = "org.liujing.plugin.json_serializable_format";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12755/68256/json_serializable.jar";
      sha256 = "0k6jacd8wkl77gw6gfldrqpfgp8hq63nl4fw02pmx6i362mw9kvz";
      name = "Json2json_serializable-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/liujingtech";
      license = lib.licenses.asl20;
      description = ''
        🎉Convert json for the json_serializable of flutter/dart.

为 flutter/dart 的 json_serializable 转换 json。中文介绍

how to use

    open *.dart file
    click menu -&gt; code -&gt; JsonToDartClass.
    input json and click ok.
    open Terminal(Windows is CMD) and enter:flutter pub run build_runner build
    done.

Shortcut:

macOS: Command + option + N
Windows: Control + alt + N


Why json_serializable
It can be configured with annotations, and more annotations will be provided by the google dart team. for more annotations please visit:json_serializable

Feedback
If you have any questions or bugs, you can use feedback. Thank you for your contribution to this project.

This project is not yet ready for open source, but we will open source after feature stable.
      '';
    };
  }) {};

  jsonentitygenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JsonEntityGenerator";
    plugname = "JsonEntityGenerator";
    plugid = "com.wkl.idea.plugin.json2entity";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11592/54524/json2entity-0.2.jar";
      sha256 = "0ycapr4df3zryvgw9jarvbcm4hrk75sn3m96ps0flqd9w9zdcxvh";
      name = "JsonEntityGenerator-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wangkunlin/JsonEntityGenerator";
      license = lib.licenses.asl20;
      description = ''
        An Android Studio Plugin to generate java file from json
      '';
    };
  }) {};

  jsonserializable = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JsonSerializable";
    plugname = "JsonSerializable";
    plugid = "com.github.florent37.plugin.jsonserializable";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12860/67089/JsonSerializable-Plugin.zip";
      sha256 = "0jckdg590kg9xlac3ihggydpfgy0ciiqf45hm6p5d6dlywik6iw7";
      name = "JsonSerializable-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/florent37/JsonSerializable-Plugin/tree/master";
      license = lib.licenses.asl20;
      description = ''
        Generates the code that JsonSerializable need to generate the .g.dart files
      
      1. Open a .dart file
      2. Alt + N (on mac) / Shift + Insert (Windows)
      3. Select "Generate JsonSerializable"

      it will insert
      
        the json_annotation import
        the @JsonSerializable annotation
        the fromJson method
        the toJson method
      

      

      
        
      
      
      

      Generate the .g.dart files using build_runner :
      https://dart.dev/tools/build_runner

      
      
      Don't forget to setup JsonSerializable into your project :
      https://pub.dev/packages/json_serializable
      
      

      Add into your pubspec.yaml

      
      dependencies:
        &nbsp;&nbsp;json_annotation: ^3.1.0
      
      dev_dependencies:
        &nbsp;&nbsp;build_runner: ^1.0.0
        &nbsp;&nbsp;json_serializable: ^3.1.0
      '';
    };
  }) {};

  jsontodart-json-to-dart = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JsonToDart-JSON-To-Dart";
    plugname = "JsonToDart (JSON To Dart)";
    plugid = "com.ankit.mahadik.json.dart.class";
    version = "2.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12562/101236/JsonToDart__JSON_To_Dart_-2.7.zip";
      sha256 = "1l5wyhlcca9vzynzfnn7di8zlr2n87f10l4sn1h6za6swi8vy5z1";
      name = "JsonToDart-JSON-To-Dart-2.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Plugin quickly generates Dart Model classes from JSON text.

       It can find inner classes in nested JSON and create classes in single file.

       Short cut key  to use ALT + Shift + D on Windows or Option + Shift + D on Mac
      Features:
      
        Generating Dart data class from any JSON string or any URLs that returns a JSON string as response
        Generating Dart data class as inner classes
        Generating different data classes for each nested object
        Formatting any legal JSON string
        Generates comments
        Private fields feature with option to make it enable/disable
        Support Loading JSON From Paster/Local File/Http URL
      

        If you have any questions or suggestions let me know
        mahadik72@gmail.com
      '';
    };
  }) {};

  jsontodartbean = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JsonToDartBean";
    plugname = "JsonToDartBean";
    plugid = "com.knowledge.mnlin.JsonToDartBean";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12483/63255/JsonToDartBean.zip";
      sha256 = "18k5siwwnsca528kmp2wpncrn8fwrdyzwmi0qyl1qi19l8647sl5";
      name = "JsonToDartBean-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lovingning";
      license = lib.licenses.asl20;
      description = ''
        create bean with json for dart.
      '';
    };
  }) {};

  jsontots = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JsonToTs";
    plugname = "JsonToTs";
    plugid = "com.looper.plugin.id";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15553/106088/Json2Type.zip";
      sha256 = "0702l4868qwl80vhri01sbmzdxbmplnf3zsfh5vi3rvabxq5lb31";
      name = "JsonToTs-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Just copy the json returned by Http and other interfaces then automatically convert it into TypeScript type definitions
  
  只需要复制一下Http等接口返回的json然后一键转换成TypeScript的类型定义
      '';
    };
  }) {};

  jsontotypescript = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "JsonToTypeScript";
    plugname = "JsonToTypeScript";
    plugid = "com.rmondjone.jsontotypescript";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14393/104361/JsonToTypeScript.jar";
      sha256 = "195wqkrhvx09klf3s09zkh4zgdwlvi5ir3wwrfh1cgb1ryp69iq7";
      name = "JsonToTypeScript-1.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/RmondJone";
      license = lib.licenses.asl20;
      description = ''
        Json to TypeScript Class object generation plug-in
        Author: Guo Hanlin
        Instructions: Alt+T
        Plugin GitHub address:https://github.com/RmondJone/JsonToTypeScript

        Supports @Type type conversion of class-transformer
        Refer to the introduction of class-transformer for details:https://www.npmjs.com/package/class-transformer
      '';
    };
  }) {};

  jsonnet = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Jsonnet";
    plugname = "Jsonnet";
    plugid = "com.databricks";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10852/79041/intellij-jsonnet.jar";
      sha256 = "0yqvink0ijlq2pmmgasvczkkyv4qbxp65kwwm1a4wcf1354h1aiv";
      name = "Jsonnet-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://databricks.com/";
      license = lib.licenses.asl20;
      description = ''
        A plugin to support the Jsonnet JSON templating language (https://jsonnet.org/)
      '';
    };
  }) {};

  julia = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Julia";
    plugname = "Julia";
    plugid = "org.ice1000.julia";
    version = "0.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10413/73469/julia-intellij-0.4.1.zip";
      sha256 = "0rkvlsqdcscyw9100b07sswwaackl52r4kkks8l5rzpw93kwsq6z";
      name = "Julia-0.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ice1000.org";
      license = lib.licenses.gpl3Only;
      description = ''
        Julia language support.


	Chinese video instructions: av20155813
	English video instructions: Click to visit


You're encouraged to contribute to the plugin in any form if you've found any issues or missing functionality that
you'd want to see. Check out CONTRIBUTING
to learn how to setup the project and contributing guidelines.

All your issues/pull requests will be replied very quickly.

Functions provided:

	SDK and module management
	A GUI package manager
	Documentation view
	Syntax highlight (including version number parsing)
	Language injection, automatic regular expression injection and doc string markdown injection (works only when either Markdown or MarkdownNavigator is installed)
	Run configuration and code execution
	File templates
	Completions, live templates
	Jump to definition, find usages, parameter name hints
	Rename refactoring, doc string generation
	Bread crumbs, structure view, Try Evaluate
	Special input for LaTeX style unicode character
	DocumentFormat.jl integration (deprecated)
	Error reporter
	In-IDE REPL, experimental debugger and Sci-Mode


What you'll see in the future:

	Formatter
	Better debugger


Please don't downvote our plugin for not having one of the features above, because we're just working on it.

Maintainers:

	ice1000
	zxj5470
	hoshinotented
	hexadecimaaal
      '';
    };
  }) {};

  jump = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jump";
    plugname = "Jump";
    plugid = "com.gitlab.lae.intellij.jump";
    version = "0.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12662/99948/intellij-jump-0.2.2.zip";
      sha256 = "1420phv5yxpa00b83qp4i0w7krd5vfyshgqdd3b60pm434dzk6yz";
      name = "Jump-0.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/laech/intellij-jump";
      license = lib.licenses.asl20;
      description = ''
        Jump to any visible location of any visible editor quickly, using the keyboard.

    This package provides a single action Jump to Char, which you can assign a
    keyboard shortcut to, under keymap settings -&gt; Plug-ins -&gt; Jump.
      '';
    };
  }) {};

  jump-to-line = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jump-to-Line";
    plugname = "Jump to Line";
    plugid = "org.jetbrains.jumpToLine";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14877/98811/JumpToLine.zip";
      sha256 = "07b93gvn1k56s8xqpsd4ap8w357nlzlfcqk5czmlzzyprcwzrafc";
      name = "Jump-to-Line-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/igoriakovlev/JumpToLine";
      license = lib.licenses.asl20;
      description = ''
        The Jump to Line plugin allows you to get to any line of code while debugging. Drag and drop a yellow arrow to the desired place in the gutter, and it will put an execution point there. In contrast to stepping, the plugin enables you to start running your program from that point without executing the preceding code.
    
    Jumping to lines is possible both forward and backward within a function. Jump to line highlights the lines suitable for jumps in green. Making changes to some lines may break the workflow. That’s why the IDE will highlight any risky lines in yellow. You can still move to them, but you should first consider the possible inconsistencies that may result.
      '';
    };
  }) {};

  justcode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "JustCode";
    plugname = "JustCode";
    plugid = "com.justcode.employer.custom";
    version = "6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12979/71339/jc_plugin.zip";
      sha256 = "0yqgiw8piv2rzc58bb7gz1vc8glf66fxjj5r1g0yd293s4kd3zyk";
      name = "JustCode-6.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.justcode.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.justcode.com";
        free = false;
      };
      description = ''
        JustCode Custom TakeHome Test Creator
      Use this plugin to create Custom TakeHome Tests as per your requirements
      
      
      The way to Hire Excellence
      '';
    };
  }) {};

  justifier = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Justifier";
    plugname = "Justifier";
    plugid = "net.leppik.intellij.plugin.justifier";
    version = "0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7490/16341/Justify.jar";
      sha256 = "01gc0wlx0gfzsifnrcns49hwh295s7gc3vcwb6npwm6g76dlzl3a";
      name = "Justifier-0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dleppik";
      license = lib.licenses.asl20;
      description = ''
        Left or right justify columns of selected text. This makes it easy to format repetitive lines of code into easy to read tables. 
This only works when indenting with spaces, not tabs. 
To use: 
 
  Select a rectangular block of text (alt-click and drag) 
  Choose Left Justify under the Edit menu. All the whitespace on the left is moved to the right. 
  Choose Right Justify under the Edit menu. All the whitespace on the right is moved to the left.
      '';
    };
  }) {};

  juventus-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Juventus-Progress-Bar";
    plugname = "Juventus Progress Bar";
    plugid = "juventus-progressbar";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13358/72606/JuventusProgressBar.jar";
      sha256 = "0rba2kiyywwjn3bribib4l6rb49gh74y0x2w5a0107jb2ss6llhh";
      name = "Juventus-Progress-Bar-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/edoardomistretta/JetBrainsProgressBar/tree/juventus";
      license = lib.licenses.bsd2;
      description = ''
        Juventus Football Club is an Italian professional football club based in Turin
      
      Juventus Progress Bar is based on the Nyan Progress Bar by Dmitry Batkovich
      '';
    };
  }) {};

  jvm-parameter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Jvm-Parameter";
    plugname = "Jvm Parameter";
    plugid = "io.github.newhoo.jvm-parameter";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13204/94131/jvm-parameter-intellij-plugin-1.0.1.zip";
      sha256 = "06x9rcr46y17fpf4pczbipz52m9xv2ahajw62rbcd0g2qrsd6y8k";
      name = "Jvm-Parameter-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/huzunrong/jvm-parameter-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        manage jvm parameter
    
    jvm参数管理
      '';
    };
  }) {};

  kannotator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "KAnnotator";
    plugname = "KAnnotator";
    plugid = "org.jetbrains.kannotator";
    version = "0.2.1205";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7205/14852/kannotator-plugin-0.2.1205.zip";
      sha256 = "1ay8425rlwmxwiwr8nldlhxl1fv76m1hfabkjz9vi2ccrbyq220h";
      name = "KAnnotator-0.2.1205.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://kotlinlang.org/";
      license = lib.licenses.asl20;
      description = ''
        Automatic inference of nullability and kotlin annotations from a set of jar files
      '';
    };
  }) {};

  kcoroutine = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KCoroutine";
    plugname = "KCoroutine";
    plugid = "com.github.apaunov.kcoroutine";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15217/100099/KCoroutine.jar";
      sha256 = "0grqybyqgri1fd31njxsjfivac0ls3y00383zarnamds9h07aif0";
      name = "KCoroutine-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/apaunov/KCoroutine";
      license = lib.licenses.asl20;
      description = ''
        A dark theme in Kotlin Coroutine style.
    
    Initial release
      '';
    };
  }) {};

  kdb-studio = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "KDB+-Studio";
    plugname = "KDB+ Studio";
    plugid = "org.kdb.studio";
    version = "1.1.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10894/103719/kdb-studio-plugin-1.1.12.zip";
      sha256 = "182hmcwbmawy4i48fdc43245kash0npapfgwbj62mhazxqfgsqf4";
      name = "KDB+-Studio-1.1.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/shupakabras/kdb-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.gnu.org/licenses/gpl.txt";
        free = false;
      };
      description = ''
        Open source IntelliJ IDEA plugin for sending queries to a q database, and showing the query results to the user.
      
      Based on open source "Studio for kdb+" application, described at https://code.kx.com/wiki/StudioForKdb+.
      
      Source code of this plugin is available at https://gitlab.com/shupakabras/kdb-intellij-plugin
      
      This plugin does not provide q/k4 language syntax highlighting/checking. If you need this functionality, you could use existent q plugin https://plugins.jetbrains.com/plugin/7925-q/
      '';
    };
  }) {};

  kde-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "KDE-Keymap";
    plugname = "KDE Keymap";
    plugid = "com.intellij.plugins.kdekeymap";
    version = "201.6251.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13091/80586/KDEKeymap.zip";
      sha256 = "0jwvrybiwjzw3pcmsl97p63h641w4289ndb9ja5q2zz4lj4a77br";
      name = "KDE-Keymap-201.6251.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        KDE keymap for all IntelliJ-based IDEs.
    Use this plugin if KDE keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  kdoc-clean-read = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KDoc-Clean-Read";
    plugname = "KDoc Clean Read";
    plugid = "com.github.ArtsiomCh.KDocCleanRead";
    version = "203.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11990/99771/KDocCleanRead.jar";
      sha256 = "1qbpykgdxihmrgn1x3h0w6cniibsll341aqyypxhf6zxw1jd35m6";
      name = "KDoc-Clean-Read-203.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/ArtsiomCh/KDocCleanRead";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=kunfmcfmatq4vlr3vtscjummua1nsmuw";
        free = false;
      };
      description = ''
        Making KDoc (Kotlin) comments more readable by:
        
           Text styles for value of tags: 
            
               `code` and "&nbsp;&nbsp;&nbsp;&nbsp;code" 
               _regular emphasis_ *regular emphasis* 
               __strong emphasis__ **strong emphasis** 
               [link name](http://...)
            
           Hiding(folding) brackets at some markdown tags:
            
               `code` -&gt; code ;
               _emphasis_ -&gt; emphasis ;
               **emphasis** -&gt; emphasis ;
               [link] -&gt; link ;
               [my github](http://github.com/ArtsiomCh) -&gt; my github(github.com)
            
           Tag and tag's value text styles are customisable at:
             Settings -&gt; Editor -&gt; Color Scheme -&gt; KDoc Clean Read.
      '';
    };
  }) {};

  kdoc-er---kotlin-doc-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KDoc-er---Kotlin-Doc-Generator";
    plugname = "KDoc-er - Kotlin Doc Generator";
    plugid = "com.godwin.kdocer";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14778/107856/KDoc-er-1.5.jar";
      sha256 = "05r9blnwpizwg7h7l1sz1zfg14j3i6a1gfsmdp79b9a8v2yq2bx5";
      name = "KDoc-er---Kotlin-Doc-Generator-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        KDoc-er
        Introducing A simple and lightweight KDoc generator.
        KDoc is a language used to document the Kotlin codes. And this plugin helps to generate smart KDoc for your project.  This plugin is very lightweight and efficient. for generating KDoc for Kotlin files.
        Install and spread the word :)
        What's New
        Version 1.0
        
        Support for Kotlin file, Class, function, extension function, and receivers
        Generate KDoc for all elements in a file
        Generate KDoc for a single element
        Remove KDoc for all elements in a file
        Remove KDoc for a single elements
        Type /** and tap enter, and the plugin will create KDoc for the particular element
        Simple access from Generate menu. Tap Alt+ Insert, there is KDocer submenu
        Also available on Code Format group in Code menu
        Settings page available- open settings and search KDoc-er
        Custom project level configuration
        
        Version 1.3
        
        Configuration page added
        Field and object support added
        Resolved bugs
        
        Version 1.4
        
        Plugin support added for version greater than 182/2018.2
        
        Version 1.5
        
        Resolved bugs
        
        You can read the Official document for familiarizing KDoc syntax
        Note
        Now, this plugin will not create KDoc HTML previews and additional files. This plugin is intended only for generating KDoc inside IDE terminal.
        For generating HTML document you can use the Dokka plugin available at Github.
      '';
    };
  }) {};

  kjump = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "KJump";
    plugname = "KJump";
    plugid = "com.werfad";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10149/67422/KJump.zip";
      sha256 = "0ahnca88p5blkwxihrr6y0zi4xafnbf3gyn720164vw9p218nhp9";
      name = "KJump-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/a690700752/KJump";
      license = lib.licenses.bsd3;
      description = ''
        A simplify plugin ported from vim-EasyMotion plugin for Intellij Platform IDE. And can be integrated with IdeaVim.
    
    Support character, word, line jump. There are no default activated shortcut.
    You can assign KJump activation shortcuts in Settings-&gt;Keymap-&gt;KJump menu, such as &lt;c-,&gt; &lt;c-;&gt; etc,
    or integrate with IdeaVim by add below section in ~/.ideavimrc:
    nmap &lt;leader&gt;&lt;leader&gt;s :action KJumpAction
    Github see more usage
      '';
    };
  }) {};

  kviewbind = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KViewBind";
    plugname = "KViewBind";
    plugid = "com.knowledge.mnlin.KViewBind";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12126/59784/KViewBind.jar";
      sha256 = "05lp7ba7s8dxja5fxjci9b7ic3193mqid8yy2xdsdzfj2h2b0r1h";
      name = "KViewBind-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lovingning";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/lovingning/KViewBind";
        free = false;
      };
      description = ''
        a plugin for view to set proxy.
      For the corresponding layout, variable names are automatically generated and method proxy is performed.
      For kotlin only.
      '';
    };
  }) {};

  kafkalytic = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kafkalytic";
    plugname = "Kafkalytic";
    plugid = "org.ermadan.kafkalytic";
    version = "0.9.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11946/96941/Kafkalytic-0.9.10.zip";
      sha256 = "15kmgrv2c05fdphxhig9nhkgzz95d7qysci7x3081ki2ahj2y5x1";
      name = "Kafkalytic-0.9.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ermadan/kafkalytic";
      license = lib.licenses.asl20;
      description = ''
        Kafka analysis tool:
        
        Multiple clusters support
        Topics management: create/delete/change partitions
        Display system topics
        Search topics with regexp
        Publish String/Byte serialized messages
        Bulk message generator with pattern
        Copy topic messages into another topic/cluster
        Delete messages from topic
        Search topic for specific pattern in key or value
        Consume messages with different strategies
            
                wait for messages within specified poll time
                read latest messages
                read messages from specific partition with specific offset
            
        
        

        bug tracker: https://github.com/ermadan/kafkalytic/issues
      '';
    };
  }) {};

  kandavu = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kandavu";
    plugname = "Kandavu";
    plugid = "dev.kandavu.intellij-plugin";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15356/101986/kandavu-jetbrains-plugin-0.1.2.zip";
      sha256 = "003yjqvw2zpcsmr12w08d9kvq9pwcibarwrjrcy78p1zqhxpip9q";
      name = "Kandavu-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.mysticcoders.com";
      license = lib.licenses.mit;
      description = ''
        The plugin enables integration with the kandavu.dev snapshots feature. Enabling this plugin gives
    you a key command and a button to toggle for adding a status to your account on Kandavu.dev.

    
    Setting up the plugin requires visiting your kandavu profile to
    retrieve a generated personal access token to put into the settings panel for the plugin.
    

    The following is how a status can be added to your account from the Jetbrains environment:
    
      Click on the orange "k" in the tools menu and enter status in the popup
      Use the key command for your OS Cmd+Option+K for Mac, and Ctrl+Alt+K for Windows/Linux
      '';
    };
  }) {};

  katakatataaaaaaan = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KataKataTaaaaaaan";
    plugname = "KataKataTaaaaaaan";
    plugid = "com.github.syuchan1005.katakatataaaaaaan";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10317/49117/KataKataTaaaaaaan.jar";
      sha256 = "0aynn383prp5acgafrcd6j967w2ssccivkqgmfl2nkhjmd2hfjxk";
      name = "KataKataTaaaaaaan-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/syu_chan_1005";
      license = lib.licenses.mit;
      description = ''
        This plugin is IntelliJ IDEA version of article.

      How to use?
      Hit a keyboard! (in Editor)
      '';
    };
  }) {};

  kenshoo-persistence-layer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kenshoo-Persistence-Layer";
    plugname = "Kenshoo Persistence Layer";
    plugid = "com.kenshoo.pl-intellij-plugin";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15212/108059/pl-intellij-plugin-0.6.zip";
      sha256 = "0db911hlfr26an4nnlqkcj3jxc4i2z7c6ahyb4qjr0bqf0gy7vfc";
      name = "Kenshoo-Persistence-Layer-0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kenshoo/pl-intellij";
      license = lib.licenses.asl20;
      description = ''
        Creation wizard for Persistence-Layer entities.
    
    PL is a command pattern ORM (for Java+MySQL) supporting business flow rules, which is highly optimized
    for performance. This plugin is compatible with version 0.1.x of PL.
    
    
    This Plugin adds a "New... PL Entity" action to pop out a wizard dialog where you can declare
    the entity fields, and after clicking "OK", all the necessary PL code shall be generated
    (including the JOOQ table).
      '';
    };
  }) {};

  kerboscriptkos = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KerboScriptkOS";
    plugname = "KerboScript(kOS)";
    plugid = "kos-ksp.idea-plugin";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8130/80867/IDEA.jar";
      sha256 = "1j4z3ia78rc5qqpii77l5cyks9adwdy6i95mg0gkscv49w46zzwa";
      name = "KerboScriptkOS-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/KSP-KOS/EditorTools/tree/develop/IDEA";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin enables support for kOS KerboScript in IntelliJ IDEA IDE.
kOS version supported: 1.2.1
      '';
    };
  }) {};

  kevoree = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kevoree";
    plugname = "Kevoree";
    plugid = "org.kevoree.idea.plugin";
    version = "14";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7383/18365/org.kevoree.idea.plugin.zip";
      sha256 = "0cl71kbzylz2ak68pi5jnnsa8rcrciikfdlwnh0q6w1fqjp0vv4b";
      name = "Kevoree-14.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://kevoree.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Authors : Fouquet Francois, Gregory Nain The Kevoree Plugin provides several tools to help the development of components for Kevoree.
 - Wizards to create a Kevoree Project, Kevoree Components, Channels and Groups 
 - A wizards to create a KevScript file with its editor 
 - A runner to launch a Kevoree Runtime of any available version, that launches using your KevScript as base configuration.
      '';
    };
  }) {};

  kevoree-modeling-framework-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kevoree-Modeling-Framework-IDEA-plugin";
    plugname = "Kevoree Modeling Framework IDEA plugin";
    plugid = "org.kevoree.modeling.idea.plugin";
    version = "29";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7504/26776/org.kevoree.modeling.idea.zip";
      sha256 = "1b7wm4b0m5hvf4kcc7gygcin9qnam7nb0h7gk206r2krsrghc1vd";
      name = "Kevoree-Modeling-Framework-IDEA-plugin-29.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://kevoree.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Authors : Francois Fouquet, Gregory Nain Contributors : Thomas Hartmann, Assaad Moawad Development environment for modeling.
      '';
    };
  }) {};

  key-promoter-x = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Key-Promoter-X";
    plugname = "Key Promoter X";
    plugid = "Key Promoter X";
    version = "2020.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9792/99463/Key-Promoter-X-2020.2.2.zip";
      sha256 = "0dqa17128lmr7f1kr20zp0gdv28xn69f1aqvxjm9969gpj4i0chf";
      name = "Key-Promoter-X-2020.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/halirutan/IntelliJ-Key-Promoter-X";
      license = lib.licenses.bsd3;
      description = ''
        The Key Promoter X helps you to learn essential shortcuts while you are working.
When you use the mouse on a button inside the IDE, the Key Promoter X shows you the keyboard shortcut that you
should have used instead. This provides an easy way to learn how
to replace tedious mouse work with keyboard keys and helps to transition to a faster, mouse free development.
The Key Promoter X tool window shows you a hit-list of the mouse actions you use the most and directly provides you
with the shortcut you can use instead. For buttons that don't have a shortcut, the Key Promoter X prompts you with
the possibility to directly create one.


Sponsors



    CodeStream:


Request and perform code reviews from inside your IDE.
Review any code, even if it's a work-in-progress that hasn't been committed yet, and use jump-to-definition,
your favorite keybindings, and other IDE tools.
You
    can try it for free!


I'd also like to give a big thanks to
Daniel Babiak,
Stefan Hagen,
Joshua Lückers,
jlash13, and
Mark McCorkle
for sponsoring the Key Promoter X with ''$4 per
month. Additionally, I highly appreciate the support from 8 people who give ''$2/month and 21 others who committed to
''$1/month.



Become a GitHub Sponsor |
Repository |
Gitter Chat |
LinkedIn |
Twitch
      '';
    };
  }) {};

  key-promoter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Key-promoter";
    plugname = "Key promoter";
    plugid = "Key promoter";
    version = "1.0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4455/11324/Key_promoter_11324.jar";
      sha256 = "16q87yjaxcz1kbqa6l8bxdcg98079cbsjia4jd7w23s7n3991sf2";
      name = "Key-promoter-1.0.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/key-promoter/source/default/source";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/key-promoter/source/default/source";
        free = false;
      };
      description = ''
        Shows to user how easy he can make same action using only keyboard(menus and toolbar button mouse clicks initiates shortcut display)
      '';
    };
  }) {};

  keymap-nationalizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Keymap-Nationalizer";
    plugname = "Keymap Nationalizer";
    plugid = "com.dekonoplyov.KeymapNationalizer";
    version = "0.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14625/101052/KeymapNationalizer-0.2.4.zip";
      sha256 = "1rlms30apnychav9drpwj5kk0wsdmg7ggy56ln844aigjq7lscnq";
      name = "Keymap-Nationalizer-0.2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.asl20;
      description = ''
        Keymap nationalizer plugin.
        "Generate National Keymap" action in "Search Everywhere" menu.
        You can replace shortcuts in Keymap.
        "; with alt [" will replace all shortcuts with ; to [ and add alt modifier.
        https://github.com/dekonoplyov/KeymapNationalizer
      '';
    };
  }) {};

  keymap-switch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Keymap-Switch";
    plugname = "Keymap Switch";
    plugid = "it.karger.keymap-switch";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11578/102930/keymap-switch-1.1.0.zip";
      sha256 = "0x0fh1pcd8v016appsz4ss7am34n4m3li2fy9p91nj2p01ckgdpp";
      name = "Keymap-Switch-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Switch between keymaps without accessing the settings menu.
        Press Ctrl+Alt+Shift+E to open the QuickChangeKeymap dialog.
        Press Alt+Shift+E to toggle between your recent and your current keymap.
      '';
    };
  }) {};

  keymap-exporter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Keymap-exporter";
    plugname = "Keymap exporter";
    plugid = "Keymap exporter";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7066/105032/intellij-plugin-export-keymap-2.2.zip";
      sha256 = "1p070kf16yjpa96pp83sv8zds9r9vqlrchrpykc8cycac9y7zmdn";
      name = "Keymap-exporter-2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/denis-zhdanov/intellij-plugin-export-keymap";
      license = lib.licenses.gpl3Only;
      description = ''
        Allows exporting your keymap to a printable PDF document.
Usage: Help | Print Keymap
      '';
    };
  }) {};

  keystroke-counter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Keystroke-Counter";
    plugname = "Keystroke Counter";
    plugid = "org.anilmisirlioglu.keystroke.idea-keystroke-counter";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15538/105168/Keystroke_Counter-1.0.0.zip";
      sha256 = "1w04rxpksnzj8ck79yj3pys7kbl78h7k49bdix6nw0l3fzivkbi1";
      name = "Keystroke-Counter-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.asena.xyz";
      license = lib.licenses.asl20;
      description = ''
        IDEA Keystroke Counter





Keystroke Counter tracks your keystrokes on the keyboard and counts them 
for you. When you set a daily limit, it shows how close you are to your 
daily limit. At the same time it shows the keystrokes it counts with 
detailed visualized statistics. Allows you to customize the keys to count from the 
settings. Supports most keyboards.

Features
Counts your keystrokes using low memory.Daily keystroke goal.Customizing the keystrokes to count.Analytics and visual statistics for your keystrokes. (Daily, weekly, monthly and yearly.)Support for many keyboards.

Installation
Using IDE built-in plugin system on Windows:File &gt; Settings &gt; Plugins &gt; Browse repositories... &gt; Search for "Keystroke Counter" &gt; Install PluginUsing IDE built-in plugin system on MacOS:Preferences &gt; Plugins &gt; Browse repositories... &gt; Search for "Keystroke Counter" &gt; Install PluginManually:Download the latest release and install it manually using Preferences &gt; Plugins &gt; Install plugin from disk...

Restart IDE.

Screenshots

Overview &amp; Statistics


Settings


License
Copyright (c) 2020 Anıl Mısırlıoğlu. See the LICENSE file for license rights and limitations (Apache License 2.0).
      '';
    };
  }) {};

  kick-assembler-----and-chew-bubble-gum = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kick-Assembler-...-and-chew-bubble-gum";
    plugname = "Kick Assembler (... and chew bubble gum)";
    plugid = "de.achimonline.kickassembler-acbg";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11988/95823/kick-assembler-acbg-1.4.zip";
      sha256 = "0pika8s8chnsng0s9d6vww50x8vmayjd5gahp3j10363dzs1sp9r";
      name = "Kick-Assembler-...-and-chew-bubble-gum-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/space/index?pr=idea&lg=4ch1m";
      license = lib.licenses.mit;
      description = ''
        Language support for Kick Assembler.
    
    
        Main features:
    
    
        SDK Management
        Project Generation
        Syntax Highlighting
        Run Configurations
        "New File" Template
    
    
        Visit the GitHub-page for more information.
      '';
    };
  }) {};

  kill8080 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Kill8080";
    plugname = "Kill8080";
    plugid = "cn.focus.sohu.kill8080";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12627/91584/Kill8080.jar";
      sha256 = "07hp7j1bc544kvk8r414393qkd4vx5fjra4pq7q7d6gmhybr14sh";
      name = "Kill8080-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/QiaoJianCheng/Kill8080";
      license = lib.licenses.asl20;
      description = ''
        Kill the process running on 8080 port by one key. 
      By default, press `Ctrl+Meta+K` to perform a kill action, press `Ctrl+Shift+Meta+K` to show settings dialog.
      
      Source code is here.
      '';
    };
  }) {};

  kite-ai-code-autocomplete-python-java-javascript-htmlcss-go-ccc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kite-AI-Code-AutoComplete-Python-Java-Javascript-HTMLCSS-Go-CCC++";
    plugname = "Kite AI Code AutoComplete: Python, Java, Javascript, HTML/CSS, Go, C/C#/C++";
    plugid = "com.kite.intellij";
    version = "1.8.19";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15148/103287/kite-pycharm.zip";
      sha256 = "1f1czms6b4ypk6i1lj1mdfnqvn2zglras58xw40xw90g0x369ky5";
      name = "Kite-AI-Code-AutoComplete-Python-Java-Javascript-HTMLCSS-Go-CCC++-1.8.19.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://help.kite.com/category/45-intellij-pycharm-integration";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.kite.com/license/";
        free = false;
      };
      description = ''
        AI-powered coding assistant featuring code completion snippets for over 13 languages, advanced function signatures, and instant documentation. Code faster and stay in flow with Kite Autocomplete.

Features
Completions Powered by Machine Learning
Kite’s code completions are powered by machine learning models trained on over 25 million open-source code files. Kite also runs locally. Your code is private and does not leave your machine.

Instant Code Documentation
Get instant documentation for the symbol underneath your cursor so you save time searching for Python docs (not yet available for JavaScript docs).

Supports Most Code Editors
Kite works with the following code editors:

IntelliJ IDEA
Webstorm
Goland
VS Code
PyCharm
Spyder
Sublime
Vim
Atom
JupyterLab
JupyterHub
Android Studio
CLion
AppCode
GoLand

...and the following file extensions:

.js
.jsx
.vue
.ts
.tsx
.css
.html
.less
.c
.cc
.cpp
.cs
.h
.hpp
.m
.scala
.java
.kt
.py
.go

Learn more about how Kite heightens IntelliJ IDEA’s capabilities at kite.com/integrations/intellij.
Requirements
This plugin requires the Kite desktop app, which you will be prompted to install if it’s not already present.
Use another editor? Check out Kite’s other editor integrations.
Installing the Kite Engine
The Kite desktop app needs to be installed in order for the package to work properly. The package itself provides the frontend that interfaces with the Kite Engine, which performs all the code analysis and machine learning 100% locally on your computer. (No code is sent to a cloud server.)
macOS Instructions

Download the installer and open the downloaded .dmg file.
Drag the Kite icon into the Applications folder.
Run Kite.app to start the Kite Engine.

Windows Instructions

Download the installer and run the downloaded .exe file.
The installer should run the Kite Engine automatically after installation is complete.

Linux Instructions

Visit kite.com/linux to install Kite.
The installer should run the Kite Engine automatically after installation is complete.

Troubleshooting
Check our help center for the most recent installation guide for IntelliJ and the troubleshooting guide.
About Kite
Kite is built by a team in San Francisco devoted to making programming easier and more enjoyable for all. Follow Kite on Twitter and get the latest news and programming tips on the Kite Blog. Kite has been featured in Wired, VentureBeat, The Next Web, and TechCrunch.
      '';
    };
  }) {};

  knit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Knit";
    plugname = "Knit";
    plugid = "org.dimdev.knit";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11457/67722/knit-2.0.zip";
      sha256 = "1gv9n64jg8ai415kav9dsmjx43gah1iff2c31x7yylvyv9bjb5hz";
      name = "Knit-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Runemoro/knit";
      license = lib.licenses.mit;
      description = ''
        Support for editing Enigma mappings directly in IntelliJ.
      '';
    };
  }) {};

  kobalt = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kobalt";
    plugname = "Kobalt";
    plugid = "com.beust.kobalt.intellij";
    version = "1.134";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7992/74606/kobalt-intellij-plugin.zip";
      sha256 = "1bglc841drjpjmwda2rz8pbk56a0gl30dijfibc2gb4l2fprsqh0";
      name = "Kobalt-1.134.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://beust.com/kobalt";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7992/license.txt";
        free = false;
      };
      description = ''
        A plugin for the Kobalt build system.
      '';
    };
  }) {};

  kobiton-adb-tunnel = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kobiton-ADB-Tunnel";
    plugname = "Kobiton ADB Tunnel";
    plugid = "com.kobiton.plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15552/106293/KobitonRemoteDevicePlugin-1.0.zip";
      sha256 = "1d9am1w1p2pc56ykhq8xqf9qbnj8d1sb2v3m4ghrh346g1r2pg7v";
      name = "Kobiton-ADB-Tunnel-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://kobiton.com";
      license = lib.licenses.gpl3Only;
      description = ''
        Kobiton ADB Tunnel allows you to access remote devices on the Kobiton platform directly from within your IDE using the ADB utility.
      
      
      This allows you to pick a device in the Kobiton cloud to work on and execute test scripts on it. You can run your test script from Appium or Selenium from your IDE, which makes debugging and developing test scripts easy and seamless.
      
      
      General Usage Instruction
      
      
      Step 1: Setup Android SDK and set global path environment for adb command
      
      Step 2: Make sure that the adb on home's machine is on version 1.0.41 or higher
      
      Step 3: Install plugin in IDE from the marketplace
      
      Step 4: Open Kobiton ADB Tunnel plugin in Tools/Kobiton ADB Tunnel.
      
      Step 5: Input Server Address, Email, APIKey then select "Connect" button to verify account. This is one time input if we do not sign out.
      
            - Server Address: api server
            
            - Email: your login email
            
            - ApiKey: in Settings/API Keys on the Kobiton portal
            
      Step 6: Launch a device in the device list via iframe
      
      Step 7: Input the Session ID to Kobiton ADB Tunnel dialog on IDE, then click the "Connect" button to connect to the device
      
      Step 8: Start debugging
      '';
    };
  }) {};

  kodegen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "KodeGen";
    plugname = "KodeGen";
    plugid = "me.ely.kodegen";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12783/66999/kode-gen.zip";
      sha256 = "0b98gvy4xvd998bgvka4j4av3k0qr215qbyp7xwfb6mg6jl13gqn";
      name = "KodeGen-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com/idea";
      license = lib.licenses.asl20;
      description = ''
        This plugin generates code from right click 'Generate...' menu while focused
    on a kotlin class. The output class can be customized using a provided velocity template to format
    the code based on the origin class and optional selected classes.
    The following features are available: 
    
      Generate the Controller class for the persistent class.
      Generate the Service class for the persistent class.
      Generate the Repository class for the persistent class.
    
    If you want to add variables into template context, you can modified the source and package the plugin to meet your needs. See README
      '';
    };
  }) {};

  kolesa-commit-message = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Kolesa-Commit-Message";
    plugname = "Kolesa Commit Message";
    plugid = "kz.kolesa";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10596/45579/KolesaCommitMessage.jar";
      sha256 = "1m3abpkmgbx9dmclmmd0rgam63qii1v4ikivn9nfb3cnr2bj11bm";
      name = "Kolesa-Commit-Message-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://kolesa.kz";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://kolesa.kz";
        free = false;
      };
      description = ''
        This plugin constraints your commit message and watches that a name of your current branch contains it. 
 In addition the plugin adds a button to put a branch name into a commit message. 
 
 Ограничивает commit сообщение и следит, чтобы в нем содержалось название текущей ветки.
 Также добавляет кнопку для вставки названия текущей ветки в commit сообщение.
      '';
    };
  }) {};

  konaworks-powerpack = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KonaWorks-PowerPack";
    plugname = "KonaWorks PowerPack";
    plugid = "KonaWorks PowerPack";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1144/2910/KonaWorks_PowerPack_2910.jar";
      sha256 = "0nbx3l1jnmc83d4y52i38mbwi1v86r09jin233vyr83v2yhjym4j";
      name = "KonaWorks-PowerPack-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1144/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1144/sourceCode.zip";
        free = false;
      };
      description = ''
        A pack with the following tools:
  
    Group Modules (Project View) - Group some or all of your modules easily by:
    type, parent directory, name prefix/xuffix, DevKit (JDK/SDK), VCS type or language level
    
    Array Indexer (Editor) - Show 'array element index' hint (Alt+mouse over).
    Editor Gutter Context Menu (Editor) - menu for Editor with several actions available.
    Insert Into (Editor) - A new code action to easily insert an expression inside a string literal (Ctrl+Alt+Insert).
    Javadoc Roots (Navigation) - Easily navigate to any of the Javadoc roots available to your project (Shift+Ctrl+F1).
    Tool Windows (Navigation) - 'Jump to ToolWindow...' popup (Alt+F12).
    Open Editors (Navigation) - 'View Open Editors' popup (Ctrl+Shift+E).
    CVS Log inspections (Inspections) - Reports files that contain CVS Log keywords
      '';
    };
  }) {};

  kopypasta = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KopyPasta";
    plugname = "KopyPasta";
    plugid = "com.robinmalfait.KopyPasta";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7668/18472/KopyPasta.jar";
      sha256 = "0in7nb14qa7y3l20ap8abifhsmcabfa64v07a8wpcwsvd83wvzrn";
      name = "KopyPasta-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://robinmalfait.com/";
      license = lib.licenses.mit;
      description = ''
        A nice and simple plugin to share your code! 
Your code will be send to kopy.io and the link will be in your clipboard. 
It will also open your default browser for you!  Usage: 
In any file you can generate a new KopyPasta! just press your generate shortcut. Code -&gt; Generate.
      '';
    };
  }) {};

  korean-language-pack---- = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Korean-Language-Pack----";
    plugname = "Korean Language Pack / 한국어 언어 팩";
    plugid = "com.intellij.ko";
    version = "203.564";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13711/108511/ko.203.564.jar";
      sha256 = "1k1k4sizmjrhw59ixy21jis0c2pm4rzd0minikp2f8pq2brv8a5l";
      name = "Korean-Language-Pack-----203.564.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Adds Korean as the IDE interface language.It’s an EAP version, we’re making it better everyday. At the moment partial localization is available.Your feedback is very much appreciated. You can submit it directly from the IDE or via YouTrack either in English or Korean.이 플러그인은 EAP(얼리 액세스 프로그램) 버전으로, 매일 개선 작업을 하고 있습니다. 현재는 부분적으로 현지화된 버전을 사용하실 수 있습니다.사용해보시고 여러분의 의견을 저희에게 알려주세요. 의견은 IDE 에서 바로 제출하시거나 YouTrack 에서 영어 또는 한국어로 제출하실 수 있습니다. 감사합니다!
      '';
    };
  }) {};

  korge = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Korge";
    plugname = "Korge";
    plugid = "com.soywiz.korge.korge-intellij-plugin";
    version = "2.0.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9676/105289/KorgePlugin-2.0.0.0.zip";
      sha256 = "09f7gsjday0v0hlw1jdnqxm57nphazvvh14smqkrzbqgkf84gjyh";
      name = "Korge-2.0.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://korge.soywiz.com/";
      license = lib.licenses.asl20;
      description = ''
        Supports the Korge Game Engine, providing a project wizard, and tools.
      '';
    };
  }) {};

  korneidontsov-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KorneiDontsov-Color-Scheme";
    plugname = "KorneiDontsov Color Scheme";
    plugid = "color.scheme.KorneiDontsov";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14411/88962/KorneiDontsov.jar";
      sha256 = "105vlz5xag9663spksifyf9h9nrmzh8qm8g9ki5pl1d936fi0lsf";
      name = "KorneiDontsov-Color-Scheme-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://t.me/KorneiDontsov";
      license = lib.licenses.mit;
      description = ''
        Light color scheme made by @KorneiDontsov for friends and self-use for writing code in C#, SQL, XML, JSON, YAML, Dockerfile, etc.
      '';
    };
  }) {};

  kotmvp-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "KotMVP-Generator";
    plugname = "KotMVP Generator";
    plugid = "com.lhxia.kotmvp.generator";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11996/59523/KotMVPGenerator.jar";
      sha256 = "017b2d9kmg82n0b141agjm2vchnpdhwxmd7l0kbpdlhiwscglqb9";
      name = "KotMVP-Generator-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xialonghua/kotmvp";
      license = lib.licenses.asl20;
      description = ''
        Because Android Studio cannot create multiple file templates at the same time, developing this plugin helps the KotMVP framework generate MVP initial files.
the kotmvp github is : https://github.com/xialonghua/kotmvp
      '';
    };
  }) {};

  kotest = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotest";
    plugname = "Kotest";
    plugid = "kotest-plugin-intellij";
    version = "1.1.18-IC-2020.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14080/98624/kotest-plugin-intellij-1.1.18-IC-2020.2.zip";
      sha256 = "08grikq343219hk933akjjlbd4nss5wfwisyrsrcxqilm6kbw9wz";
      name = "Kotest-1.1.18-IC-2020.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/kotest";
      license = lib.licenses.asl20;
      description = ''
        Official IntelliJ IDEA plugin for Kotest.
      This plugin requires the use of Kotest 4.2.0 or newer.
      '';
    };
  }) {};

  kotlin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin";
    plugname = "Kotlin";
    plugid = "org.jetbrains.kotlin";
    version = "203-1.4.21-release-IJ5981.133-1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6954/107543/kotlin-plugin-203-1.4.21-release-IJ5981.133-1.zip";
      sha256 = "1xxqivw6rz7dy6zkya03z0x1ghrzid1c9d27hykmdizvdxdd1vlc";
      name = "Kotlin-203-1.4.21-release-IJ5981.133-1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://kotlinlang.org";
      license = lib.licenses.asl20;
      description = ''
        The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.

Getting Started in IntelliJ IDEA
Getting Started in Android Studio
Public Slack
Issue tracker
      '';
    };
  }) {};

  kotlin-additional-highlighting = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-Additional-Highlighting";
    plugname = "Kotlin Additional Highlighting";
    plugid = "com.github.lppedd.kotlin-additional-highlighting";
    version = "0.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13979/81458/kotlin-additional-highlighting-0.2.2.zip";
      sha256 = "1q5gjh3hqax6w0pnjdz1a9rgbghiw63fag4mk2xf3yr5ixmhyv67";
      name = "Kotlin-Additional-Highlighting-0.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/lppedd/idea-kotlin-additional-highlighting";
      license = lib.licenses.mit;
      description = ''
        This plugin provides code style customization for
  infix and operator (math and keyword) functions.



  See more
  here at GitHub.
      '';
    };
  }) {};

  kotlin-anko-converter-for-xml = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-Anko-Converter-For-Xml";
    plugname = "Kotlin Anko Converter For Xml";
    plugid = "linyuzai.plugin.xml";
    version = "1.3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10120/49684/LayoutXmlConverter.zip";
      sha256 = "0wng6690xwvqbfkqwdamyblr6lvaw604faww7y7l5a0jsyrwiypc";
      name = "Kotlin-Anko-Converter-For-Xml-1.3.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Linyuzai/LayoutXmlConverter";
      license = lib.licenses.asl20;
      description = ''
        Convert layout xml to kotlin code use anko.
      Compile with Java 8.
      Select or open a layout xml under res/layout.
      Open the Code Menu.
      Chose the last option "Convert Layout Xml to Kotlin Anko".
      '';
    };
  }) {};

  kotlin-code-sorter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-Code-Sorter";
    plugname = "Kotlin Code Sorter";
    plugid = "com.longforus.kotlincodesorter";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11163/99746/kotlincodesort-1.2.2.zip";
      sha256 = "1v46hnigys4ymiiwhjjnl6s8f936x5qglx1p2vj0agmnwdg6csjx";
      name = "Kotlin-Code-Sorter-1.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/longforus";
      license = lib.licenses.mit;
      description = ''
        Kotlin Code Sorter
      
      
      
      Website |
      GitHub |
      Issues |
      Blog
      
      
      
      A simple plugin for sorting kotlin code.
      
      Features:
      
        Sort the kotlin code in the default order of fields -&gt; initializer -&gt; constructors -&gt; functions.
        default shortcuts is Ctrl+Alt+K,if no effect, check the shortcut key Settings.
      
      
      
      Inspiration from Lifecycle Sorter
      
      Send feedback
      '';
    };
  }) {};

  kotlin-data-class-to-sharedpreferences = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-Data-Class-to-SharedPreferences";
    plugname = "Kotlin Data Class to SharedPreferences";
    plugid = "me.haroldmartin.Kotlin Data Class to SharedPreferences";
    version = "0.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14970/96183/Kotlin_Data_Class_to_SharedPrefs-0.3.0.zip";
      sha256 = "1fd28wmkl60rggzj5dvn48hcsgm9xl708lgihn216dh5pvsdmc1h";
      name = "Kotlin-Data-Class-to-SharedPreferences-0.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hbmartin/android-studio-sharedprefs-from-data-class/";
      license = lib.licenses.mit;
      description = ''
        Generates Android SharedPreferences reader / writer based on Kotlin data class fields
      '';
    };
  }) {};

  kotlin-function-arguments-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-Function-Arguments-Helper";
    plugname = "Kotlin Function Arguments Helper";
    plugid = "com.github.developerutils.kotlin-function-arguments-helper";
    version = "2020.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14168/84403/kotlin-function-arguments-helper-2020.1.2.zip";
      sha256 = "159kmf7b3mfaw1vpnm9fwd2j2b5rw7ml1i0srzf5k38salvrg543";
      name = "Kotlin-Function-Arguments-Helper-2020.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DeveloperUtils";
      license = lib.licenses.mit;
      description = ''
        IntelliJ plugin that provides intention action for constructors or functions to fill in
           arguments with name and a default value.
      '';
    };
  }) {};

  kotlin-jvm-blocking-bridge = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-Jvm-Blocking-Bridge";
    plugname = "Kotlin Jvm Blocking Bridge";
    plugid = "net.mamoe.kotlin-jvm-blocking-bridge";
    version = "1.7.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14816/108463/kotlin-jvm-blocking-bridge-intellij-1.7.4.zip";
      sha256 = "0jj17vyj6l2c74357kbaysw3y0i970z7530hpg10ahnhzak3hvmc";
      name = "Kotlin-Jvm-Blocking-Bridge-1.7.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mamoe/";
      license = lib.licenses.asl20;
      description = ''
        Provides @JvmBlockingBridge calls for Java.   
Find more information on source repository: kotlin-jvm-blocking-bridge.
      '';
    };
  }) {};

  kotlin-kdoc-formatter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-KDoc-Formatter";
    plugname = "Kotlin KDoc Formatter";
    plugid = "org.norbye.tor.kdocformatter";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15734/108017/kdoc-formatter-ide-plugin-1.2.0.zip";
      sha256 = "02569ksdb3vfqxdwqfndnx84yc72cd4vdddapyc3p78m9xm5vdgk";
      name = "Kotlin-KDoc-Formatter-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tnorbye/kdoc-formatter";
      license = lib.licenses.asl20;
      description = ''
        This plugin lets you reformat KDoc text -- meaning that it will reformat the
      text and flow the text up to the line width, collapsing comments that
      fit on a single line, indenting text within a block tag, etc.
      
      
      There are two usage modes. First, it can reformat the current comment
      around the caret position. Open a Kotlin file, navigate to the KDoc
      comment (e.g. /** My Comment */), and then invoke Code | Reformat KDoc.
      
      
      The second mode lets you reformat all the comments in one or more Kotlin
      source files. For this, navigate to the Projects view and select one or
      more source files, and again invoke Code | Reformat KDoc.
      
      
      More details about the features can be found at
      
      https://github.com/tnorbye/kdoc-formatter#kdoc-formatter
      
      
      
      You can create a shortcut and assign it to this action if you use it
      frequently. On Mac for example, open the Preferences dialog, search for
      Keymap, then in the Keymap search field search for "KDoc", and double click
      on the action to choose "Add Shortcut", then choose the shortcut you want.
      For me, formatting the whole file is assigned to Cmd-Opt-L, so I've assigned
      Reformat KDoc to Cmd-Shift-L.
      '';
    };
  }) {};

  kotlin-mpp-shared-items-browser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-MPP-Shared-Items-Browser";
    plugname = "Kotlin MPP Shared Items Browser";
    plugid = "melabsinthiatum.kotlin-mpp-shared-items-browser";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13652/77169/kotlin-mpp-shared-items-browser-1.1.0.zip";
      sha256 = "0pcizyl3n2kis0rvjik80p5aiw5myzqq2i2wk6w621z1nrg2qj28";
      name = "Kotlin-MPP-Shared-Items-Browser-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mel-absinthiatum/kotlin-mpp-shared-items-browser";
      license = lib.licenses.mit;
      description = ''
        Description:
Plugin for Intellij IDEA and Android Studio, providing a tree of shared (expect/actual) project elements.





Features:

    Builds the tree of shared elements in a special tool window with types indication, lists the places of common (expect) and platform (actual) element’s declarations.
    Includes hierarchic displaying of nested shared elements.
    Provides navigation to elements (opening the editor, scrolling to position in code, highlighting).
    Partially reloads the tree of elements by diffs, obtained when comparing before and after update trees.
    Updates by using a button and by a timer, if the plugin tool window is visible.
    Allows to set the update interval. The settings are stored persistently.
      '';
    };
  }) {};

  kotlin-mvp-auto = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Kotlin-MVP-Auto";
    plugname = "Kotlin MVP Auto";
    plugid = "com.ljb.mvp.plugin";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12265/106346/kotlin_mvp_plugin.jar";
      sha256 = "09sisx14jk8glfbqj6g5y8yq2i502j2xlgwwvdsdfjlpigyfvg45";
      name = "Kotlin-MVP-Auto-1.3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cn-ljb";
      license = lib.licenses.asl20;
      description = ''
        kotlin mvp code generator.
        work with MVPKotlin to build an efficient Android MVP framework.
        GitHub: https://github.com/cn-ljb/mvp-kotlin
      '';
    };
  }) {};

  kotlin-mvvm-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Kotlin-MVVM-Generator";
    plugname = "Kotlin MVVM Generator";
    plugid = "com.stfalcon.ktmvvmgenerator";
    version = "0.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11024/102152/KtMVVM-Generator.jar";
      sha256 = "1bm7bfzjw3gn46y60piyjl6xjm8asyzb2qqq70k6nvzcnnwg5gyd";
      name = "Kotlin-MVVM-Generator-0.4.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.stfalcon.com";
      license = lib.licenses.asl20;
      description = ''
        Plugin which generates activities and fragments for MVVM + Dagger + Rx using Kotlin
      '';
    };
  }) {};

  kotlin-serialversionuid-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-serialVersionUID-generator";
    plugname = "Kotlin serialVersionUID generator";
    plugid = "com.ppismerov.ksvu";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12819/66573/kotlin-serial-version-uid-0.0.1.zip";
      sha256 = "08kvq0ahjk9ip2gvj2qnj0w743283hgws2bziaazl2jrkjfz3vws";
      name = "Kotlin-serialVersionUID-generator-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pavel-pismerov/kotlin-serial-version-uid-plugin";
      license = lib.licenses.asl20;
      description = ''
        Kotlin serialVersionUID generator.

Add new action "Generate Kotlin serialVersionUID" to Kotlin Tools group (Tools -&gt; Kotlin).

Add new shortcut Ctrl+Alt+G for "Generate Kotlin serialVersionUID" action.
      '';
    };
  }) {};

  kotlin-to-java-decompiler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlin-to-Java-decompiler";
    plugname = "Kotlin to Java decompiler";
    plugid = "idv.freddie.plugin.decompiler";
    version = "0.7.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13485/106430/cfr-decompiler-plugin-0.7.0.zip";
      sha256 = "1ir9bhjyfwlcvfw5fzqci7w2szvaiqf5pymjfipa06wf46lp8isb";
      name = "Kotlin-to-Java-decompiler-0.7.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/wangyung";
      license = lib.licenses.asl20;
      description = ''
        A helper plugin to support decompiler Kotlin bytecode to Java. 
      It is based on CFR Decompiler
      which doesn't have problems to decompile the bytecode with Kotlin Coroutines.
      It can be also used for checking the result of Jetpack Compose.
      
      How to use
      
        Build the project first
        Open the kotlin file in the editor
        Run the action from Code -&gt; Decompile Kotlin to Java 
      

      Default shortcut: CMD + OPTION + SHIFT + D
      

      This plugin is open source. You can find the source code on
      github
      '';
    };
  }) {};

  kotlinbukkitapi-tooling = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "KotlinBukkitAPI-Tooling";
    plugname = "KotlinBukkitAPI Tooling";
    plugid = "br.com.devsrsouza.kotlinbukkitapi.tooling";
    version = "0.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14913/107873/KotlinBukkitAPI-Tooling-0.0.7.zip";
      sha256 = "17rybqzf7k86cc3wrrcvwg0sffs6zbx7i9zivzzfyhvsfrsp5v7r";
      name = "KotlinBukkitAPI-Tooling-0.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DevSrSouza/KotlinBukkitAPI-Tooling/";
      license = lib.licenses.mit;
      description = ''
        The KotlinBukkitAPI Tooling is plugin for IntelliJ that helps 

developers using KotlinBukkitAPI and scripts for Bukkript.

This libraries help build extensions for Minecraft Server using Spigot server.






Bukkript
KotlinBukkitAPI-Tooling (this plugin)
KotlinBukkitAPI
KotlinBukkitAPI Examples





Demonstration
      '';
    };
  }) {};

  kotlinize-pr = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kotlinize-PR";
    plugname = "Kotlinize PR";
    plugid = "com.wada811.kotlinizepr.kotlinize-pr-plugin";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13391/99943/kotlinize-pr-plugin-1.0.4.zip";
      sha256 = "0apkk33ds5d12cacb7b32i1npx3a222071nlr4r982n2xw32j28z";
      name = "Kotlinize-PR-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wada811/kotlinize-pr-plugin";
      license = lib.licenses.asl20;
      description = ''
        Convert Java File to Kotlin File and Create Pull Request on GitHub.
      '';
    };
  }) {};

  kotlinizing-statistics = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Kotlinizing-Statistics";
    plugname = "Kotlinizing Statistics";
    plugid = "woainikk.kotlinizing-statistics";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12794/67205/kotlinizing-statistics-1.2.jar";
      sha256 = "0f09g57z3fffzr2vjqflr0y163arybi9f0db2m7fvfcr93vkrjk9";
      name = "Kotlinizing-Statistics-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/woainikk/Kotlinizing-statistics-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=s9m0kkjeuwqsf5ixmjx4b84mfae8ewet";
        free = false;
      };
      description = ''
        Plugin is useful if you're migrating a project from java to kotlin and want to see your progress.
    Select a folder with source code you want to get statistics for and press Alt+S to see a brief summary
    with number of files and LOC by each language.
      '';
    };
  }) {};

  ktlint-unofficial = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ktlint-unofficial";
    plugname = "Ktlint (unofficial)";
    plugid = "com.nbadal.ktlint";
    version = "0.7.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15057/108504/ktlint-0.7.1.zip";
      sha256 = "1f6v87xw8warxk34bl8gzird3khjpwqn54kh8yvg1kqpqbv56yaa";
      name = "Ktlint-unofficial-0.7.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://nbad.al";
      license = lib.licenses.mit;
      description = ''
        Automatically runs ktlint on Kotlin files, and annotates any errors found.

Enable and configure in Preferences &gt; Tools &gt; ktlint.
      '';
    };
  }) {};

  ktor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ktor";
    plugname = "Ktor";
    plugid = "io.ktor.intellij.plugin";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10823/106074/ktor-1.5.0.zip";
      sha256 = "01jzzml8d0z0rpi1v5frrf403mhbibwg79ipwbdgc3chiiqs7yb2";
      name = "Ktor-1.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ktor.io";
      license = lib.licenses.asl20;
      description = ''
        This plugin supports the Ktor framework.

            Note: It doesn't work on Android Studio.

            The following features are available:
            
                Ability to create preconfigured Ktor projects with optional Swagger/OpenAPI support.
            

            Changelog

            1.4.3.1

            
                Updated changelog
            

            1.4.3

            
                Ktor 1.4.3
            

            1.4.2

            
                Ktor 1.4.2
                KTOR-1086 Fix Ktor wizard tooltip text
                KTOR-1198 Upgrade gradle wrapper in generated projects to 6.6.1
                Fix mock engine samples, upgrade gradle wrapper
                KTOR-1179 Fix changelog for 1.4.0 to 1.4.1
                KTOR-1150 Fix HttpTimeout artifacts
                Fix feature documentation links
            

            1.4.1

            
                Ktor 1.4.1
            

            1.4.0

            
                Ktor 1.4.0
            

            1.3.2
            
                Ktor 1.3.2
                Ktor locations inspections and intentions
            

            1.2.3
            
                Ktor 1.2.3
            

            1.2.2
            
                Ktor 1.2.2
                Bugfixes for mock engine feature generation
                Added Mustache and Thymeleaf generation
            

            1.2.0
            
                Ktor 1.2.0
                Minor cosmetic fixes
            

            1.1.4
            
                Ktor 1.1.4.
            

            1.1.3
            
                Ktor 1.1.3.
                Removed old ktor versions.
            

            1.1.2
            
                Ktor 1.1.2.
            

            1.1.1
            
                Ktor 1.1.1.
            

            1.0.1
            
                Ktor 1.0.1 support.
                Fixed missing SwaggerUtils.kt
                Fixed CachingHeaders imports
            
            1.0.0
            
                Ktor 1.0.0 support.
            
            0.3.4
            
                Ktor 1.0.0-beta-3 support (with Kotlin 1.3 and kotlinx.coroutines 1.0.0).
                Fixed resources folder with Gradle Kotlin DSL.
                Fixed executable permissions on generated project IntelliJ plugin.
            
            0.3.3
            
                Ktor 1.0.0-beta-2 support.
            
            0.3.2
            
                Ktor 1.0.0-alpha-3 support.
            
            0.3.1
            
                Ktor 1.0.0-alpha-2 support.
            
            0.3.0
            
                Code Style improvements.
                Experimental alternative swagger generation.
                Gradle Kotlin-DSL generation support.
                Internal refactorings.
            
            0.2.3
            
                Ktor: 0.9.5.
                Initial test generation for some features.
            
            0.2.2
            
                Ktor: 0.9.4.
                Added support for Webjars feature.
                Swagger: Initial experimental test generation.
            
            0.2.1
            
                Swagger: HTTP API generation (`api.http`) for documentation, and testing the API using IU.
                Swagger: YAML support.
                Swagger: JWT login code generation using heuristics.
                Swagger: Fixed multiline comments in several places.
                Swagger: Generated unnamed types.
                Swagger: Improved OpenAPI 3.0 support (still requires some work).
            
            0.2.0
            
                Fixed plugin on windows (no src folder was generated).
                Generate files with spaces instead of tabs.
                Additional templates.
                Swagger: Support Swagger/OpenAPI models from 2.0.0 (beta) to 3.0.0 (pre-alpha, not fully working yet).
                Swagger: Support JWT authentication with Swagger.
                Swagger: Generate Swagger client using JVM HttpClient.
            
            0.1.0
            
                Added experimental Swagger Server Code generation.
                Generate logback.xml file.
                Fixed zip folder permissions.
                Fix maven missing property.
            
            0.0.5
            
                Make compatible with EAP builds.
                Added SessionsFeature sample code.
                Some template adjustments.
            
            0.0.4
            
                Some template adjustments.
                Generate .gitignore file.
                Updated Kotlin to 1.2.51.
            
            0.0.3
            
                Adjustments for Darkula theme.
                Updated Ktor to 0.9.3.
            
            0.0.2
            
                Redesigned Wizard.
                Split features into server and client.
                Group features in categories.
                Description, artifact, and documentation about features.
                Display transitive dependencies between features.
                Additional samples for some features.
            

            0.0.1
            
                First public version.
      '';
    };
  }) {};

  kubernetes-runtime-configuration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Kubernetes-Runtime-Configuration";
    plugname = "Kubernetes Runtime Configuration";
    plugid = "com.egoshard.intellij.k8s-runtime-config-plugin";
    version = "1.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12394/104292/intellij-k8s-runtime-config-1.2.5.jar";
      sha256 = "04x58w8yjq7470z1jsmgk5ngmaz99wan50xlrmldxxwa0zqgfq6z";
      name = "Kubernetes-Runtime-Configuration-1.2.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/egoshard/intellij-k8s-runtime-config";
      license = lib.licenses.asl20;
      description = ''
        This plugin loads Kubernetes ConfigMap, Secret and String Data values as environment variables in an IntelliJ run configuration.
    This allows for development of Kubernetes deployable modules without the need to run Kubernetes on local development environments
    which may not have enough resources.

    Usage:
    
        Run -&gt; Edit Configurations
        Select or create a new configuration
        "K8s Config" tab
        Select "Enable"
        Add Kubernetes configuration files
        Run configuration
    

    During run configuration executions configuration files will be parsed in list order and their values injected
    as environment variables to the executing module. Configuration files should be ordered in the order they are consumed
    within deployments from generic to specific. Configuration keys with matching names in specific files will override
    previous values exactly as the would during a Kubernetes deployment
      '';
    };
  }) {};

  kunpeng-compiler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kunpeng-Compiler";
    plugname = "Kunpeng Compiler";
    plugid = "org.intellij.sdk.KunpengCompilerPlugin";
    version = "2.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15857/107912/kunpeng-compiler-plugin-2.2.5.zip";
      sha256 = "1zkwbhqzir20kd10vzf6mdsy5nq1ixzcwcy0xnir40zwp4p5qfcq";
      name = "Kunpeng-Compiler-2.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://kunpeng.huawei.com";
      license = lib.licenses.asl20;
      description = ''
        Kunpeng Compiler Plugin
        The Kunpeng Compiler Plugin provides the following functions:
        
             One-click deployment You can download the plugin from the JetBrains Marketplace and install it online.
            
            
             Remote compilation One-click installation of the Kunpeng GCC One-click installation of the BiSheng
                Compiler One-click running of visualized compilation configuration tasks Real-time display of
                compilation and commissioning information
      '';
    };
  }) {};

  kunpeng-foundation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kunpeng-Foundation";
    plugname = "Kunpeng Foundation";
    plugid = "Kunpeng Foundation";
    version = "2.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15858/107913/kunpeng-foundation-2.2.5.zip";
      sha256 = "0f71kaz7bzl3zganc4iw2pa72ldyf7k6r6bhnsgmbwjn3rh947kc";
      name = "Kunpeng-Foundation-2.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://kunpeng.huawei.com";
      license = lib.licenses.asl20;
      description = ''
        Kunpeng Foundation
 
 The Kunpeng Basic Plugin is the basic plugin to run the Kunpeng Porting Advisor Plugin, Hyper Tuner, acceleration library, and Junpeng Compiler Plugin.
 
 
    It provides basic Java Chromium Embedded Framework (JCEF) capabilities.
      '';
    };
  }) {};

  kunpeng-library = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kunpeng-Library";
    plugname = "Kunpeng Library";
    plugid = "Kunpeng Library";
    version = "2.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15859/107914/kunpeng-library-plugin-2.2.5.zip";
      sha256 = "1gkn5jgcrwhlcpydjfhvpmjy0faxxjp34r32ampd0f05ily3ryc6";
      name = "Kunpeng-Library-2.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://kunpeng.huawei.com";
      license = lib.licenses.asl20;
      description = ''
        Kunpeng Library Plugin The Kunpeng Library Plugin optimizes the performance of the basic software library and improves the performance competitiveness of common software libraries on the Kunpeng platform. The Kunpeng acceleration library provides the following three acceleration policies based on Kunpeng processors:
        
            Provides hardware acceleration solutions for common algorithms such as encryption, decryption, and compression.
            Uses Kunpeng high-performance instructions to improve the performance of the basic software library.
            Accelerates and optimizes the algorithms of video encoding and decoding, signal processing, and storage network libraries.
        In-depth acceleration has been performed on the common software libraries based on the three acceleration policies. The optimized library interfaces remain unchanged. The target libraries include the system libraries, media libraries, encryption and decryption libraries, and compression library.
        
            
                
                    Category
                
                Type
                Description
                Operation
                
            
            
                Compression library
                gzip
                
                    Data prefetch, loop unrolling, and CRC instruction replacement are used to improve the compression and decompression rates of gzip-1.10 on the Kunpeng platform, especially the compression and decompression of text files.
                
                View
            
            
                zstd
                
                    NEON instructions, inline assembly, and memory prefetch, adjusted code structure, and optimized instruction pipeline layout are used to improve the compression and decompression rates of zstd-1.4.4 on the Kunpeng platform.
                
                View
            
            
                snappy
                
                    Inline assembly, high-bit instructions, optimized CPU pipeline, and memory prefetch are used to improve the compression and decompression rates of snappy-1.1.7 on the Kunpeng platform.
                
                View
            
            
                KAEzip
                
                    KAEzip is the compression module of the Kunpeng acceleration engine. It uses the Kunpeng hardware acceleration module to implement the deflate algorithm and works with the lossless user-mode driver framework to provide an interface for high-performance compression in gzip or zlib format.
                
                View
            
            
                Encryption and decryption libraries
                KAE encryption and decryption
                
                    The Kunpeng hardware acceleration module implements the RSA, SM3, SM4, DH, MD5, and AES algorithms, provides high-performance symmetric and asymmetric encryption and decryption based on the lossless user-mode driver framework. It is compatible with OpenSSL 1.1.1a and later versions and supports synchronous and asynchronous mechanisms.
                
                View
            
            
                System libraries
                glibc-patch
                
                
                    The memory, string, and lock are optimized and accelerated based on the microarchitecture of Huawei Kunpeng 920 processors.
                
                View
            
            
                hyperscan
                
                
                    Kunpeng instructions are used to accelerate the compilation and scanning performance of regular expressions based on the advantages of the Kunpeng micro-architecture.
                
                View
            
            
                AvxToNeon
                
                
                    AvxToNeon is an interface collection library.Kunpeng acceleration instructions are used to adapt to the GCC intrinsic built-in functions defined by the traditional platform, so that applications that use the intrinsic interface of the traditional platform can be smoothly ported to the Kunpeng platform.
                
                View
            
            
                Media libraries
                
                
                    x265-patch
                
                
                    Kunpeng acceleration instructions are used to reconstruct the transcoding core code of the x265 open-source library. The transcoding performance can be improved on the Kunpeng platform without changing the original interfaces and algorithms.
                
                
                    View
            
        The Kunpeng Library Plugin provides the following functions:
        
             One-click deployment You can download the plugin from the JetBrains Marketplace and install it online.
             Performance acceleration During coding, the function dictionary of the Kunpeng acceleration library is automatically matched. The libraries and functions in the dictionary that can be replaced supports association and are highlighted. In addition, pop-up windows providing details are displayed when you move the cursor onto the libraries and functions. The plugin scans the functions or assembly instructions that can be replaced by the functions or assembly optimized by the Kunpeng acceleration library in a code file, and generates a visualized report.
      '';
    };
  }) {};

  kunpeng-porting-advisor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kunpeng-Porting-Advisor";
    plugname = "Kunpeng Porting Advisor";
    plugid = "Kunpeng Porting Advisor";
    version = "2.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15860/107915/kunpeng-porting-advisor-plugin-2.2.5.zip";
      sha256 = "1q5pcvxafrj8sr0a99wir05nd9mfhgib7fy7gz7hca89a5wpzsqm";
      name = "Kunpeng-Porting-Advisor-2.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://kunpeng.huawei.com";
      license = lib.licenses.asl20;
      description = ''
        Kunpeng Porting Advisor PluginThe Kunpeng Porting Advisor Plugin automatically scans and analyzes the software to be ported and provides professional porting guidance.
        
            One-click deployment
            
            You can download the plugin from the JetBrains Marketplace and install it online, and deploy the server environment by simply clicking the mouse.
            Analysis and scanning
            
            The plugin scans and analyzes software packages and source code files, and provides porting feasibility reports.
            Code porting
            
            The plugin analyzes the cross-platform compatibility of software source code, identifies the code to be ported, and provides porting guidance.
		
		Introduction to the Kunpeng Porting Advisor
            The Kunpeng Porting Advisor functions as a client to call the functions of the server to complete scanning and porting tasks. It quickly scans and analyzes the software to be ported and provides professional code porting guidance, greatly simplifying the process of porting applications to the Kunpeng platform.This tool addresses the problems of heavy workload, low accuracy, and poor overall efficiency in manual analysis.
        The Kunpeng Porting Advisor provides the following functions:
        
            Source code porting
            
            The Kunpeng Porting Advisor can automatically check and analyze users' source code, C/C++ software build project files, link libraries used by C/C++ software build project files, and content that needs to be modified in x86 assembly code. It provides automatic code compatibility check, removes the dependency on manual expertise in code porting, and increases accuracy and efficiency in code compilation and debugging.
        Disclaimer
        
            This plugin is intended for enterprise users who need to use the plugin for work.You can use this plugin for work in compliance with laws, regulations, and government policies.
            No individual or organization shall spread the plugin without the authorization of the plugin owner.You shall not delete the license information or other information in this plugin, or perform reverse engineering, disassembly, or decompilation on this plugin.
            Unless otherwise specified in laws, regulations, or contracts, this plugin is provided "AS IS" without warranties, guarantees or representations of any kind, either expressed or implied.
            This plugin is a beta version and is used only for the development and testing environment and open beta test (OBT).The feedback you obtain when you use this plugin is for reference only and does not constitute specific guidance or suggestions in any way or form.
            You shall bear all risks arising from your use of this plugin. Huawei is not liable for any damage or loss of any nature in any case.
            If you violate this disclaimer when using this plugin, Huawei is not liable for any consequences and does not assume any legal liabilities.If necessary, the responsible party will be held legally liable.
      '';
    };
  }) {};

  kwick-activity = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Kwick-Activity";
    plugname = "Kwick Activity";
    plugid = "com.pv.kwick.activity";
    version = "1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12073/59257/pv-1.zip";
      sha256 = "1030vf3xji9syy4p5g7gggqi7wlx1396ccx9l3a9jc1f66azq85m";
      name = "Kwick-Activity-1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/parshav/kwick-activity";
      license = lib.licenses.mit;
      description = ''
        Plugin that displays the current Android activity running with a popup balloon.
      '';
    };
  }) {};

  kyoto = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Kyoto";
    plugname = "Kyoto";
    plugid = "com.martinagabrielli.themes.kyoto";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12350/61781/Kyoto.jar";
      sha256 = "1z1dd7i63pgnqffjr6sf89dx1w2nnm8rlh88q077c7bdp4xx249c";
      name = "Kyoto-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.martinagabrielli.com";
      license = lib.licenses.asl20;
      description = ''
        Kyoto theme inspired by the colours of the once capital of Japan.
      '';
    };
  }) {};

  lalrpop = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LALRPOP";
    plugname = "LALRPOP";
    plugid = "com.mdrobnak.intellij-lalrpop";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15229/107406/intellij-lalrpop-0.2.1.zip";
      sha256 = "0aw4v6z2sm75shix1hlhspmsmvfjw9y3jgcpnrl3vnaxz0avx520";
      name = "LALRPOP-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Mcat12/intellij-lalrpop";
      license = lib.licenses.mit;
      description = ''
        Adds support for the LALRPOP parser-generator.
      '';
    };
  }) {};

  ld-translate = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LD-translate";
    plugname = "LD-translate";
    plugid = "com.ld.fanyi";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12133/59766/LD-translate-0.3.1.zip";
      sha256 = "1m28ibpq8j142900b3kjlaqni61q5r2pwkavddphrvf6418z3xqd";
      name = "LD-translate-0.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.gwip.vip";
      license = lib.licenses.asl20;
      description = ''
        LD-translate
        1.在Ide里面选中英文,右键选择 Translation 即可
      '';
    };
  }) {};

  lift = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LIFT";
    plugname = "LIFT";
    plugid = "edu.princeton.cs.lift.intellij";
    version = "1.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14555/89717/lift.jar";
      sha256 = "07zb9ap2mgm344icpa4dnmgg0q3v2p2jzyxbqrknkcykgiyi7s8j";
      name = "LIFT-1.4.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://lift.cs.princeton.edu";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin allows novice programmers to run a Java program with command-line
arguments by typing the arguments in a simple popup window.
This feature is designed for students in an introductory programming course (CS 1)
who must enter command-line arguments, but seek to avoid the complexity of the
Run/Debug Configurations popup window.

Features

  Run with Arguments. Creates a popup window to enter command-line arguments
  and runs the selected program with those arguments.

  Debug with Arguments. Creates a popup window to enter command-line arguments
  and runs the debugger on the selected program with those arguments.

  LIFT menu. Create a new top-level menu LIFT that contains a
  minimal set of actions needed for compiling and executing a Java program
  (e.g., Recompile, Run with Arguments, and
  Debug with Arguments).


Implementation
The plugin works by using IntelliJ's Run/Debug Configurations.
It prompts the programmer to enter the command-line arguments; supplies
default values for all other parameters
(e.g., working directory, classpath, environment variables, and VM options);
and creates a new application configuration, if necessary.
That is, it serves as a simplified interface to
IntelliJ's Run/Debug Configurations mechanism.

Credits

This plugin was developed by Chris Pan and Kevin Wayne in Summer 2018.
Its development was sponsored by the
Department of Computer Science and
LIFT-CS
(Laboratory for Innovation for the Future of Teaching Computer Science)
at Princeton University.
      '';
    };
  }) {};

  lnkd-tech-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LNKD.tech-Editor";
    plugname = "LNKD.tech Editor";
    plugid = "tech.lnkd.LNKD-tech-Editor";
    version = "0.7-EARLY_ACCESS";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12802/84455/LNKD.tech_Editor-0.7-EARLY_ACCESS.zip";
      sha256 = "1gj5xg05yn5s2x205gc0qdfkyvcp6383164gb4kdas0j6dvc7s8p";
      name = "LNKD.tech-Editor-0.7-EARLY_ACCESS.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://lnkd.tech";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://lnkd.tech/index.php/editor/eula";
        free = false;
      };
      description = ''
        Editor for Turtle (Terse RDF Triple Language, TTL) files. This is a plugin for
    IntelliJ IDEA,
    IDEA Community Edition and others
    IDE environments
    based onIntelliJ Platform (
    also described here)



    Issue tracker


Settings:

    Plugin specific settings - 'Settings'-&gt;'Other Settings'-&gt;'LNKD.tech Editor' or 'Settings'-&gt;'LNKD.tech Editor' -
        depends how many other plugins are installed.
    
    Code formatting - 'Settings'-&gt;'Editor'-&gt;'Code Style'-&gt;'Turtle (LtE)'.
    Code annotation - 'Settings'-&gt;'Editor'-&gt;'Color Scheme'-&gt;'Turtle (LtE)'.
    Code inspections - 'Settings'-&gt;'Editor'-&gt;'Inspections' then 'Turtle (LtE)'.


Features:

    Global graphs - graphs visible in project but not part of the project (plugin settings-&gt;'Global graphs').
    Turtle file support - highlighting, completion, inspections, indexing, navigation.
    Editorial support - hierarchy (Ctrl+H), structure (Alt+7), quick documentation (Ctrl+Q), code folding
    Triple count - Status bar widget (enabled by default).
    Transaction count - Status bar widget (disabled by default).
    Language injection into literals (option under Alt+Enter).


Known limitations and issues:

    'Assisted edit' file size limitation - current default limitation of JetBrains IDEs is 2.5MB
        (details).
        Changing any of these settings settings comes with bigger resource usage.
    
    'Index' file size limitation - depending on setting (plugin settings-&gt;'Triplestore/index') limit is the same as for 'assisted edit' (default) or
        current content load limitation of JetBrains IDEs (20MB)
        (details).
        Changing any of these settings settings comes with bigger resource usage.
    
    No SPARQL support - not yet.
    No known schema or ontology resolution - you need to include all schemas and ontologies to be able to go to definitions.
    Growing plugin's folder in IDE's System Folder - This is the
        index (triple-store). If it will get too large you can clear all IDE caches ("File"-&gt;"Invalidate Caches / Restart...")
    


Powered by opensource:

    ICU4J - license: Unicode
    Eclipse Collections - licenses: EPL EDL
    Apache Jena - license: Apache License 2.0
    ...
      '';
    };
  }) {};

  lsp-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LSP-Support";
    plugname = "LSP Support";
    plugid = "com.github.gtache.lsp";
    version = "1.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10209/78443/intellij-lsp.zip";
      sha256 = "01yxma6yb8blx830zhgnxlr628m7adnml62ss796h2zwg4jar71z";
      name = "LSP-Support-1.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gtache";
      license = lib.licenses.asl20;
      description = ''
        Adds LSP (Language Server Protocol) support for IntelliJ
      '';
    };
  }) {};

  latex = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LaTeX";
    plugname = "LaTeX";
    plugid = "mobi.hsz.idea.latex";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7660/18476/idea-latex.jar";
      sha256 = "0nm47xsk9czf7xbdfbrh1scs9crqh1j48j97if3ryhiyn56r8p69";
      name = "LaTeX-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hsz/idea-latex";
      license = lib.licenses.mit;
      description = ''
        LaTeX plugin for IntelliJ IDEA 
 
GitHub | 
Issues | Donate ( 
PayPal or 
BTC ) 
 
 
Features 
 
 Syntax highlighting 
 Editor toolbar actions with shortcuts 
 Code folding 
 
Feature requests: 
 
 suggesting functions' names 
 obtaining installed packages 
 generating PDF files 
 preview generated PDF files 
 and more... 
 
 
 
Compiled with Java 1.6
      '';
    };
  }) {};

  laconic-pom = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Laconic-POM";
    plugname = "Laconic POM";
    plugid = "ris58h.lacopom";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10580/53063/lacopom-1.0.1.jar";
      sha256 = "0jvzrbj7gyj67awfsgapwq24c94ny93w6116qm002qrdavy0hwss";
      name = "Laconic-POM-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ris58h/lacopom";
      license = lib.licenses.asl20;
      description = ''
        Folds Maven's boilerplate.
      '';
    };
  }) {};

  laoyoutiao = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LaoYouTiao";
    plugname = "LaoYouTiao";
    plugid = "com.bitfly.platform.laoyoutiao";
    version = "2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15255/106403/LaoYouTiao-2.4.zip";
      sha256 = "1vb3lw7wg3yxmsm241f6wxy08jvn2gz2v7ki21bv2cv44gq7bbv5";
      name = "LaoYouTiao-2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.debuggerpowerzcy.top/about/";
      license = lib.licenses.asl20;
      description = ''
        LaoYouTiao is a multifunctional integrated plugin which is designed to remove repetitive activities at daily work.
        
        JSON format, MySQL format, camel-underline convert, normal linux commands and wonderful regex!
        老油条是一款JetBrains全平台产品的多功能整合插件, 旨在去除日常工作中的重复活动. 
        JSON美化|MySQL美化, 字符串批处理, Linux命令工具, 正则表达式奇淫巧技. 
        
            项目|Project
            博客指南|Blog guide
            视频教程||||||
                Video Manual
            
            新手教程||||||
                Tutorial
      '';
    };
  }) {};

  laravel-code-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Laravel-Code-Generator";
    plugname = "Laravel Code Generator";
    plugid = "com.github.googee.laravelgenerator";
    version = "1.3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15276/106928/Laravel_Code_Generator-1.3.4.zip";
      sha256 = "0rhzl994mb0yycpxqi9hbiqqmqc0y4y8p7552r6w3zxbphcgsk3w";
      name = "Laravel-Code-Generator-1.3.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/GooGee/Code-Generator";
      license = lib.licenses.gpl3Only;
      description = ''
        Intuitive and efficient code generator for Laravel.





Features

Custom layer (Controller, Model, Repository, etc.)Custom template (with syntax: for, if, etc.)Convert Database schema to Laravel MigrationRun artisan commandDesign database tablesDefine model factoriesManage model relationsMake field validation rulesGenerate Controller, Migration, Model, Route, Test, etc.


Where is it?

PHPStorm Menu Bar -&gt; View -&gt; Tool Windows -&gt; Code Generator

screenshots


Guide

How to generate filesHow to create migrations
      '';
    };
  }) {};

  laravel-live-templates = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Laravel-Live-Templates";
    plugname = "Laravel Live Templates";
    plugid = "com.xiaobing1024.laravel";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14756/98699/Laravel_Live_Templates.jar";
      sha256 = "1m760cx2gf7xan2h4hbq73by40f4il0ibyp1vp2x0k4f0hs412yp";
      name = "Laravel-Live-Templates-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xiaobing1024/phpstorm-laravel-live-templates";
      license = lib.licenses.asl20;
      description = ''
        Live Templates For Laravel
      Show details in Preferences -&gt; Editor -&gt; Live Templates
      -&gt; Laravel-Blade Laravel-Collection Laravel-Php Group.

      
        
      
      
      
      
      
      
      
      Example:
      
      func =&gt; function() {
      
      
      }
      

      
      geta =&gt; getAttribute() {
      
      
      }
      

      
      dbbeginTransaction =&gt; try {
      
      
        DB::beginTransaction();
      

      
        DB::commit();
      
      
        return ;
      
      
      } catch (\Exception ''$e) {
      
      
        DB::rollBack();
      
      
        return ;
      
      
      }
      
      
      @if =&gt; @if
      
      
      @endif
      

      Concat:
      
      find source code in Github
      
      
      you can concat me for edit live templates.
      '';
    };
  }) {};

  laravel-make-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Laravel-Make-Integration";
    plugname = "Laravel Make Integration";
    plugid = "com.niclas-van-eyk.laravel-make-integration";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14612/91394/laravel-make-integration.jar";
      sha256 = "1a03xkf16sa58fflw7lfnxmnhqll7aam86z171ls3g89bg7nns09";
      name = "Laravel-Make-Integration-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/NiclasvanEyk";
      license = lib.licenses.mit;
      description = ''
        This package integrates the php artisan make:* commands to the "File &gt; New" menu. 


    


    
    
    



Once an action, say File &gt; New &gt; Laravel &gt; Controller is triggered, a dialog pops up, where you can enter the
name of the class to be generated. Once you hit enter, the artisan command, here
php artisan make:controller, will be executed by your configured php interpreter.

A more detailed description can be is located in the project readme on GitHub
      '';
    };
  }) {};

  lasca-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Lasca-plugin";
    plugname = "Lasca plugin";
    plugid = "lasca.intellij.plugin";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9408/31804/lasca-intellij-plugin.zip";
      sha256 = "18r6p7d60hszaiavvy2win5y5pmzn35kzw8v1rf0zxvvfh4xapcm";
      name = "Lasca-plugin-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin is for Lasca Programming Language
      '';
    };
  }) {};

  latte = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Latte";
    plugname = "Latte";
    plugid = "com.jantvrdik.intellij.latte";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7457/16305/latte-plugin_0.1.1.jar";
      sha256 = "0nd7njxg52ylkxrm12j7kdb3ksazb9wqsjljb6hqdia87blddqc1";
      name = "Latte-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nette-intellij/intellij-latte";
      license = lib.licenses.mit;
      description = ''
        Provides support for Latte – a template engine for PHP.
			It's a must have plugin for Nette developers.
      '';
    };
  }) {};

  launch-url-from-string = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Launch-URL-from-String";
    plugname = "Launch URL from String";
    plugid = "launch-url-from-string";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10857/47148/plugin.jar";
      sha256 = "0z3ypf5sjlv4svwhd3zsfqg1a887bb2q8j3s6rnn2b8jm4ac4j0f";
      name = "Launch-URL-from-String-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/paulschaaf/launch-url-from-string";
      license = lib.licenses.asl20;
      description = ''
        Out of the box IntelliJ lets you define Regular Expressions to turn plain-text entries in your check-in comments and branch names into hyperlinks. The most common use case is to link issues back to your issue tracker.

This plugin applies those same rules to literal strings, comments, XML attributes and XML element text. Now code like @TestCase("DEVCCPERF-142") or &lt;foo&gt;DEVCCPERF-142&lt;/foo&gt; becomes hyperlinks, too.

Of course you can define link patterns to go anywhere you like. See here for more information.

Supported Languages
    Dart
    Gosu
    Java
    JavaScript
    Kotlin
    Scala
    Php
    Python
    XML (applied to attributes and element text)


Installation Instructions
Install it like a normal plugin, then restart. Define a few Regex mappings under File/Settings/Version Control/Issue Navigation. Now you should be able to CTRL-click on matching Strings.

Acknowledgements
Special thanks to Max Ishchenko, whose plugin idea-navigate-url-from-literal inspired and guided this one.
Thanks too to JetBrains for releasing the source to the wonderful IntelliJ Community Edition, and for creating Kotlin—my new favorite programming language.

Source Code
This plugin is written in Kotlin. The source is available on GitHub under the Apache License.
      '';
    };
  }) {};

  launch-programs-after-idea-launch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Launch-programs-after-Idea-Launch";
    plugname = "Launch programs after Idea Launch";
    plugid = "org.dan.idea.postlaunchhook";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8577/27934/PostLaunchHook.jar";
      sha256 = "08qazk5k6nym1pvqyn7ylrqax1fl9xjhfrpksf4camfahmnbf5s9";
      name = "Launch-programs-after-Idea-Launch-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yaitskov";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/yaitskov";
        free = false;
      };
      description = ''
        The plugin launches executable files at the plugin initialization, i.e. right after Idea start. 
A folder, where scripts are located, is "/home/''$USER/.idea-post-launch-hooks". 
I used this plugin to change default value of /proc/''$PID/oom_adj. It was hard to set it in the idea.sh because Idea forks and the actual PID is different.  
I wanted to set oom_adj because Idea is a heavy memory consumer and it could relatively safely killed by OOM Killer because of auto save.
      '';
    };
  }) {};

  launchpad-tasks-provider = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Launchpad-Tasks-Provider";
    plugname = "Launchpad Tasks Provider";
    plugid = "Launchpad Tasks Provider";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7071/11515/launchpad-plugin.zip";
      sha256 = "11vnwf576c8xvn9rsgzw8xpj2cxiaiynl45ilwp5dxk8mqq407wd";
      name = "Launchpad-Tasks-Provider-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/norrs/launchpad-intellij-tasks-provider";
      license = lib.licenses.asl20;
      description = ''
        Launchpad tasks / bugs in your favorite IDE. https://launchpad.net/lp-intellij-tasks-provider for project page containing bug reports and feature requests. https://github.com/norrs/launchpad-intellij-tasks-provider for forking and making pull requests!
      '';
    };
  }) {};

  layui = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LayUI";
    plugname = "LayUI";
    plugid = "cn.pfinal.club.pflayui.plugin";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15814/108375/Layui.jar";
      sha256 = "1zcfcvpgkp1d4w0spnrh87p03ljbx8ncznghkcdl4kxlmcvidp7i";
      name = "LayUI-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://friday-go.cc";
      license = lib.licenses.mit;
      description = ''
        LayUI
        
        A Layui framework completion using plug-ins
        
        The plug-in uses the Layui front-end framework to develop the page automatically completes the commonly used module code in the framework, and develops faster and more efficiently
        
        Plug-in for Layui front-end framework for easy development
        
        LayUI 官方文档
        
        Follow me on Github: @PFinal南丞
      '';
    };
  }) {};

  lazy = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Lazy";
    plugname = "Lazy";
    plugid = "com.qingci.lazy";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14381/91638/Lazy.jar";
      sha256 = "080za0jiyqvsy8r0sh83pdnfy3j30j9aw76i74cga25wx72dgrs6";
      name = "Lazy-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yuanqingx";
      license = lib.licenses.asl20;
      description = ''
        A tool for Spring converter
      
        pojo converter,such as DO,VO,DTO,BO,etc, depend by Spring Framework [Last One of new]
        find convert [ALt + L]
      '';
    };
  }) {};

  lazy-domain = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Lazy-Domain";
    plugname = "Lazy Domain";
    plugid = "com.fomin.plugin";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14620/90519/lazy-domain-0.1.1.zip";
      sha256 = "0pw1nhr1rliz6vsnwchcm53n2y6p03iqmdy2qy00xg5w257jl53x";
      name = "Lazy-Domain-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fomin-zhu/lazy-domain";
      license = lib.licenses.asl20;
      description = ''
        Automatically create domain models DO, DTO, BO, VO, query
    Automatically create related implementation classes Mapper, Repository, Manager, Service and Controller
      '';
    };
  }) {};

  lazydevvue = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LazyDevVue";
    plugname = "LazyDevVue";
    plugid = "dev.lazyts.vue";
    version = "0.0.2b";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13413/79429/lazy-dev-vue.zip";
      sha256 = "122c9bwb4kw1m613q6zz78ha9lclwf5ccyxwn1qxvph0av70kp6k";
      name = "LazyDevVue-0.0.2b.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vandriesh/lazy-dev-vue";
      license = lib.licenses.mit;
      description = ''
        Plugin for lazy developers that are struggling with writing tests. Like me.
      '';
    };
  }) {};

  lazyspring = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LazySpring";
    plugname = "LazySpring";
    plugid = "LazySpring";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7186/17551/LazySpring.jar";
      sha256 = "014bjdib6y0ssgkn8wrnka4bscc6rn15xvg2nbqjwcz5pk3d0mhy";
      name = "LazySpring-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/korgov/LazySpring/";
      license = lib.licenses.asl20;
      description = ''
        Сontext-config generation for class/test dependencies.
 Useful for quick dependencies resolution in JUnit-tests with Spring-beans.

 Detects class dependencies that must be resolved with spring-beans.
 There are fields annotated with @Autowired or class's setters(set-methods)
 Searchs bean definitions through all project *.xml files, that can be assigned to them
 For all beans it recursively detects their dependencies and doing another search
 Finally, we have all beans that can be need for our initial class
 They can be saved to some xml-file and used as context-configuration for our class
 
 Main use-case: Quick context-config generation for JUnit-tests.
 In big project it can be difficult(or boring) to resolve all class dependencies to run some local-tests
 
 If more than one beans found by name and type, it will be resolved with some priority-rules that you can tune in plugin-propertis
 
 Supported features: 
 
 Searching beans in production, test or libraries scope. 
 Searching beans with a check for assign by field-type (not only by name) 
 Bean-aliases supported. We can find bean-alias by name and another bean that can be referenced by alias 
 Spring-util beans supported: map, set, list 
 Some beans can be excludes from search by their name through the plugin-properties 
 Some beans can be described for use strongly-their 
 Bean's file-path can have priority, that used to resolve conflicts if more then one bean were found 
 Can be added custom headers in result-file, e.g. we can exclude some useful beans and add &lt;import&gt; with it file in header 
 
Default shortcuts: 
 
  Ctrl+Shift+Alt+L 
   
   Generate context-configuration for current class(in editor) 
   Add missing dependencies for current context-configuration (xml-file in editor) 
    
 Tools Menu -&gt; &quot;Generate context config&quot; - Same as above 
 Settings Menu (Ctrl+Alt+S) -&gt; LazySpring - Plugin properties 
 
Please note: This plugin is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      '';
    };
  }) {};

  lejos-plugin-for-lego-ev3-mindstorms = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LeJOS-Plugin-for-Lego-EV3-Mindstorms";
    plugname = "LeJOS Plugin for Lego EV3 Mindstorms";
    plugid = "org.lejos.intellij.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9954/44681/leJOS_plugin.jar";
      sha256 = "06ghhdiljwsiby7s7xrismxhlcag5knwa7a3h91p4lp15v6lyhhw";
      name = "LeJOS-Plugin-for-Lego-EV3-Mindstorms-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/miguelcordovam/leJOS_plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/miguelcordovam/leJOS_plugin";
        free = false;
      };
      description = ''
        Donate with PayPal 
 
 Plugin to develop programs for Lego EV3 Mindstorms. 
 This plugin is inspired by a similar plugin for Eclipse. 
 
 Works on Windows and UNIX-like environments. 
 
 Kotlin Support: 
 See examples here: 
Kotlin Robots 
 
 Features: 
 - Supports Kotlin and Java. 
 - Create a LeJOS project and write your code using LeJOS. 
 - Create a Run Configuration for LeJOS. 
 - Create jar, upload it to EV3 brick and run program.
      '';
    };
  }) {};

  leanpub = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Leanpub";
    plugname = "Leanpub";
    plugid = "com.hadihariri.leanpub";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8167/24912/leanpub-1.0.3.zip";
      sha256 = "1fjlks6v2lfv034jqhcq65qxgs8gr1x9kjm7vymay16jyql5m0wb";
      name = "Leanpub-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://hadihariri.com";
      license = lib.licenses.mit;
      description = ''
        A plugin for Leanpub that allows you to generate previews as well as publish books, directly from inside the IDE. Works on all IntelliJ-based IDE's
      '';
    };
  }) {};

  ledger-cli = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ledger-CLI";
    plugname = "Ledger CLI";
    plugid = "com.solvesall.ledgerplugin";
    version = "0.0.17";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15405/108404/LedgerPlugin-0.0.17.zip";
      sha256 = "0x3cxaqx94rqm8hajm09y8p5ssdlqp8zkynh2pvk9zm7z08mmnmc";
      name = "Ledger-CLI-0.0.17.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.solvesall.com";
        free = false;
      };
      description = ''
        This plugin adds Ledger CLI support to IntelliJ and other JetBrains IDEs. 
At the moment it's syntax highlighting, autocomplete and unpaid invoices detection, but we are working on adding more during this year:
Final posting viewClickable tags and codes that act as references...
      '';
    };
  }) {};

  leekscript = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LeekScript";
    plugname = "LeekScript";
    plugid = "com.plopiplop.leekwars";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7531/65574/IDEALeek.zip";
      sha256 = "09vcj943yy9j3q6fzqnn98fnly88h1piir7dq454ra31ww3qnnxl";
      name = "LeekScript-1.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bjansen/IDEALeek";
      license = lib.licenses.gpl3Only;
      description = ''
        Support for the LeekScript language (http://leekwars.com).
      '';
    };
  }) {};

  legacy-api-hider = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Legacy-API-hider";
    plugname = "Legacy API hider";
    plugid = "leviysoft.rainbowpony";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7596/17616/RainbowPony.zip";
      sha256 = "03i9md29764wd9acalw745d7ghf3ff6avidlcy1zj5x33xr6jsn7";
      name = "Legacy-API-hider-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/leviysoft/rainbowpony";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7596/license.txt";
        free = false;
      };
      description = ''
        This plugin completely hides deprecated items from completion list.
      '';
    };
  }) {};

  legacy-icon-pack-for-2018-2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Legacy-Icon-Pack-for-2018.2+";
    plugname = "Legacy Icon Pack for 2018.2+";
    plugid = "krasa.IdeaIconPack";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10777/79129/IdeaIconPack.jar";
      sha256 = "0zhw8p7cwvk8q7jv2lsiznp4qf8z0z8s75bvry2g299f4kd76nhm";
      name = "Legacy-Icon-Pack-for-2018.2+-1.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/IdeaIconPack";
      license = lib.licenses.asl20;
      description = ''
        Changes new monochrome icons to the good colorful old ones. You can choose between icons from IntelliJ 2016.2 and 2018.1. 
         
         
        
        Based on 
        Idea 2016.2 Icon Pack 
        and 
        ToolWindow Colorful Icons 
        plugins.
      '';
    };
  }) {};

  lego-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Lego-Helper";
    plugname = "Lego Helper";
    plugid = "com.kedacom.legoarch.plugin";
    version = "1.1.4-20201221";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10961/106516/LegoPlugin.jar";
      sha256 = "014shzy20nf0awv6wglrbrbb4y15wwsx4vz0za0l6symf4mxkzmg";
      name = "Lego-Helper-1.1.4-20201221.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.kedacom.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.kedacom.com";
        free = false;
      };
      description = ''
        this plugin used for legoarch,it can initialize the code of android project,create files by mvvm and so on
      '';
    };
  }) {};

  leiningen = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Leiningen";
    plugname = "Leiningen";
    plugid = "Leiningen";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5029/8483/Leiningen_8483.jar";
      sha256 = "1p69vp6i599nah9h9ynmalj98mdzlzpwy2p9y15hxljdsg87g02x";
      name = "Leiningen-0.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/derkork/intellij-leiningen-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/derkork/intellij-leiningen-plugin";
        free = false;
      };
      description = ''
        This plugin integrates the Leiningen build system into IntelliJ IDEA.
      '';
    };
  }) {};

  lets = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Lets";
    plugname = "Lets";
    plugid = "com.github.kindermax.intellijlets";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14639/100113/intellij-lets-0.0.5.zip";
      sha256 = "0jm2zk8r9lmqrpankpibqg8kj5nvil5gc5jpm7dj8c3in19rcjah";
      name = "Lets-0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://lets-cli.org";
      license = lib.licenses.asl20;
      description = ''
        This IntelliJ plugin provides support for https://github.com/lets-cli/lets task runner.

Is supports:

file type recognition for lets.yaml and lets.*.yaml configsautocomplete for config
      '';
    };
  }) {};

  lets-plot-in-sciview = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Lets-Plot-in-SciView";
    plugname = "Lets-Plot in SciView";
    plugid = "com.jetbrains.lets-plot-intellij-plugin";
    version = "1.0.8.202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14379/106276/lets-plot-intellij-plugin-1.0.8.202.zip";
      sha256 = "119ihamz85qb71ha5p3r9yhjsqxc7883kbv7gbr49vsp937ab2i2";
      name = "Lets-Plot-in-SciView-1.0.8.202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        The plugin adds support for interactive plots in IntelliJ-based IDEs with the enabled Scientific mode


The Scientific mode in PyCharm and in IntelliJ IDEA Python plugin provides support for interactive scientific computing and data visualization.


To learn more about Scientific mode check these help pages:

  Scientific mode in PyCharm
  Scientific mode in IntelliJ IDEA



Lets-Plot is an open-source plotting library for statistical data.


This plugin requires the Lets-Plot Python package to be installed in the project Python environment.


The plugin is 100% compatible with Lets-Plot v 1.5.6. The compatibility will be kept up for the later versions of Lets-Plot.
      '';
    };
  }) {};

  liborized-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Liborized-Color-Scheme";
    plugname = "Liborized Color Scheme";
    plugid = "color.scheme.Liborized";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12252/60977/liborized.jar";
      sha256 = "0fcks2vac6f6rzchvjn1dsr2wjwicl70pdjc2k4mwlmdr4bgbvwb";
      name = "Liborized-Color-Scheme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liborio7";
      license = lib.licenses.asl20;
      description = ''
        Simply the best light color scheme!
      '';
    };
  }) {};

  librarymanager = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LibraryManager";
    plugname = "LibraryManager";
    plugid = "LibraryManager";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1426/3652/LibraryManager_3652.jar";
      sha256 = "0zlz01bz3s1rvmsv9lm805c90sk89qjlvpqjcncdh0naph4a1zwh";
      name = "LibraryManager-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Manage global libraries and project libraries.
      '';
    };
  }) {};

  lice = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Lice";
    plugname = "Lice";
    plugid = "org.lice.lang";
    version = "1.8.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10319/44657/lice-intellij.zip";
      sha256 = "1lv6q6517xi7mspg5v9zhpgp7ivdk5sqj7420g3p3srjgpcbswq0";
      name = "Lice-1.8.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ice1000.org";
      license = lib.licenses.gpl3Only;
      description = ''
        Lice language support. 
 Functions provided: 
 
 
 
 Semantics-based highlighting and error reporting 
 Code completions 
 Inspections and quick fixes 
 Try Evaluate 
 In-place evaluation 
 Renaming 
 Jump to definition 
 SDK configuration and code execution 
 Bread crumb 
 Code folding 
 Spell checking 
 Structure view
      '';
    };
  }) {};

  license-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "License-Template";
    plugname = "License Template";
    plugid = "com.github.czy211.licensetemplate";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13304/73734/license-template-1.1.0.jar";
      sha256 = "1nyi2gvc9p11a2cr1b02j54q5qdvkwl0qghacfh895r8xbp4k4s5";
      name = "License-Template-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/czy211";
      license = lib.licenses.mit;
      description = ''
        Create a LICENSE file from templates.
            
            Note: If you want to know which open source license you should
            choose, please see https://choosealicense.com.
      '';
    };
  }) {};

  lifeedit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LifeEDIT";
    plugname = "LifeEDIT";
    plugid = "com.fitltd.lifefit.lifeedit";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10414/102174/lifeedit-1.0.6.zip";
      sha256 = "1m3mi1nv4ac96wa1jwix7yjgpbfppgijydrk94x91c8x7im2vad9";
      name = "LifeEDIT-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.fitltd.com";
      license = lib.licenses.asl20;
      description = ''
        LifeEdit is the intellij development plugin for developing LifeFit
      '';
    };
  }) {};

  liferay = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Liferay";
    plugname = "Liferay";
    plugid = "com.liferay.ide.intellij.plugin";
    version = "1.9.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10739/107800/liferay-intellij-plugin-1.9.0.zip";
      sha256 = "12gbkmg817py2j73z62d18iw9d21qcsg3jzx0l51qvh0pzwy51vc";
      name = "Liferay-1.9.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.liferay.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "lgpl-2.1";
        free = false;
      };
      description = ''
        Liferay Plugin for IntelliJ IDEA
	
	
		Features:
		
			Liferay Portal CE 7.x or DXP start and debug
			Liferay Workspace
			Liferay Module
			Deployment
			Better editors support for bnd.bnd, service.xml jsp and so on
			Better Liferay framework support like Liferay Taglib
		
	
	
		If you find any issues, please report them (GitHub issue tracker or Liferay issue tracker).
	
	
		Special Thanks to community contribution:
		
			Dominik Marks
      '';
    };
  }) {};

  lift-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Lift-Plugin";
    plugname = "Lift Plugin";
    plugid = "com.lift.intellij-lift";
    version = "1.0-beta";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10606/47887/intellij-lift.zip";
      sha256 = "0vxms22b36k5adlqv3ixhi0p0q82yrgji3gnlmig4hkmxgjgvjx8";
      name = "Lift-Plugin-1.0-beta.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.lift-project.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "osl-3.0";
        free = false;
      };
      description = ''
        Plugin for Lift Language.
      This plugin was initially done as a part of an honours project at the University of Edinburgh, 2018, supervised by Dr. Christophe Dubach.
      
      Lift is a novel approach to achieving performance portability on parallel accelerators.
      Lift combines a high-level functional data parallel language with a system of rewrite rules which encode algorithmic and hardware-specific optimisation choices.
      Applications written in Lift are able to take advantage of GPUs (and in the future other accelerators), transparently from the user.
      
      This plugin provides support for the following features:
      
        Syntax highlighting for elementary features in Lift
        Simple code completion aimed at support of OpenCL library functions
        Basic error highlighting aimed at incorrect imports or function calls
        Colour Settings page enabling developers to customise editor look for Lift programs
        Brace matcher support
      '';
    };
  }) {};

  ligatures-limited = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ligatures-Limited";
    plugname = "Ligatures Limited";
    plugid = "com.shetline.ligatures-limited";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14736/101130/Ligatures_Limited-1.0.2.zip";
      sha256 = "0l0nn5mpry7x12my1r73pw26mv8yiw75p3c35g2jrjhi7psfrly2";
      name = "Ligatures-Limited-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/kshetline/ligatures-limited-intellij";
      license = lib.licenses.mit;
      description = ''
        Code ligatures only where you want them, not where you don't.

    README page
      for Ligatures Limited, with full documentation.
    
    Ligatures Limited allows code ligatures, like those found in Fira Code and other fonts, to be
      rendered only where they make the most sense — typically as operators and punctuation, for example,
      &lt;= and !=. Everywhere else (using configurable rules) ligatures are
      suppressed, so they don't do weird things inside strings and comments and the like.
    
    Ligatures are also suppressed at the current insert cursor position, making it easier to see what
      you're doing as you type. Optionally this can be done for all ligatures on the currently-edited line.
    
    This plugin works automatically as soon as it is installed and enabled. See the control panel in
      Settings/Preferences → Editor → Ligatures Limited to change options and configuration. Also make
      sure in Settings/Preferences → Editor → Font that a ligature font has been selected, and
      “Enable font ligatures” is checked.
      '';
    };
  }) {};

  light-flat-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Light-Flat-Theme";
    plugname = "Light Flat Theme";
    plugid = "light.flat.theme";
    version = "0.14";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12169/60106/LightFlatTheme.jar";
      sha256 = "010z7c6074wvhlv8arcv0mrms1rlp083xwbzb7542fmhyjsw9279";
      name = "Light-Flat-Theme-0.14.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Light LaF theme based on 'Rider Light' with more 'flat' design and minimum visible borders
      '';
    };
  }) {};

  limited-wip = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Limited-WIP";
    plugname = "Limited WIP";
    plugid = "LimitedWIP";
    version = "0.3.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7655/88206/LimitedWIP.zip";
      sha256 = "1jklgnjw21rjcq2rqxwsb7vk8hbl55igcgssma534878fs9qglca";
      name = "Limited-WIP-0.3.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/limited-wip";
      license = lib.licenses.asl20;
      description = ''
        This plugin helps limit work-in-progress (WIP) by adding constraints to your normal workflow in IDE.
        
        It has three main components (each one can be enabled/disabled):
        
            Change size watchdog: shows notifications when current changelist size exceeds threshold
            Auto-revert: automatically reverts current changelist after a timeout (the timer is reset after each commit)
            TCR mode (test &amp;&amp; commit || revert): you can only commit after running a test;
                   if the test fails, current changelist is reverted; if the test passes, changes are automatically committed
        
        
        Why?
        
            focus on one thing at a time, make really small steps and commit as soon as you're done
            practice various constraints as if you're at a code retreat
            explore your limits and learn new refactoring, coding and problem solving techniques
        
        
        See https://github.com/dkandalov/limited-wip for details.
      '';
    };
  }) {};

  line-append = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Line-Append";
    plugname = "Line Append";
    plugid = "com.markacz.lineAppend";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13262/71525/plugin.jar";
      sha256 = "1gfsihnxdfrlx4z3af3nvazdginm032icqghidv4mh1arzi188rr";
      name = "Line-Append-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/markatom/idea-line-append";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "isc";
        free = false;
      };
      description = ''
        Append semicolon or comma at the end of the current line while keeping the caret position.
      '';
    };
  }) {};

  lineops = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LineOps";
    plugname = "LineOps";
    plugid = "net.kodare.lineops";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7419/15509/LineOps.jar";
      sha256 = "1vmb7rgyvigbc0wfrkj22z6kma8ca6dlh64hb5bfvxp4m711753k";
      name = "LineOps-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/boxed/LineOps-intellij-plugin/";
      license = lib.licenses.mit;
      description = ''
        Operations on lines: 
 
 Batch bookmark lines 
 Invert bookmarks 
 Clear bookmarks 
 Copy bookmarked lines 
 Cut bookmarked lines 
 Delete bookmarked lines
      '';
    };
  }) {};

  lines-sorter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Lines-Sorter";
    plugname = "Lines Sorter";
    plugid = "org.sylfra.idea.plugins.linessorter";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5919/13587/idea-plugin-linessorter.jar";
      sha256 = "1fy3jmb64bxls88m2rpc9rhkmv39lzbb8gmkv1wlndlsrm6s0n6q";
      name = "Lines-Sorter-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/syllant/idea-plugin-linessorter";
      license = lib.licenses.asl20;
      description = ''
        Add 
Sort Lines action in 
Edit menu to sort selected lines or whole file if selection is empty.
      '';
    };
  }) {};

  liquibase-ejb-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LiquiBase-EJB-Integration";
    plugname = "LiquiBase EJB Integration";
    plugid = "com.esn.idea.liquibaseejb";
    version = "0.93";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3698/6146/Liquibase_EJB_Integration_6146.jar";
      sha256 = "0fjhgl522sa7n8sbjb9jn1pivcc9wshygj765cijlchd96mcv02v";
      name = "LiquiBase-EJB-Integration-0.93.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/3698/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/3698/sourceCode.zip";
        free = false;
      };
      description = ''
        LiquiBase EJB Integration Plug-in for IntelliJ IDEA.
        Compares LiquiBase Database ChangeLog with EJB entity model providing inspections and intentions adding to ChangeLog.
        
        Source available at https://github.com/marcusn/LiquibaseEjb
        

        Examples include:
        
        * Add a new entity -> inspection to add liquibase addTable
        
        * Add a new entity field -> inspection to add liquibase addColumn
        
        * Change type of field -> inspection to add liquibase modifyColumn
        
        * Rename field -> dialog to add liquibase renameColumn.
        
        
        Other features:

        
        * Liquibase EJB facet to configure and create changelog file.
        
        * Context sensentive completion of table and column names within a changelog file.
        
        * Tool window with schema as would be created by liquibase changelog as well as EJB model.
      '';
    };
  }) {};

  liquibase-changesets-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Liquibase-ChangeSets-Generator";
    plugname = "Liquibase ChangeSets Generator";
    plugid = "woaini.liquibase.plugin";
    version = "1.3-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11510/54168/liquibase.plugin-1.3-SNAPSHOT.jar";
      sha256 = "04f194zf0ki2d3ail6hzdcm0072hbshxg4vk9wnpxj1q1g0ig4lq";
      name = "Liquibase-ChangeSets-Generator-1.3-SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://termsfeed.com/eula/a24e0f61967012734e05581eb8821fec";
        free = false;
      };
      description = ''
        This is plugin for Intellij Idea, which hepls to improve creation changesets with liquibase in yaml format.
    Firstly, set your name as author of changesets in Settings -&gt; Tools -&gt; Changesets Author.
    Then, choose changelog-master and cnangelog by click on chosen file -&gt; Liquibase -&gt; Set as ..
    By clicking on sql file, changesets with that file will be added in changelog.
    Also you can add other changesets with drop, add, rename and create actions.
      '';
    };
  }) {};

  litchi-lidroid-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Litchi-Lidroid-Plugin";
    plugname = "Litchi Lidroid Plugin";
    plugid = "com.hdyg.lidroid.litchi.plugin.LitchiPlugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11013/49200/LitchiPlugin-1.1.jar";
      sha256 = "1i65jp6377bmdgc6hk5ps77zwbcd3aw5076adxmcis1c52jy05fp";
      name = "Litchi-Lidroid-Plugin-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SpunkyYang/LitchiLib";
      license = lib.licenses.asl20;
      description = ''
        Support for Android
    Please click here for a tutorial on adding dependencies.
    
        One key to generate configuration file
        One key to generate Activity, Fragment and other files
        One key to build MVP
        Inject Views And Bind Events
        Drawable to Selector
    
    
    &nbsp;&nbsp;Look forward to your suggestion.
      '';
    };
  }) {};

  litho = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Litho";
    plugname = "Litho";
    plugid = "com.facebook.litho.intellij";
    version = "1.5.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14468/89234/litho-intellij-plugin-1.5.4.jar";
      sha256 = "00lh1zm8fmam9vr5p5rhvglxdmfrldgbgbzm4hwjx5hpl6zr6yi9";
      name = "Litho-1.5.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/facebook/litho/tree/master/litho-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Litho is a declarative UI framework for Android.
    This plugin provides better Litho integration in Android Studio.
    The following features are available:
    
      Command-click on a Section or Component takes you to Spec
      Component usages in the search results
      MountSpec, LayoutSpec, and GroupSectionSpec templates under File -&gt; New menu
      Completion for valid method annotations in LayoutSpec
      Completion for ClickEvent handler
      Completion for component builder
      Error annotations for LayoutSpec
      Error annotations for missing Required Props
      @DefaultProp value near the @Prop parameter as a folding
      Regenerate Component action in Editor menu
    
    Change Notes
    1.6.1
      
        New: Dynamic method templates.
      
    Older Versions
    Check the Changelog for full version history.
      '';
    };
  }) {};

  live-coding-in-python = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Live-Coding-in-Python";
    plugname = "Live Coding in Python";
    plugid = "io.github.donkirkby.livepycharm";
    version = "4.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9742/106812/livepy.jar";
      sha256 = "03kgigrnnpzfk4h7j565csb7qm77kw2rfczfcg0zlmjaqrnnxrj8";
      name = "Live-Coding-in-Python-4.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://donkirkby.github.io/live-py-plugin";
      license = lib.licenses.mit;
      description = ''
        Lets you run your Python code as you type it. Displays variable values,
      matplotlib, Pyglet, or turtle graphics.
      '';
    };
  }) {};

  live-templates-for-pandocs-markdown = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Live-Templates-for-Pandocs-markdown";
    plugname = "Live Templates for Pandoc's markdown";
    plugid = "com.pandocker";
    version = "0.7.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12947/106036/pandocker-live-templates.jar";
      sha256 = "11pjq0ss528fxg404qv1hxy0xlw29lmh6xf8ajks32622rxcrk6l";
      name = "Live-Templates-for-Pandocs-markdown-0.7.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pandocker";
      license = lib.licenses.mit;
      description = ''
        Live Templates for Pandoc's markdown and extra features
Templates
Shortcuts for Pandoc’s syntax

.pdiv →

::: {}

:::

.pspan → []{}
.micro → &amp;micro; (µ)
.ohm → &amp;Omega; (Ω)
.deg → &amp;deg; (°)
.degc → &amp;deg;C (°C)
.-&gt; → &amp;rarr; (→)
.rarr → &amp;rarr; (→)
.-&lt; → &amp;larr; (←)
.larr → &amp;larr; (←)

Shortcuts for pandoc-crossref filter usage
subfigures

https://lierdakil.github.io/pandoc-crossref/#subfigures
.fdiv →

::: {#fig:}

:::
Labels

l.eq or .equationlabel → #eq:

https://lierdakil.github.io/pandoc-crossref/#equation-labels

l.fig or .figurelabel → #fig:

https://lierdakil.github.io/pandoc-crossref/#image-labels

l.lst or listinglabel → #lst:

https://lierdakil.github.io/pandoc-crossref/#code-block-labels

l.sec or .sectionlabel → #sec:

https://lierdakil.github.io/pandoc-crossref/#section-labels

l.tbl or .tablelabel → #tbl:

https://lierdakil.github.io/pandoc-crossref/#table-labels


References
Visit https://lierdakil.github.io/pandoc-crossref/#references for more details

r.eq or .equationref → [@eq:]
r.fig or .figureref → [@fig:]
r.lst or .listingref → [@lst:]
r.sec or .sectionref → [@sec:]
r.tbl or .tableref → [@tbl:]

Shorcuts for pandocker-lua-filters filter usage

.csv2table → [](){.table }

https://github.com/pandocker/pandocker-lua-filters#convert-csv-into-table

.include → # #include ""

https://github.com/pandocker/pandocker-lua-filters#concatenate-text-files

.listingtable → [](){.listingtable}

https://github.com/pandocker/pandocker-lua-filters#text-file-listing

.wavedrom → [](){.wavedrom}

https://github.com/pandocker/pandocker-lua-filters#wavedrom--bit-field

.toc → \toc

https://github.com/pandocker/pandocker-lua-filters#toc--pagebreak

d.lscape or .landscapediv →

::: LANDSCAPE

:::

https://github.com/pandocker/pandocker-lua-filters#landscape-pages
d.rmnote or .rmnotediv →

::: rmnote

::: 

https://github.com/pandocker/pandocker-lua-filters#removable-note-block
d.table or .tablediv →

::: {.table }

:::

https://github.com/pandocker/pandocker-lua-filters#add-width-options-to-ordinary-table
      '';
    };
  }) {};

  liveedit-patch-for-javascript-modules-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LiveEdit-patch-for-JavaScript-modules-support";
    plugname = "LiveEdit patch for JavaScript modules support";
    plugid = "sonnenhut.liveedit.patch";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11392/52778/LiveEditPatch.zip";
      sha256 = "03np0a426fjhnqj8pf9awa7lisnlv5c5zrzf8rxgpn4iwiy46mwq";
      name = "LiveEdit-patch-for-JavaScript-modules-support-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Sonnenhut";
      license = lib.licenses.mit;
      description = ''
        IntelliJ plugin to "patch" WEB-30653
IntelliJ throws a warning when editing JavaScript modules: "Editing module's script is not supported"
As per documentation LiveEdit should at least rerun the debugger, but it does not.
This Plugin will restart the debugger whenever the above message appears.
This is not really a fix/patch, but a workaround because I cannot access/edit the sources for the Plugin.
This bug was moved to the status "Obsolete". But it is still reproducible in version:
IntelliJ IDEA 2018.3 (Ultimate Edition)
Build #IU-183.4284.148, built on November 21, 2018
Licensed to XXX
Subscription is active until XXX
JRE: 1.8.0_152-release-1343-b15 amd64
JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o
Windows 10 10.0
      '';
    };
  }) {};

  liveplugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LivePlugin";
    plugname = "LivePlugin";
    plugid = "LivePlugin";
    version = "0.6.8-beta";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7282/107613/LivePlugin.zip";
      sha256 = "1dsl1amw1ziwh4x2s5avng6ihz8z51q8dj5f9wim9hysqfv8xfyk";
      name = "LivePlugin-0.6.8-beta.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/live-plugin";
      license = lib.licenses.asl20;
      description = ''
        This is a plugin for IntelliJ IDEs to write plugins at runtime without having to restart IDE.
It uses Groovy as main scripting language and has experimental support for Kotlin.

To get started:

open "Plugins" tool window
select one of the plugin entries in the panel
    (entries are folders, and "plugin.groovy" are startup scripts for plugins)
click "Run" icon to execute plugin (or use keyboard shortcut "alt+C, alt+E" or "ctrl+shift+L")

If the above worked fine:

modify "plugin.groovy" and rerun plugin to see results
add built-in plugin examples and experiment with them
for more details see readme on GitHub


If something doesn't work, feel free to report an issue.

(To use alt+... shortcuts on OSX with JDK8 you might need to edit keyboard layout, please see
this wiki page.)
      '';
    };
  }) {};

  liverecorder-replay-for-java = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LiveRecorder-Replay-for-Java";
    plugname = "LiveRecorder Replay for Java";
    plugid = "io.undo.liverecorder.replay4j";
    version = "6.2.9dca67a2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14767/105868/lr4j-IntelliJ-6.2.2.72-9dca67a2.zip";
      sha256 = "0xm7iigk2h7aybb47g77pmpwln06b66asfdgnc1z8cgzbfq5ndmx";
      name = "LiveRecorder-Replay-for-Java-6.2.9dca67a2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://undo.io";
      license = lib.licenses.mit;
      description = ''
        Adds support for replaying recordings made with LiveRecorder for Java.
      
      LiveRecorder is a Software Failure Replay platform that provides the ability to record the execution of a Java application running on Linux, and later reversibly replay that application’s execution on the same or on a different Linux machine.
      
      LiveRecorder significantly reduces the Mean Time to Resolution (MTTR) of defects, helping developers to get to a zero-defect release faster and more predictably.
      
      Key Features:
      
	Recordings can be debugged on macOS, Windows or Linux.
	Step back or forwards to any line of code that is executed to see the full variable and heap state.
	Run back to a watchpoint or exception breakpoint to home in quickly on even the most difficult bugs, and see exactly what your software really did, in infinite detail.
      
      
      Support
      '';
    };
  }) {};

  livescriptbrains = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LiveScriptBrains";
    plugname = "LiveScriptBrains";
    plugid = "lv.modo.livescriptbrains";
    version = "0.0.1f";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7946/25615/LiveScriptBrains.jar";
      sha256 = "0rfw9iry45k4i6hiv5pvfgkxqgxzypfal9h53m844b84dxjgngj4";
      name = "LiveScriptBrains-0.0.1f.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://modo.lv";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://modo.lv";
        free = false;
      };
      description = ''
        Plugin for supporting LiveScript in JetBrains IDEs.
      '';
    };
  }) {};

  livetemplatepreview = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LiveTemplatePreview";
    plugname = "LiveTemplatePreview";
    plugid = "LiveTemplatePreview";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7189/15422/LiveTempletePreview.jar";
      sha256 = "0k6mr3qginih74d2q7f78w54y4yja0zar2lv9ciy4kr1d51r4c4b";
      name = "LiveTemplatePreview-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/siosio/LiveTempletePreview";
      license = lib.licenses.mit;
      description = ''
        Live Template preview plugin.
      '';
    };
  }) {};

  local-merged-branch-cleaner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Local-Merged-Branch-Cleaner";
    plugname = "Local Merged Branch Cleaner";
    plugid = "com.developerartemmotuzniy.LocalBranchMergedCleaner";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13702/77719/LocalBranchCleaner-1.0.1.zip";
      sha256 = "18vsz395hnzlir9hpfag376rs5gwg4zb21x80xbrs346lpp4y2pr";
      name = "Local-Merged-Branch-Cleaner-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Plugin helps to delete all local branches, that previously were merged with the current one.
      '';
    };
  }) {};

  localproperty = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LocalProperty";
    plugname = "LocalProperty";
    plugid = "com.fynn.intellij.plugin.localPropertyTools";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12266/61119/LocalPropertyTools.jar";
      sha256 = "0a7y3pigwj4zpx48i3vfq8llx36k1w655rkmlpfrh5lj9n01jy90";
      name = "LocalProperty-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ifynn";
      license = lib.licenses.asl20;
      description = ''
        A Plugin for Android 'local.properties' file.
      '';
    };
  }) {};

  localvariable-highlighter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LocalVariable-Highlighter";
    plugname = "LocalVariable Highlighter";
    plugid = "com.yilnz.intellij.highlighter.LocalVariableHighlighter";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13484/74485/localVariableHighlighter-1.7.zip";
      sha256 = "0pp2z95g2bfx50sahnav1ylaqpb8vlrsxz013jiikhpp60g4pkpp";
      name = "LocalVariable-Highlighter-1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/me10zyl/intellij-highlighter";
      license = lib.licenses.asl20;
      description = ''
        LocalVariable Highlighter.
      LocalVariable and Its Referenced ExpressionStatement highlight only.
      ps. IfStatement, ForeachStatement and other statement cannot be highlight.
      similar identifier use same color.
   
      --------------
      me10zyl@qq.com
      '';
    };
  }) {};

  localization = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Localization";
    plugname = "Localization";
    plugid = "de.espend.idea.localization";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13673/93863/idea-localization-plugin-0.0.6.zip";
      sha256 = "1fyw2hz8gimyfmwzry83w9w0l3nb9mlxkzmnw6vwa4yiqrhcxdkh";
      name = "Localization-0.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://espend.de/?p=de.espend.idea.localization";
      license = lib.licenses.mit;
      description = ''
        Extended translation / localization support for xlf, xliff

          
      Issues | Donate

      Features
      
        Register xlf and xliff as XML file type to provide navigation for Symfony Plugin
      '';
    };
  }) {};

  log-improvement = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Log-Improvement";
    plugname = "Log Improvement";
    plugid = "log-improvement";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10939/49485/Log_Improvement-0.1.0.zip";
      sha256 = "0y629h4p36fyc2lxrsyn1h2ffz191d797v86paymkcr9ys36h79v";
      name = "Log-Improvement-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/coder-chenzhi";
      license = lib.licenses.asl20;
      description = ''
        Improve Logging statement based on the best practice that we reveal from large-scale industrial software.
        This is the initial version and only the 'Add Log Guard' is implemented.&gt;
      '';
    };
  }) {};

  log-support-2 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Log-Support-2";
    plugname = "Log Support 2";
    plugid = "LogSupport2";
    version = "2.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9417/35018/log-support-2.zip";
      sha256 = "1dl3i28cbvp1jvkagcmn7zvqxnvwglvyanb7n0cgs2jrqcilhr47";
      name = "Log-Support-2-2.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/Dzhinn/log-support-2/issues";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://bitbucket.org/Dzhinn/log-support-2/issues";
        free = false;
      };
      description = ''
        Log Support 2 
 
 Full featured forked version of plugin "Log Support" which is not maintained for a long time.  
 
 This plugin supports creating and managing log calls. 
 Once installed the plugin makes using log frameworks as painless as printing to stdout.  This is achieved with the addition of intentions, live templates and code inspections that support the most important aspects of the configured log framework.  Whenever you'd attempt to write to stdout using "sout + TAB" you can now use "logd + TAB" to write a debug log line instead (other log levels are accessible via similarly named live templates). 
 The plugin is aware of loggers that are currently reachable from the context and can also add new loggers if none are reachable. Creating log output remains the same no matter what log framework is used as all operations inside the bundled live templates are performed using the framework that was previously defined for the current project scope. Log calls are validated and optionally wrapped in conditional expressions if this is desired. 
 On top of the basic feature set, enterprise class features like log ID and log review generation are available to help improving the overall quality of the generated log. 
 Features: 
 
 Supports possibly any log framework and facade 
  Pre-configured and tested with: log4j12, slf4j, TinyLog, IntelliJ-IDEA, java.util.logging and commons log  
 Assists in the generation of log IDs 
  Generates editable XHTML or ODS (Open Document Spreadsheet) review documents containing a collection of log messages that can be reviewed and adjusted by a non-developer (e.g. technical writer).  
  Adds 5 live templates logt, logd, logi, logw and loge that offer a framework neutral way of using log calls in the day to day business.  
  Adds 5 intentions and context actions that allow: 
   
   Wrapping and unwrapping log calls in 'if' conditions. 
   Add, update, replace or remove log IDs. 
    
  Adds 3 code inspections that verify whether: 
   
    Log calls are wrapped in 'if' conditions (depending on the project setup)  
    Formatted messages are valid when using MessageFormat or printf enabled frameworks.  
    Throwables can be combined with formatted messages (e.g. logback does not support this)  
    
 
 Full usage instructions can be found at the plugin's homepage.
      '';
    };
  }) {};

  log-support-lite = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Log-Support-Lite";
    plugname = "Log Support Lite";
    plugid = "LogSupportLite";
    version = "0.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8463/87366/log-support-lite.jar";
      sha256 = "1vcmqb3ksii109h7yprlwngm5zga4kr88sv7lqrzma54hmkbnp0x";
      name = "Log-Support-Lite-0.5.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lixian/log-support-lite";
      license = lib.licenses.asl20;
      description = ''
        Clone core features from "Log Support" which is not maintained for a long time.
            Optimized only for SLF4J.
        
            Support live templates: logt, logd, logi, logw, loge.
            Support inspection that detects mismatched argument count for log message format,
                and the last throwable argument is excluded now.
            
            Add quick fixes when the count of placeholders is not enough.
      '';
    };
  }) {};

  log-viewer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Log-Viewer";
    plugname = "Log Viewer";
    plugid = "com.josesamuel.logviewer";
    version = "3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10015/67921/LogViewer.jar";
      sha256 = "1yls9dirh24r55pfixi29q4piki10v7n9jczd998nkkx6xi6jcwm";
      name = "Log-Viewer-3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://josesamuel.com/logviewer/";
      license = lib.licenses.asl20;
      description = ''
        LogViewer
    
    
    LogViewer is an Android Studio plugin to view logcat logs.
    
    
    Features
    
        Easily filter on multiple process
        Add +ve and -ve text filters
        Pause and resume live logs
        One click sharing of logs
        Avoid clutter by folding logs from top, bottom or selection
        Drag and drop log files
        Switch between multiple log sources including devices and files
      '';
    };
  }) {};

  logfilter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "LogFilter";
    plugname = "LogFilter";
    plugid = "LogFilter";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/48/152/LogFilter_152.zip";
      sha256 = "1zi1wq5fmm6aaj25wwx9qcb7n79fgk4qndnx0q1ycybiiz3nz54j";
      name = "LogFilter-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Log filter for coloring or split by tabs IntelliJ IDEA console output.
      '';
    };
  }) {};

  logger-folding = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Logger-folding";
    plugname = "Logger folding";
    plugid = "com.github.healarconr.loggerfolding";
    version = "0.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8242/86410/logger-folding.jar";
      sha256 = "1qhl9gssvsr3r9mk4m4sxv5yzs94scxyfc9nxwlqkrfldq14hrj2";
      name = "Logger-folding-0.5.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/healarconr";
      license = lib.licenses.mit;
      description = ''
        Folds and unfolds logger method calls in Java and Kotlin files. Supports JUL, slf4j, Apache Commons Logging,
        log4j, Android Util Log, Timber and kotlin-logging out of the box. The names of the classes of other logging
        frameworks can be configured using the IDE settings (Tools &gt; Logger folding).
        Provides two new actions under the Code &gt; Folding menu:
        
            Fold logger method calls (Alt Gr + L)
            Unfold logger method calls (Shift + Alt Gr + L)
        
        Collapse by default of logger method calls can be enabled using File &gt; Settings &gt; Editor &gt; General &gt;
        Code Folding and checking the Logger method calls checkbox.
      '';
    };
  }) {};

  logtalk = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Logtalk";
    plugname = "Logtalk";
    plugid = "org.logtalk";
    version = "1.0.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9425/73967/logtalk-plugin-1.0.15.jar";
      sha256 = "10jq7q419gwyydfihzpbiksxs4m1s004d6l77km8xvbcw1c7cb7x";
      name = "Logtalk-1.0.15.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/java-prolog-connectivity/logtalk-intellij";
      license = lib.licenses.asl20;
      description = ''
        Logtalk support for IntelliJ.
      This plugin provides syntax highlighting for Logtalk and some basic editing features:
      
        Parentheses matching.
        Multiline terms and comments folding and unfolding.
        Automatic line and block commenting/uncommenting of selection using IntelliJ standard shortcuts.
        Tooltips for operators and keywords.
      '';
    };
  }) {};

  longtimetodate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "LongTimeToDate";
    plugname = "LongTimeToDate";
    plugid = "com.rohit.patil.long.date";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13703/76353/LongToDate.jar";
      sha256 = "0kg8ybba2a13nppv3bdr7wdxc1259r8x5xynicfh54jiq6mkclsw";
      name = "LongTimeToDate-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://rohts-patil.github.io/CV/";
      license = lib.licenses.mit;
      description = ''
        This plugin will help you to visualize the epoch time to Date. You can use this from debugger, editor or from console.
      '';
    };
  }) {};

  longevity = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Longevity";
    plugname = "Longevity";
    plugid = "longevity.idea-plugin";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9896/37736/longevity-idea-plugin-assembly-1.2.jar";
      sha256 = "0m46h28cv8548wj815spi9blrqqqi3lx5jxhzz4pylsk4iak3iqb";
      name = "Longevity-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://longevityframework.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://longevityframework.org/";
        free = false;
      };
      description = ''
        Longevity macro support for IntelliJ IDEA
      '';
    };
  }) {};

  lotus-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Lotus-Theme";
    plugname = "Lotus Theme";
    plugid = "com.blai30.lotus.theme";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14369/87064/Lotus.jar";
      sha256 = "1jad6bs70cvyj64s1vhlldgxpvj5l70qp7kdv76kvhyk3slrpns3";
      name = "Lotus-Theme-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bhlai.com";
      license = lib.licenses.mit;
      description = ''
        Lotus Theme Plugin
    A theme pack with pastel font colors for the JetBrains platform.
    

    Includes a dark theme and light theme.
    
        Lotus Dark
        Lotus Light
    
    

    Visit the plugin page to view screenshots
    

    This plugin depends on Rainbow Brackets.
      '';
    };
  }) {};

  lowlighting = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Lowlighting";
    plugname = "Lowlighting";
    plugid = "me.khol.intellij.lowlighting";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15206/101714/lowlighting-1.2.0.jar";
      sha256 = "1p4pv1sbqcwpsk12d6azzw914iqlk7r7hkgkdxs24zfjpp5wj1az";
      name = "Lowlighting-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://antimonit.github.io/";
      license = lib.licenses.asl20;
      description = ''
        Highlights method calls annotated with a custom annotation as if the code was unused and allows
            folding of all such calls at once.
            
            
            Just declare an annotation in Java or Kotlin and add the fully qualified name of the annotation
            to a `.lowlighting` file placed anywhere in the project.
      '';
    };
  }) {};

  lua = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Lua";
    plugname = "Lua";
    plugid = "Lua";
    version = "1.0.127";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5055/90237/Lua-1.0.127.zip";
      sha256 = "1ybvm9464xk5ykx0cakngxx2g8zwncd17izyk9cahf6k6qgpmvw7";
      name = "Lua-1.0.127.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://bitbucket.org/sylvanaar2/lua-for-idea/";
      license = lib.licenses.asl20;
      description = ''
        Lua language integration for IntelliJ
        
 Sponsors

Request and perform code reviews from inside your IDE.  Review any code, even if it's a work-in-progress that hasn't been committed yet, and use jump-to-definition, your favorite keybindings, and other IDE tools. Try it free


        Features:
        
        
            Some Automatic FrameXML Injections (World of Warcraft)
            Type Inference Based Completions (Experimental)
            Introduce Variable Refactoring (Experimental)
            Modules support (Experimental)
            Debugger (Experimental)
            LuaDoc Creation, Highlighting and Folding
            Live Templates ("Zen Lua")
            Custom API Support including custom function signatures and documentation
            Lua Standard Library Information via Quickhelp (ctrl-Q)
            Goto Symbol
            Safe Delete
            Rename Identifier
            JavaHelp For Lua 5.1
            Go to definition
            find usages
            Code formatting
            Speculative completion as an option (Settings|Lua)
            Code completion
            1 quickfix
            6 code intentions
            11 code inspection
            Script execution and run configurations
            Kahlua REPL Console
            Lua REPL Console
            Structure view
            Syntax checking
            Highlighting of Upvalues, Parameters and Fields
            Highlighting global vs local variables
            Customizable Syntax highlighting
            Code folding for code blocks and comments
            Brace Matching for do blocks, long strings and comments, and (, { , [
            Minor feature: comment in/out.
      '';
    };
  }) {};

  luanalysis = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Luanalysis";
    plugname = "Luanalysis";
    plugid = "au.com.glassechidna.luanalysis";
    version = "1.2.2-IDEA203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14698/107790/IntelliJ-Luanalysis-1.2.2-IDEA203.zip";
      sha256 = "0naskhd27vgq6scyz65fc8lih1mkmhcy8l3fwbh2bfm67fmqy2l4";
      name = "Luanalysis-1.2.2-IDEA203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Benjamin-Dobell/IntelliJ-Luanalysis";
      license = lib.licenses.asl20;
      description = ''
        An IDE for statically typed Lua development.
    Source Code
      '';
    };
  }) {};

  lux-script-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Lux-Script-support";
    plugname = "Lux Script support";
    plugid = "se.clau.intellij-lux";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12988/70530/intellij-lux.jar";
      sha256 = "00ahyv61j8bj30hdmijhmpcwg4kvkqfb2sp9w2pgr0awwbifm8zv";
      name = "Lux-Script-support-1.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kvakvs/intellij-lux";
      license = lib.licenses.mit;
      description = ''
        Syntax highlighting and support for scripts used for testing in
      Lux (Lucid Expect).

      
        Syntax and support for file types for Lux and Lux includes
        Annotations for Lux operators
        Commenting feature
        TODO: Code navigation and folding
      '';
    };
  }) {};

  lysosome = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Lysosome";
    plugname = "Lysosome";
    plugid = "Lysosome";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/191/881/Lysosome_881.jar";
      sha256 = "0ld0h9d663d9kqwmm7mfk5g3hzwi458zgjyjjvxzcvg08v6h5d1s";
      name = "Lysosome-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Lysosome allows you to move the text cursor to the start or end of a selection using the left
    and right cursor keys, like in many other common text editors. It also provides info about the
    current selection in the status bar.
      '';
    };
  }) {};

  magist = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MAGist";
    plugname = "MAGist";
    plugid = "ua.com.arturmamedov.MAGist";
    version = "1.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12180/100796/MAGist-1.4.0.zip";
      sha256 = "0bjwhj1pnhd73wxbsrikvh3ad7r45vcq6a86bdwl4cx18sbgsf4l";
      name = "MAGist-1.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MamedovArtur";
      license = lib.licenses.gpl3Only;
      description = ''
        MAGist Plugin
        
        GitHub
         Plugin for loading gist from github
      '';
    };
  }) {};

  mcplugindebugger = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MCPluginDebugger";
    plugname = "MCPluginDebugger";
    plugid = "com.github.syuchan1005.MCPluginDebugger";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9823/37051/MCPluginDebuggerforIDEA.jar";
      sha256 = "19asppdjg546zp7clawqjjlr5qhza9l0r2wpa9x5xbbqslbzqb6k";
      name = "MCPluginDebugger-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/syu_chan_1005";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://twitter.com/syu_chan_1005";
        free = false;
      };
      description = ''
        easy to debug Bukkit/Spigot Plugin
 How to use -&gt; https://github.com/syuchan1005/MCPluginDebuggerforIDEA
      '';
    };
  }) {};

  mcloud-cicd-platform = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MCloud-CICD-platform";
    plugname = "MCloud CI/CD platform";
    plugid = "ChinaUnicom.unique.plugin.id";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11128/50313/MCloud.zip";
      sha256 = "08y925ay9kani4qrcyx8vghd5y142mnfg17h4by2qlmax10awjwy";
      name = "MCloud-CICD-platform-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://si.cnc.cn/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        Development operation and maintenance integration platform.
      '';
    };
  }) {};

  mib-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MIB-Support";
    plugname = "MIB Support";
    plugid = "pl.jakubchmura.snmp.mib";
    version = "1.7.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9734/95700/MIB_support-1.7.4.zip";
      sha256 = "0hsjbsyi9b448bdkdi7fqjf3f0cqgzymrxh4g1hq9phh1w97rhln";
      name = "MIB-Support-1.7.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jchmura/MibPlugin";
      license = lib.licenses.asl20;
      description = ''
        MIB file support for the IntelliJ platform.
    Supports syntax highlighting, rename refactoring, code completion, structure view, go to actions.
      '';
    };
  }) {};

  mmt = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MMT";
    plugname = "MMT";
    plugid = "info.kwarc.mmt.intellij.MMTPlugin";
    version = "21.0.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11450/106125/MMT-21.0.0.0.zip";
      sha256 = "1qwfi9a914a2812gvrgwvmbnij57r77hkpiigk5n0pc26c6si9xs";
      name = "MMT-21.0.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://uniformal.github.io";
      license = lib.licenses.gpl3Only;
      description = ''
        IntelliJ IDE for the MMT system (uniformal.github.io)
    Sources available on GitHub
      '';
    };
  }) {};

  moco-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MOCO-Integration";
    plugname = "MOCO Integration";
    plugid = "com.mibexx.mbx-mocoapp";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10684/45523/MOCO-0.1.2.zip";
      sha256 = "1g9h3r5vhv53bc987hwn7v3xz8bzh7wv4blni11yjk69hc1fdcmd";
      name = "MOCO-Integration-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.mibexx.de";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.mibexx.de";
        free = false;
      };
      description = ''
        MOCO Integration
 
www.mocoapp.com
 
 Plugin icons by icons8 (
https://icons8.de/)
 
 
 
Konfiguration
 
 
 Unter View -&gt; Tool Window -&gt; MOCO kann das Tool-Fenster geöffnet werden 
 Unter "Einstellungen" kann die Subdomain sowie der API-Key hinterlegt werden 
 Unter "Kunden wählen" müssen Kunden den Favoriten hinzugefügt werden 
 Im Tool-Fenster können anschließend über den Aktualisieren-Button auf der rechten Seite die Projekte/Tasks geladen werden 

 
 
Bekannte Probleme
 
 
 Im MOCO muss der Benutzer die Rechte "Firmen" und "Projekte" haben, damit die API die notwendigen Daten zurückliefern kann 
 Es erscheinen auch Projekte und Tasks, auf die der Benutzer nicht Buchen kann/darf
      '';
    };
  }) {};

  mps-baselanguage-extensions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MPS-BaseLanguage-Extensions";
    plugname = "MPS BaseLanguage Extensions";
    plugid = "jetbrains.mps.baseLanguage.extensions";
    version = "2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7101/106747/BaseLanguageExtensions.zip";
      sha256 = "094yj912n3ly9nrym4z0naa244lrl9jwfdxy48bqapkvq319w31d";
      name = "MPS-BaseLanguage-Extensions-2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.asl20;
      description = ''
        A set of handy extensions to BaseLanguage, such as tail recursion optimization and function memoization
      '';
    };
  }) {};

  mps-baselanguage-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MPS-BaseLanguage-Support";
    plugname = "MPS BaseLanguage Support";
    plugid = "jetbrains.mps.idea.java";
    version = "2020.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9611/104122/mps-idea-java.zip";
      sha256 = "1xz7mgivybil95vjkbqwnhr10iyswkjvrjxf3c8m5bjargb3mhjc";
      name = "MPS-BaseLanguage-Support-2020.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com/mps/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7076/license.txt";
        free = false;
      };
      description = ''
        Support of the MPS BaseLanguage (JAVA)
      '';
    };
  }) {};

  mps-build-languages = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MPS-Build-languages";
    plugname = "MPS Build languages";
    plugid = "jetbrains.mps.build";
    version = "2020.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7078/104110/mps-build.zip";
      sha256 = "059vasqa5nv47669zapyylwr89lbhygf5w22pamg7aybw8cwaiy5";
      name = "MPS-Build-languages-2020.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7078/license.txt";
        free = false;
      };
      description = ''
        Declarative build languages
      '';
    };
  }) {};

  mps-core = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MPS-Core";
    plugname = "MPS Core";
    plugid = "jetbrains.mps.core";
    version = "2020.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7075/104119/mps-core.zip";
      sha256 = "1sx2dfxm9dg5vhwlgkzjab8lf5352lqcvx3z41snlsnzg852gyv9";
      name = "MPS-Core-2020.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com/mps/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.jetbrains.com/mps/download/license.html";
        free = false;
      };
      description = ''
        MPS Core
      '';
    };
  }) {};

  mps-migration-support-for-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MPS-Migration-Support-for-Idea";
    plugname = "MPS Migration Support for Idea";
    plugid = "jetbrains.mps.ide.migration.idea";
    version = "2020.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9899/104123/mps-migration.zip";
      sha256 = "0150syjzfs8h8f6n5ribd3rpyc6yrqb808cxsbjkmqwgd9gybiiw";
      name = "MPS-Migration-Support-for-Idea-2020.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com/mps/";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        MPS Migration Support for Idea Plugin
      '';
    };
  }) {};

  mps-testing = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MPS-Testing";
    plugname = "MPS Testing";
    plugid = "jetbrains.mps.testing";
    version = "2020.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9750/104124/mps-testing.zip";
      sha256 = "0l4wzx2ccg6hpck8a451jzfi9q5n1q2n0flairh088ns3197a938";
      name = "MPS-Testing-2020.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com/mps/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7078/license.txt";
        free = false;
      };
      description = ''
        Languages unit-testing java code and MPS aspects such as editor and typesystem
      '';
    };
  }) {};

  mps-version-control-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MPS-Version-Control-Support";
    plugname = "MPS Version Control Support";
    plugid = "jetbrains.mps.idea.vcs";
    version = "2020.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9612/104125/mps-vcs.zip";
      sha256 = "1h2b2f0ny71nqz21jhvw5vlb8y6bsm25l6irlngpd28rkp1zqv3s";
      name = "MPS-Version-Control-Support-2020.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com/mps/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7077/license.txt";
        free = false;
      };
      description = ''
        MPS Version Control support
      '';
    };
  }) {};

  mps-xml-model-persistence-hints = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MPS-XML-Model-Persistence-Hints";
    plugname = "MPS XML Model Persistence Hints";
    plugid = "generatedsoft.mps.xmlph";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14826/95068/gs-xmlph.jar";
      sha256 = "116vqrspc5b4kxnlrpxmgmg0dvzxngx876acrfm4fbzrw3k89y2s";
      name = "MPS-XML-Model-Persistence-Hints-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.generatedsoft.eu";
      license = lib.licenses.mit;
      description = ''
        Show meta-model hints inside MPS model files in XML persistence
    This plugin comes handy when a developer looks into a default .mps XML persistence of MPS models
    to avoid going back and forth to &lt;registry&gt; section of the file to find out meta-entity
    of a model element.
    
    MPS tooling developers are the primary audience for the plugin.
    Regular MPS users unlikely ever need to look into .mps files.
      '';
    };
  }) {};

  mprops-multiline-properties-format = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MProps-multiline-properties-format";
    plugname = "MProps: multiline properties format";
    plugid = "com.github.mprops.idea";
    version = "201.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10802/83446/mprops-idea.jar";
      sha256 = "13y7z37p6j0bgfrj5nv8ncpfjrfwdxaqdjv359by8ibadr6f0d3y";
      name = "MProps-multiline-properties-format-201.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mprops/mprops-idea";
      license = lib.licenses.asl20;
      description = ''
        Plugin adds support for multiline properties format.
      File extension: .mproperties
      '';
    };
  }) {};

  mql-idea = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MQL-Idea";
    plugname = "MQL Idea";
    plugid = "ru.investflow.mql";
    version = "201.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9291/95411/mqlidea.jar";
      sha256 = "1r3w5413h4ivqkcn4mzz49kzqyw2615c1g9h5cxfq0vngsdsxnlq";
      name = "MQL-Idea-201.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://investflow.ru/mqlidea";
      license = lib.licenses.gpl3Only;
      description = ''
        MQL4 language support for Intellij IDEA.
      '';
    };
  }) {};

  mvikotlin-time-travel = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MVIKotlin-Time-Travel";
    plugname = "MVIKotlin Time Travel";
    plugid = "org.arkivanov.mvikotlin.plugin.idea.timetravel";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14241/98658/plugin-idea-2.0.0.zip";
      sha256 = "15c40ynsm64hq1r3fjh6i4hsgl9q4cfy6xmzqds1zqq29g5kzkvg";
      name = "MVIKotlin-Time-Travel-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/arkivanov";
      license = lib.licenses.asl20;
      description = ''
        MVIKotlin time travel client for Android
      '';
    };
  }) {};

  mvp-interactor-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MVP-Interactor-Generator";
    plugname = "MVP-Interactor Generator";
    plugid = "com.wongel.MVPGenerator";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10323/42083/MPV-Interactor.jar";
      sha256 = "185fb34j1cqcrwrwsj19hkkr43hzjvjikpylf21hw80x31wh0kci";
      name = "MVP-Interactor-Generator-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tsering-wongel/MVP-Interactor";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tsering-wongel/MVP-Interactor";
        free = false;
      };
      description = ''
        Mvp Interactor Generator: This plugin is used to create MVP package with Presenter,view and interactor both in java/kotlin.
 This plugin supports Mosby MVP library as well.
      '';
    };
  }) {};

  mvpclasses = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MVPClasses";
    plugname = "MVPClasses";
    plugid = "com.yinhu.app.plugin.mvp_create";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10263/48333/MVPIdeaPlugin.jar";
      sha256 = "0kpxkxnnvjwmhgkn2b7safjbb02r7i5a7zwz8jls6p6jrbdjgnj0";
      name = "MVPClasses-1.3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.yinhu.com";
      license = lib.licenses.asl20;
      description = ''
        Create MVP Classes Plugin 
      
      1 package and 3 files will be created: 
      1、Contract 
      2、Presenter 
      3、Activity or Fragment
      Note: 
      Your Module should have 2 parent classes for the views to extends and 1 parent classes for
      the presenters to extends, named:
      BaseMVPActivity
      BaseMVPFragment
      CommonPresenter
      '';
    };
  }) {};

  mvphelper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MVPHelper";
    plugname = "MVPHelper";
    plugid = "com.wingsofts.plugin.MVPHelper";
    version = "2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8507/50356/MVPHelper_v2_4_release.jar";
      sha256 = "13c16yql9x13q1l19rl6yiv3gck94ay7m6f1y9vbbfsxn29j6pin";
      name = "MVPHelper-2.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/githubwing/MVPHelper";
      license = lib.licenses.asl20;
      description = ''
        A plugin that helps you to create classes and interfaces for MVP.
        Click 'Generate' --&gt; 'Mvp Helper' in Contract or Presenter class.
        For more detail see the link below.
      '';
    };
  }) {};

  mvpplug = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MVPPlug";
    plugname = "MVPPlug";
    plugid = "com.riven.unique.plugin.id";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12481/63315/MVPPlug.jar";
      sha256 = "1dmca794gxa10bcg0znvgx4h44zyidjz7q8pwm2bhw0a4mspgg83";
      name = "MVPPlug-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://blog.csdn.net/dong_junshuai";
      license = lib.licenses.asl20;
      description = ''
        Android MVP fast plug-in generation, not all applicable, can be changed according to their own needs, I hope you can help.
      '';
    };
  }) {};

  mvpplugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MVPPlugin";
    plugname = "MVPPlugin";
    plugid = "com.yugai.mvp";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9508/33495/MVPPlugin.jar";
      sha256 = "19c8p4dadivz84hrsxx8ca3bz9mgxwm1aml92xsgnc4iknxhn74i";
      name = "MVPPlugin-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://yugai.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://yugai.github.io";
        free = false;
      };
      description = ''
        This is a can help developers to quickly generate the MVP template plug-ins
 
What's the problem can be feedback on my email
      '';
    };
  }) {};

  mvvm-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MVVM-Generator";
    plugname = "MVVM Generator";
    plugid = "com.stfalcon.mvvmgenerator";
    version = "0.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9325/31792/mvvm-generator.jar";
      sha256 = "0k7y5q6pcww2xnivjczlmjzi7jfxx6h5yldc2l0c1b1q37ps0cnv";
      name = "MVVM-Generator-0.5.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://stfalcon.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=zegk7gzrualugo5fexb70bz0placdeps";
        free = false;
      };
      description = ''
        Plugin which generates classes for activities and fragments for MVVM architecture and Android Data Binding
      '';
    };
  }) {};

  mvvm-generator-ooftf = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MVVM-Generator-ooftf";
    plugname = "MVVM-Generator-ooftf";
    plugid = "com.github.ooftf.androidmvvmgenerator";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15813/107843/MVVM-Generator-ooftf-0.0.1.jar";
      sha256 = "1s2qwqwqgvyvxc62dr6cdawzry6hjfp3y2xlskmbrhydc7yqbs7k";
      name = "MVVM-Generator-ooftf-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Android-MVVM-Generator Use it with mvvm-component ,Code generation tools can  generated  mvvm Activity Fragment ViewModel layout with one click
      '';
    };
  }) {};

  mzsluggard-code = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MZSluggard-code";
    plugname = "MZSluggard-code";
    plugid = "com.manzo.android.sluggard.plugin";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11140/50426/MZSluggard-code-1.0.4.jar";
      sha256 = "1ap7jkpbhvgg2wpzagsw829bky30nrzai10wpfy3liq271v16w90";
      name = "MZSluggard-code-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://blog.csdn.net/shenjinalin123";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/JianLin-Shen/ManzoAndroidPlugin.git";
        free = false;
      };
      description = ''
        Provide various types of code to automatically generate code
        1. In the Activity, select R.layout.xxx. Automatically generate objects and set click events based on layout
        2. In the Adapter, select R.layout.xxx. Automatically generate injected code objects in ViewHolder according to layout
        @InjectView(R.id.test)
        Private TextView mTest;
        3, MVP mode is automatically generated under the selection of the package
      '';
    };
  }) {};

  mac-native-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mac-Native-Theme";
    plugname = "Mac Native Theme";
    plugid = "mac-native";
    version = "0.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14751/95462/mac-native-jetbrains.jar";
      sha256 = "0s38233qsv5f2df7xz484m7wnxzr5bj5vhdx4lcq08zwg15qnbbd";
      name = "Mac-Native-Theme-0.3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://subtheme.pro/";
      license = lib.licenses.mit;
      description = ''
        A native design for MacOS with a dark and light theme. Created by Subtheme.
    
    Contribute with GitHub: https://github.com/subtheme-pro/mac-native
      '';
    };
  }) {};

  machupicchu = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MachuPicchu";
    plugname = "MachuPicchu";
    plugid = "com.martinagabrielli.themes.machupicchu";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12349/61780/MachuPicchu.jar";
      sha256 = "1r6bak3chd2jml2b407d4igqd6c6f8v1lra8drwxr208x8439d0z";
      name = "MachuPicchu-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.martinagabrielli.com";
      license = lib.licenses.asl20;
      description = ''
        Machu Picchu theme inspired by the Incan citadel set high in the Andes Mountains of Peru.
      '';
    };
  }) {};

  macs-code-generation-and-action-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Macs-Code-Generation-And-Action-Plugin";
    plugname = "Mac's Code Generation And Action Plugin";
    plugid = "com.champgm.intellij.plugin.preconditions";
    version = "1.7";
    src = fetchurl {
      url = "https://github.com/champgm/IntelliJCodeGenerationPlugin/raw/wip/intellijPlugin2.jar";
      sha256 = "1y41b03vpfzwwp2ap41xpy7gmz9b5nm2zlraj3wkx592w0ha3wm9";
      name = "Macs-Code-Generation-And-Action-Plugin-1.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/champgm/IntelliJCodeGenerationPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/champgm/IntelliJCodeGenerationPlugin";
        free = false;
      };
      description = ''
        This plugin was written to try to add a few bells and whistles to IntelliJ that are conducive to laziness and good coding style.
 More information can be found here: 
https://github.com/champgm/IntelliJCodeGenerationPlugin/blob/master/README.md
      '';
    };
  }) {};

  mad-jenv = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mad-jEnv";
    plugname = "Mad-jEnv";
    plugid = "MadJenvPlugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12761/104861/Mad-jEnv-1.3.jar";
      sha256 = "10fzzr826wi485bw28mg5hvmkcrbj9h8vjnj01dbidlr7190844c";
      name = "Mad-jEnv-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/madplay/Mad-jEnv";
      license = lib.licenses.mit;
      description = ''
        Mad-jEnv plugin can provide IDEA user convenience with jEnv support such as SDK automatic change.
        If you want to improve Mad-jEnv or have questions, please refer to the link.
      '';
    };
  }) {};

  magewizards = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MageWizards";
    plugname = "MageWizards";
    plugid = "com.jadi";
    version = "1.0-alpha2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7893/20790/mage_wizards.jar";
      sha256 = "0srhr344wqfimvx7vp5kknwkh7jpxzwb9a3bqfsd36jp4bjn9sc6";
      name = "MageWizards-1.0-alpha2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Miscellaneous Magento code generation.
 See Tools -&gt; MageWizards.
 
Features available: 
 
 Product attribute wizard 
 
Report bugs and suggest features here.
      '';
    };
  }) {};

  magic-advisor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Magic-Advisor";
    plugname = "Magic Advisor";
    plugid = "lekanich.magic-advisor";
    version = "2020.3.01-2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14069/104397/magic-advisor-2020.3.01-2020.3.zip";
      sha256 = "1dz46b61li99sid17svry0afj9dnrhh7ywk86adzs6ycg0dbdwbb";
      name = "Magic-Advisor-2020.3.01-2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.bsd3;
      description = ''
        I'm your advisor in hard times. 
        When nobody can tell you what to do - I can!
        When nobody is around you - I am near!
        Just ask me.
        But remember I'm just a program and my main reason is to cheer up you and the last decision is only on your shoulders.
        
        Usage instruction:
        Go to the Menu bar and choose 'Tools' on the menu.
        On the top, you should see the 'Magic Ball' option. 
        Ask a question and press the option. 
        You can find the answer in the event log in the left bottom.
        Almost the same actions you need to do to get the philosopher's wisdom.
        Choose 'Get Wisdom' option in 'Tools' menu.
      '';
    };
  }) {};

  magic-time = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Magic-Time";
    plugname = "Magic Time";
    plugid = "com.mxloft.magicTime";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11120/49780/MagicTime.jar";
      sha256 = "1a7vvphwcjcxx79a7p0lixwzg00v27wbi3nmjlzdxdqllw1bfk4n";
      name = "Magic-Time-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.variflight.com";
      license = lib.licenses.asl20;
      description = ''
        Second level timestamp convert.
      Date to TimestampTimestamp to Date
      Select -&gt; right click -&gt; MagicTimeConvert.
      秒级时间戳转换
      日期转时间戳时间戳转日期
      选中-&gt;右击-&gt;MagicTimeConvert
      '';
    };
  }) {};

  main-menu-toggler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Main-Menu-toggler";
    plugname = "Main Menu toggler";
    plugid = "com.bashorov.mainMenuToggler";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7297/36884/IdeaMainMenuToggler.zip";
      sha256 = "071zznvcd60zkgjp86lz5a7ypnl92nbwkrmnhvfhzzzaz97jq3zx";
      name = "Main-Menu-toggler-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bashor/IdeaMainMenuToggler";
      license = lib.licenses.asl20;
      description = ''
        Main Menu visibility toggler for IDEs based on the IntelliJ platform.
      '';
    };
  }) {};

  make-immutable = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Make-Immutable";
    plugname = "Make Immutable";
    plugid = "com.ifillbrito.immutable";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11436/53235/make-immutable.jar";
      sha256 = "0vffydj9jxgran7ibiiv5f7iybvd3p7ypss05rx4ppd1irpahdnp";
      name = "Make-Immutable-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ifillbrito";
      license = lib.licenses.asl20;
      description = ''
        This plugin makes a class immutable by applying the following changes:
      
        Class modifier "final" added if not present.
        Fields modifier "final" added if not present.
        Constructor/s visibility changed to private.
        Generation of static constructor/s (method name: "of") for each private constructor.
        Generation of getters
        Generation of withers (withXYZ methods). This methods allow creating a new immutable object based on the current one.
      

      Source Code: https://github.com/ifillbrito/idea-make-immutable.
      '';
    };
  }) {};

  make-it-easy-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Make-It-Easy-Plugin";
    plugname = "Make-It-Easy Plugin";
    plugid = "uk.co.neylan.plugins.makeiteasy";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7497/16532/MakeItEasyPlugin.zip";
      sha256 = "1rrp4lmd4j9r3vgknldr6g56vhh0v6wk2bjbxm06f0vqcasxcx18";
      name = "Make-It-Easy-Plugin-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.neylan.co.uk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.neylan.co.uk";
        free = false;
      };
      description = ''
        A code-generator for Make-It-Easy Makers 
Thanks to Michal Jedynak as much of this is based on his Builder Generator
      '';
    };
  }) {};

  maketypescriptmodel = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MakeTypeScriptModel";
    plugname = "MakeTypeScriptModel";
    plugid = "com.roy.common.plugin.typescript";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14892/94706/make_typescript_model.jar";
      sha256 = "0fm4bmfx4h1r48icwqavr7zpb4myg6zg8vscnb5ra9j0pwv93p6w";
      name = "MakeTypeScriptModel-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/supercolor007";
      license = lib.licenses.gpl3Only;
      description = ''
        Make Java model to TypeScript model. For example, Java model: 
      Class Info { 
      &nbsp;&nbsp;&nbsp;&nbsp;private Integer id;
      &nbsp;&nbsp;&nbsp;&nbsp;private String name;
      &nbsp;&nbsp;&nbsp;&nbsp;// getter setter
      }
      to typeScript model: 
      export interface Info {
      &nbsp;&nbsp;&nbsp;&nbsp;id: number;
      &nbsp;&nbsp;&nbsp;&nbsp;name: string;
      }
      
      How to use: 
      Code -&gt; Generate -&gt; MakeTypeScriptModel
      '';
    };
  }) {};

  makefile-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Makefile-support";
    plugname = "Makefile support";
    plugid = "name.kropp.intellij.makefile";
    version = "3.5.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9333/103728/intellij-makefile-3.5.2.zip";
      sha256 = "1a0a36k8fvr7c9xbd5k7zqvykd94lyskamhj1g0w7l34hx0xj4k9";
      name = "Makefile-support-3.5.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://victor.kropp.name/projects/makefile/";
      license = lib.licenses.mit;
      description = ''
        Support for editing and running UNIX Makefiles
      '';
    };
  }) {};

  man-page-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Man-page-viewer";
    plugname = "Man page viewer";
    plugid = "man-page-viewer";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11167/69550/man-page-viewer.zip";
      sha256 = "1vkpa1mmx1xp6iazrq5fjnyj2w02g76cj5y1jiss3jpwjq248hk0";
      name = "Man-page-viewer-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/man-page-viewer";
      license = lib.licenses.asl20;
      description = ''
        Plugin for viewing man pages from IDE.
        Use "ctrl+shift+M" to view man page for selected text or word under caret in text editor.
        The plugin uses "man" command so it have to be installed.
      '';
    };
  }) {};

  manifold = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Manifold";
    plugname = "Manifold";
    plugid = "manifold.ij";
    version = "2020.3.37";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10057/102639/manifold-ij-2020.3.37.zip";
      sha256 = "0rdg05v57xbjl56jnlc2sb4dh0qqh4x3x4vz3bkc9yipf7gp3lz2";
      name = "Manifold-2020.3.37.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://manifold.systems";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://manifold.systems/license/plugin/eula";
        free = false;
      };
      description = ''
        What is Manifold?
Manifold plugs into Java to supplement it with powerful features, including:

  Type-safe Meta-programming
  Extension Methods
  Operator Overloading
  Unit Expressions
  A Java Template Engine
  A Preprocessor
  ...and more

All fully supported in Java 8 - 15 with comprehensive IDE support in IntelliJ IDEA and Android Studio.
Simply add Manifold to your existing project and begin taking advantage of it.

  New!
  
    Manifold supports Android Studio! Learn more.
    Manifold supports Kotlin! Learn more.
  

What can you do with Manifold?
Meta-programming
Use the framework to gain direct, type-safe access to any type of resource, such as
GraphQL,
JSON,
XML,
YAML,
CSV, and even
other languages such as JavaScript.
Remove the code gen step in your build process. &nbsp;▶&nbsp;Check&nbsp;it&nbsp;out!
GraphQL: Use types defined in .graphql files directly, no code gen steps! Make GraphQL changes and immediately use
them with code completion.
var query = MovieQuery.builder(Action).build();
var result = query.request("http://com.example/graphql").post();
var actionMovies = result.getMovies();
for (var movie : actionMovies) {
  out.println(
    "Title: " + movie.getTitle() + "\n" +
    "Genre: " + movie.getGenre() + "\n" +
    "Year: " + movie.getReleaseDate().getYear() + "\n");
}

JSON: Use .json schema files directly and type-safely, no code gen steps! Find usages of .json properties in your
Java code.
// From User.json
User user = User.builder("myid", "mypassword", "Scott")
  .withGender(male)
  .withDob(LocalDate.of(1987, 6, 15))
  .build();
User.request("http://api.example.com/users").postOne(user);

Extension Methods
Add your own methods to existing Java classes, even String, List, and File. Eliminate boilerplate code.
&nbsp;▶&nbsp;Check&nbsp;it&nbsp;out!
String greeting = "hello";
greeting.myMethod(); // Add your own methods to String!

Operator Overloading
Implement operator methods on any type to directly support arithmetic, relational, and unit operators.
// BigDecimal expressions
if (bigDec1 &gt; bigDec2) {
  BigDecimal result = bigDec1 + bigDec2;
  ...
}
// Implement operators for any type
MyType value = myType1 + myType2;

Unit Expressions
Unit or binding operations are unique to the Manifold framework. They provide a powerfully concise syntax and can be
applied to a wide range of applications.
import static manifold.science.util.UnitConstants.*; // kg, m, s, ft, etc
...
Length distance = 100 mph * 3 hr;
Force f = 5.2 kg m/s/s; // same as 5.2 N
Mass infant = 9 lb + 8.71 oz;

Ranges
Easily work with the Range API using unit expressions.
Simply import the RangeFun constants to create ranges.
// imports the `to`, `step`, and other "binding" constants
import static manifold.collections.api.range.RangeFun.*;
...
for (int i: 1 to 5) {
  out.println(i);
}

for (Mass m: 0kg to 10kg step 22r unit g) {
  out.println(m);
}

Science
Use the manifold-science
framework to type-safely incorporate units and precise measurements into your applications.
import static manifold.science.util.UnitConstants.*; // kg, m, s, ft, etc.
...
Velocity rate = 65mph;
Time time = 1min + 3.7sec;
Length distance = rate * time;

Preprocessor
Use familiar directives such as #define and #if to conditionally compile your Java projects. The preprocessor offers
a simple and convenient way to support multiple build targets with a single codebase. &nbsp;▶&nbsp;Check&nbsp;it&nbsp;out!
#if JAVA_8_OR_LATER
  @Override
  public void setTime(LocalDateTime time) {...)
#else
  @Override
  public void setTime(Calendar time) {...}
#endif

Structural Typing
Unify disparate APIs. Bridge software components you do not control. Access maps through type-safe interfaces. &nbsp;▶&nbsp;Check&nbsp;it&nbsp;out!
Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();
MyThingInterface thing = (MyThingInterface) map; // O_o
thing.setFoo(new Foo());
Foo foo = thing.getFoo();
out.println(thing.getClass()); // prints "java.util.HashMap"

Type-safe Reflection
Access private features with @Jailbreak to avoid the drudgery and vulnerability of Java reflection. &nbsp;▶&nbsp;Check&nbsp;it&nbsp;out!
@Jailbreak Foo foo = new Foo();
// Direct, *type-safe* access to *all* foo's members
foo.privateMethod(x, y, z);
foo.privateField = value;

Checked Exception Handling
You now have an option to make checked exceptions behave like unchecked exceptions!  No more unintended exception
swallowing. No more try/catch/wrap/rethrow boilerplate!
List&lt;String&gt; strings = ...;
List&lt;URL&gt; urls = list
  .map(URL::new) // No need to handle the MalformedURLException!
  .collect(Collectors.toList());

String Templates
Embed variables and expressions in String literals, no more clunky string concat! &nbsp;▶&nbsp;Check&nbsp;it&nbsp;out!
int hour = 15;
// Simple variable access with '''$'
String result = "The hour is ''$hour"; // Yes!!!
// Use expressions with ''${}'
result = "It is ''${hour &gt; 12 ? hour-12 : hour} o'clock";

A Java Template Engine
Author template files with the full expressive power of Java, use your templates directly in your code as types.
Supports type-safe inclusion of other templates, shared layouts, and more. &nbsp;▶&nbsp;Check&nbsp;it&nbsp;out!
List&lt;User&gt; users = ...;
String content = abc.example.UserSample.render(users);

A template file abc/example/UserSample.html.mtl
&lt;%@ import java.util.List %&gt;
&lt;%@ import com.example.User %&gt;
&lt;%@ params(List&lt;User&gt; users) %&gt;
&lt;html lang="en"&gt;
&lt;body&gt;
&lt;% users.stream()
   .filter(user -&gt; user.getDateOfBirth() != null)
   .forEach(user -&gt; { %&gt;
    User: ''${user.getName()} &lt;br&gt;
    DOB: ''${user.getDateOfBirth()} &lt;br&gt;
&lt;% }); %&gt;
&lt;/body&gt;
&lt;/html&gt;

IDE Support
Use the Manifold plugin to fully leverage
Manifold with IntelliJ IDEA and Android Studio. The plugin provides comprehensive support for Manifold including code
completion, navigation, usage searching, refactoring, incremental compilation, hotswap debugging, full-featured
template editing, integrated preprocessor, and more.

Projects
The Manifold project consists of the core Manifold framework and a collection of sub-projects implementing SPIs provided
by the core framework. Each project consists of one or more dependencies you can easily add to your project:
Manifold : Core
Manifold : Java Extensions
Manifold : GraphQL
Manifold : JSON
Manifold : XML
Manifold : YAML
Manifold : CSV
Manifold : Properties
Manifold : Image
Manifold : Dark Java
Manifold : JavaScript
Manifold : Java Templates
Manifold : String Interpolation
Manifold : (Un)checked Exceptions
Manifold : Preprocessor
Manifold : Science
Manifold : Collections
Manifold : I/0
Manifold : Text

  Experiment with sample projects:
  
    Manifold : Sample App
    Manifold : Sample GraphQL App
    Manifold : Sample REST API App
    Manifold : Sample Web App
    Manifold : Gradle Example Project
    Manifold : Sample Kotlin App
  

Forum
Join our Slack Group to start
a discussion, ask questions, provide feedback, etc. Someone is usually there to help.
Learn More
      '';
    };
  }) {};

  mantisconnect-for-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MantisConnect-for-Idea";
    plugname = "MantisConnect for Idea";
    plugid = "MantisConnect for Idea";
    version = "1.0RC2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1028/2526/MantisConnect_for_Idea_2526.zip";
      sha256 = "0bpf7idldmwc8dikb0x0x80fpxpnlic3yjha613sjwg0vwdzb9mg";
      name = "MantisConnect-for-Idea-1.0RC2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.kyub.com/blog/?page_id=11";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.kyub.com/blog/?page_id=11";
        free = false;
      };
      description = ''
        Mantis Bug tracker Integration. Search, view and resolve Issues registred in mantis with an integrated gui
      '';
    };
  }) {};

  mapstruct-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MapStruct-Support";
    plugname = "MapStruct Support";
    plugid = "org.mapstruct.intellij";
    version = "1.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10036/99840/MapStruct-Intellij-Plugin-1.2.3.zip";
      sha256 = "1c3i30dfg6diqlpc26wxs5v6546hg0qhdcikmxh7lfrnpcbr7fgb";
      name = "MapStruct-Support-1.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.mapstruct.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        MapStruct support for IntelliJ IDEA


Website |
GitHub |
Issue Tracker |


This plugin gives some assistance in projects that use MapStruct to generate bean mapping code.


MapStruct is a Java annotation processor for the generation of type-safe and performant mappers for Java bean classes.


If you want to discuss specific topics, then ping me (@filiphr) in the MapStruct users
chat room on gitter.

Features:

    Code Completion:
    
        Completion of target and source properties in @Mapping annotation (nested properties also work)
        Completion of target and source properties in @ValueMapping annotation
        Completion of componentModel in @Mapper and @MapperConfig annotations
    
    Go To Declaration for properties in target and source to setters / getters
    Find usages of properties in target and source and find usages of setters / getters in @Mapping annotations
    Highlighting properties in target and source
    Refactoring support for properties and methods renaming
    Errors and Quick fixesL
    
        @Mapper or @MapperConfig annotation missing
        Unmapped target properties with quick fixes: Add unmapped target property and Ignore unmapped target property.
            NB: unmappedTargetPolicy is not yet considered
      '';
    };
  }) {};

  mapper-scan = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mapper-Scan";
    plugname = "Mapper Scan";
    plugid = "com.deepexi.plugin.mapper-scan";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12789/66369/mapper-scan-1.0.1.jar";
      sha256 = "1fgvkqnk79nsf9asscbs7c0dr48s1i5g7snigw539xdj9644wqsw";
      name = "Mapper-Scan-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.deepexi.com";
      license = lib.licenses.gpl3Only;
      description = ''
        Scan SQL in mapper xml files. Prompt invalid SQL location and reason.
      '';
    };
  }) {};

  mario-driven-development = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mario-Driven-Development";
    plugname = "Mario Driven Development";
    plugid = "com.wibowo.intellij.mdd";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12547/64259/MarioDrivenDevelopment.jar";
      sha256 = "1lv289brw3ylqnzi1b5knxjhs6x3766hfbm7qrr497viskq58m36";
      name = "Mario-Driven-Development-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/alexwibowo";
      license = lib.licenses.mit;
      description = ''
        Mama mia!
      Heavily inspired by Nyan Progress Bar plugin (https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar) and Friday Mario plugin (https://plugins.jetbrains.com/plugin/7599-fridaymario). In fact, 99% of the code are copied from these two plugins
      '';
    };
  }) {};

  mario-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mario-Progress-Bar";
    plugname = "Mario Progress Bar";
    plugid = "manjaro.mpb";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14708/99999/MarioProgressBar.jar";
      sha256 = "1wapk3vm7rqj93szhhp5cir4223lj00ddg1lgps6w87sh1gj5swd";
      name = "Mario-Progress-Bar-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/KikiManjaro/MarioProgressBar";
      license = lib.licenses.asl20;
      description = ''
        This is the Mario Progress Bar for IJ based IDEs based on the Nyan Progress Bar by Dmitry Batkovitch.
      It display Mario with some bricks for the basic bar and a Koopa Shell for the indeterminate one.
      
      
      DETERMINATE:
      
      
      
      INDETERMINATE:
      '';
    };
  }) {};

  markbook = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MarkBook";
    plugname = "MarkBook";
    plugid = "icu.jogeen.markbook.id";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14156/108160/MarkBook.zip";
      sha256 = "07pq32n1fdqfqfha3lcdh2vdsncd5bwnfhpwai591ayjyzfsydc4";
      name = "MarkBook-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jogeen/MarkBook";
      license = lib.licenses.asl20;
      description = ''
        An idea plug-in that helps us take notes when reading the source code
         
           1. Read the source code and take notes
            2. Make a simple code tutorial
            3. Generate markdown notes with one click
      '';
    };
  }) {};

  markdownnoteyyf = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MarkDownNoteYYF";
    plugname = "MarkDownNoteYYF";
    plugid = "cc.yyf.MarkDownNoteYYF";
    version = "2.0-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15393/102497/MarkDownNote-Plugin-2.0-SNAPSHOT.zip";
      sha256 = "0v2cv6mjda8kbx4r54z47cnk4bx8is9k6897njdj7w3fcj2glq84";
      name = "MarkDownNoteYYF-2.0-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xzwb";
      license = lib.licenses.mit;
      description = ''
        A convenient programmer to do comments on the source code, as well as convenient programmers to make notes of the plug-in
    I am a plug-in about taking notes on the source code. Because the source code is a read-only file, programmers often need to look at the source code, so it is very troublesome to be unable to add comments. Therefore, I have developed a plug-in that can directly take notes on the source code. It can be saved as text in markdown format. The following is a screenshot of my plug-in. 
    1.Select the text and right-click mark downNote
    2.You can choose to add to existing notes or create a new list of notes
    3.Note Title: the title of the current note; note content: an explanation of the selected code segment
    4.After clicking Add to the notes list, the notes will be added to the notewindow
    5.You can add another note to the current note list
    6.Create a new note list
    7.Click the Save button and select the save path to generate the markdown format file of the current document title
    8.After configuring the content in setting, you can double-click upload to upload to the specified GitHub repository
    If the document is uploaded successfully, it will be displayed
    9.Click the delete note button to delete the current note list
    10.The empty button will clear the current note list, but it will not be deleted
    11.Click the close button to close the notewindow window
    MarkdownNote
     MarkDownNoteYYF source code and document
    v1.13 update
      '';
    };
  }) {};

  markdown-doclet-for-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Markdown-Doclet-for-IDEA";
    plugname = "Markdown Doclet for IDEA";
    plugid = "ch.raffael.mddoclet.integrations.idea.MarkdownDocletIdea";
    version = "1.4-0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9840/36790/markdown-doclet-idea-plugin-1.4-0.zip";
      sha256 = "0n30j4fzk4fbrljgml3q8dj2vxk8869kww1hiq1m3mvfdbxqf15l";
      name = "Markdown-Doclet-for-IDEA-1.4-0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Abnaxos/markdown-doclet/";
      license = lib.licenses.gpl3Only;
      description = ''
        Note: This plugin replaces "Pegdown Doclet for IDEA". 
Enables support for Quick Documentation (Ctrl-Q) for projects that use the Markdown Doclet. Enable and configure the plugin in "Settings – Markdown Doclet". 
Tip: Also install the the PlantUML integration plugin for live-previews of your UML diagrams. 
Known Issues 
 
 Some formatting problems in certain constellations; the doc is still readable, though 
 No option for Markdown parse timeout 
 
Limitation that won't be fixed 
 
 It will only process JavaDocs of project source files, external libraries won't be processed; use generated JavaDocs for libraries 
 It works only if the class where Ctrl-Q was used is located in a Markdown-enabled module 
 It may get confused on certain constellations of Markdown-enabled and Standard-JavaDoc modules
      '';
    };
  }) {};

  markdown-image-kit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Markdown-Image-Kit";
    plugname = "Markdown Image Kit";
    plugid = "info.dong4j.idea.plugin.markdown.image.kit";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12192/84937/markdown-image-kit-1.0.1.zip";
      sha256 = "0xljaaqj0p7x47iv2wrbcbprs6j7dvwkg6rg252wj0cadaazyhza";
      name = "Markdown-Image-Kit-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dong4j/markdown-image-kit";
      license = lib.licenses.mit;
      description = ''
        Markdown Image Kit
        
        Website |
        GitHub |
        Issues |
        Help
    
    
    Markdown Image Kit is a plugin for easy and efficient management of Markdown document images in IDEA.
    Writing in IntelliJ IDEA (mainly technical documentation), mapping has become a big issue, and we need to do this with other APPs.
    In order to solve the current situation, the plug-in has been developed, which can conveniently map technical documents, upload images with one click and directly replace them with markdown image tags, and of course provide other auxiliary functions.
    
    Features
    
        One-click uploading the current document (all documents) automatically replaces all reference pictures, and experiences the simplest and most efficient one-wave operation;
        Support multiple map beds, also support custom maps, no pictures you can't upload;
        One-click replacement for all labels, batch processing is as simple as that;
        Paste the picture, copy is markdown image mark, it is so direct;
        Direct compression of images, reduce traffic, increase loading speed, and think for you everywhere;
        Can be processed separately for a markdown image mark, flexible and unnecessary;
        The bed migration plan, the free flow is used up? It is not ok to move to another free map bed;
    
    
    
    Markdown Image Kit 是一款在 IDEA 中方便高效得管理 Markdown 文档图片的插件.
    在 IntelliJ IDEA 中写作(主要是技术文档), 配图成了一个大问题, 我们需要借助其他 APP 来完成这一操作.
    为了解决现状, 因此开发了此插件, 能方便得给技术文档配图, 一键上传图片并直接替换为 markdown image 标签, 当然还提供其他一些附属功能.
    
    Features
    
        一键上传当前文档(所有文档)所有引用图片后自动替换, 体验最简单高效的一波流操作;
        支持多个图床, 还支持自定义图床, 没有你上传不了的图片;
        一键替换所有标签, 批量处理就是这么简单;
        粘贴图片, 复制就是 markdown image mark, 就是这么直接;
        图片直接压缩, 减少流量, 提高加载速度, 处处为你着想;
        可对一个 markdown image mark 单独处理, 灵活的不要不要的;
        图床迁移计划, 免费流量用完了? 迁移到另一个免费图床不就 ok 了;
      '';
    };
  }) {};

  markdown-image-paste = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Markdown-Image-Paste";
    plugname = "Markdown Image Paste";
    plugid = "cn.itgrocery.plugin.markdownip";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10001/39099/markdown-image-paste.zip";
      sha256 = "1lssgklybldcqvdp32qg56r933xlha15kil8ipdv4wynwzhvpa49";
      name = "Markdown-Image-Paste-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ITGrocery/markdown-image-paste";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ITGrocery/markdown-image-paste";
        free = false;
      };
      description = ''
        Uploading image on clickbord to QiNiuYun and insert image link in current markdown file.
      '';
    };
  }) {};

  markdown-image-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Markdown-Image-Support";
    plugname = "Markdown Image Support";
    plugid = "com.github.wenzewoo.jetbrains.plugin.jetbrains-markdown-image-support";
    version = "1.2-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14097/83584/jetbrains-markdown-image-support-1.2-SNAPSHOT.zip";
      sha256 = "0wxijr7mdn6ispnnrps8g23jdqylbzx9kw73p75nn5bflhkyjv6n";
      name = "Markdown-Image-Support-1.2-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wenzewoo";
      license = lib.licenses.mit;
      description = ''
        Markdown Image Support
        
            Source Code |
            Report Issues
        
        
        
            Markdown editor one click upload image support is applicable to common products of JetBrains series.
            Features：
            
                Multiple storage support, such as local / qiniu / aliyun OSS / tencent OSS, etc.
                Customize the file name naming policy and provide a variety of preset schemes.
                Provide picture compression function, compress pictures according to the set compression rate.
                Directly from the paste image to the editor, automatically upload the image and convert it to the markdown tag.
                Directly copy one or more picture files to the editor, automatically upload the pictures and convert them to markdown tags.
                Through the ALT + enter shortcut key, the image can be deleted intelligently. When the markdown tag is deleted, the source file in the corresponding storage can be removed.
            
        
        
        
            Markdown编辑器一键上传图片支持，适用于Jetbrains系列的常见产品。
            特性：
            
                多种存储支持，如本地/七牛/阿里云OSS/腾讯OSS等。
                自定义文件名命名策略，并提供多种预设方案。
                提供图片压缩功能，按照设置的压缩率压缩图片。
                直接从粘贴图片到编辑器，自动上传图片并转换为Markdown标签。
                直接复制一个或者多个图片文件到编辑器，自动上传图片并转换为Markdown标签。
                通过Alt+Enter快捷键，智能删除图片，删除Markdown标记的同时，移除对应存储中的源文件。
      '';
    };
  }) {};

  markdown-navigator-enhanced = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Markdown-Navigator-Enhanced";
    plugname = "Markdown Navigator Enhanced";
    plugid = "com.vladsch.idea.multimarkdown";
    version = "3.0.202.112";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7896/97563/idea-multimarkdown.3.0.202.112.zip";
      sha256 = "1lg65p0cw6xq5inkmfnnkjjl75r0z6lx9ancrkndaimhpb87gjir";
      name = "Markdown-Navigator-Enhanced-3.0.202.112.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/vsch/idea-multimarkdown";
      license = lib.licenses.asl20;
      description = ''
        Markdown language support for IntelliJ platform
            
            Markdown Navigator enhanced edition
                available in JetBrains Marketplace or with a legacy license.
            Document with pleasure!
            Work with Markdown files like you do with other languages in the IDE, by getting full support
                for:
            
                Paste images into documents for fast screen capture links
                Drag &amp; Drop files and images for fast link insertion
                Formatting to cleanup documents with a key stroke
                Navigation and Find Usages to find references without effort
                Copy Markdown as JIRA, YouTrack or HTML formatted text
                Convert HTML to Markdown by pasting it into a Markdown document.
                Export to HTML or PDF to share with others
                Refactoring of all referencing elements:
                    
                        files ⟺ links
                        headings ⟺ ref anchors
                        footnotes ⟺ footnote refs
                        references ⟺ ref links/ref images
                    
                
                Completions to reduce typing:
                    
                        link address ⇐ files
                        ref anchors ⇐ headings
                        footnote refs ⇐ footnotes
                        ref links/ref images ⇐ references
                        link text ⇐ ref anchor/link address
                    
                
                Error and Warning annotations to help catch mistakes early
                Intention actions for fast results with less effort
                Wrap on Typing to keep it nicely formatted as you edit
                GitHub style rendering that you are used to, out of the box
                GitLab parsing and rendering extensions
                    
                        Math extension using Katex
                        Charts extension using Mermaid
                    
                
                Math block and inline rendering by Katex or codecogs.com
                PlantUML fenced code rendering by PlantUML or gravizo.com
                Fast typing response for distraction free editing
                Fully customizable to adjust to your preferences and project needs
      '';
    };
  }) {};

  marker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Marker";
    plugname = "Marker";
    plugid = "org.chiga17.MarkerPlugin";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14210/106262/MarkerPlugin-1.0.7.jar";
      sha256 = "0z39mkxrdmhfsflwmfx8nq1gsxmrx31m5pf99vj3lanva3ixx12r";
      name = "Marker-1.0.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Mark all occurrences of selection with background color.
        All actions are under Edit - Mark all - ... menu. 
        Or use shortcuts (it might require to remove these shortcuts from other actions in File - Settings - Keymap)
        Ctrl-1,
        Ctrl-2,
        Ctrl-3,
        Ctrl-4,
        Ctrl-5
        to mark text fragments with different colors.
        Same shortcuts without selection can be used to clear marks of corresponding group.
        Use Ctrl-` to clear all marks
        Use Ctrl-Shift-C to copy marked lines to copy-paste buffer
      '';
    };
  }) {};

  markowl = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Markowl";
    plugname = "Markowl";
    plugid = "net.mamansoft.markowl";
    version = "0.7.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14116/100100/markowl-0.7.1.zip";
      sha256 = "1hnvb70085i1qss6amvpahvlk589jdfbwmkm23ql2n53wihy1iwd";
      name = "Markowl-0.7.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://mimizou.mamansoft.net/";
      license = lib.licenses.mit;
      description = ''
        Markdown extended plugin for JetBrains IDEs and owl🦉

    [Features]
    
      Format Table
      Draw H1/H2 Line
      Draw H1/H2/H3/H4/H5 Prefix
      '';
    };
  }) {};

  markup-to-scss = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Markup-to-SCSS";
    plugname = "Markup to SCSS";
    plugid = "com.xcodersteam.idea.plugins.mkupscss";
    version = "0.2.1";
    src = fetchurl {
      url = "https://github.com/semoro/MarkupToSCSS/releases/download/0.2.1/MarkupToSCSS.zip";
      sha256 = "1lij5gpbb6g5d686mzanh4ga6m7k28wlp59f5i4vs9bngzncm9y2";
      name = "Markup-to-SCSS-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/semoro/MarkupToSCSS";
      license = lib.licenses.asl20;
      description = ''
        Adds option to generate SCSS from selected markup
 Supports PHP, JSX, AngularJS and HTML
 
 
https://github.com/semoro/MarkupToSCSS 
 Howto:
 Open file with markup(.php, .jsx, .js, .html)
 Select block to generate scss template
 Press RMB, select Generate SCSS from context menu
 ???????
 Paste to your scss file
 PROFIT!
      '';
    };
  }) {};

  material-design-color-palette = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Material-Design-Color-Palette";
    plugname = "Material Design Color Palette";
    plugid = "cn.yiiguxing.plugin.md.palette";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10869/58450/Material_Design_Color_Palette-1.2.zip";
      sha256 = "1ws6j85hmx534j7x70wnn8kvwi57qky6i5r48ykzxwk9by3xscmb";
      name = "Material-Design-Color-Palette-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/YiiGuxing/material-design-color-palette";
      license = lib.licenses.mit;
      description = ''
        Material Design color palette.
      '';
    };
  }) {};

  material-design-dark-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Material-Design-Dark-Theme";
    plugname = "Material Design Dark-Theme";
    plugid = "com.xinkun.theme.md";
    version = "1.7.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12134/73640/jetbrains-material-theme-1.7.12.zip";
      sha256 = "11aqrrap97agrhdzbh7028175878n0gi3qnr35dhpp6hrb23shbc";
      name = "Material-Design-Dark-Theme-1.7.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xinkunZ/NotReallyMDTheme";
      license = lib.licenses.mit;
      description = ''
        A jetbrains theme plugin use(may not) material design
      '';
    };
  }) {};

  material-design-icon-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Material-Design-Icon-Generator";
    plugname = "Material Design Icon Generator";
    plugid = "com.github.dhaval2404.material_icon_generator";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14170/89528/material-icon-generator-plugin.zip";
      sha256 = "13d78cpxv5aa9pfkzlgmm89861c9236dqbpm3y1q40bsnbcal7px";
      name = "Material-Design-Icon-Generator-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Dhaval2404/material-icon-generator-plugin";
      license = lib.licenses.asl20;
      description = ''
        Android Studio &amp; IntelliJ Plugin to import Material Design Icons. This plugin help you to set material icon in your app resources.
      Its clone of https://github.com/konifar/android-material-design-icon-generator-plugin.
      '';
    };
  }) {};

  material-theme-ui = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Material-Theme-UI";
    plugname = "Material Theme UI";
    plugid = "com.chrisrm.idea.MaterialThemeUI";
    version = "5.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8006/99268/Material_Theme-5.4.2.zip";
      sha256 = "0b4hg9qxxy7qrjpq0q529006312q4m3prprw9zhh45fbz5l4pw92";
      name = "Material-Theme-UI-5.4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mallowigi";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Material Theme UI Plugin
        Material Design Experience for JetBrains IDEs
        
            
        
        
        Material Theme UI is a plugin for JetBrains IDE (IntelliJ IDEA, WebStorm, Android Studio and so on) that
            changes the original appearance to a
            Material Design look and feel.
        
        Originally inspired by the Material Theme for Sublime
            Text, this plugin offers a panoply of settings to
            tweak up the IDEs the way you want. Aside for its impressive palette
                of themes,
            it also offers:
        
            Beautiful color schemes supporting a vast majority of languages
            Replacement of all icons with colorful Material Design icons
            Customization of most of the IDE's controls and components
            A lot of options, such as accent colors, padded menus, custom indent, arrow styles and such
            Some useful tweaks, such as Project View Decorators, Language Additions, etc...
        

        And it gets updated pretty frequently!
        
        Take a look at the beautiful website for more information and
            for questions and answers
        
        
        Donate
        This theme is backed up by OpenCollective.
            If you like this plugin, don't hesitate to
            give it a star or donate via Paypal or OpenCollective
        Sponsors
        This plugin is sponsored by CodeStream and Codota
        
            
        Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from
            inside your IDE while using jump-to-definition, your keybindings, and other IDE favorites. Learn
                more
        
            
        
        Code faster and smarter using code completions learned from millions of programs directly in IntelliJ,
            Android Studio or Eclipse. Get
                Codota
      '';
    };
  }) {};

  material-theme-ui-lite = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Material-Theme-UI-Lite";
    plugname = "Material Theme UI Lite";
    plugid = "com.mallowigi.idea";
    version = "12.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12124/108071/Material_Theme_UI_Lite-12.5.zip";
      sha256 = "09x4vrjkz1mqp4v4rbh23iczanb7wphvyqrgbm6zaibh7g6dsl5x";
      name = "Material-Theme-UI-Lite-12.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.material-theme.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This is a lite version of the Material Theme UI Plugin
        that includes the themes only.
      '';
    };
  }) {};

  mateu--mdd = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mateu--MDD";
    plugname = "Mateu  MDD";
    plugid = "io.mateu.lombok-plugin";
    version = "0.28.38-2019.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13157/73764/lombok-plugin-0.28.38-2019.2.zip";
      sha256 = "1hcjdmzrjgag5af2jf95g76q8yxpj0ls2pg4j4hflj5b4m0qzqma";
      name = "Mateu--MDD-0.28.38-2019.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/miguelperezcolom/lombok-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/6317/license.txt";
        free = false;
      };
      description = ''
        Mateu MDD

This is a fork of the awesome Michail Plushnikov's Lombok Plugin, in order to let Intellij recognise Mateu MDD lombok annotations.
      '';
    };
  }) {};

  mathematica-repl = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mathematica-REPL";
    plugname = "Mathematica REPL";
    plugid = "repl.simple.mathematica.id";
    version = "0.0.2";
    src = fetchurl {
      url = "https://github.com/dubrousky/Mathematica-REPL/releases/download/0.0.2/Mathematica.REPL.jar";
      sha256 = "1a41q4kz599mird7q5vm5afn999qdqkv4rmc0f6xwax9sd13c9an";
      name = "Mathematica-REPL-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dubrousky/Mathematica-REPL";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin allows to connect IntellyJ Idea(TM) to Mathematica(TM) Kernel
 and have minimal front-end to Mathematica session, control evaluation 
 and kernel. You can evaluate your code directly in the REPL without running full Mathematica Front-End.
 To use this plugin you need a full installation of Mathematica for given platform. The plugin will depends on the JLink Mathematica component and some native libraries. 
 The following functionality is available: 
 
 Creating new Mathematica session tabs at the Mathematica REPL toolbar.  
 Starting/Stopping Kernel Link.  
 Evaluate selection in the REPL/Find information on the selected symbol.  
 Please note that front end support is basic so the advanced features like Manipulate or dialogs are not supported.
 The plugin does not provide syntax highlight support for Mathematica language. There is another great plugin for that Mathematica Support. Please refer to the 
Mathematica-IntelliJ-Plugin.
      '';
    };
  }) {};

  matlab-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Matlab-Support";
    plugname = "Matlab Support";
    plugid = "MatlabSupport";
    version = "0.8.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10941/106052/IntelliJMatlabSupport-0.8.3.jar";
      sha256 = "0lwvpsvlqf4dmx83ypl0vbwn5ic8fzabi8hy7sjsxn73257f0hqj";
      name = "Matlab-Support-0.8.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kornilova203";
      license = lib.licenses.mit;
      description = ''
        Matlab syntax highlighting plugin for JetBrains IDEs.
    Documentation: github.com/kornilova203/matlab-IntelliJ-plugin
      '';
    };
  }) {};

  mattermost-chat-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mattermost-Chat-Plugin";
    plugname = "Mattermost Chat Plugin";
    plugid = "at.dotti.intellij.plugins.team.mattermost";
    version = "0.1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9668/41184/intellij-mattermost-plugin.zip";
      sha256 = "1ml5cjjnkgfd27l4fm150b9dihp0xi0wq24g8lxnnaf1ww79ymk3";
      name = "Mattermost-Chat-Plugin-0.1.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.dotti.at";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.dotti.at";
        free = false;
      };
      description = ''
        This Plugins is a simple team/chat integration for a Mattermost.com application. This plugin is still under development and there are a lot of features that can be implemented. For now you can chat on single user channels.
      '';
    };
  }) {};

  maven-2-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-2-Integration";
    plugname = "Maven 2 Integration";
    plugid = "Maven 2 Integration";
    version = "1.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1166/3696/Maven_2_Integration_3696.zip";
      sha256 = "106qa4gx5s0q8crm4l0x15cggla58a4yqrffqn7jj848r6mcl57w";
      name = "Maven-2-Integration-1.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1166/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1166/sourceCode.zip";
        free = false;
      };
      description = ''
        This plugin integrates Maven 2 into IntelliJ IDEA
      '';
    };
  }) {};

  maven-archetype-catalogs = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Archetype-Catalogs";
    plugname = "Maven Archetype Catalogs";
    plugid = "de.dm.intellij.maven-archetypes-catalog-plugin";
    version = "1.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7965/85515/maven-archetypes-catalog-plugin-1.4.0.zip";
      sha256 = "1l3zfj5c6iii9nmz69py10sy7wbh24rqg67bzxj5pb90l40zl7q5";
      name = "Maven-Archetype-Catalogs-1.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dmarks2";
      license = lib.licenses.mit;
      description = ''
        A plugin to enable IntelliJ IDEA to fetch external Maven Archetype Catalog files.
        IntelliJ IDEA is not able to fetch external Maven Archetype Catalog files (archetype-catalog.xml). To use custom Maven Archetypes, you had to add external Maven Archetypes manually.
        This plugin for IntelliJ IDEA allows you to define a list of external Maven Archetype Catalog files. Those files are fetched and the containing Maven Archetypes are made available in IntelliJ IDEA when creating new Maven projects.
        Usage
        It adds a new entry Maven Archetype Catalogs to the Settings menu at File - Settings - Build, Execution and Deployment - Build tools.
        Here you can add additional URLs or choose local files external archetype-catalog.xml files. If you need to authenticate to the reposistory, use an URL like 'http://[username]:[password]@[url]'.
        After adding those Catalog files the Archetypes present in these files will be available when creating new Maven projects or Maven modules based on Archetypes.
        Importing from pom.xml
        If you define Maven Archetype Catalogs in your pom.xml file, those settings will be automatically imported.
        You have to either define the property archetypeCatalog in your pom.xml or add a configuration for the plugin org.apache.maven.plugins:maven-archetype-plugin and configure the archetypeCatalog there.
      '';
    };
  }) {};

  maven-archetypes = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Archetypes";
    plugname = "Maven Archetypes";
    plugid = "Maven Archetypes";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1789/5114/Maven_Archetypes_5114.zip";
      sha256 = "0z6rbf794i0yhr3hjdas3r9j83gidmi9i4p5krzdc2c89bq0ps6r";
      name = "Maven-Archetypes-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/maven-archetypes-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/maven-archetypes-idea-plugin";
        free = false;
      };
      description = ''
        This plugin helps to generate initial java project layout with the help of Maven Archetypes.
      '';
    };
  }) {};

  maven-dependency-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Dependency-Helper";
    plugname = "Maven Dependency Helper";
    plugid = "com.yiycf.plugins.mavenDependencyHelper";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12041/87801/maven-dependency-helper-2.0.zip";
      sha256 = "0x0h543pi74wvgy708lnyxqcgvzxmjnkdy2nhhap3v2awxxmxh8p";
      name = "Maven-Dependency-Helper-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yiyingcanfeng/maven-dependency-helper";
      license = lib.licenses.mit;
      description = ''
        Search dependency without open the browser
        GitHub |
        Issues
        Features:
        
            
                Select an artifactId in pom.xml, right click on the shortcut menu or press the shortcut button
                Ctrl+Shift+D to open
                the window, then query all release versions of the dependency online from mvnrepository.com and show
            
            
                Open the window, type the dependency you want to find directly in the search bar, click Search or press
                Enter directly. The most similar result will appear in the drop-down menu, then select the version you
                want.
            
            
                Support for copying version information or complete dependency information directly to the clipboard
      '';
    };
  }) {};

  maven-dependency-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Dependency-Manager";
    plugname = "Maven Dependency Manager";
    plugid = "Maven Dependency Manager";
    version = "1.02";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/697/3103/Maven_Dependency_Manager_3103.zip";
      sha256 = "12s6ri20hfvxpy8ddnvm8ah3lcxph3nbzg49cxzncz0i8bgrsgsr";
      name = "Maven-Dependency-Manager-1.02.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/697/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/697/sourceCode.zip";
        free = false;
      };
      description = ''
        Compares and synchronizes dependency differences between Maven 1.0 projects and IntelliJ IDEA modules.
		Unlike the Maven plugin for IDEA, this plugin preserves other module settings updating only the dependencies.
		Adds the following menu items to the Tools menu:
		
		Maven -> IDEA updates the IDEA module with dependencies from the Maven project.
		Maven [- IDEA updates the Maven project with dependencies from the IDEA module.
		Maven [-> IDEA compares the dependency differences.
      '';
    };
  }) {};

  maven-dependency-properties = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Dependency-Properties";
    plugname = "Maven Dependency Properties";
    plugid = "com.felixzz.maven-dependency-properties-plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15081/102020/maven-dependency-properties-plugin-1.0.2.zip";
      sha256 = "0msvsl89xvhvb65dzcai5g1ag5v6i0mk25p5fci3nbgcxy0faz9s";
      name = "Maven-Dependency-Properties-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Felixzz/maven-dependency-properties-plugin";
      license = lib.licenses.bsd3;
      description = ''
        A plugin that extract the version number of dependency to properties in pom.xml
      '';
    };
  }) {};

  maven-dependency-sync = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Dependency-Sync";
    plugname = "Maven Dependency Sync";
    plugid = "Maven Dependency Sync";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1437/3685/Maven_Dependency_Sync_3685.zip";
      sha256 = "1s1admq7zwypdl30hs9faqn4vlhjcycd9xv4xfp1kiihgfnr1kpd";
      name = "Maven-Dependency-Sync-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Keep your IntelliJ classpaths synchronised with a Maven POM File. You don't need to use Maven as your build tool, just leverage its handy dependency management!

Quick Instructions


Create a POM file for your module(s) listing top level dependencies.


Optional In the project settings under Maven Dependency Sync, configure a list of repositories. You can mix file and HTTP repositories. By default http://ibiblio.com/maven2 is chosen.

Associate a POM file with an IntelliJ module in Project Structure -> module -> POM File.

Then use Tools -> Fetch Dependencies to download all dependencies for modules with POM Files.


More Information
Transitive dependencies are also fetched. This means you if you depend on hibernate, its dependencies (e.g. cglib, asm) will be fetched.

When a library is first fetched source and javadoc are automatically fetched. If they were not available from the remote repository you can install them in a local maven repository and then right click the library in the Project View -> Fetch Source and Javadoc.

A module can mix maven configured and manually configured libraries. The order of dependencies specified in the normal IntelliJ dependencies configuration will be preserved.

The local maven repository (a cache of downloaded artifacts) is located in ''$HOME/.m2/repository. The IntelliJ classpath will point at jar files in this directory. A future version of the plugin will be more flexible with this location.

You can use the same POM files to configure classpaths in your Ant build using the Maven dependency Ant tasks.
      '';
    };
  }) {};

  maven-executor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Executor";
    plugname = "Maven Executor";
    plugid = "org.kubicz.mavenexecutor.plugin.id";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11394/78901/maven-executor-plugin-1.0.6.zip";
      sha256 = "10s74vrlcr3g32bwxkhysv8ywrnnscgfmxkxaxpinb5pkwkjbm6w";
      name = "Maven-Executor-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/skubicz/maven-executor-plugin";
      license = lib.licenses.asl20;
      description = ''
        Maven Executor is a plugin for IntelliJ IDEA provides new tool window with maven run parameters.
It is an alternative for the standard Maven Project Tool Window.



Functionality

Toolbar Menu

Reimport Maven Projects - standard reimport all maven projects action
Open Maven Projects Configuration - open embedded IDEA maven configuration
JVM Options - dialog window for JVM parameters - one parameter for one line ('\n' is a separator)
Environment Variables - dialog window for Environment Variables
Save - allows to save favorite settings


Main configuration part

Goals - maven goals to execute
Run Button - run maven with actual goals and parameters
Offline - enable/disable maven --offline flag
Update Snapshots - enable/disable --update-snapshots flag
Threads - number of thread to run parallel, -T option (currently not supported "thread per cpu")
Profiles - list of maven profiles
Jvm Options - optional JVM Options, when checkbox is selected, parameters are added to main JVM parameters (from dialog window)


Tree of projects

Tree of checkbox representing structure of maven projects. Each node is maven module. If all nodes are selected, project is build normally.
When only some nodes are selected, project is build with --projects option. In both case, order of building modules is calculated by Maven Reactor.


Favorite part

DEFAULT - it is label to default settings - always available
Favorite - list of shortcut to saved settings, every change is immediately saved


Select Current button

Select module by current open files (open, not selected and visible in editor Tab)
      '';
    };
  }) {};

  maven-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Helper";
    plugname = "Maven Helper";
    plugid = "MavenRunHelper";
    version = "4.10.193.000.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7179/93965/MavenRunHelper.zip";
      sha256 = "00l3aazk3wp2y7s23s0h085dszw9p6yd5p610gjgybr005a1p9ng";
      name = "Maven-Helper-4.10.193.000.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/MavenHelper";
      license = lib.licenses.asl20;
      description = ''
        A must have plugin for working with Maven.
		Provides:
		
		easy way for analyzing and excluding conflicting dependencies
        actions to run/debug maven goals for a module that contains the current file or on the root module
              action to open terminal at the current maven module path 
        actions to run/debug the current test file.
        If maven-surefire-plugin is configured to skip or exclude the test, 'verify' goal will be used, see different configuration styles at https://github.com/harishkannarao/MavenSurefireFailsafeExamples
         
        
            
        Usage:
		
        Right click in Editor | Run Maven
        Right click in Project View Toolbar | (Run|Debug) Maven
        CTRL + ALT + R - "Run Maven Goal" popup (you can use Delete key in the popup)
        CTRL + SHIFT + ALT + R - "Run Maven Goal on Root Module" popup (you can use Delete key in the popup)
        
        Customize goals: Settings | Other Settings | Maven Helper 
        Define shortcuts: Settings | Keymap | Plug-ins | Maven Helper 
    	
        Open pom file, click on 'Dependency Analyzer' tab, right click in the tree for context actions.
      '';
    };
  }) {};

  maven-pom-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-POM-Editor";
    plugname = "Maven POM Editor";
    plugid = "com.github.inikolaev.intellij.maven";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12357/62019/Maven_POM_Editor_Plugin_for_IntelliJ-0.0.3.zip";
      sha256 = "1dm0mar82zclzvqim94ccqjyjh0sw9vxq9sns7ja6gv8h5h6b9pz";
      name = "Maven-POM-Editor-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/inikolaev";
      license = lib.licenses.mit;
      description = ''
        Maven POM Editor Plugin for IntelliJ
      GitHub |
      Issues
      '';
    };
  }) {};

  maven-project-version = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Project-Version";
    plugname = "Maven Project Version";
    plugid = "com.felixzz.maven-project-version-plugin";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14904/102361/maven-project-version-plugin-1.0.7.zip";
      sha256 = "1czbwlxs6ih6rk15mmfjr8ix6h75r4868kw1g5q7bdmdqc4lv314";
      name = "Maven-Project-Version-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Felixzz/maven-project-version-plugin";
      license = lib.licenses.bsd3;
      description = ''
        A plugin that batch set maven project version for each module

Usage:

    Locate to maven NavigatorActionsToolbar 
    Click the button(Upward Arrow) after "Add Maven Projects" 
    Select your root project
    Input the version number you expect
    Submit
      '';
    };
  }) {};

  maven-runner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Runner";
    plugname = "Maven Runner";
    plugid = "MvnRunner";
    version = "0.4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7409/49013/MvnRunner-0.4.4.zip";
      sha256 = "0djskfajk9dvwvylmxfsdx5sd2jqpk5wyvvm54sbbspf7f2py2pl";
      name = "Maven-Runner-0.4.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ShlXue/MvnRunner";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ShlXue/MvnRunner";
        free = false;
      };
      description = ''
        Building, Run/Debug maven module by mvn.
        
            test class, method, package and module
            run main method
            run application server: jetty or tomcat, if pom file is selected
            add option: config fork mode(from Preferences/Maven/Importing)
            add a quick switch popup menu for maven build(shortcut: ^M)
            add maven build menu to Build main menu(shortcut: ^⌘ + C/T/P/I)
            show all dependencies at pom file, otherwise only module dependencies(shortcut: ^⌘U)
            quick open pom file by maven artifact(shortcut: ^⌘M)
            quick run plugin goals by quick switch menu(shortcut: ^P)
        
        all shortcuts: from Preferences/Keymap/Plug-ins/Maven Runner/...
      '';
    };
  }) {};

  maven-test-support-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Maven-Test-Support-Plugin";
    plugname = "Maven Test Support Plugin";
    plugid = "org.dpytel.intellij.plugin.maventest";
    version = "0.0.21";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7446/34023/maven-test-support-plugin-0.0.21.jar";
      sha256 = "0sc935mgxa88rc9yfzn88r8781hgj5rc1flfm4c929jyg9yvhfi1";
      name = "Maven-Test-Support-Plugin-0.0.21.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/destin/maven-test-support-plugin/wiki";
      license = lib.licenses.asl20;
      description = ''
        This plugin is intended to help developers work with tests in maven projects. 
Currently the following features are available: 
 
 Displaying Surefire and Failsafe test results 
 Navigating from test results view to specific tests
      '';
    };
  }) {};

  maven-version-in-project-view = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Version-in-Project-View";
    plugname = "Maven Version in Project View";
    plugid = "com.github.novotnyr.maven-version-idea-plugin";
    version = "2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12399/64358/maven-version-idea-plugin-2.zip";
      sha256 = "05p6ri6wp4f2k0bn4aawz9mxy8gl4xj6qabigmv0v6kzgqxpid9i";
      name = "Maven-Version-in-Project-View-2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/novotnyr";
      license = lib.licenses.asl20;
      description = ''
        Displays Maven artifact version in the Project Tree view
        
            Show Maven version from pom.xml for each Project module
            in the Project view.
            Toggle Maven versions from the Gear button in the project view.
      '';
    };
  }) {};

  maven-version-in-title-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Maven-Version-in-Title-Bar";
    plugname = "Maven Version in Title Bar";
    plugid = "com.steve.plugins.mavenversion";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7483/16288/mavenversion-plugin.jar";
      sha256 = "1w2b9x6blz6g6a4riwylzx9wpabdjhsr96s5rxgrsmnl91hlj25q";
      name = "Maven-Version-in-Title-Bar-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Displays the maven version of your project in the title bar of the main window frame. 
 
For example: 
myproject - 1.0.0-SNAPSHOT - [C:\IdeaProjects\myproject] 
 
The maven version is obtained from the &lt;version&gt; tag in the pom.xml file at the root of your project.
      '';
    };
  }) {};

  maven-version-in-window-title = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Maven-Version-in-Window-Title";
    plugname = "Maven Version in Window Title";
    plugid = "com.dk.mavenversion";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14043/97194/maventitlebar.jar";
      sha256 = "033rcps5qqfqkrij9kh5zby78bl1azla6gmiqh2jqbjngqh3nxnn";
      name = "Maven-Version-in-Window-Title-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Shows project name &amp; maven version in the title bar.
      '';
    };
  }) {};

  maven-versions- = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Versions-+";
    plugname = "Maven Versions +";
    plugid = "com.ly.maven.versions.plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13138/71465/maven-versions-plugin-1.0.2.zip";
      sha256 = "0kz9dzpcfyrzvqjivmk9rfq1nraix4hv5wpaz6v968xlhmfvmgcr";
      name = "Maven-Versions-+-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tonycody/";
      license = lib.licenses.asl20;
      description = ''
        This is a plug-in that automatically adds the maven version
      '';
    };
  }) {};

  maven-wrapper-intellij-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Wrapper-IntelliJ-IDEA-plugin";
    plugname = "Maven Wrapper IntelliJ IDEA plugin";
    plugid = "maven-wrapper-plugin";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10160/40264/maven-wrapper-plugin.zip";
      sha256 = "0w7j0x98vlfbhjvhq3sjsrkqd8pzh8xbbjfpgr4n8yh22gvj8fmf";
      name = "Maven-Wrapper-IntelliJ-IDEA-plugin-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://jenv.mvnsearch.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://jenv.mvnsearch.org";
        free = false;
      };
      description = ''
        Maven Wrapper support for IntelliJ IDEA. https://github.com/takari/maven-wrapper
      '';
    };
  }) {};

  maven-wrapper-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Maven-Wrapper-support";
    plugname = "Maven Wrapper support";
    plugid = "com.blackbuild.intellij.maven-wrapper-support";
    version = "0.5.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10633/104335/maven-wrapper-support-0.5.3.zip";
      sha256 = "1rsb6kpf5n6piw2dck5s4qciij5b2xmgbmrbsvf88f94np17z8s8";
      name = "Maven-Wrapper-support-0.5.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/blackbuild/idea-maven-wrapper-support";
      license = lib.licenses.mit;
      description = ''
        Plugin to automatically use a configured Maven Wrapper if present.
      '';
    };
  }) {};

  maven-build-this-module-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Maven-build-this-module-plugin";
    plugname = "Maven build-this-module plugin";
    plugid = "org.kohsuke.idea.mbt";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1807/6487/org.kohsuke.idea.mbt_6487.jar";
      sha256 = "12na6mpq3g56hv0g8qww48cxlga1fpj9ri4apdz4jzr4c46q15v3";
      name = "Maven-build-this-module-plugin-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Adds a menu item in the Build menu to run the install goal for the maven module that contains the current file.
      '';
    };
  }) {};

  mavendeploy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MavenDeploy";
    plugname = "MavenDeploy";
    plugid = "com.deploytools.plugin";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11383/94537/MavenDeploy.zip";
      sha256 = "1xms728kj7ikzvpb0wjb8b3qkys3p9i3xxrk4jyxvlwa6f0p29lf";
      name = "MavenDeploy-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gf5353/deploytools";
      license = lib.licenses.asl20;
      description = ''
        This ItelliJ IDEA plugin can help Android developers release different maven repositories with zero configuration, such as Nexus, Artifactory, Jcenter
      '';
    };
  }) {};

  mavenmanager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MavenManager";
    plugname = "MavenManager";
    plugid = "zdc.ideaPlugin.MavenManager";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14478/88571/MavenManager-1.0.1.zip";
      sha256 = "0ps8lzw5zmal38l176k2xyyciiwlkjqyh6zryapayyixpqv06nl8";
      name = "MavenManager-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zhoudechuan/ideaPlugin-MavenManager";
      license = lib.licenses.asl20;
      description = ''
        Manage dependencies of maven project to resolve jar conflicts.
        
        Usage:
            Pitch on pom.xml -&gt; Right click -&gt; MavenManager.
      '';
    };
  }) {};

  maxcompute-studio = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MaxCompute-Studio";
    plugname = "MaxCompute Studio";
    plugid = "OdpsStudio";
    version = "3.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9193/107095/odps-studio-intellij-3.6.1_20210106174152.zip";
      sha256 = "15kyl8axbaicdvgqzg20rqy4snndgk3g36dmz129p1yqbprh2c9w";
      name = "MaxCompute-Studio-3.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.aliyun.com";
      license = lib.licenses.asl20;
      description = ''
        MaxCompute is a big data processing platform developed
        by Alibaba Cloud independently.
        It is a fast and cloud-based big data solution that supports multiple distributed data storage and processing models,
        which can provide massive data warehouse and big data modeling service.
        
        
        MaxCompute Studio is a plugin for IntelliJ platform allowing data developers works with MaxCompute
        platform including authoring SQL scripts, UDF extensions, MapReduce programs and other functions like
        local debugging, data browsing and uploading/downloading, job browsing and analytics, etc.
        
        
        Features include:
        
            MaxCompute SQL language support
            MaxCompute function development
            MaxCompute data management
            MaxCompute job management
      '';
    };
  }) {};

  mayihelpu = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MayIHelpU";
    plugname = "MayIHelpU";
    plugid = "com.zplugins.plugins.mayihelpu";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11139/49859/MayIHelpU.jar";
      sha256 = "11mwz9vfr2kdmljd4s9brlvx5advnnk0a9msm0sgi9xgbchjv9xc";
      name = "MayIHelpU-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        It processes your order.
      Current feature: 
      With shortcut command + i ,

      Input your query at dialog, press enter. 
      Then it will search your input at default browser. 
      available on mac now.

      use case:

      input                 result
      kotlin            -&gt;  search "kotlin" at google .
      :android toast    -&gt;  search "toast" at android developers page.
      :grep context     -&gt;  search "context" at grepcode
      :naver 정자역       -&gt;  search "정자역" at naver
      '';
    };
  }) {};

  medium-slate-blue-silver-color-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Medium-Slate-Blue-Silver-Color-Theme";
    plugname = "Medium Slate Blue Silver Color Theme";
    plugid = "OksiBlackCS";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12214/60628/MediumSlateBlueSilverTheme.jar";
      sha256 = "0gp3kynwqr0hgfnh26yp6c2v4vgx487gl7djfrkgfgxgck7r03jy";
      name = "Medium-Slate-Blue-Silver-Color-Theme-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/OksiBlack/MediumSlateBlueIdeaTheme.git";
      license = lib.licenses.mit;
      description = ''
        Theme with silver ui elements and medium slate blue accent color in editor syntax.
      '';
    };
  }) {};

  meld-ioc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Meld-IoC";
    plugname = "Meld IoC";
    plugid = "ch.raffael.meldioc";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14078/107006/ch.raffael.meldioc-0.1.4.zip";
      sha256 = "0mvpsclaygwkd9ssbhy124anxnjk6k47mfg72xbd0d40s0wqj810";
      name = "Meld-IoC-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Abnaxos/meldioc";
      license = lib.licenses.mit;
      description = ''
        Basic IDE support for Meld IoC.

    Meld is a new approach to Inversion of Control inspired by
    Scala’s cake pattern, but it improves on it and addresses the
    common (and justified) criticism. It allows to separate application
    implementation from application composition with a very thin layer.
    Instead of relying on reflection magic or even runtime bytecode
    generation, it’s implemented as an annotation processor that
    generates readable and debuggable Java code.

    Meld IoC is still experimental. See the GitHub project for details
    and documentation.
      '';
    };
  }) {};

  memo = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Memo";
    plugname = "Memo";
    plugid = "com.chx.plugin.memo";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13286/71834/memo.jar";
      sha256 = "075nnrj03zlkg0lckc8i7j9v95ycr21a20x7rylakllfx3hz9hw0";
      name = "Memo-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ChxAlwaysBeHere";
      license = lib.licenses.asl20;
      description = ''
        A simple memo used to record.
        Use shortcut Control + M.
      '';
    };
  }) {};

  merge-request-integration-ce---code-review-for-gitlab = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Merge-Request-Integration-CE---Code-Review-for-GitLab";
    plugname = "Merge Request Integration CE - Code Review for GitLab";
    plugid = "net.ntworld.nhat-phan.merge-request-integration-ce";
    version = "2020.3.0-built-for-ide-2020.3.x";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13607/107379/merge-request-integration-ce-2020.3.0-built-for-ide-2020.3.x.zip";
      sha256 = "1lbvd9g46w7y1qyz7frxq66yn37ahwg3bx2370cl5pwlkq78z7zn";
      name = "Merge-Request-Integration-CE---Code-Review-for-GitLab-2020.3.0-built-for-ide-2020.3.x.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nhat-phan/merge-request-integration";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Merge Request Integration CE is an open-source plugin for JetBrains IDEs which helps you

    Do code review right in your IDE.
    Address review comments from your colleagues.


What you can do:


    Check approval statuses of merge requests which are waiting for your approval.
    Filter Merge Requests which are assigned to you, belongs to your colleagues, etc
    Check pipeline status and approval status.
    Do code review, navigate code with Diff View right in your IDE.
    Address review comments, navigate comments in editors.
    Add and reply a comment
    Approve/revoke your approval
    More and more features will be coming soon :)



Currently the plugin supports GitLab only (gitlab cloud and self-hosted).

How to setup Gitlab connection

You need a personal api token. To get the token please follow these steps:


    Log in to your Gitlab site
    Go to Settings &gt; Access Token and create a personal access token
    Go to your IDE preferences, Merge Request Integration &gt; Gitlab
    Fill data, then save and click refresh button of Merge Request Integration CE window


License


The plugin is an open source released under Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International
license.


It's totally free if you are using it for public repositories on gitlab.com.

For private repositories, this plugin is a trial. How long is the trial period? Equal to WINRAR's trial period 🙈


    Community Edition (CE) is exactly the same as Enterprise Edition (EE).
    You don't need to hack or find a cracked version.
    Cracking software invites virus to your computer.


About me


    My name is Nhat, I'm a software developer at
    Personio
    (yes, we are hiring
    all around the world, relocation to Munich is of course possible).


Sponsor

If you love this plugin, please support me by:


    Buy an Enterprise Edition, only 1''$/month
    
        Buy me a beer via
        Paypal
        or
        Patreon.
    



Thanks in advance!

Attribution


    
        Icons by
        Font Awesome
        are licensed under
        CC BY 4.0
      '';
    };
  }) {};

  merge-request-integration-ee---code-review-for-gitlab = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Merge-Request-Integration-EE---Code-Review-for-GitLab";
    plugname = "Merge Request Integration EE - Code Review for GitLab";
    plugid = "net.ntworld.nhat-phan.merge-request-integration-ee";
    version = "2020.3.0-built-for-ide-2020.3.x";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13615/107380/merge-request-integration-ee-2020.3.0-built-for-ide-2020.3.x.zip";
      sha256 = "0x8xfqvr7ds65nwgxdrgg909l7pda8pxa3d22vy1ragd1piccf4w";
      name = "Merge-Request-Integration-EE---Code-Review-for-GitLab-2020.3.0-built-for-ide-2020.3.x.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nhat-phan/merge-request-integration";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Merge Request Integration EE is an open-source plugin for JetBrains IDEs which helps you

    Do code review right in your IDE.
    Address review comments from your colleagues.


What you can do:


    Check approval statuses of merge requests which are waiting for your approval.
    Filter Merge Requests which are assigned to you, belongs to your colleagues, etc
    Check pipeline status and approval status.
    Do code review, navigate code with Diff View right in your IDE.
    Address review comments, navigate comments in editors.
    Add and reply a comment
    Approve/revoke your approval
    More and more features will be coming soon :)



Currently the plugin supports GitLab only (gitlab cloud and self-hosted).

If you've installed Merge Request Integration CE, please uninstall before installing Enterprise Edition.

How to setup Gitlab connection

You need a personal api token. To get the token please follow these steps:


    Log in to your Gitlab site
    Go to Settings &gt; Access Token and create a personal access token
    Go to your IDE preferences, Merge Request Integration &gt; Gitlab
    Fill data, then save and click refresh button of Merge Request Integration CE window


About me


    My name is Nhat, I'm a software developer at
    Personio
    (yes, we are hiring
    all around the world, relocation to Munich is of course possible).


Attribution


    
        Icons by
        Font Awesome
        are licensed under
        CC BY 4.0
      '';
    };
  }) {};

  meruem-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Meruem-Generator";
    plugname = "Meruem Generator";
    plugid = "hu.meruem.meruem-generator-intellij";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11970/58184/meruem-generator-1.0.0.zip";
      sha256 = "14hfx49jclh8ngf87g0c7fjs8skxz7dr72r2rpv9h66w7c99wmrl";
      name = "Meruem-Generator-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://meruemsoftware.hu";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "eupl-1.2";
        free = false;
      };
      description = ''
        Generates crud classes for meruem framework.
    Entity
    Repo
    Service
    ServiceImpl
    ListComp
    MaintComp
      '';
    };
  }) {};

  metadroid-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Metadroid-Plugin";
    plugname = "Metadroid Plugin";
    plugid = "com.thangiee.metadroid";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8534/27598/metadroid-plugin-0.1.1.zip";
      sha256 = "17ki3ma9kgd22ndhcjnsa1pdwssbbiqwlgsfisqg2jq854cbxvi9";
      name = "Metadroid-Plugin-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Thangiee/Metadroid";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Thangiee/Metadroid";
        free = false;
      };
      description = ''
        Enable proper Intellij highlighting for Metadroid macros.
      '';
    };
  }) {};

  metalheart = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MetalHeart";
    plugname = "MetalHeart";
    plugid = "MetalHeart";
    version = "0.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12341/85475/metalheart.jar";
      sha256 = "13p3g618yz2pi9q2y8i94v6d6z814a941z10cnxbzvqbngky4fk0";
      name = "MetalHeart-0.1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        Custom dark ui theme with low contrast colors.
      '';
    };
  }) {};

  method-parameter-order-inspection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Method-Parameter-Order-Inspection";
    plugname = "Method Parameter Order Inspection";
    plugid = "com.jfarrelly.intellij.plugin.method.parameter.order.code.inspection";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15354/108498/IntelliJParameterOrderInspection-1.1.0.zip";
      sha256 = "1x84rnj2ngrszha6s9qy9kfvrh0dllsypfwxs7a36640745md7hs";
      name = "Method-Parameter-Order-Inspection-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/johnnyleitrim/IntelliJParameterOrderInspection";
      license = lib.licenses.mit;
      description = ''
        Adds a Java code inspection to check if parameters are passed to methods in the correct order.Adds entries to
      Preferences | Editor | Inspections | Java | Probable Bugs.
      '';
    };
  }) {};

  methodtraceman = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MethodTraceMan";
    plugname = "MethodTraceMan";
    plugid = "cn.cxzheng.methodtraceman.ideaplugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13031/69150/methodtraceman-plugin.jar";
      sha256 = "125d3hir3fq7jy0paicc26nsfz0ivcm670iv6r0z5zwqxpa2ci2v";
      name = "MethodTraceMan-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zhengcx";
      license = lib.licenses.asl20;
      description = ''
        MethodTraceMan-plugin is a plugin for androidStduio to open tracemanui in brower.
      '';
    };
  }) {};

  metricsreloaded = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MetricsReloaded";
    plugname = "MetricsReloaded";
    plugid = "MetricsReloaded";
    version = "1.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/93/105358/MetricsReloaded.zip";
      sha256 = "1k4zgnp40d6n1kiyzl8a5jz304cpskgv648hk10hhgif60s06334";
      name = "MetricsReloaded-1.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BasLeijdekkers/MetricsReloaded";
      license = lib.licenses.asl20;
      description = ''
        Automated code metrics for IntelliJ IDEA and IntelliJ Platform IDEs.
    Lines of Code and file count metrics for all languages supported by your IDE and many more metrics for Java.
    

    Getting started
    Select the menu item Help | Find Action... and search for Calculate Metrics....
    Try the Lines of code metrics profile first, if you haven't used MetricsReloaded before.
    Metrics can also be calculated from the command line for integration into build servers.
    Enter idea metrics -h for help. For this to work IntelliJ IDEA must NOT be running.
      '';
    };
  }) {};

  metricstree = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MetricsTree";
    plugname = "MetricsTree";
    plugid = "org.b333vv.metricstree";
    version = "2020.1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13959/105264/metricstree.zip";
      sha256 = "1ac7i7pqm4l42qg23xmg8yfzwzf6d2sfv35xh6p27hq5gmn5kl31";
      name = "MetricsTree-2020.1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/b333vv/metricstree";
      license = lib.licenses.asl20;
      description = ''
        MetricsTree is an IDE extension that helps you evaluate quantitative properties of java code.
               It supports the most common metric sets on project, package, class and method levels.
            
            Core metrics sets
            
                
                   Project level: MOOD metrics set
                
                
                   Package level: Robert C. Martin metrics set
                
                
                   Class and method levels: Chidamber-Kemerer, Lorenz-Kidd, Li-Henry and Lanza-Marinescu metrics sets
                
            
            Features
            
                
                    Represents metrics calculation results in forms of trees and treemaps
                
                
                    Builds trees with metrics for class open in the editor or for the entire project
                
                
                    Supports controlling calculated metrics values
                
                
                    Finds common anti-patterns such as 'god class', 'feature envy', 'brain method' etc and allows to define new ones
                
                
                    Displays various metrics properties (distributions, correlations) in charts
                
                
                    Shows class metrics values evolution based on 'git log'
      '';
    };
  }) {};

  microprofile-starter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MicroProfile-Starter";
    plugname = "MicroProfile Starter";
    plugid = "org.microshed.intellij-plugin";
    version = "0.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13386/106144/microprofile-intellij-plugin-0.3.3.zip";
      sha256 = "1vn9hj1xznlscian7m9xs7fnq0m1864lfsa2raz3pb87lr2l9n0v";
      name = "MicroProfile-Starter-0.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MicroShed/mp-starter-intellij-ext";
      license = lib.licenses.asl20;
      description = ''
        MicroProfile Starter helps you kickstart your microservices development journey using MicroProfile APIs.
    
    
    It allows you to choose the MicroProfile runtime (e.g. Payara Micro, Open Liberty, Thorntail, Helidon, etc.), MicroProfile version and
    specifications such as Configuration, Health Check, Monitoring, Rest Client, Metrics, Fault Tolerance, etc. It can also generate examples for each
     APIs.
    
    
    
    The plugin relies on the REST APIs provided by 
    MicroProfile Starter project and is hosted under the MicroShed organization.
      '';
    };
  }) {};

  micropython = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MicroPython";
    plugname = "MicroPython";
    plugid = "intellij-micropython";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9777/105280/intellij-micropython-1.1.3.zip";
      sha256 = "12xn5kagdyhz8cdrr3z96la05bs3n6930yaqscrhs1fndwnf1ymf";
      name = "MicroPython-1.1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vlasovskikh/intellij-micropython";
      license = lib.licenses.asl20;
      description = ''
        Support for MicroPython devices in PyCharm and IntelliJ.
      
      Features:
      
      
        Code completion and docs for some MicroPython-specific modules
        Flash a Python file or directory to a device
        Run REPL on a device
      
      
      Currently the plugin supports ESP8266, Pyboard, and Micro:bit devices. Your feedback and contributions are
        welcome! See the project page on GitHub.
      '';
    };
  }) {};

  microconfig-io = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Microconfig.IO";
    plugname = "Microconfig.IO";
    plugid = "io.microconfig.idea-plugin";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12064/99256/microconfig-idea-plugin-1.3.0.zip";
      sha256 = "0ngbcg7vn32pfqksffdwv6dn41xqxkvm1nlrcxcaq75vwpfl16qr";
      name = "Microconfig.IO-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://microconfig.io";
      license = lib.licenses.asl20;
      description = ''
        Microservice configuration made easy
    Plugin for Microconfig.io framework
    ·  Easy navigation between configuration components
    ·  Hints of placeholder values
    ·  Run configurations
    ·  Configuration preview
    ·  Custom setting with microconfig.yaml
    More info at https://github.com/microconfig/microconfig-idea-plugin
      '';
    };
  }) {};

  microsoft-cloud-services-for-android = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Microsoft-Cloud-Services-for-Android";
    plugname = "Microsoft Cloud Services for Android";
    plugid = "com.microsoft.tooling.msservices.android";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8077/22657/ms-cloud-services-for-android.jar";
      sha256 = "10dhb5w4g08vh0jf1wssy68rxxizsyjqhkg5gaw3azwrc9d056c2";
      name = "Microsoft-Cloud-Services-for-Android-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Microsoft/Microsoft-Cloud-Services-for-Android";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://azuredownloads.blob.core.windows.net/azuretoolkitforintellij/eula.html";
        free = false;
      };
      description = ''
        Microsoft Cloud Services for Android for IntelliJ and Android Studio.
      '';
    };
  }) {};

  midpoint-studio = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MidPoint-Studio";
    plugname = "MidPoint Studio";
    plugid = "com.evolveum.midpoint.studio";
    version = "4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13809/104581/intellij-midpoint-studio-4.2.zip";
      sha256 = "0zbwaw91z410p2a38a0ysvbk8l71ws01d7vhwyvdql775wmmyins";
      name = "MidPoint-Studio-4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://evolveum.com/";
      license = lib.licenses.asl20;
      description = ''
        Integrated development environment for MidPoint configuration.

        Features
        
            Browse/Upload with raw options for both operations
            Properties can be used to replace parts of xml. Properties can also be stored encrypted in keepass2 file within project
            XML tags autocompletion, links to documentation
            Groovy syntax highlighting and groovy code completion
            Groovy code common variables injection
            Object diff with option to ignore some parts of xml (metadata, id attributes, etc.)
            Simple OID generator
            Trace files viewer
      '';
    };
  }) {};

  miglayout-verifier = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MigLayout-Verifier";
    plugname = "MigLayout Verifier";
    plugid = "MigLayout Verifier";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5887/8944/MigLayout_Verifier_8944.jar";
      sha256 = "00x1q95ip6fgia2dz1mwbvjpbcch5zzzccvxcjl2ag70vdnjk1hr";
      name = "MigLayout-Verifier-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "bsd-license.php";
        free = false;
      };
      description = ''
        Verify your MigLayout code before you run it
      '';
    };
  }) {};

  mikes-idea-extensions = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mikes-IDEA-extensions";
    plugname = "Mike's IDEA extensions";
    plugid = "net.aquadc.mike.plugin";
    version = "0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12690/81359/idea.plugin-0.10.jar";
      sha256 = "1abr30nyrd7zv2rz27gxxqksp2bcs7kvzkbl50b6k4694c7jaspb";
      name = "Mikes-IDEA-extensions-0.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Miha-x64/Mikes_IDEA_extensions";
      license = lib.licenses.asl20;
      description = ''
        Some great inspections, quickfixes, tools. Well, only inspections at the moment.

      Java inspections
      
        BigDecimal instantiation can be replaced with constant by stokito
        BigDecimal.compareTo(ZERO) can be replaced with signum() by stokito
      

      UAST (Java + Kotlin) inspections
      
        Atomic can be replaced with volatile
        Allocation should be cached (Enum.values(), new Gson(), ...)
      

      Kotlin inspections
      
        Heavyweight property delegation
        Declaration name is Java keyword
        Inline function leaks anonymous declaration
        Anonymous function won't be inlined;
          function cannot be inlined if it is a receiver of an extension function
      

      Android inspections
      
        &lt;include layout="?themeAttribute"&gt; requires Marshmallow
        &lt;view class="@resource or ?themeAttribute"&gt; is not supported
        &lt;drawable android:tint and android:tintMode&gt; require Lollipop
        @TargetApi should be replaced with @RequiresApi
        Use of reflective ObjectAnimator/PropertyValuesHolder
      

      RegExp inspections
      
        Bad Cyrillic character range
      

      Tooltips/hints
      
        Upcast to interface, e. g.putExtra(list as Serializable) (Java Only)
        Method override from superclass, e. g.@Override from Runnable,override Runnable fun run()
      

      Source code on GitHub
      '';
    };
  }) {};

  mind-sport = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mind-Sport";
    plugname = "Mind Sport";
    plugid = "com.parser.cp.mind-sport";
    version = "1.1.4-RELEASE";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10688/58082/mind-sport-1.1.4-RELEASE.zip";
      sha256 = "17z89azksgbbafx2v9aji4mvbv2bd2hghy9gryi355n9vw145zbh";
      name = "Mind-Sport-1.1.4-RELEASE.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tgvdinesh/mind-sport-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Setup:

Install Mind Sport - IntelliJ Plugin
Install Competitive Companion Chrome Extension / Firefox Add-on
Clone and open Java Template

NOTE: This step will be removed in future release
How to use:

Keep Java Template project open / It should be at least in recent history in IntelliJ
Go to Supported Competitive Programming websites's problem statement
Click on Competitive Companion plugin on right top corner of your browser.

That's it. You can start coding and click on run with AppTest.runTestCases as your run configuration.
What happens in the background is, your io.json file will be updated with the test cases.
Interdependency Reference:

IntelliJ Plugin
Java project template used by IntelliJ Plugin
Competitive Companion Chrome Extension / Firefox Add-on
      '';
    };
  }) {};

  miniplugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MiniPlugin";
    plugname = "MiniPlugin";
    plugid = "me.minidigger.miniplugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9901/37555/MiniPlugin.jar";
      sha256 = "1in684ngshza3h7si2fvgdkan0r7v5mww4lcvhb9j8dbhrq13na8";
      name = "MiniPlugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.minidigger.me";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.minidigger.me";
        free = false;
      };
      description = ''
        Small Plugin that makes my life easier
      '';
    };
  }) {};

  minimal-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Minimal-Theme";
    plugname = "Minimal Theme";
    plugid = "me.ii.minimal-intellij";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14805/100061/minimal-intellij-0.0.4.zip";
      sha256 = "19cy4kgz12ri0kf7axa6h8p43x28gsl0k2ydnwfgj3xdgkk7x70c";
      name = "Minimal-Theme-0.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wolverian";
      license = lib.licenses.mit;
      description = ''
        A minimal UI and editor color theme for IntelliJ editors.
      '';
    };
  }) {};

  minimal-titles = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Minimal-Titles";
    plugname = "Minimal Titles";
    plugid = "org.twdata.minimaltitles";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14260/85719/minimal-titles-1.0.zip";
      sha256 = "160vwq1nml8swd1938g8sf3hqj59vg76fby9rmdbl9kihfl164mx";
      name = "Minimal-Titles-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mrdon/minimal-titles";
      license = lib.licenses.mit;
      description = ''
        Limit the window title to only the module name.

      Useful for title automation, such as in Open Broadcast System (OBS) automated switching.
      '';
    };
  }) {};

  minions-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Minions-Progress-Bar";
    plugname = "Minions Progress Bar";
    plugid = "MinionsProgressBar";
    version = "0.666";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15511/104703/MinionsProgressBar.jar";
      sha256 = "07rki752m66azk3bw8ray9sw0gf8k8q4pgy4d40sn97jhdw069sy";
      name = "Minions-Progress-Bar-0.666.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/khipis/FluffyProgressBar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        Beautiful progress bar with beautiful character from your favorite movie.
      Plugin makes your time, wasted on project sync wait or indexing more fun
      and hypnotized by the virtual world you ever dreamt of!
      '';
    };
  }) {};

  mint = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mint";
    plugname = "Mint";
    plugid = "com.github.bjansen.mintellij";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15852/108099/mintellij-0.1.0.zip";
      sha256 = "14m4bsgdp1ai1jgqac3cz4bs3zldhi3q94la4pdv51zbr8h4jdl7";
      name = "Mint-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bjansen";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin adds support for the Mint language to IntelliJ-based IDEs.
      '';
    };
  }) {};

  mirah-language-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mirah-language-support";
    plugname = "Mirah language support";
    plugid = "org.mirah.idea.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://github.com/uujava/mirah-idea-plugin/releases/download/version_1_3/mirah-idea.zip";
      sha256 = "1r739mw8iax6d8lp5g8i96fk14dwc4sn6vfjbcfmd3jl65f4nrma";
      name = "Mirah-language-support-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/uujava/mirah-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.wtfpl.net/";
        free = false;
      };
      description = ''
        Provides mirah language support for Intellij Idea
      '';
    };
  }) {};

  mirai-console = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mirai-Console";
    plugname = "Mirai Console";
    plugid = "net.mamoe.mirai-console";
    version = "2.0-RC";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15094/107525/mirai-console-intellij-2.0-RC.zip";
      sha256 = "1c3rndrwghw2divd385ijg4i7dsv3c6hq779a2r1d6y6bhw3d2xj";
      name = "Mirai-Console-2.0-RC.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mamoe/";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin development support for Mirai Console

Features

    Inspections for plugin properties, for example, checking PluginDescription.
    Inspections for illegal calls.
    Intentions for resolving serialization problems.
      '';
    };
  }) {};

  misaka-network-node-nerve-mapping-for-webstorm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Misaka-Network-Node-Nerve-Mapping-for-Webstorm";
    plugname = "Misaka Network Node Nerve Mapping for Webstorm";
    plugid = "org.misaka.plugins.webstorm-keymap";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15634/106684/misaka-network-node-nerve-mapping-for-webstorm.jar";
      sha256 = "19g791f1w7vfd4kylmc3jl8aqgkiw8d5a5fn1n03rghmhp156zq4";
      name = "Misaka-Network-Node-Nerve-Mapping-for-Webstorm-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        A keymap for helping improve efficiency, mainly by binding arrow keys to moving between words, not chars.
    http://misaka.org
      '';
    };
  }) {};

  missing-in-actions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Missing-In-Actions";
    plugname = "Missing In Actions";
    plugid = "com.vladsch.MissingInActions";
    version = "1.8.193.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9257/77508/MissingInActions.1.8.193.4.zip";
      sha256 = "1wnd6k05nxb6j5748d5jr03y28qncc5ydrgphkkg0nw6cmdn2a96";
      name = "Missing-In-Actions-1.8.193.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/vsch/MissingInActions";
      license = lib.licenses.asl20;
      description = ''
        Missing In Actions
            Adds missing editor actions for end of word navigation but that is just the beginning:
            
                Automatic Selection stack, stores last 5 selections by default. Recall last selection or any
                    previous selection from a list.
                
                Enable Auto Indent Lines after move line/selection up or down actions to have lines indented
                    automatically.
                
                Use Smart Paste to eliminate case change and prefix edits when pasting identifiers. MIA will
                    match case and style of identifier at destination when you paste. Undo to get results before
                    MIA adjusted them.
                    Copy myColumnData and paste it over DEFAULT_VALUE to get COLUMN_DATA, reverse the order
                        and get myDefaultValue.
                    Works when pasting at the beginning, end and middle of identifiers.
                    Supports: camelCase, PascalCase, snake_case, SCREAMING_SNAKE_CASE,
                        dash-case, dot.case, slash/case
                    Default prefixes: my, our, is, get, set to allow pasting over member fields, static
                        fields, getters and setters.
                
                Enable Auto Line Selections and select full lines without loosing time or column position by
                    moving the caret to the start of line when selecting or pasting. Choose whether you want
                    to paste full line selections: above or below the current line regardless of the
                    caret’s column.
                
                Toggle between selection and multiple carets on selected lines to save time re-selecting the
                    same text again.
                
                Filter multiple carets saves you time when creating multiple carets by removing carets on
                    blank or comment lines so you can edit only code lines.
                
                Enhanced Paste from History dialog:
                    
                        combine, arrange and reverse the order of content entries
                        combine multiple clipboard contents with caret information intact
                        paste and re-create multiple carets from information already stored on the clipboard
                        duplicate line/block for each caret in the clipboard content and put a caret on the
                            first line of the block, ready for multi-caret select and paste
                        
                        splice individual entries into delimited list, optionally quoting each entry
                        see caret information stored on the clipboard for each content entry
                    
                
                Batch Search/Replace to search/replace multiple strings at the same time
                Many more options and adjustments to make multiple caret text editing fast, efficient and
                    easy.
                
            
            Plugin website:
                Missing In Actions GitHub Repo
            Bug tracking &amp; feature requests:
                Missing In Actions GitHub Issues
      '';
    };
  }) {};

  mob = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mob";
    plugname = "Mob";
    plugid = "com.nowsprinting.intellij-mob";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14266/90998/intellij-mob-1.0.2.zip";
      sha256 = "12a4r95mdbjydvnq4i36rhr7qplk6rjajrb5g0av607lj6mfrqa1";
      name = "Mob-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nowsprinting";
      license = lib.licenses.asl20;
      description = ''
        Swift git handover and timer with mob IntelliJ plugin, it useful for Remote Mob Programming.
    
        mob IntelliJ plugin is a port of mob command line tool
        mob is the fast way to handover code via git
        mob keeps your master branch clean
        mob creates WIP commits on the mob-session branch
        mob notifies you when it's time to handover
        mob squash commits at done session and set Co-authored-by: trailer in commit message
    
    See GitHub repository for more information.
      '';
    };
  }) {};

  mob-timer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mob-Timer";
    plugname = "Mob Timer";
    plugid = "gerdes.mobtimer";
    version = "2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10629/46937/mob-timer-2.zip";
      sha256 = "0ns707441wm7vjz26c47791lizkssxcw1qm16j7x0zz8p60a174j";
      name = "Mob-Timer-2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/Aequitium";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/stevengerdes/intellij-mob-timer/blob/master/license";
        free = false;
      };
      description = ''
        A Simple Mob Timer
      Set the time, add mobbers, then hit Play. When the time reaches zero the plugin will request focus until you either reset the time or pause the timer. Resetting the time will
      also select the next mobber in the list.
      '';
    };
  }) {};

  mobivm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MobiVM";
    plugname = "MobiVM";
    plugid = "com.mobidevelop.robovm.intellij";
    version = "2.3.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14440/106725/idea-2.3.12.zip";
      sha256 = "1xm2k8xvq41hqagr2ilf7b0n1dxwinh2wv206cs7164rh7vbvbb2";
      name = "MobiVM-2.3.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/robovm/robovm-idea";
      license = lib.licenses.asl20;
      description = ''
        MobiVM is a fork of the last open-source release of RoboVM — an ahead-of-time compiler for Java bytecode, targeting Linux, Mac OS X and iOS.
      '';
    };
  }) {};

  mobius-creator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mobius-Creator";
    plugname = "Mobius Creator";
    plugid = "in.obvious.mobius.creator";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14289/85985/mobius-creator-1.0.0.zip";
      sha256 = "0d3r7k30ladbi23r8n9w18lpcyn00ars7d43skgp3b7al7yqn583";
      name = "Mobius-Creator-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/obvious/mobius-creator";
      license = lib.licenses.mit;
      description = ''
        Plugin to generate mobius related classes.
      '';
    };
  }) {};

  mockito-postfix-completion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mockito-Postfix-Completion";
    plugname = "Mockito Postfix Completion";
    plugid = "com.krrrr38.idea.mockito.postfix";
    version = "0.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8150/87343/Mockito_Postfix_Completion_Plugin-0.0.8.zip";
      sha256 = "0j2l4h9lzd2y93znrz7dbjz73b6dnlrw6ipvxx2d42fs5fm139j1";
      name = "Mockito-Postfix-Completion-0.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.krrrr38.com";
      license = lib.licenses.mit;
      description = ''
        This plugin adds postfix completion template for Mockito.
      '';
    };
  }) {};

  module-switch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Module-Switch";
    plugname = "Module Switch";
    plugid = "com.guazi.android.chespand.plugin.switch";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11991/58422/ModuleSwitch.jar";
      sha256 = "0w9niknnlxii3kj5h7aszd70nf7723pjva53z04dqmdm3x66c8q5";
      name = "Module-Switch-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.guazi.com";
      license = lib.licenses.asl20;
      description = ''
        A Switch to control dependencies of modules
      '';
    };
  }) {};

  modulecolorplugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ModuleColorPlugin";
    plugname = "ModuleColorPlugin";
    plugid = "ModuleColorPlugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9989/78299/ModuleColorPlugin.jar";
      sha256 = "15rs0akicy8f8ffgnr29qx13dckg2v5d7in9k7hzk7wi4b4hz480";
      name = "ModuleColorPlugin-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/hansed/modulecolorplugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/hansed/modulecolorplugin/blob/master/license";
        free = false;
      };
      description = ''
        A plugin that adds a colored bar specifying the module that the file you are editing is part of.
      '';
    };
  }) {};

  modulelibraries = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ModuleLibraries";
    plugname = "ModuleLibraries";
    plugid = "ModuleLibraries";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9618/34135/ModuleLibraries.jar";
      sha256 = "1h4gwxfcxws59bdady211cz67jqgc61bw4yrj8xagglzfg7xr51i";
      name = "ModuleLibraries-0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jansorg/intellij-module-libraries";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jansorg/intellij-module-libraries";
        free = false;
      };
      description = ''
        Enhances the project view with module libraries. Each module node in the tree now has a separate listing of its modules. The node "External libraries" is enhanced with the individual modules and their nodes. Please keep in mind that this is a bad hack to get back the old behaviour of IDEA 8.x. It might not work at all in your installation of IntelliJ.
      '';
    };
  }) {};

  molokai-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Molokai-Color-Scheme";
    plugname = "Molokai Color Scheme";
    plugid = "color.scheme.Molokai";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12427/100777/Molokai.jar";
      sha256 = "0y9qyiiy04sxy3qxnzvi0swlv6n5yfj6qhn8sdg4a499b98ywdh5";
      name = "Molokai-Color-Scheme-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/n0nz/intellij-color-molokai";
      license = lib.licenses.mit;
      description = ''
        
      '';
    };
  }) {};

  momo-code-sec-inspector-java = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Momo-Code-Sec-Inspector-Java";
    plugname = "Momo Code Sec Inspector (Java)";
    plugid = "Momo Code Sec Inspector (Java)";
    version = "193.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15120/105684/momo-code-sec-inspector-java-prod-193.15.zip";
      sha256 = "1f3yncbcrrym18pa4xxmg24bnsdcqk4ywnkcqrshax71l5k3fsdl";
      name = "Momo-Code-Sec-Inspector-Java-193.15.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/momosecurity/momo-code-sec-inspector-java";
      license = lib.licenses.asl20;
      description = ''
        MOMO Code Sec Inspector plugin

GitHub |
Issues


Java静态代码安全审计插件。

A Java static code inspector with one-click fix capability.


本插件侧重于在编码过程中发现项目潜在的安全风险，并提供一键修复能力。
This plugin focus on the security risks and provides one-click fix capability.

本插件利用IDEA原生Inspection机制检查活跃文件，检查速度快，占用资源少。
It uses the IDEA native inspection mechanism to check the active file, which is faster and takes up less resources.

插件提供的规则名称均以"Momo"开头。
It provides a set of inspection rules, the name of all rules starts with "Momo".



Contact: mmsrc [AT] immomo.com
      '';
    };
  }) {};

  money-never-sleeps = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Money-Never-Sleeps";
    plugname = "Money Never Sleeps";
    plugid = "me.bytebeats.mns";
    version = "1.7.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14801/100995/mns-1.7.3.jar";
      sha256 = "04f05vawfvcd1wh68krksgy8r13grxi551smkdka7gpjyypbnsgh";
      name = "Money-Never-Sleeps-1.7.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bytebeats";
      license = lib.licenses.asl20;
      description = ''
        mns: Money Never Sleeps!
    IntelliJ IDEA platform plugin. Supports instant stock market from USA, HK and China mainland.
    IntelliJ IDEA 平台插件, 支持股票行情数据的实时更新, 包括美股, 港股和宇宙第一大A股!.
    Money never sleeps, NEITHER do We!
    金钱永不眠, 我们也不睡!
    Good luck!
    使用说明: https://github.com/bytebeats/mns
      '';
    };
  }) {};

  mongoquery = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MongoQuery";
    plugname = "MongoQuery";
    plugid = "com.zin4uk.query";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14556/89795/MongoQuery.jar";
      sha256 = "1b9zniqx0613pc6174k5jgfm28ji5l48fjbmd7bphyfdxwp6rchh";
      name = "MongoQuery-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Zin4uk/MongoQuery";
      license = lib.licenses.asl20;
      description = ''
        Allows copying formatted Spring-Data-MongoDB debug query from console to clipboard.
    
		
	
    How to use:
    
    1. Enable MongoTemplate debug mode
    logging.level.org.springframework.data.mongodb.core.MongoTemplate: DEBUG
    2. Click on the query in the log window to copy it to Clipboard.
      '';
    };
  }) {};

  monkai-pro-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Monkai-Pro-Theme";
    plugname = "Monkai Pro Theme";
    plugid = "com.adrian.dima.theme.monkai.pro";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12128/59718/MonkaiProTheme.jar";
      sha256 = "0kjajkfyzkwsbhb65rbgn4ixrqbindapvl0fg55wd3sz0yy27fkm";
      name = "Monkai-Pro-Theme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/adrianclaudiudima";
      license = lib.licenses.asl20;
      description = ''
        Monkai Pro Theme
      '';
    };
  }) {};

  monosplitter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MonoSplitter";
    plugname = "MonoSplitter";
    plugid = "no.tillerapps.monosplitter";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11041/52595/monosplitter-1.0.2.zip";
      sha256 = "1mybwqkiwvcsabwbd6s08gkr5zazw3w7r6ff7f16vw3y9y1gwdc8";
      name = "MonoSplitter-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kennethtiller";
      license = lib.licenses.asl20;
      description = ''
        Go to declaration in a mono tabbed splitter.
        Recommended shortcuts are ⌘↑ for Declaration in monosplitter and ⌘↓ for Goto next splitter.
      '';
    };
  }) {};

  monocai-color-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Monocai-Color-Theme";
    plugname = "Monocai Color Theme";
    plugid = "com.berzanmikaili.intellij.monokai_pro";
    version = "2.0.2c";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12163/71934/monocai.jar";
      sha256 = "1i3s3p2654l6489zd0h89x35zacfsahqsz87qahpxd8k3a1l2k8g";
      name = "Monocai-Color-Theme-2.0.2c.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "berzanmikaili.com";
      license = lib.licenses.mit;
      description = ''
        Adds Monocai, inspired by Monokai and Monokai Pro, as an editor colorscheme. This color theme uses modern colors
      that will enhance readability whilst keeping eyestrain to a minimum.
      '';
    };
  }) {};

  monokai-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Monokai-Color-Scheme";
    plugname = "Monokai Color Scheme";
    plugid = "color.scheme.Monokai";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12575/64184/Monokai.jar";
      sha256 = "1ikvg1mgrnz5z7qy8zis4nxzv2i6mh4pczv9vg057fpbg146ng2k";
      name = "Monokai-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://cesarato.altervista.org";
      license = lib.licenses.gpl3Only;
      description = ''
        
      '';
    };
  }) {};

  monokai-materialized-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Monokai-Materialized-Color-Scheme";
    plugname = "Monokai Materialized Color Scheme";
    plugid = "color.scheme.Monokai Materialized";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12571/64972/Monokai_Materialized.jar";
      sha256 = "0r9618r3cd9rly1k89wnx66r550rjv6pzyj89x47hc1bxy4vxnhp";
      name = "Monokai-Materialized-Color-Scheme-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/samueljarosinski/Monokai-Materialized";
      license = lib.licenses.mit;
      description = ''
        Color scheme inspired by Monokai, filled with Material Design colors.
      '';
    };
  }) {};

  monokai-pro-spectrum-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Monokai-Pro-Spectrum-Color-Scheme";
    plugname = "Monokai Pro Spectrum Color Scheme";
    plugid = "color.scheme.Monokai Pro Spectrum";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12486/74881/Monokai_Pro_Spectrum.jar";
      sha256 = "0hjpyi0qcxaxc0niijbq2y6qg0cqym2xcxrc4ynd10g85g0z7868";
      name = "Monokai-Pro-Spectrum-Color-Scheme-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nzer0nz/intellij-color-Monokai-Pro -Spectrum";
      license = lib.licenses.mit;
      description = ''
        Monokai Pro Spectrum Colorscheme based on Monokai Pro Spectrum for VSCode Color Palette
      '';
    };
  }) {};

  monokai-pro-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Monokai-Pro-Theme";
    plugname = "Monokai Pro Theme";
    plugid = "monokai-pro";
    version = "0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13643/105003/monokai-pro-jetbrains.jar";
      sha256 = "003gv86vlslnqp16p86d62l5v55y74vpimqp0zazvlmrsvvpx23b";
      name = "Monokai-Pro-Theme-0.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://subtheme.pro";
      license = lib.licenses.mit;
      description = ''
        The unofficial Monokai Pro theme by Subtheme, adapted for JetBrains. This plugin includes the default theme and four filters: Machine, Octagon, Ristretto, and Spectrum. Credit goes to the original creator: https://monokai.pro.
      
      Contribute with GitHub: https://github.com/subtheme-pro/monokai-pro
      '';
    };
  }) {};

  moodle = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Moodle";
    plugname = "Moodle";
    plugid = "me.profiluefter.moodlePlugin";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13902/81279/Moodle-Plugin.zip";
      sha256 = "0m5qz6nlwhfrjxi7xshjpdh7f3ys8g73ahcs2p6jqwk7wnmqsnnk";
      name = "Moodle-1.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/profiluefter";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin that enables you to interact with a moodle course using any JetBrains IDE.
    WIP and currently only supports read access.
      '';
    };
  }) {};

  more-actions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "More-Actions";
    plugname = "More Actions";
    plugid = "com.furstenheim.more-actions";
    version = "1.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14544/90311/more-actions-plugin-1.1-SNAPSHOT.zip";
      sha256 = "1yrjfga1k91l3wx30vnvfyvdsa89qwmycbqds30rq4fgpygkvzm3";
      name = "More-Actions-1.1-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/furstenheim";
      license = lib.licenses.mit;
      description = ''
        More Actions
    This plugins provides more actions to the editor
    Compare Multicursors
    Show diff between selections in different carets
    Go to Keymap Configuration
    Open settings at the keymaps configuration. Great for checking shortcuts
    Copy Relative Path of Current File
    Copy relative path to clipboard directly from the file
      '';
    };
  }) {};

  moreinfo = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MoreInfo";
    plugname = "MoreInfo";
    plugid = "com.muhammed.thasneem.moreinfo.plugin.android";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11395/52742/MoreInfo.jar";
      sha256 = "0368i225mwnxg1mb6zznmi7lqip0r865kw88q97c334bh5l70nqy";
      name = "MoreInfo-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/thasneemp";
      license = lib.licenses.asl20;
      description = ''
        Grab more information's from IDE
      StackOverflow
      Google
      Android
      YouTube
      Android Arsenal
      Wikipedia
      '';
    };
  }) {};

  mortar = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mortar";
    plugname = "Mortar";
    plugid = "com.datadog.mortar_ide";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12834/80454/mortar_ide-1.3.0.zip";
      sha256 = "02nnnc5f99ppl3rclacaiypbkm6089nk3yidcxqa4c7bkn6wg071";
      name = "Mortar-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.datadoghq.com";
      license = lib.licenses.mit;
      description = ''
        Mortar is the internal tool for running big data jobs at Datadog. This plugin helps engineers to
        code their jobs in a more reliable, predictive and iterative manner.

        This plugin requires "HashiCorp Terraform / HCL language support" plugin.
      '';
    };
  }) {};

  motif-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Motif-Plugin";
    plugname = "Motif Plugin";
    plugid = "com.uber.motif";
    version = "0.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13540/82196/intellij-0.3.3.zip";
      sha256 = "04zr37yhaja89nl7yzdzmhwhyv793r1mgjnpmw14p65cl1w55w2y";
      name = "Motif-Plugin-0.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.uber.com/";
      license = lib.licenses.asl20;
      description = ''
        Motif plugin for IntelliJ IDE.
      Provides visualization UI which allows you to better understand your Motif object graph.
      
        All Scopes panel represents your entire Motif scopes hierarchy, and let you init/refresh it once code changes are made. Selecting a scope will display additional properties for that scope, i.e the dependencies it consumes and provides.
        Error panel lists Motif-related errors. Selecting each error takes you to the corresponding place in the code where error triggered.
        Usage panel (accessible via Motif editor contextual menu) represents the usage of a given object, i.e who is providing it and who is consuming it.
        Ancestor panel (accessible via Motif editor contextual menu and gutter icon) represents the chain of parent scope(s) for a given motif scope. It can be useful to glance at which dependencies are made available by the scope parent(s).
      '';
    };
  }) {};

  move-with-dependencies = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Move-with-Dependencies";
    plugname = "Move with Dependencies";
    plugid = "com.jetbrains.unchain";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7260/13518/hackathon-unchain.jar";
      sha256 = "1fpi4lfiwzhbv3pcvn9092pbsch6z18yf95d3wbhg69zrr9bm7vl";
      name = "Move-with-Dependencies-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jetbrains.com";
        free = false;
      };
      description = ''
        Allows to move a class along with its transitive dependencies to another module and ensures that all dependencies of the class being moved are acceptable in the context of the target module.
      '';
    };
  }) {};

  movetab = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MoveTab";
    plugname = "MoveTab";
    plugid = "com.mikejhill.intellij.movetab";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13087/104551/MoveTab-1.4.1.zip";
      sha256 = "1fbm52d4d5sghfj15x2d9by71ljnxs092191qa4g8wvln8ancxgr";
      name = "MoveTab-1.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mikejhill/intellij-move-tab/tree/master";
      license = lib.licenses.mit;
      description = ''
        This plugin adds keyboard shortcuts for reordering IDE tabs. This is based off of the similar, but now defunct, plugin of a similar name by momomo.com.
			
			
				Usage (default keyboard shortcuts):
				
					Shift+Ctrl+Page Up: Move the current tab to the left.
					Shift+Ctrl+Page Down: Move the current tab to the right.
      '';
    };
  }) {};

  mule-4-runtime- = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mule-4-Runtime.";
    plugname = "Mule 4 Runtime.";
    plugid = "org.mule.tooling.intellij.muleruntime.v2";
    version = "2.0.21";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10822/67103/mule-esb-plugin-2.0.21.zip";
      sha256 = "0sjpp4vz0pz0pxjljglmpb87fv08694x482wpgq6pqw6g35plryc";
      name = "Mule-4-Runtime.-2.0.21.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mulesoft-labs/data-weave-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Mule 4 Runtime plugin enables xml autocomletion, data weave autocompletion and xml schema validation.
      '';
    };
  }) {};

  mule-esb-plugin-for-intellij = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mule-ESB-Plugin-For-IntelliJ";
    plugname = "Mule ESB Plugin For IntelliJ";
    plugid = "org.mule.intellij.plugin";
    version = "0.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8212/37864/mule-esb-plugin-0.13.zip";
      sha256 = "0mc9z0jb84nb2i9zfx0nh6q6gqkpsg5c051nfgpk1j881mw101z7";
      name = "Mule-ESB-Plugin-For-IntelliJ-0.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/machaval/mule-esb-plugin";
      license = lib.licenses.asl20;
      description = ''
        Mule ESB Plugin For IntelliJ.
      '';
    };
  }) {};

  multi-os-engine-community-edition = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Multi-OS-Engine-Community-Edition";
    plugname = "Multi-OS Engine Community Edition";
    plugid = "org.moe.community";
    version = "1.4.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12786/101557/moe.plugin.idea-1.4.9.zip";
      sha256 = "182vgkpk4rrw09q1n51bfdzcnwrp1l9mqldrkm0xrya91r3kh06x";
      name = "Multi-OS-Engine-Community-Edition-1.4.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://discuss.multi-os-engine.org/";
      license = lib.licenses.asl20;
      description = ''
        Multi-OS Engine IDE plugin for Android Studio, Community Edition
      '';
    };
  }) {};

  multi-module-automation-is-created- = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Multi-module-automation-is-created.";
    plugname = "Multi-module automation is created.";
    plugid = "SmartModule.ID";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10752/46032/SmartModule.jar";
      sha256 = "0401qssghi9hgv8iv54gs5lps634f99a1kfqbx7ac1jad84w5cma";
      name = "Multi-module-automation-is-created.-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.yangziqing.top";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.yangziqing.top";
        free = false;
      };
      description = ''
        Multi-module automation is created. 项目架构: https://github.com/yangweiqiao/kotlin_ec
      '';
    };
  }) {};

  multihighlight = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MultiHighlight";
    plugname = "MultiHighlight";
    plugid = "MultiHighlight";
    version = "2.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9511/106879/MultiHighlight-2.1.1.zip";
      sha256 = "0hdbiv5zmbbiphahmfis8y6pk60c21id2h8ynvrss3qp4hj8s3yk";
      name = "MultiHighlight-2.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/huoguangjin/MultiHighlight";
      license = lib.licenses.asl20;
      description = ''
        Highlight identifiers with custom colors (like "Highlight Usages in File").
        You can customize your highlight text style, it's helpful when reading source
            code.
        Shortcut: ctrl+' (or command+' on mac)
            learn more
      '';
    };
  }) {};

  multiitemtemplates = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MultiItemTemplates";
    plugname = "MultiItemTemplates";
    plugid = "com.sannniou.multiitem.plugin.templates";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13622/99770/MITS-1.0.jar";
      sha256 = "1f5xf21pdd4jh7kmcv9mqhdkx7bwlaylxm7fxw8ds0gr1qp51mmx";
      name = "MultiItemTemplates-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sanniou/MultiItemKit";
      license = lib.licenses.asl20;
      description = ''
        An intellij idea plugin to generate DataItem Templates.
P.S. MultiItem: An Android library binding View by DataItem
 https://github.com/sanniou/MultiItemKit
      '';
    };
  }) {};

  multiuser-git = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MultiUser-Git";
    plugname = "MultiUser Git";
    plugid = "org.quantumquacks.plugins.multiuser-git";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14030/93275/multiuser-git-1.0.3.zip";
      sha256 = "19x449czxj69nnks6r9m4i5fgwxqs0ka6cs3pjfxa7m0r5am4ynj";
      name = "MultiUser-Git-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.quantumquacks.org";
      license = lib.licenses.mit;
      description = ''
        This allows multiple users of Git to easily switch on same computer.
      
      It looks for a gitUsers.xml file in the root of the project with a format like:
&lt;XML&gt;

   &lt;USER name="user" email="user@domain.com"/&gt;

&lt;/XML&gt;
      '';
    };
  }) {};

  multiple-file-kotlin-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Multiple-File-Kotlin-Converter";
    plugname = "Multiple File Kotlin Converter";
    plugid = "com.pandora.plugins.kotlin_converter";
    version = "0.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12183/87321/multiple-file-kotlin-converter-0.4.3.zip";
      sha256 = "1j2f23494iw49xih0hi5dyl67wqdikhlr8rx6r5jfvyd37dfhv9y";
      name = "Multiple-File-Kotlin-Converter-0.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.pandora.com";
      license = lib.licenses.asl20;
      description = ''
        This IntelliJ IDEA plugin runs the native Convert Java File To Kotlin File action on multiple files
      '';
    };
  }) {};

  multirun = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Multirun";
    plugname = "Multirun";
    plugid = "com.khmelyuk.multirun";
    version = "1.11.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7248/102914/multirun-1.11.2.jar";
      sha256 = "1nlk1d35y2d23zknk6gjhg531w5fzlkhzv0syy6qawgxp1b9gvzg";
      name = "Multirun-1.11.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/7248-multirun";
      license = lib.licenses.asl20;
      description = ''
        Run multiple run configurations at once: group multiple run configurations and start them in a single click.
        Not only application and test run configurations can be grouped, but other Multirun configurations can be organized
        into single run configuration.

        Use cases:
        
            Start batch of tests for multiple modules or applications
            Start multiple applications, like multiple servers or backend + web application
        

        Usage:
        
            Run -&gt; Edit Configurations...
            Find and add a new Multirun configuration
            Add other run configurations to the Multirun configuration
            Pick options you'd like
            Ready to use
        

        Multirun + Before Launch Tasks gives even more functionality: read more at http://goo.gl/KwHvx
      '';
    };
  }) {};

  muse-dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Muse-Dark-Color-Scheme";
    plugname = "Muse Dark Color Scheme";
    plugid = "color.scheme.Muse Dark";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12542/64183/This.jar";
      sha256 = "0bvizv5w7y9y4rqcv4dx1sfizv30knqhsf3asn9gn362r4c7q5hr";
      name = "Muse-Dark-Color-Scheme-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fakeinc";
      license = lib.licenses.asl20;
      description = ''
        A good (dark) color scheme that tries to make every highlighting meaningful. Unleash your intelligence with these bright colors. For supported languages, credicts, license, see https://github.com/fakeinc/muse
      '';
    };
  }) {};

  muse-light-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Muse-Light-Color-Scheme";
    plugname = "Muse Light Color Scheme";
    plugid = "color.scheme.Muse Light";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12527/64180/This.jar";
      sha256 = "0iyykcv10jzg7xcrzqw43gxndcbdlxayij4v6nwx3rh58fxv23zh";
      name = "Muse-Light-Color-Scheme-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fakeinc";
      license = lib.licenses.asl20;
      description = ''
        An evil (light) color scheme that tries to make every highlighting meaningful. Unleash your intelligence with these bright colors. For supported languages, credicts, license, see https://github.com/fakeinc/muse
      '';
    };
  }) {};

  music-time = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Music-Time";
    plugname = "Music Time";
    plugid = "com.musictime.intellij.plugin";
    version = "2.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14143/107562/musictime.zip";
      sha256 = "08sghqm7ypgf1l9sw8hy29hfhxgz0p3al1wnkivdjzsr69y6qm3d";
      name = "Music-Time-2.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.software.com";
      license = lib.licenses.asl20;
      description = ''
        Music Time for Spotify
Music Time is an IntelliJ plugin that discovers the most productive music to listen to as you code.
Music Time requires a Spotify account. We currently do not support Apple Music, Google Play, or any other players, but may in a future plugin.


Features

Integrated player controls: Control your music right from the status bar of your editor.

Embedded playlists: Browse and play your Spotify and iTunes playlists and songs from your editor.

AI playlists: Get a personalized AI playlist generated using deep learning to help you focus.

Metrics profile: Learn how the underlying metrics of music (including tempo, loudness, speechiness, energy, and valence) impact how you code.

Personal top 40: See your most productive songs, artists, and genres every week in your weekly top 40.

Weekly music dashboard: See your top songs, artists, and genres each week by productivity score and plays while coding.

Global top 40: Discover new music from developers around the world in our Software Top 40 playlist.

Slack integration: Connect Slack to share songs and playlists in channels in your workspace.


Music Time is built on the Code Time plugin and performs machine learning against a range of music metrics plus productivity data from over 70,000 developers to determine song recommendations. You can also check out the cody-music npm package for more information about how this extension works.
Getting started
1. Connect your Spotify account
Click the Connect Spotify button in the status bar or in the playlist tree, which will prompt you to log in to your Spotify account.

2. Control your music and playlists right from your editor
Click on any song in your list of playlists. Music Time will prompt you to open a Spotify player—either the desktop app or web player.
⚠️ Music Time requires a premium Spotify account and an internet connection to control your music on Windows and Linux. If you are on a Mac, Music Time can also control the Spotify desktop app using AppleScript as either a premium or non-premium user.
3. Generate your personal playlist
Click the Generate AI Playlist button to get a personalized AI playlist generated using deep learning. Your AI Top 40 playlist is initially based on your liked songs and global developer data, but will improve as you listen to more music while you code. 

4. Try a song recommendation
We also recommend songs by genre and mood of music based on your listening history. Try happy, energetic, or danceable music for upbeat work or classical or jazz for slower, more complex tasks. You can add a song to a playlist by right clicking on a song then hitting "Add to playlist".

5. Like a song
Like a song from the status bar by pressing the "♡" button, which helps us improve your song recommendations and adds that song to your Liked Songs playlist on Spotify.

6. Check out the Software Top 40
Discover new music from developers around the world in a playlist generated by our algorithms. The Software Top 40 playlist is refreshed every week.
Find your most productive music
As you listen to music while you code, we calculate a productivity score by combining your coding metrics with your listening history and data from over 10,000 developers.
Here are the different ways you can discover your most productive music.
1. View your web analytics
Click on the “See web analytics” button to see your most productive songs, artists, and genres by productivity score. You can also visit app.software.com/login and use your Spotify email address to log in.

2. Open your Music Time dashboard
Click “Music Time” on the menu bar then Open Dashboard to generate an in-editor report of your top songs, artists, and genres by productivity score.

3. Explore your music metrics
Discover how the underlying metrics of music (including tempo, loudness, speechiness, energy, and valence) impact how you code.

4. Visualize your Code Time metrics
Music Time is built on our Code Time plugin. In the web app, under settings, you can enable "Code Time" to see your Code Time data—such as your keystrokes, time by file and project, and lines of code—which is used calculate to your productivity scores. [Visit your feed](https://app.software.com) to see simple visualizations of your Code Time data, such as a rolling heatmap of your top programming times by hour of the day.

Share your top songs
Share your top songs on Facebook, Twitter, WhatsApp, and Tumblr by right clicking on a song in the playlist tree then "Share". You can also Connect Slack to share songs with your team.

Connecting Slack requires team member permissions or above. You will not be able to connect Slack as a single or multi-channel guest.
Contributing &amp; Feedback
Enjoying Music Time? Tweet at us (@softwaretop40) and follow us on Instagram (@softwaretop40).
You can open an issue on a GitHub page or contact us at support@software.com with any additional questions or feedback.
Second Heading

Unordered lists, and:
One
Two
Three


More


Blockquote

And bold, italics, and even italics and later bold. Even strikethrough. A link to somewhere.
And code highlighting:
var foo = 'bar';

function baz(s) {
   return foo + ':' + s;
}

Or inline code like var foo = 'bar';.
Or an image of bears

The end ...
      '';
    };
  }) {};

  mustache-util = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mustache-Util";
    plugname = "Mustache Util";
    plugid = "com.ucarinc.plugin.mustacheUtil";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14057/83892/MustacheUtil.jar";
      sha256 = "1hvqg8sm1q0f1xyff57sg8hkxhxlqwi6fqym2jjj3hcyq69a5gi5";
      name = "Mustache-Util-1.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.ucarinc.com";
      license = lib.licenses.asl20;
      description = ''
        a plugin for standardizing *.mustache file content formats
      '';
    };
  }) {};

  mvp-creator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mvp-Creator";
    plugname = "Mvp Creator";
    plugid = "com.nguyencse.mvpcreator";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11513/53816/mvpcreator.jar";
      sha256 = "1h7awaxcn2a7q9nfw8vhfr1ikvpsb6ws8l7mqn2qj51syyz99zpk";
      name = "Mvp-Creator-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.facebook.com/nguyencse";
      license = lib.licenses.asl20;
      description = ''
        Create MVP design pattern for android using Java
      '';
    };
  }) {};

  mvpautocodeplus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MvpAutoCodePlus";
    plugname = "MvpAutoCodePlus";
    plugid = "com.longforus.mvpautocodeplus";
    version = "1.4.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10907/99837/mvpaotucodeplus-1.4.5.zip";
      sha256 = "1dcdbfa5va19y0ridxc5wayfhmmbpxgnaaiv2kqd87rfjm8j04ni";
      name = "MvpAutoCodePlus-1.4.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/longforus";
      license = lib.licenses.asl20;
      description = ''
        MvpAutoCodePlus
      
      
      
      Website |
      GitHub |
      Issues |
      Blog
      
      
      
      An plugin that automatically generates an MVP template code.
      
      Features:
      
        Automatically generate Contract Interface based on the specified super Interface.
        Automatically generate implements class based on the Contract Interface and specified superclass.Add the default implementation of the abstract method.
        Supports generics(currently only have M,V,P).
        Supports Java and Kotlin.
      
      
      
      Send feedback
      '';
    };
  }) {};

  my-favorite-code = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "My-Favorite-Code";
    plugname = "My Favorite Code";
    plugid = "com.talkingdata.my.favorite.code";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11229/51034/my-favorite-code.zip";
      sha256 = "0nck2impqflsl29wsf3j0krcsn1797lgvdf85skbdk4r04c6l1r7";
      name = "My-Favorite-Code-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.talkingdata.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.talkingdata.com/";
        free = false;
      };
      description = ''
        Copyright (c) 2011-2018 © TalkingData.com All rights reserved.
  Whenever and wherever you see wonderful code snippets, new syntax examples, and even your favorite code, .
  you can cherish it and learn from it during the coding process. 
  With the SQLite database storing relevant data, you can share a set of data across multiple IDEA processes without additional configuration. 
  Let the My Favorite Code IDEA Plugin open your favorite code tour! 

  无论何时何地，当你看到精彩的代码片段，新的语法示例，乃至你喜欢的代码，
  你都可以将其珍藏起来，在编码过程中可以借鉴。
  借助于SQLite数据库存储相关的数据，你不需要进行额外的配置，就可以在多个IDEA进程中共用一套数据。
  就让 My Favorite Code IDEA 插件开启你的收藏代码之旅吧！
      '';
    };
  }) {};

  my-pojo-to-json = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "My-Pojo-To-Json";
    plugname = "My Pojo To Json";
    plugid = "com.clu.idea.utils.MyPojoToJson";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15766/107846/MyPojoToJson-v1.0.2.jar";
      sha256 = "1ydysrnhdq7jr48qmlyncqac1xiwxyggz9pax3x4zam8xl2skxnj";
      name = "My-Pojo-To-Json-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/luchuanbaker";
      license = lib.licenses.gpl3Only;
      description = ''
        A simple plugin for converting Java bean to Json
        usages:
        
            Open any java code file in idea.
            Right click the class name or java type to open the context menu.
            Click the `MyPojoToJson` item in the context menu.
            The json string relative to the java bean will be copied to your system clipboard automatically.
            tips: You can use the hot key instead, default is alt + X.
        
        
            feedback: https://plugins.jetbrains.com/plugin/15766-my-pojo-to-json
        
        
            github: https://github.com/luchuanbaker/MyPojoToJson/
      '';
    };
  }) {};

  mybatis-builder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MyBatis-Builder";
    plugname = "MyBatis Builder";
    plugid = "com.chuntung.plugin.mybatisbuilder";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12449/94826/mybatis-builder-1.1.4.zip";
      sha256 = "02bs0xwzpk4w8zmsyvi4lfhbbj3hjmlhs3ki3h1c0wng5lclzhdl";
      name = "MyBatis-Builder-1.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mybatis.chuntung.com";
      license = lib.licenses.mit;
      description = ''
        Getting Started | Donate
    
    A free GUI tool integrated with MyBatis Generator, which is specially compatible with IDEA CE.
    
    Supported databases: mysql/postgresql/mariadb/oracle/sqlserver/sqlite/h2.
    
    Provides with additional features as below.
    
      Merge existing MyBatis files automatically.
      Support select with lock statement.
      Support Lombok @Data annotation on java model.
      Customizable mapper annotation, default is Spring @Repository.
      Customizable patterns for mapper type, example type and SQL file name.
      "Copy as Executable SQL" from MyBatis log.
      "Run MyBatis Generator" with official configuration file.
      '';
    };
  }) {};

  mybatis-generator-plus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MyBatis-Generator-Plus";
    plugname = "MyBatis Generator Plus";
    plugid = "com.github.leecho.idea.plugin.mybatis.generator";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11558/64403/mybatis-generator-plus.zip";
      sha256 = "060cj00sdwzfa8wziyns1w80zff90c7dv8sf41y4k4f40il3wra6";
      name = "MyBatis-Generator-Plus-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/leecho/mybatis-generator-plus";
      license = lib.licenses.mit;
      description = ''
        Integrate with the Idea Database tool
            Support mapper class file merge
            Support mapper xml file merge
            Support customize postfix for mapper class
            Support customize postfix for example class
            Support table prefix for domain class
            Support customize setting for column
            Support for IDEA the latest version.
            Optimize Mysql8 database connection.
            Add MariaDB support
        
   
    
        
   
       
            集成Idea Database工具
            支持Mapper类文件自动合并
            支持Mapper XML文件自动合并
            支持自动忽略表前缀
            支持自定义Mapper类后缀
            支持自定义Example类后缀
            支持修改字段数据类型
            支持忽略字段
        
   
    
        
   
        Use in idea database tool，right click table to generate mybatis files (include:mapper、example、domain、xml).Currently supported databases: Mysql, Oracle. To be verified: Mysql 8, Postgre SQL and SQL Server
        Step1: Connecting to Your Database: View &gt; Tool Windows &gt; Database.
        Step2: Select one tablesRight Click and select Generate MyBatis Code to open generator main UI.
        Step3: Check configuration in main ui,click ok.
        Step4: Provide account and password for the first time.
        Step5: Generate work finish,check files and it can be use.
   Setting: Tools &gt; MyBatis Generator Plus set custom default configuration，If not, use the program default configuration.
   More tutorial please visit here 
   

   
        在idea的database工具中使用，右击选择表生成mybatis相关的代码。目前已支持的数据库：Mysql、Mysql8(可能需要设置数据库时区time_zone = '+8:00')、Oracle、MariaDB。待验证：PostgreSQL与SQL Server 
        Step1: 连接Database: View &gt; Tool Windows &gt; Database。
        Step2: 选择表，右击选择功能 Generate MyBatis Code 打开主页面。
        Step3: 检查配置无误后点击 ok。
        Step4: 首次使用时请提供账号密码。p
        Step5: 生成完成，检查、使用代码。
   Setting: Tools &gt; MyBatis Generator Plus 此处设置默认配置，未设置则使用程序默认配置。
      '';
    };
  }) {};

  mybatis-jump = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MyBatis-Jump";
    plugname = "MyBatis Jump";
    plugid = "com.liuzhihang.toolkit.mybatis-jump";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15692/106431/MyBatis_Jump-1.0.0.zip";
      sha256 = "02zf02vjshg21iwrc5140sm79zi5w4y1j9ad6wr3i13hmg63acvm";
      name = "MyBatis-Jump-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://liuzhihang.com";
      license = lib.licenses.mit;
      description = ''
        Jump between Mapper and Xml files through the icon in the sidebar

GitHub |
Issues |
Website |
LICENSE



Toolkit plugin for IntelliJ IDEA



English introduction


    Jump between Mapper and Xml files through the icon in the sidebar
    mapper file id simple check


中文介绍


    通过侧栏的icon实现 Mapper 和 Xml 文件之间跳转
    mapper文件id简单检查


Other


    个人公众号: 『 程序员小航 』
    
    小伙伴们如果有遇到问题或者有使用建议，可以关注公众号并留言。
      '';
    };
  }) {};

  mybatis-log-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MyBatis-Log-Plugin";
    plugname = "MyBatis Log Plugin";
    plugid = "MyBatisLog";
    version = "2020.12.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13905/103709/mybatis-log.jar";
      sha256 = "1d9wxz50lryk3g7fasa1ik9hm48kw1mijcl4wgvll2p1w20ysbmh";
      name = "MyBatis-Log-Plugin-2020.12.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Restore mybatis sql log to original whole executable sql.
      Plugin generate sql statements with replace ? to the really param value.
      Select the console sql log and right click "Restore Sql" menu to restore sql.
      Navigate to each other between Java method and Mapper xml.
    
    
    
    Recommended plugin: ★Toolset★
    
    
    A plugin for the IntelliJ-based IDEs, Which can help coding and contains various tools to improve development efficiency.
    
    
    
      ★Plugins★ |
      Manual |
      Issues |
      Email
      '';
    };
  }) {};

  mybatis-sql-query-log-binder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MyBatis-Sql-Query-Log-Binder";
    plugname = "MyBatis Sql Query Log Binder";
    plugid = "com.bluewhale.mybatis.log.query.formatter";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14540/90442/MyBatisQueryLogFormatter.zip";
      sha256 = "17i49pjpqyi6vzfypkfx39dpv4jm242hbh72qr6bb76f1hllahly";
      name = "MyBatis-Sql-Query-Log-Binder-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bgcho98/MyBatisQueryLogFormatter";
      license = lib.licenses.mit;
      description = ''
        A plugin that combines query and parameter parts from the remaining query log with mybatis. 
  
  Usage: 
  If you execute "Tools"&gt; "Bind Query Log" function after selecting the log in the editor window, 
  Copy the result to the clipboard. 
  Only one query at a time is possible
      '';
    };
  }) {};

  mybatiscodehelperpro = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MyBatisCodeHelperPro";
    plugname = "MyBatisCodeHelperPro";
    plugid = "com.ccnode.codegenerator.MyBatisCodeHelperPro";
    version = "2.8.9-183-204";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9837/106195/MybatisCodeHelperNew-2.8.9-183-204.zip";
      sha256 = "15ahbb90r32w29n1384n5206x07i2yz7kla9xj426zansn0w53c1";
      name = "MyBatisCodeHelperPro-2.8.9-183-204.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/gejun123456/MyBatisCodeHelper-Pro/blob/master/screenshots/license.md";
        free = false;
      };
      description = ''
        GitHub
      |Issues
      |BiliBili
      |FreeTrial
      |Gitter
      Features
      
          最好的Mybatis代码提示，完整支持Mybatis动态sql代码提示，代码检测，写sql几乎所有地方都有代码提示
          Type safe sql support, plugin can recognize mybatis dynamic sql
          Code Formatter
      Generate mybatis crud code by Intellij database table or add a database connection
      Generate mybatis sql based on mybatis interface method name like spring data jpa, with this, you don't have to write most sql for
      non join query support generate statement with if test
      Database generate crud could generate multiple times when you add or delete columns, plugin will auto merge code
      Full mybatis sql auto complete, recognize mybatis tag in xml, like where trim set include ect,provide sql completion after those tag
      Jump from mybatis dao interface to mapper xml each other
      Refactor for mybatis interface method name,refid,resultMap ect
      Auto complete for mybatis param,if test,foreach,resultMap,refid in sql
      Generate create table sql from java class
      Mybatis Param refactor and inspection
          Ognl support, if test when test ''${ bind foreach collection, refactor and inspection and auto completion
      Jump from refid resultMap to their definition, refactor their name as well
      Generate page query by mapper interface method
      Spring support for mybatis, inject mybatis mapper to spring bean,support SpringBoot
      Refid,resultMap,keyProperty,property auto complete
      Add @param for mapper method
          Resultmap column complete and inspection by parse reference select statement
          Auto map resultMap column and property
      Generate mybatis mapper testcase from mybatis interface method by database connection, make you test method quicker
      Full inspection for mybatis, like unused sql in xml, mapper method not have sql in xml, check if resultMap property is right ect
      https://github.com/gejun123456/MyBatisCodeHelper-Pro to learn more.
      
      How to use
      
      view on https://github.com/gejun123456/MyBatisCodeHelper-Pro
      qqGroup:914051156
      '';
    };
  }) {};

  mybatiscodehelperpro-marketplace-edition = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MyBatisCodeHelperPro-Marketplace-Edition";
    plugname = "MyBatisCodeHelperPro (Marketplace Edition)";
    plugid = "com.ccnode.codegenerator.MyBatisCodeHelperProMarketPlace";
    version = "2.8.9-183-204";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14522/106539/MybatisCodeHelperMarketPlaceNew-2.8.9-183-204.zip";
      sha256 = "0c8lv8p8h5r3arj4zcibi2r4fp6azmplz43c4vmy7xfzp2mznr8w";
      name = "MyBatisCodeHelperPro-Marketplace-Edition-2.8.9-183-204.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/gejun123456/MyBatisCodeHelper-Pro/blob/master/screenshots/license.md";
        free = false;
      };
      description = ''
        GitHub
      |Issues
      |BiliBili
      |Gitter
      Features
      
          最好的Mybatis代码提示，完整支持Mybatis动态sql代码提示，代码检测，写sql几乎所有地方都有代码提示
          Type safe sql support, plugin can recognize mybatis dynamic sql
          Code Formatter
      Generate mybatis crud code by Intellij database table or add a database connection
      Generate mybatis sql based on mybatis interface method name like spring data jpa, with this, you don't have to write most sql for
      non join query support generate statement with if test
      Database generate crud could generate multiple times when you add or delete columns, plugin will auto merge code
      Full mybatis sql auto complete, recognize mybatis tag in xml, like where trim set include ect,provide sql completion after those tag
      Jump from mybatis dao interface to mapper xml each other
      Refactor for mybatis interface method name,refid,resultMap ect
      Auto complete for mybatis param,if test,foreach,resultMap,refid in sql
      Generate create table sql from java class
      Mybatis Param refactor and inspection
          Ognl support, if test when test ''${ bind foreach collection, refactor and inspection and auto completion
      Jump from refid resultMap to their definition, refactor their name as well
      Generate page query by mapper interface method
      Spring support for mybatis, inject mybatis mapper to spring bean,support SpringBoot
      Refid,resultMap,keyProperty,property auto complete
      Add @param for mapper method
          Resultmap column complete and inspection by parse reference select statement
          Auto map resultMap column and property
      Generate mybatis mapper testcase from mybatis interface method by database connection, make you test method quicker
      Full inspection for mybatis, like unused sql in xml, mapper method not have sql in xml, check if resultMap property is right ect
      https://github.com/gejun123456/MyBatisCodeHelper-Pro to learn more.
      
      How to use
      
      view on https://github.com/gejun123456/MyBatisCodeHelper-Pro
      qqGroup:914051156
      '';
    };
  }) {};

  mybatisplus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MyBatisPlus";
    plugname = "MyBatisPlus";
    plugid = "com.baomidou.plugin.idea.mybatisPlus";
    version = "1.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12670/67888/MybatisPlus-1.2.3.zip";
      sha256 = "1hr5mmv6gh1s2bfjzksnv682qf5rdwll46cpaz3gab88np16j3hj";
      name = "MyBatisPlus-1.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/12670-mybatisplus";
      license = lib.licenses.asl20;
      description = ''
        MybatisPlus
          generator code 
          live template 
          MybatisPlus plugin  from java to xml or from xml to java
          
          
              Website |
              GitHub |
              Issues|
              support
      '';
    };
  }) {};

  mybatisx = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MyBatisX";
    plugname = "MyBatisX";
    plugid = "com.baomidou.plugin.idea.mybatisx";
    version = "1.4.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10119/108531/MybatisX-1.4.6.zip";
      sha256 = "0rys1idd6l6d0zf0gkc9nbfg4i86jfpghs0c00084q3rplqfvn9k";
      name = "MyBatisX-1.4.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/baomidou/mybatis-plus";
      license = lib.licenses.mit;
      description = ''
        MybatisX plugin
          Features:
       
          mapper and xml can jump back and forth
          mybatis.xml,mapper.xml prompt
          mapper and xml support auto prompt like jpa (reference  MybatisCodeHelperPro)
          integrate mybatis generator Gui (copy from free mybatis plugin)
      

      QQ群号: 829161197
      '';
    };
  }) {};

  mygruvbox-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "MyGruvbox-Theme";
    plugname = "MyGruvbox Theme";
    plugid = "io.github.xiaopihai7256";
    version = "0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13022/105253/MyGruvbox.jar";
      sha256 = "0gh5y49znp2rby83pqnkx96fasfv66746b0jw77wnkplpi95ss8a";
      name = "MyGruvbox-Theme-0.4.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/xiaopihai7256";
      license = lib.licenses.mit;
      description = ''
        This's a gift for Vimer
      A custom Gruvbox theme, focus on more eye-friendly code colors. Support Java, Kotlin, Groovy, Scala, Javascript, Html, Xml, Sql, Shell...
      
      
      To install:
      
         Go to Settings (Preferences) | Plugins, find the theme plugin and install it.
         Restart IDE.
         Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown.
      
      
      
      
      | Report an issue | On GitHub |
      '';
    };
  }) {};

  mysql-explain = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MySQL-Explain";
    plugname = "MySQL Explain";
    plugid = "io.github.newhoo.mysql-explain";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13192/106104/mysql-explain-intellij-plugin-1.0.3.zip";
      sha256 = "0yqpf8clfrfdpv4v652x5y2hl02df2mk33g8g5cr5wrcrddjf92c";
      name = "MySQL-Explain-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/huzunrong/mysql-explain";
      license = lib.licenses.mit;
      description = ''
        auto execute mysql explain when execute sql
        
        自动查看mysql执行计划
      '';
    };
  }) {};

  my_activator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "My_Activator";
    plugname = "My_Activator";
    plugid = "yp.tools.plugin.my_activator";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9720/39550/mybatisActivate.zip";
      sha256 = "0rqbn0qzrcqwgkck41aqppgd7bf689ay98a7h2vi61r1lymv6x48";
      name = "My_Activator-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Helper for mybatis_plugin
 
 This is a useful tool for users of mybatis_plugin in Intellij Idea, which makes a convenience and enhancement to access the mybatis_plugin. This plugin is free, and easily to use. Just click the 'MybatisPluginActivator' menu in tools menu! It may be update sometimes, any problem please contact the author by QQ: 519549317  
 
自动破解mybatis_plugin插件
 
 
 
  mybatis_plugin插件是一个很好用的插件，具体作用就不多说了，不过可惜的是，它是收费的，此工具提供了激活此插件的功能。
  
 
  注意，mybatis_plugin插件经常更新，如果更新了，需要重新执行一次本插件即可激活。
  
 
  作者：叶佩，如有问题，请联系QQ:519549317@qq.com
   
 
使用方法: 
安装好本插件后，重启IDE然后，在菜单栏中的Tools选项中，选择“MyActivator”，单击即可激活！
      '';
    };
  }) {};

  mybatis-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mybatis-Generator";
    plugname = "Mybatis Generator";
    plugid = "com.ctfin.idea.mybatis-generator";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10509/44051/MybatisGenerator-IDEA.zip";
      sha256 = "1zfr8ngzw0xm0zg83svh4378x4r9pzwb2102f6ixh65mb6nimchk";
      name = "Mybatis-Generator-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jianshu.com/u/e7b6927344ad";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.jianshu.com/u/e7b6927344ad";
        free = false;
      };
      description = ''
        Reverse generation of 'Mybatis Generator' based on XML configuration files,it able to generate JavaBean &amp; Dao &amp; base sql
      '';
    };
  }) {};

  mybatis-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mybatis-Helper";
    plugname = "Mybatis Helper";
    plugid = "me.gaigeshen.mybatis.helper";
    version = "1.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12466/75037/mybatis-helper-idea-plugin.zip";
      sha256 = "0dxswdk8a8i1rl9v27x98y33ny3b0l09kgai54jcx3y7brwagfia";
      name = "Mybatis-Helper-1.5.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gaigeshen";
      license = lib.licenses.asl20;
      description = ''
        This plugin helpes you generate entity classes, dao classes and blank mapper files.
    More information please see: Mybatis-Helper
      '';
    };
  }) {};

  mybatis-log = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Mybatis-Log";
    plugname = "Mybatis Log";
    plugid = "Mybatis Log";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9258/30337/mybatis-log.jar";
      sha256 = "16wfq6x4vcm478s1i6s1j9iq6nzpakv7myddif4asyb0k08j2kfw";
      name = "Mybatis-Log-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://git.oschina.net/996102919";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://git.oschina.net/996102919";
        free = false;
      };
      description = ''
        extract SQL statement of action logging switch to executable SQL statement.
 
default key ctrl+shift+H.
      '';
    };
  }) {};

  mybatis-plus-codegenerator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mybatis-Plus-CodeGenerator";
    plugname = "Mybatis-Plus-CodeGenerator";
    plugid = "com.dragon.idea.plugins.generator.code.generator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13490/74265/code-generator.zip";
      sha256 = "0b1z92lms7vqrcdvkp4n8v38q1y9iqs5mc2skyyi9mvdavl9f4j5";
      name = "Mybatis-Plus-CodeGenerator-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitbook.cn/gitchat/author/5acdcc9a525cf276d4ba4ec6";
      license = lib.licenses.asl20;
      description = ''
        基于MyBatis-Plus的自动代码生成插件.
        
        
        Based on the automatic code generation of plug-in MyBatis-Plus.
        
        作者： pengl
        
        邮箱： 517306304@qq.com
        
        主页： https://gitbook.cn/gitchat/author/5acdcc9a525cf276d4ba4ec6
      '';
    };
  }) {};

  mybatislogformat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MybatisLogFormat";
    plugname = "MybatisLogFormat";
    plugid = "com.biyusheng.plugins";
    version = "1.3.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14292/107526/mybatis-1.3.7.zip";
      sha256 = "00pqsy321nrg3pim45c1g0ggzmm2zkyxcbxjqk6ay9hs1wkg6brn";
      name = "MybatisLogFormat-1.3.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/f1024557668";
      license = lib.licenses.gpl3Only;
      description = ''
        Mybatis Log Plugin.
      Extract the SQL and fill the parameters into the SQL
      you only need copy the Mybatis log with prepare:xxx parameters:xxx,
      and click the right mouse to choose MybatisLogPlugin,then will popup a tooltip
      which is the sql that can be execute into mysql.
      If you have question or other idea,you can send email to me(1024557668@qq.com)
      '';
    };
  }) {};

  mybatissqllogjoiner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "MybatisSqlLogJoiner";
    plugname = "MybatisSqlLogJoiner";
    plugid = "com.github.yungyu16.intellij.sqllogjoiner";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15339/103176/mybatis-sql-joiner-1.0.1.zip";
      sha256 = "0n4ya262fn147ls43alpj9mwy4wbs78qc1wzc6jy8g00bfc0ij92";
      name = "MybatisSqlLogJoiner-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yungyu16";
      license = lib.licenses.asl20;
      description = ''
        This is a plugin for splicing the Sql log output by Mybatis, which can easily and automatically replace the parameter placeholders in the Sql log
      
        usage:
        1.Ctrl+C the Sql log containing Mybatis output to the pasteboard (can contain multiple sql)
        2.Click Tool-&gt;SqlLogJoiner, or click the last button SqlLogJoiner on the Toolbar
        3.There is already a parsed complete Sql in the pasteboard, just copy Ctrl+V to the desired location
      
      
      
        
        Principles and techniques:
        Each time Mybatis executes Sql, it will output three lines of logs, and the keywords in each line of logs are in order: Preparing, Parameters, and Total.
        At least one Preparing log must be included in the original log copied in step 1.
        This plug-in reads the string in the pasteboard line by line, reads the Preparation log and the Parameters log, two or two groups, parsing parameters, splicing SQL, and copying to the pasteboard in turn.
      
      
      这是一个用于拼接Mybatis输出的Sql日志的插件,可以便捷的自动替换Sql日志中的参数占位符
      
        用法:
        1.将包含Mybatis输出的Sql日志Ctrl+C到粘贴板(可包含多条sql)
        2.点击Tool-&gt;SqlLogJoiner、或点击Toolbar上最后一个按钮SqlLogJoiner
        3.粘贴板中已经有解析好的完整Sql,Ctrl+V复制到需要的位置即可
      
      
      
        原理和技巧:
        Mybatis每次执行Sql会输出三行日志,各行日志中关键字按顺序为:Preparing、Parameters、Total。
        第1步中复制原始日志中至少要包含一条Preparing日志。
        本插件按行读取粘贴板中的字符串,依次循环读取Preparing日志和Parameters日志、两两组队、解析参数、拼接Sql、复制到粘贴板。
      '';
    };
  }) {};

  mybatisplus-code-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mybatisplus-Code-Generator";
    plugname = "Mybatisplus Code Generator";
    plugid = "kancy.plugin.MybatisplusCodeGenerator.id";
    version = "0.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14533/96634/mybatisplus-generator-idea-0.0.8.zip";
      sha256 = "0aprkyl1jmmwzaypmk3fx9hrmd6v4b6nywsijqwayxj9wc85gf9d";
      name = "Mybatisplus-Code-Generator-0.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/14533-mybatisplus-code-generator";
      license = lib.licenses.asl20;
      description = ''
        A Mybatisplus code generator, which introduces the advantages of various code generators.
      Based on the idea that convention is greater than configuration, I developed it.
      Keywords: Mybatis Plus, Maven, Spring Boot, Lombok, Mysql, Freemarker, XMind, Excel, etc.
      Provide two forms: Windows desktop tool exe and IDEA plug-in.
      Open Way:Tools -&gt; Mybatisplus Code Generator or Press Key Ctrl + Alt + 0.
      Feature: 
      1. One-click generation of Mybatis Plus code, fool-like function selection.
      2. Freemarker code template configuration.
      3. Engineering: Support Maven and Spring Boot engineering generation.
      4. Multi-data source management.
      5. Configuration can be data persistence, user operation memory.
      6. One-click mind map for exporting database tables.
      7. One-click export of Excel design documents to database tables.
      Document&nbsp;|&nbsp;Windows Desktop
      '';
    };
  }) {};

  mypy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mypy";
    plugname = "Mypy";
    plugid = "com.leinardi.pycharm.mypy";
    version = "0.11.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11086/84716/mypy-plugin-0.11.2.zip";
      sha256 = "11xcblyaza8i52igdxz5nqn8ps91ndbhi9l3h9vsk4xw3id9zlf7";
      name = "Mypy-0.11.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/leinardi/mypy-pycharm";
      license = lib.licenses.asl20;
      description = ''
        This plugin provides both real-time and on-demand scanning of Python files with Mypy from within the PyCharm IDE.
      '';
    };
  }) {};

  mypy-official = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Mypy-Official";
    plugname = "Mypy (Official)";
    plugid = "com.dropbox.plugins.mypy_plugin";
    version = "0.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13348/72671/mypy-PyCharm-plugin.zip";
      sha256 = "1qb07dn0n33j6rc7kdzbrngw4xkq83ap32d1frjhb38k4fjxhff9";
      name = "Mypy-Official-0.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dropbox/mypy-PyCharm-plugin";
      license = lib.licenses.asl20;
      description = ''
        Mypy daemon integration plugin. Easily run mypy
      from PyCharm and navigate between errors.
      '';
    };
  }) {};

  n2o-framework = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "N2O-Framework";
    plugname = "N2O Framework";
    plugid = "net.n2oapp.n2o.idea.plugin";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13999/105529/n2o-idea-plugin-1.4.jar";
      sha256 = "1alianjq157nwr7irm2viimm2f1x3m7gi7l99qrcfy2mf4g4ldkl";
      name = "N2O-Framework-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://i-novus.ru/";
      license = lib.licenses.asl20;
      description = ''
        N2O Framework allows you to create powerful web applications without deep knowledge of web technologies and frontend frameworks.
    
    Source Code
    
    Features:
    
        file templates
        syntax highlighting
        code completion
        refactoring
      '';
    };
  }) {};

  nasm-assembly-language = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "NASM-Assembly-Language";
    plugname = "NASM Assembly Language";
    plugid = "com.nasmlanguage";
    version = "0.5-beta.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9759/86800/NASMPlugin.jar";
      sha256 = "1m2779wd78v8r4mza7y4al2qp0xnppghqvg7yzfgq63mq7f8hnaz";
      name = "NASM-Assembly-Language-0.5-beta.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ajkhoury";
      license = lib.licenses.mit;
      description = ''
        NASM assembly language for JetBrains IDEs
        
        Version v0.5-beta.8 pre-release
        
        Features
        
            FPU, MMX, HLE, SSE, SSE2, SSE3, SSE4, AVX, AVX2, AVX512, Virtualization, and General instruction support.
            Syntax highlighting.
            Single and multiline macro support.
            Conditional assembly directives support.
            Preprocessor directives support.
            Structure support.
            Brace matching for braces, macros, preprocessor, and structs.
            Goto declaration support for labels.
        
        
        Planned Features
        
            Goto symbol (WIP)
            Code completion
            Debugger support
      '';
    };
  }) {};

  nr-coding-style = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NR-Coding-Style";
    plugname = "NR Coding Style";
    plugid = "com.netease.newsreader.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12765/66669/NR_Coding_Style-1.3.zip";
      sha256 = "0gwi797x1afc7423kaqpk8fwd1rl1dfalk2v2660l2ix3ybljdp5";
      name = "NR-Coding-Style-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Java coding style plugin, based on p3c plugin.
      '';
    };
  }) {};

  nr-feature-toggle = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "NR-Feature-Toggle";
    plugname = ".NR Feature Toggle";
    plugid = "com.imuxuan.core.toggle";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11352/52265/NRFeatureFlag.jar";
      sha256 = "1k6z381fda3f95dwmm9sifw0d47fjdl9iiyz26wkw7zm8bhi6ssb";
      name = "NR-Feature-Toggle-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://imuxuan.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://imuxuan.com";
        free = false;
      };
      description = ''
        Generate Feature Toggle from object:
      Provide an object as a surrogate for the lack of an object of a given type.
      The Null Object provides intelligent do nothing behavior, hiding the details from its collaborators.

      Please contact me if you have any questions: ForDeer 
      
      Preview
      '';
    };
  }) {};

  nr-null-object = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "NR-Null-Object";
    plugname = ".NR Null Object";
    plugid = "com.imuxuan.core.flag";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11255/52167/NRFeatureFlag.jar";
      sha256 = "0d53bm11hlpy89wrahamqxsllr2v7sa9ik36wvhjazid445g6mix";
      name = "NR-Null-Object-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://imuxuan.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://imuxuan.com";
        free = false;
      };
      description = ''
        Generate Null Object for object:
      Provide an object as a surrogate for the lack of an object of a given type.
      The Null Object provides intelligent do nothing behavior, hiding the details from its collaborators.

      Please contact me if you have any questions: ForDeer 
      
      Preview
      '';
    };
  }) {};

  nsis-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NSIS-plugin";
    plugname = "NSIS plugin";
    plugid = "com.krylysov.nsisplugin";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7732/19212/intellij-nsis.zip";
      sha256 = "0j45y6dn5s0p94gcnf5h97cwv2amhxdix4qkbks55iz66ygjy1ph";
      name = "NSIS-plugin-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/akrylysov/intellij-nsis";
      license = lib.licenses.mit;
      description = ''
        NSIS syntax highlighting plugin
      '';
    };
  }) {};

  namehelper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "NameHelper";
    plugname = "NameHelper";
    plugid = "NameHelper";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11933/57607/NameHelper.jar";
      sha256 = "01yysg8nrbq3as700adfm4l53m6md6g7hgdmvynkhc6ng8290b7a";
      name = "NameHelper-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://termsfeed.com/eula/e84e6563104bb14b0a87660205c25eee";
        free = false;
      };
      description = ''
        Toggle word style between camel and underline, ALT + A.
      Toggle word initials caps, ALT + L
      '';
    };
  }) {};

  nana-mybatis = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nana-Mybatis";
    plugname = "Nana-Mybatis";
    plugid = "com.damon4u.plugin.mybatis";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11278/51685/hello-idea-plugin-mybatis.jar";
      sha256 = "09ybh0q86l0qxqvb61hijk1vs6cgyn09dcnq469bkja9r7jnrf6v";
      name = "Nana-Mybatis-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/damon4u/hello-idea-plugin-mybatis";
      license = lib.licenses.asl20;
      description = ''
        A simple plugin for Mybatis.
      This Plugin is fork from https://github.com/wuzhizhan/free-idea-mybatis 
      Features: 
      
      create reference for &lt;resultMap&gt; and &lt;sql&gt; statements in Mybatis XML.
      create reference for property in &lt;resultMap&gt; statements to corresponding entity.
      create reference for SQL XmlToken and &lt;if test=""&gt; attribute to the corresponding parameter of the method in DAO interface.
      support sql statement completion when you type `#{}` in Mybatis XML with parameters of the corresponding method in DAO interface.
      support &lt;if test=""&gt; statement completion in Mybatis XML with parameters of the corresponding method in DAO interface.
      support line marker with beautiful icon for DAO method navigating to corresponding statement in Mybatis XML.
      support line marker with beautiful icon for statement in Mybatis XML navigating to corresponding method in DAO interface.
      support inspection for Mybatis XML statement which checks whether a corresponding method exists.
      support inspection for DAO interface method which checks whether a corresponding Mybatis XML statement exists.
      '';
    };
  }) {};

  native-neighbourhood = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Native-Neighbourhood";
    plugname = "Native Neighbourhood";
    plugid = "Native Neighbourhood";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/38/8789/Native_Neighbourhood_8789.zip";
      sha256 = "1f551m020b5m3hp8j1hvgzz1a19rgq5lj8cgarybgk9v8pafiblm";
      name = "Native-Neighbourhood-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/nativeneighbourhood";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/nativeneighbourhood";
        free = false;
      };
      description = ''
        Provides some actions to integrate IDEA into the native desktop environment.
        Actions include executing the currently active file in the platform's default
        application, showing the active file in the platform file manager and opening a command
        shell in the active file's directory.
        
        Integrates the actions into Tools-menu and main toolbar and provides an entry for the
        SelectInTarget-Menu to show in file manager.
        
        Additionally a custom binary file type is registered and associated with several extensions.
        These files may be executed in the platform's default application by double-clicking them
        in the project view, for example.
        
        Furthermore from native file manager files may be dropped on unused areas of the idea
        frame (empty space in toolwindowbars, editor tab area, toolbar, menubar and statusbar).
        
        The action commands may be configured in config/options/other.xml in section
        NativeNeighbourhoodPlugin. Supported replacement variables are
        ''$FilePath$, $FileDir$, $FileName$ and $PluginsHome$. All Icons
        are loaded from configured "iconsDir" below /org/intellij/plugins/nativeNeighbourhood/icons/.
        
        The labels may be customized in META-INF/plugin.xml in plugin directory.
        The associated extensions may be configured in other.xml or using the filetypes-applet
        in IDEA configuration.
      '';
    };
  }) {};

  native-terminal = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Native-Terminal";
    plugname = "Native Terminal";
    plugid = "com.sburlyaev.terminal.plugin";
    version = "0.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9966/83975/IDEA-Native-Terminal-Plugin-0.4.3.zip";
      sha256 = "1knywq5rycqlf6s8rh0g2lz8m5sz0v94gy39b4lyqk6icszisph7";
      name = "Native-Terminal-0.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sburlyaev/IDEA-Native-Terminal-Plugin";
      license = lib.licenses.mit;
      description = ''
        adds a Terminal icon to the IDE toolbar and context menu to open project directories in your favorite terminal.
      
      By default, it uses OS native terminal:
      Windows - Command Prompt (cmd)
      Linux - gnome-terminal / konsole
      macOS - Terminal.app
      
      If you want to use another terminal instead - you can!
      Just specify your favorite one in the IDE Settings / Preferences.
      *PowerShell, ConEmu, Cmder, WSL (bash, wsl), GitBash, RXVT, iTerm are also supported.
      
      Since version 0.4, it is available to specify a custom command with ''${project.dir} placeholder,
      which will be replaced at runtime with the actual project directory.
      '';
    };
  }) {};

  native2ascii = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Native2Ascii";
    plugname = "Native2Ascii";
    plugid = "Native2Ascii";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/41/2051/Native2Ascii_2051.zip";
      sha256 = "1r265j07fqhfnys2qm49ls655hxm6hfvyj5jxdf9i15n3prxdpmz";
      name = "Native2Ascii-1.0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Support for compiling native properties files to ascii.
      '';
    };
  }) {};

  navigate-from-literal = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Navigate-From-Literal";
    plugname = "Navigate From Literal";
    plugid = "navigate-from-literal";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7235/15840/idea-navigate-from-literal.jar";
      sha256 = "15d8yvdsjnfaf0fsg5nkqllihgi7b7lws67q212wgxlvlabgv04y";
      name = "Navigate-From-Literal-1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ishchenko/idea-navigate-from-literal";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ishchenko/idea-navigate-from-literal";
        free = false;
      };
      description = ''
        Enables navigation from any string literal or xml attribute value or xml text to a file by name. I.e. Ctrl+B/Ctrl+Click at literal &quot;myFile.txt&quot; will try to navigate to a file named &quot;myFile.txt&quot;, that is located in any project directory. For a literal like &quot;some/path/to/file.txt&quot; it will omit directories and try to resolve &quot;file.txt&quot; in all project directories. Back references (i.e. from files to literals) are ignored, this is by design.
      '';
    };
  }) {};

  navigate-identifier-occurrence = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Navigate-Identifier-Occurrence";
    plugname = "Navigate Identifier Occurrence";
    plugid = "com.mnw.navigateidentifier";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10117/39948/navigateIdentifier.jar";
      sha256 = "0s8cr2dyr98aj2r7gg5y89prgdfkcrz5v1gfbnp3giiabrx9q5bh";
      name = "Navigate-Identifier-Occurrence-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://mikinw.blogspot.co.uk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://mikinw.blogspot.co.uk";
        free = false;
      };
      description = ''
        Shortcuts to navigate from an identifier under the caret to the next/previous occurrence of the identifier. 
 With this plugin this actually works. IntelliJ's built in navigation doesn't (it only works, if you try to find that text first).
 Default shortcut: Ctrl+Alt+UP / Ctrl+Alt+UP to navigate to next / previous occurrence (but of course change it as you see fit)
      '';
    };
  }) {};

  navigate-to-module = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Navigate-to-Module";
    plugname = "Navigate to Module";
    plugid = "com.navigatetomodule";
    version = "0.32";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13803/78511/navigatetomodule-0.32.zip";
      sha256 = "12gr41pr9igzfi3q9gr4jd44x0aicps6kivff3wvd8br94yplyl3";
      name = "Navigate-to-Module-0.32.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/felipekunzler";
      license = lib.licenses.mit;
      description = ''
        An IntelliJ plugin that allows one to quickly navigate between modules. Especially useful on projects with a number of deeply nested modules.
        
        Modules can be filtered out by a given criteria, the selected module is opened and focused on the Project Tree View.
        
        
        Keyboard shortcuts:
        
            MacOS: Cmd + Shift + P
            Windows/Linux: Ctrl + Shift + P
            Menu Bar -&gt; Navigate -&gt; Navigate to Module
            Shift twice -&gt; Navigate to Module
        
        
        Shortcuts may be changed via Preferences -&gt; Keymap -&gt; Navigate to Module -&gt; Add keyboard shortcut
      '';
    };
  }) {};

  navigate-to-url = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Navigate-to-URL";
    plugname = "Navigate to URL";
    plugid = "navigate-to-url";
    version = "1.0-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9412/31826/idea-navigate-url-from-literal.jar";
      sha256 = "1llgi1vqb0f8jlzyi0867ql7samy0blp9rzhv0pmah4wh1px7ag8";
      name = "Navigate-to-URL-1.0-SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/twadzins/idea-navigate-url-from-literal";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/twadzins/idea-navigate-url-from-literal";
        free = false;
      };
      description = ''
        Enables navigation from any matching string literal or xml attribute value or xml element text to a url defined by url rules.
 This, for instance, makes a string anywhere in the code like "GD-123", when clicked, navigate to https://mysite.atlassian.net/browse/GD-123
 
 To create url rules, create a file called navigate-url-plugin.properties at the root of any module.
 
 Example "navigate-url-plugin.properties" file contents :
 url1.startsWith=GD-
 url1.navigateTo=https://mysite.atlassian.net/browse/{0}
 
 The source code uses code from the existing plugin: ishchenko/idea-navigate-from-literal. 
 
 TODO: Support the traditional configuration UI, if requested by plugin users. The author's use case is for a team where using the normal shared intellij plugin configuration isn't an option. Using a project config file instead provides the shared config automatically for all team members.
      '';
    };
  }) {};

  navigation-wheel = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Navigation-Wheel";
    plugname = "Navigation Wheel";
    plugid = "org.jetbrains.navigation";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12001/58647/navigation-wheel-plugin-0.0.2.jar";
      sha256 = "0mq47wqqywnfy02xlrgzcfa5amndvidaj7hzylbmhhwaahxymqy5";
      name = "Navigation-Wheel-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/skydi17";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        To open navigation wheel press alt + C + X.
         To open navigation wheel and run code analysis press alt + C + V(Works only for IntelliJ IDEA). It will red-highlight any opened files that contain errors. Code analysis is not a fast operation so use this key combination only if you really need it.
         In order to choose a file hover your mouse over the desired file's circle segment.
         To open a file just click circle segment or on button with file name.
         Press and move file button out of the wheel to open file in the new window.
         Press close button to close a file.
         To close navigation wheel without any additional actions just click inside the drawn circle.
    
    Source code: Github
      '';
    };
  }) {};

  navigator-extension-for-google-web-toolkit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Navigator-extension-for-Google-Web-Toolkit";
    plugname = "Navigator extension for Google Web Toolkit";
    plugid = "de.markiewb.idea.gwtnavigator";
    version = "2.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9912/90041/idea-gwt-navigator-plugin.jar";
      sha256 = "019fcwi98f456l914skl50qqcmvlsmjzvis3pq8sh5y8p4fych8c";
      name = "Navigator-extension-for-Google-Web-Toolkit-2.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/markiewb/idea-gwt-navigator-plugin";
      license = lib.licenses.asl20;
      description = ''
        You can jump between GWT services using the "Related Symbol..." action.
    
    Compatible to the IntelliJ IDEA Community Edition.
    
    It allows you to
    
    Jump from com.foo.client.(I)MyService             to com.foo.client.(I)MyServiceAsync and com.foo.server.MyServiceImpl
    Jump from com.foo.client.(I)MyServiceAsync to com.foo.client.(I)MyService and com.foo.server.MyServiceImpl
    Jump from com.foo.server.MyServiceImpl  to com.foo.client.(I)MyService and com.foo.client.(I)MyServiceAsync
    
    If the caret is within/on a class, then you can jump from/to the related async/impl class. 
    If the caret is within/on a method, then you can jump from/to the related async/impl method.

    

Changelog:

 2.2.1: Fixed compatibility warnings from JetBrains #5
 2.2: Fixed: Group results by prod and test source roots #4
 2.1: Fixed: Non-RemoteServlet-Implementation not found #3
 2.0: Detect more variants (by use of type information) #2
 1.2: Jump from/to IMyService(Async) to MyServiceImpl
 1.1: Jump from/to corresponding async/impl method
 1.0: Initial version - jump to files (regardless which method is currently active)
      '';
    };
  }) {};

  neckprotector = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "NeckProtector";
    plugname = "NeckProtector";
    plugid = "com.zeke.wong.neck-protect";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12371/71979/neck-protect.jar";
      sha256 = "0hnmn3rk3774mjr9ka8c47gx4rsc92hg6395iycqhswiardb1gnm";
      name = "NeckProtector-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kivensolo";
      license = lib.licenses.asl20;
      description = ''
        When you keep the bad posture for a long time to write code,
      it is easy to cause a variety of shoulder and neck problems!
      The plugin will remind you to have a rest when you work constantly for an hour.
      
       连续编写代码一小时，插件会定时提醒你休息放松，动动脖子、放松肩膀，远离肩颈困扰!
      
       | GitHub | 
      
      
        Features / 特性列表
        
        Timed reminders / 定时提醒
        Customizable reminder pictures (support Bing daily photos) / 可自定义提醒图片(支持Bing每日美图)
        Customizable reminder / 可自定义提醒方式
        Customizable reminder time / 可自定义提醒时间
        Customizable reminder copy / 可自定义提醒文案
        
      

      compatibility / 兼容性:
      Compatible with all Jetbrains IDE products with build number 171 (IDEA 2017.1) or higher.
      兼容所有产品编译号为171(IDEA 2017.1)以上的 Jetbrains IDE 产品。
        
        Android Studio
        IntelliJ IDEA
        IntelliJ IDEA Community Edition
        PhpStorm
        WebStorm
        PyCharm
        PyCharm Community Edition
        RubyMine
        AppCode
        CLion
        DataGrip
        Rider
        ...
      '';
    };
  }) {};

  nemesis-application-development-platform = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nemesis-Application-Development-Platform";
    plugname = "Nemesis Application Development Platform";
    plugid = "com.nemesis.platform.nemesis-idea-plugin";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10845/67995/nemesis-intellijidea-plugin.jar";
      sha256 = "1hdvxpgs7b1b9brjic0rribishli66ysjd6q69yjd0yj5kjja6d1";
      name = "Nemesis-Application-Development-Platform-1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.nemesis.io";
      license = lib.licenses.asl20;
      description = ''
        This plugin is designed for people using the Nemesis Application Development platform (http://nemesis.io).
      For now the only functionality provided by the plugin is to enable faster import of CSV files in any running Nemesis Instance.
      Upon installing the plugin you will get a new screen in your Settings menu - there you can configure the plugin
      settings (url, username and password for the nemesis instance you want to work against).
      '';
    };
  }) {};

  neo-coder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Neo-Coder";
    plugname = "Neo Coder";
    plugid = "com.simonalong.neo.coder";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14955/95575/NeoCoderPlugin.zip";
      sha256 = "03lip4s0ab7jqv72q6s1z1andskd47llxs6dn1q8dpvhx906vg89";
      name = "Neo-Coder-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        the plug-in can quickly generate domain and dao layer code.The plugin is developed based on the underlying Orm framework independently developed by the company, not the common Orm framework on the market
      '';
    };
  }) {};

  neo-fire-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Neo-Fire-Color-Scheme";
    plugname = "Neo Fire Color Scheme";
    plugid = "color.scheme.Neo Fire";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13511/74487/Neo_Fire.jar";
      sha256 = "1i9d8zq3b2d4lcm5pcmbamlsiqzx4qdsd94jdc2ar6fi2jky4i95";
      name = "Neo-Fire-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fire1";
      license = lib.licenses.mit;
      description = ''
        Neo Fire color scheme for phpStorm
      '';
    };
  }) {};

  nerdvision = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NerdVision";
    plugname = "NerdVision";
    plugid = "com.nerd.vision";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15355/105058/idea-plugin-0.0.5.zip";
      sha256 = "1353gqg64y5igpdv5irlhfylbrg532n09arppfq98pw99c46x8d1";
      name = "NerdVision-0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://nerd.vision";
      license = lib.licenses.asl20;
      description = ''
        A plugin for the NerdVision debugging platform.

Create non blocking breakpoints to collect data from your application, in production, staging or development.

See the captured data directly in your IDE. Allowing you to collect and see production data as your are working on fixes.

Manage all tracepoints directly in your IDE.
      '';
    };
  }) {};

  nested-brackets-colorer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nested-Brackets-Colorer";
    plugname = "Nested Brackets Colorer";
    plugid = "com.github.ArtsiomCh.NestedBracketsColorer";
    version = "0.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10210/60190/NestedBracketsColorer.jar";
      sha256 = "1bq0myq3mg40xhncn9ilj9h3pnw9lmqy7bp2xafh71kwgh06radf";
      name = "Nested-Brackets-Colorer-0.5.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/ArtsiomCh/NestedBracketsColorer";
      license = lib.licenses.gpl3Only;
      description = ''
        Coloring nested round (), angled &lt;&gt; and square [] brackets starting from the second level at next languages:
      - Java (built-in Java plugin required)
      - Kotlin (built-in Kotlin plugin required)
      - Flex (Grammar-Kit plugin required)
      - PHP and JavaScript/TypeScript (tested with built-in PHP and JS plugins at PhpStorm)
      - Python (tested with PyCharm)
      - Scala (Scala plugin required)
      - Rust (Rust plugin)
      - Dart (Dart plugin)
      '';
    };
  }) {};

  netbeans-exporter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NetBeans-Exporter";
    plugname = "NetBeans Exporter";
    plugid = "me.profiluefter.netbeansExporterPlugin";
    version = "3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14275/86896/netbeans-exporter-plugin-3.zip";
      sha256 = "042ivaqg3ydvwzddsc0vrhjic7kgyfn2p4nr0d7zv148w7pzsvq8";
      name = "NetBeans-Exporter-3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://profiluefter.me";
      license = lib.licenses.gpl3Only;
      description = ''
        Transforms the project so that it can be opened with the NetBeans IDE.
Features:
        
            Transforms dependencies to jar files and links to them
            Reads the project's source folders from the Project Structure
      '';
    };
  }) {};

  netbeans-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NetBeans-Keymap";
    plugname = "NetBeans Keymap";
    plugid = "com.intellij.plugins.netbeanskeymap";
    version = "202.6250.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12558/91212/NetBeansKeymap.zip";
      sha256 = "0vrnv98wqwmj6j4slgg096qplmqs9n1pzk87zi83m7prif0j6jq8";
      name = "NetBeans-Keymap-202.6250.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = lib.licenses.asl20;
      description = ''
        NetBeans keymap for all IntelliJ-based IDEs.
    Use this plugin if NetBeans keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  netsuite-tools-for-webstorm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NetSuite-Tools-For-WebStorm";
    plugname = "NetSuite Tools For WebStorm";
    plugid = "netsuite.tools.plugin";
    version = "1.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8305/50511/NetSuite-Tools-For-WebStorm.zip";
      sha256 = "0xss37vx2di76bixgdbaywa9lad91d8i7fjq5k43xszrfpgvdg8v";
      name = "NetSuite-Tools-For-WebStorm-1.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Topher84/NetSuite-Tools-For-WebStorm";
      license = lib.licenses.mit;
      description = ''
        [GitHub] NetSuite Tools For WebStorm 
          [LinkedIn] Plugin Author
        
        
        
        
          
          Open source WebStorm IDE plugin that uses NetSuite SuiteTalk 2017.1 WSDL to provide the ability to:
          
            Specify any NetSuite File Cabinet Folder as the project root directory or select from SuiteScripts or SuiteBundles listing
            Upload Folder(s) and File(s) to NetSuite File Cabinet
            Compare local File(s) against NetSuite File Cabinet
      '';
    };
  }) {};

  netease-java-coding-guidelines = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Netease-Java-Coding-Guidelines";
    plugname = "Netease Java Coding Guidelines";
    plugid = "com.netease.p3c.smartfox";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11963/58128/Netease_Java_Coding_Guidelines-1.0.0.zip";
      sha256 = "1gkl48bkwykzcbrqy94c1mp90ccgj1y5lp7481mli165fvrq00jx";
      name = "Netease-Java-Coding-Guidelines-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Netease Java Coding Guidelines plugin support.
      '';
    };
  }) {};

  network = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Network";
    plugname = "Network";
    plugid = "com.hotels.intellij.plugins.network";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9846/89190/network-plugin.zip";
      sha256 = "11l240kvfrrcrzqiakrv24xcqp6q4ib0k9da83c7by3c5w6dxzwd";
      name = "Network-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/HotelsDotCom/network-plugin";
      license = lib.licenses.asl20;
      description = ''
        The Network plugin allows applications to proxy requests and view the request and responses in IntelliJ.
      
      
      
        Features:
        
          Run a HTTP proxy server from IntelliJ
          View application requests sent and responses received from downstream systems
          Displays Json request payloads and Json response payloads
          Supports Gzip Content Encoding
          Supports LZ4 Content Encoding
          Supports JSON Content Type
        
      
      
      
        Note: The proxy will work with HTTP traffic only. HTTPS traffic is, by nature, secure and will not display in the plugin.
      
      
      
        If you encounter any issues, please report them. Please use the
        GitHub issue tracker instead of
        review comments.
      '';
    };
  }) {};

  network-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Network-Tools";
    plugname = "Network Tools";
    plugid = "Network Tools";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4615/7833/Network_Tools_7833.jar";
      sha256 = "0lxb8vlkqa59hs1y5ypf81416dv2pwiwl139x7qsf4h06kn5mj9j";
      name = "Network-Tools-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://jsrana2.wixsite.com/jsrana";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://jsrana2.wixsite.com/jsrana";
        free = false;
      };
      description = ''
        Network Tools provide various tools for monitoring the network.
    Change Log
    Version 1.0
    This is the first release version of this tool
    
    WhoIs database query tool
    Ping tool
    Port Scanner tool
    
    Screenshot
      '';
    };
  }) {};

  neva-river = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Neva-River";
    plugname = "Neva River";
    plugid = "NevaRiver";
    version = "1.34";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12595/77302/NevaRiver.zip";
      sha256 = "1ld6hp60swqdxj5zgvqqwsfs0872xx2y69q8kkj7kfm4gl8ryd47";
      name = "Neva-River-1.34.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Level of Neva river near its estuary (chart widget for status bar)
      '';
    };
  }) {};

  new-class-dialog-with-options = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "New-Class-Dialog-With-Options";
    plugname = "New Class Dialog With Options";
    plugid = "com.android.newclassdialog";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8367/26057/NewClassDialog.jar";
      sha256 = "02m53db6z4y4kiaf0q25qr6l2bhvklzdwh59ijwiaahnsrzp4rcl";
      name = "New-Class-Dialog-With-Options-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://developer.android.com/index.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://developer.android.com/index.html";
        free = false;
      };
      description = ''
        This plugin adds several common creation options to the new class dialog.
      '';
    };
  }) {};

  new-executable-cc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "New-Executable-CC++";
    plugname = "New Executable C/C++";
    plugid = "de.longnguyen.plugin.clion.new.entry.point.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12078/69525/clioncmake-1.3.jar";
      sha256 = "1ygcj1lsic8v65ciwahyj4ffl2rnmd7lm9524qm4h08xyy7hh4wc";
      name = "New-Executable-CC++-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://long-nguyen.de";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        Shift + Alt + E on a source file to create an executable with the corresponding file.

      If you are from the Java world, you might be used to be able to create a new single
      public static void main(String [] args) in every class in order test some thing
      really quick.

      With CMake things are more complicated since all files needed to be linked together in an
      executable and duplicated method names will not be tolerated.

      This plugin will automatically insert a new executable for a single source file in the nearest CMake file.

      Simply choose a C/C++ source file you want to execute separately from your main project and press the hot key
      Shift + Alt + E

      github page
      '';
    };
  }) {};

  newdataclassaction = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NewDataClassAction";
    plugname = "NewDataClassAction";
    plugid = "cn.kotliner.dataclass";
    version = "1.0.dbdce3c-rc";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9812/51003/NewDataClassAction-1.0.dbdce3c-rc.zip";
      sha256 = "16vfhjig926sxkhqb3fmngkg4fzmm2ywv534rrj160fgdi17yrh4";
      name = "NewDataClassAction-1.0.dbdce3c-rc.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/enbandari/NewDataClassAction";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/enbandari/NewDataClassAction";
        free = false;
      };
      description = ''
        Create Data Class on the fly!!
 openSource
      '';
    };
  }) {};

  newyapiupload = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NewYapiUpload";
    plugname = "NewYapiUpload";
    plugid = "com.github.odinggg.NewYapiUpload";
    version = "1.03";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14676/106939/NewYapiUpload-1.03.zip";
      sha256 = "0li5gcxc0k7g295fh45pzlx0m0w6a89bd24nsgnd2hdki252ckqj";
      name = "NewYapiUpload-1.03.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/odinggg/NewYapiUpload";
      license = lib.licenses.mit;
      description = ''
        Expand and enhance the function of yapiUpload plug-in. The main enhancements are as follows:
      1. Add configuration page. 
      2. Add @ignore annotation to ignore the specified field. 
      3. Add @update annotation to avoid repeated updates. 
      4. Combine the pdm file exported by powerDesigner to parse the database fields and match the entity fields. 
      5. Synchronous upload is changed to asynchronous. 
      Better, faster, stronger
     
     扩展增强yapiUpload插件的功能。主要有以下几点增强：
     1. 增添配置页面。
     2. 添加@ignore注解来忽略指定字段。
     3. 添加@update注解来避免重复更新。
     4. 结合powerDesigner导出的pdm文件解析数据库字段并与实体字段做匹配。
     5. 同步上传改为异步。
      '';
    };
  }) {};

  niddler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Niddler";
    plugname = "Niddler";
    plugid = "com.icapps.niddler";
    version = "2.9.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10347/108365/niddler-plugin-2.9.11.zip";
      sha256 = "0af8w8swb5lqadjz5w09c5pkb2396hf5dz5nvhccfbl0jcdbc1pw";
      name = "Niddler-2.9.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.icapps.com";
      license = lib.licenses.asl20;
      description = ''
        This plugin enables the niddler ui inside the IDE
      '';
    };
  }) {};

  night-owl-native = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Night-Owl-Native";
    plugname = "Night Owl Native";
    plugid = "hu.aradipatrik.nightowlnative";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13448/73961/night-owl-native.jar";
      sha256 = "10r1hacn51zph7m62qjaln6kzf16ni0gwk2c7wbrn14zq07ah465";
      name = "Night-Owl-Native-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This theme is a native implementation of sarah.drasner's Night Owl theme. This theme does not require material UI in order to work.
      Repo: https://github.com/AradiPatrik/one-dark-native-intellij
      '';
    };
  }) {};

  night-owl-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Night-Owl-Theme";
    plugname = "Night Owl Theme";
    plugid = "com.jensteichert.themes.nightowl";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12262/74979/nightowl.jar";
      sha256 = "0fypyj9xjsj8ydpyhd06zjiazslx54r5ibj5fblydh86b2k8by2r";
      name = "Night-Owl-Theme-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jensteichert";
      license = lib.licenses.asl20;
      description = ''
        A dark theme for Jetbrains IDE Platform. Night Owl uses a very dark gray to provide a calm coding experience.
      '';
    };
  }) {};

  nim = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Nim";
    plugname = "Nim";
    plugid = "com.jetbrains.nim";
    version = "1.3.3-203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15128/107259/nim-lang-1.3.3-203.zip";
      sha256 = "1xxw66rvfysw5s02vrf7b9r8c858mbjkz8ld5g0q22qx0a6yha91";
      name = "Nim-1.3.3-203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.jetbrains.com/legal/agreements/user.html";
        free = false;
      };
      description = ''
        Provides Nim language support.
        
            Syntax highlighting - token-based and semantic
            Syntax errors highlighting
            Run/debug configurations (debugging supported in CLion, IntelliJ Ultimate and RubyMine)
            Code completion, find usages, quick documentation and refactoring of unqualified symbols
            Import, export and include resolution
            Support for Nim standard library and Nimble packages
            Nimscript and Nimble files support
            Different forms of the same identifier are recognised properly,
                e.g. foo, f_O_O, fOO or even `f oo`
        
        Coming soon:
        
            Toolchain selection
            Compiler errors in the editor
            Support nimpretty as a default formatter
      '';
    };
  }) {};

  nim-language-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nim-language-support";
    plugname = "Nim language support";
    plugid = "nim.lang";
    version = "0.0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7829/21456/idea-nim.jar";
      sha256 = "1q1kg9yhwkpwpjq8cq0axkhsh5fw5n2kcjziqaman3gklfgzbsn8";
      name = "Nim-language-support-0.0.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jhspetersson/idea-nim";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jhspetersson/idea-nim";
        free = false;
      };
      description = ''
        Nim language support.
      '';
    };
  }) {};

  nixidea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NixIDEA";
    plugname = "NixIDEA";
    plugid = "nix-idea";
    version = "0.3.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8607/107082/NixIDEA-0.3.0.4.zip";
      sha256 = "0m8fwrvp8hqh1qzj2w88lrf1c1aqba0sk4k9v6g7pqkk4j2k8rg6";
      name = "NixIDEA-0.3.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/NixOS/nix-idea";
      license = lib.licenses.asl20;
      description = ''
        This plugin has the goal of being generally useful when working with nixpkgs/NixOS/nixops, it aims
to provide the following:

Syntax HighlightingLintingProfile managementSuggestions for:AttributesBuiltinsFilesystem pathsTemplates for common usage patterns
      '';
    };
  }) {};

  nocodeshape = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "NoCodeShape";
    plugname = "NoCodeShape";
    plugid = "julis.wang.nocodeshape";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13325/74179/NoCodeShape-1.2.0.jar";
      sha256 = "0226gn2wvk25pr6lxydgvjcchqvafxgqgy58ajs180h63clvsv54";
      name = "NoCodeShape-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://julis.wang";
      license = lib.licenses.mit;
      description = ''
        A plugin to simplify generate Android shape xml, needn't any code!
      '';
    };
  }) {};

  noctumsempras-rainglow-color-themes = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Noctumsempras-Rainglow-Color-Themes";
    plugname = "Noctumsempra's Rainglow Color Themes";
    plugid = "com.noctumsempra.themes.rainglow.remastered.megapack";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15876/108261/Noctumsempra_Color_Schemes.jar";
      sha256 = "0zvsyndgj4d2pq73fv2r1izfd04zg8h0h3jsbpalfxn4yk6g8r6r";
      name = "Noctumsempras-Rainglow-Color-Themes-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.twitter.com/lcom86";
      license = lib.licenses.mit;
      description = ''
        This is the famous theme pack Rainglow Color Themes by Dayle Rees, but with NO CUSTOM FONT properties by default!
      So every color scheme in this Rainglow pack will default to your IDE's global font face/size. 
      
      NO more having to UNCHECK manually the "Use default font instead of color scheme's font." anymore!
      Font line-spacing to 1.0 by default for compact consoles. 
      Font family for Console automatically taken from IDE's global font.
      
      UI theme from Nescode Espresso, inspired by Codely.
      '';
    };
  }) {};

  node-security = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Node-Security";
    plugname = "Node Security";
    plugid = "mobi.hsz.idea.nodesecurity";
    version = "0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10386/43855/idea-nodesecurity-0.4.0.zip";
      sha256 = "13xan4jxl9rfbxna8iyawrbsrsd3p2nv8x28hgh6i7mk0rhi5j6y";
      name = "Node-Security-0.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hsz/idea-nodesecurity";
      license = lib.licenses.mit;
      description = ''
        Node Security 
 
GitHub | 
Issues | 
Donate with PayPal 
 
 IntelliJ 
Node Security plugin that indicates which Node packages in your project are vulnerable. 
 Plugin checks your dependencies against [nodesecurity.io](nodesecurity-io) service. 
 
 
Features 
 
 Highlight vulnerable dependencies in `package.json` file. 
 Verify package.json files when project is opened 
 package-lock.json and yarn.lock support 
 deep check of vulnerabilities
      '';
    };
  }) {};

  non-project-files-unlocker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Non-Project-Files-Unlocker";
    plugname = "Non Project Files Unlocker";
    plugid = "krasa.nonProjectFilesUnlocker";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7635/64091/NonProjectFilesUnlocker.jar";
      sha256 = "03nzf4k0dv363rms1wl1csi7mbdb5r3w3kjngijwqg4sk1x0s40n";
      name = "Non-Project-Files-Unlocker-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/NonProjectFilesUnlocker/";
      license = lib.licenses.asl20;
      description = ''
        Disables annoying dialog for unlocking non-project files - IDEA-125379.
      '';
    };
  }) {};

  nongfu = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nongfu";
    plugname = "Nongfu";
    plugid = "io.github.mthli.nongfu";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11280/51728/Nongfu.1.1.2.jar";
      sha256 = "1v6x87dld22ahxkmfmyj5xikfj0xnsinj7kzm4hpqdjjn9i52p81";
      name = "Nongfu-1.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mthli.github.io";
      license = lib.licenses.asl20;
      description = ''
        Nongfu
        GitHub | Issues
        
        A IntelliJ IDEA plugin that help you move files or directories to target module quickly.
        A common scene is moving resources in Android Studio 3.x, because of it's "Modularize..." action usually miss some resources dependency.
        
        Usage: Refactor → Move to Module...
        Keymap: Control(Command) + Shift + X
      '';
    };
  }) {};

  nord = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nord";
    plugname = "Nord";
    plugid = "com.arcticicestudio.nord.jetbrains";
    version = "0.13.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10321/100456/nord-jetbrains.jar";
      sha256 = "046pc3lcm9ak9g0lx4xnwys39pz1bxkzv3srj2j3khdw1aqn0pqj";
      name = "Nord-0.13.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.arcticicestudio.com";
      license = lib.licenses.mit;
      description = ''
        An arctic, north-bluish clean and elegant JetBrains IDE UI and editor color theme.
      '';
    };
  }) {};

  notation-converter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Notation-Converter";
    plugname = "Notation Converter";
    plugid = "Notation Converter";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6365/10118/Notation_Converter_10118.jar";
      sha256 = "1nwchkyc2w9hfyj7mpjhl6953vrbcjvv4mlgqmnfaj52f1qhg360";
      name = "Notation-Converter-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mjedynak/notation-converter-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mjedynak/notation-converter-idea-plugin";
        free = false;
      };
      description = ''
        Plugin adds ability to convert the selected name between camel case (used in field's names) and uppercase underscore (used in constant's names).
      Works similar to 'Toggle case' action.
      
      E.g. 'MY_NAME' -> 'myName'.
      
      Usage:
      
          ALT+SHIFT+U on a name (shortcut).
          Edit -> Camel Case / Underscore Conversion (from Edit menu).
      '';
    };
  }) {};

  nots-io = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nots.io";
    plugname = "Nots.io";
    plugid = "io.nots.intellij";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12013/58925/nots-io.jar";
      sha256 = "0rnwjs8vvhlzzjxz32bz9s6hgpi7ll2zq3j5c6vp62121pk2n4vj";
      name = "Nots.io-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/notsio/idea";
      license = lib.licenses.mit;
      description = ''
        Intellij IDEA integration with Nots.io service
      '';
    };
  }) {};

  nstack-translation-folding = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nstack-Translation-folding";
    plugname = "Nstack Translation folding";
    plugid = "com.nodesagency.plugin.nstack_translation_folding";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10207/40994/nstack_translation_folding.jar";
      sha256 = "1qaxi1paz9mh12nmr5zbsb7nxj1qw7i5szkxbfnwbjpb3gjs7xvz";
      name = "Nstack-Translation-folding-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.nodesagancy.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.nodesagancy.com";
        free = false;
      };
      description = ''
        This is a Nstack related plugin. This plugin replaces the Translation class reference expression with a placeholder containing the reference actual value.
      '';
    };
  }) {};

  nuls = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Nuls";
    plugname = "Nuls";
    plugid = "org.river.nuls.contract.tool";
    version = "1.1.4.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12368/61884/NulsContractIdeaPlugin_20190130.zip";
      sha256 = "0h9ll62rrwqp9il19rcqxirjbxksqkn09wjsyk0jh5bzharvli2s";
      name = "Nuls-1.1.4.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://nuls.io/";
      license = lib.licenses.mit;
      description = ''
        Nuls Contracts Accessor
      Nuls Contracts Accessor
      '';
    };
  }) {};

  number-converter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Number-Converter";
    plugname = "Number Converter";
    plugid = "com.dethlex.numberconverter";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14793/100778/NumberConverter.jar";
      sha256 = "1hzb6mrhjpd8xphfp0xdngpjkvv04iyv77ahwn2rn2k8cby8dhmv";
      name = "Number-Converter-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dethlex/NumberConverter";
      license = lib.licenses.asl20;
      description = ''
        A plugin to convert numbers from one numeral system to another for use in IDE.
		
		Current supported number systems:
		
			DEC - Decimal
			HEX - Hexadecimal
			OCT - Octal
			BIN - Binary
      '';
    };
  }) {};

  nutzcodeinsight = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "NutzCodeInsight";
    plugname = "NutzCodeInsight";
    plugid = "com.sgaop.idea.codeinsight.plugin";
    version = "2.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10311/87045/NutzCodeInsight_2.1.3_20200525.jar";
      sha256 = "1vsph4rfgq4lwqjb7d83v3azfch1kc7c2rslraag95zfa20wbd6w";
      name = "NutzCodeInsight-2.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/threefish/NutzCodeInsight";
      license = lib.licenses.asl20;
      description = ''
        Intellij idea plugin for Nutz
      
      
      
      GitHub |
      Issues
      
      
      
       English
       
          1、Support the Nutz Boot project to build quickly
          2、Click on the template icon in front of @Ok in Nutz Action to quickly open or switch to an already opened template file.
          3、Fast positioning of framework resource files supporting HTML, JSP and other format files as templates (can be dynamically configured)
          4、Add a Find @At Map Address Shortcut to the Navigate Menu
          5、Support for folding display of internationalized configuration file variable values ​​in the Nutz web environment (shortcut: Alt++ or Alt+-)
          6、The Beetl template also supports internationalization profile folding (''${i18n("login.sucess")} or ''${i18n("login.sucess","parameter 1","parameter N")} ) (shortcut: Alt++) Or Alt+-)
          7、Nutz supports folding display java class injection configuration file variable value @Inject("java:''$conf.get('attach.savePath')") (shortcut: Alt++ or Alt+-)
          8、@Inject("java:''$conf.get('attach.savePath')") You can jump to each other in java files and configuration files by ctrl+click or ctrl+b
          9、Quickly create interfaces and implementation classes in the support entity class (shortcut: Alt + insert )
          10、@SQL sql supports dynamic language highlighting and prompts
          11、Dynamic highlighting and prompting of sql language in SQL template in Nutz-sqltpl xml
          12、Nutz-sqltpl supports xml and java files to jump to each other
          13、Nutz-sqltpl quickly generates the corresponding xml template for the @SqlsXml annotation that has not yet created the xml template file (shortcut: Alt + insert )
          14、Provide a quick jump to the implementation class or select multiple implementation classes for adding the @Inject field injection interface
          15、Provide a GUI for @OK("json") and quickly modify json formatting information
          16. Provide restful api tool window, load all restful api and jump quickly
          17. Nutz-sqltpl Clicking on the id called by java can quickly locate the corresponding id in xml and vice versa
       
       中文
       
          1、支持NutzBoot项目快速搭建 2、在 Nutz Action 中点击 @Ok 
          前面的模版图标即可快速打开或切换至已经打开的模版文件 
          3、支持以HTML、JSP等格式文件作为模版的框架资源文件的快速定位（支持动态配置） 
          4、Navigate菜单中增加查找@At映射地址快捷方式 5、Nutz 
          web环境中支持折叠显示国际化配置文件变量值（快捷键：Alt++或Alt+-） 
          6、Beetl模版中也支持国际化配置文件折叠(''${i18n("login.sucess")}或者''${i18n("login.sucess","参数1","参数N")} 
          )（快捷键：Alt++或Alt+-） 7、Nutz 支持折叠显示java类中注入配置文件变量值 
          @Inject("java:''$conf.get('attach.savePath')")（快捷键：Alt++或Alt+-） 
          8、@Inject("java:''$conf.get('attach.savePath')") 可以通过 ctrl+click 或 ctrl+b 
          在java文件与配置文件中互相跳转 9、支持实体类中快速创建接口与实现类（快捷键：Alt+insert） 
          10、@SQL中的sql支持动态语言高亮和提示 11、Nutz-sqltpl 
          xml中的SQL模板中sql语言的动态高亮和提示 12、Nutz-sqltpl 支持xml与java文件互相跳转 
          13、Nutz-sqltpl 为还未创建xml模板文件的@SqlsXml注解快速生成对应xml模板 
          （快捷键：Alt+insert） 14、为@Inject字段注入接口提供快速跳转至实现类或选择多个实现类 
          15、为@OK("json")提供GUI并快速修改json格式化信息 16、提供restful api 
          工具窗口，加载全部restful api 并能快速跳转 
          17、支持Nutz-sqltpl点击java调用的id能够快速定位至xml中对应的id上，反之亦然
       
      
      
      
      
      
      
      
      
      如果觉得好用，开发效率提高了，欢迎捐赠，以资鼓励，我会增加更多强大的功能哦
      
      
      Send feedback
      '';
    };
  }) {};

  nutzfw-code-generat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "NutzFw-Code-Generat";
    plugname = "NutzFw Code Generat";
    plugid = "com.sgaop.codegenerat.nutzfw";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11575/85584/NutzFwCodeGenerat1.0.9.zip";
      sha256 = "0lfrlw5kk838p106wdahyssa646p9gghy4jlnhfxmfl4y0n41x7x";
      name = "NutzFw-Code-Generat-1.0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/threefish/NutzFw";
      license = lib.licenses.asl20;
      description = ''
        Intellij idea plugin for NutzFw
      
      
      
      GitHub |
      Issues
      
      
      
      English
       
          1、Can quickly generate additional, delete, change, check, attachment upload, view, list display and other functions based on the annotation table structure
          2、Can be enhanced by deploying template conten
          3、Support for importing templates
          3、Add table association
          4、Multi-mode engine rendering
       
       中文
       
          1、可以快速生成基于注解表结构的增、删、改、查、附件上传、查看、列表展示等功能
          2、自动识别模版目录下的所有文件夹为模版
          3、添加表关联
          4、多模版引擎渲染
       
      
      
      Send feedback
      '';
    };
  }) {};

  nyan-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nyan-Progress-Bar";
    plugname = "Nyan Progress Bar";
    plugid = "some.awesome";
    version = "1.14";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8575/73820/NyanProgressBar.jar";
      sha256 = "1jmkvcfc31vg28dmqg8746xmqx89f7d9bsynwpsbfnfn62ybwwph";
      name = "Nyan-Progress-Bar-1.14.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        Pretty progress bars with nyan cat for IJ based IDEs.
      '';
    };
  }) {};

  nyan-tray = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Nyan-Tray";
    plugname = "Nyan Tray";
    plugid = "org.jraf.intellijplugin.nyantray";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11286/88374/nyantray-1.2.0.zip";
      sha256 = "0x2v4pcs3i21n4fj22n0jl8a1z65z61binxhwpq6s9iykdx3v5vx";
      name = "Nyan-Tray-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://JRAF.org";
      license = lib.licenses.gpl3Only;
      description = ''
        Shows a Nyan Cat in your macOS menu bar whenever something is "ongoing" (loading, compiling, building, searching, analyzing...)
        
        This will help you switch to another window temporarily while knowing at a glance when the task is finished.
        
        Note: this has only been tested on macOS.
        This uses the Swing SystemTray API so it may work on other OSes.
        
        Development
        
        https://github.com/BoD/NyanTrayIntelliJPlugin/
      '';
    };
  }) {};

  nyandroid-restorer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Nyandroid-Restorer";
    plugname = "Nyandroid Restorer";
    plugid = "me.tatarka.nyandroid.NyandroidRestorer";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9853/77517/NyandroidRestorer.jar";
      sha256 = "0bhdssa8gcmqwlms5f7gv0r2794fr61844xl3m86w603di466zri";
      name = "Nyandroid-Restorer-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/evant/NyandroidRestorer";
      license = lib.licenses.asl20;
      description = ''
        Restore our favorite pop-tart-rainbow friend in Android Studio
      '';
    };
  }) {};

  obs-explorer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OBS-explorer";
    plugname = "OBS-explorer";
    plugid = "com.MyPlugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14499/89686/obsPlugin.zip";
      sha256 = "1qvapqg2dxbd1s2ij9drx94w6am3q1jjbddc8a5jij4gd2f8jmsq";
      name = "OBS-explorer-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.huaweicloud.com/";
      license = lib.licenses.asl20;
      description = ''
        This is a Huawei OBS plug-in project, which is developed based on intelij idea. Source: Zhiyuan class of Huawei
    这是一个华为OBS插件项目，基于InteliJ IDEA开发的插件。课题来源：华为致远班。
      '';
    };
  }) {};

  ok-gradle = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OK-Gradle";
    plugname = "OK, Gradle!";
    plugid = "me.scana.okgradle";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10102/107377/plugin.zip";
      sha256 = "1yc1bynpchxb99vb4ymjrh6whdsssbifv05rl06zlkdpybnb3nl6";
      name = "OK-Gradle-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/scana";
      license = lib.licenses.asl20;
      description = ''
        Plugin for searching artifacts ids of popular Java libraries.
        Use this for adding dependencies easily to your build.gradle/build.gradle.kts files.
         
        Retrofit - which is the correct one?
        
compile 'com.square.retrofit:retrofit2:2.9.0'
compile 'com.squareup.retrofit2:retrofit:2.9.0'
        
        Material Design Library - which one was it?
        
compile 'com.google.android.material:material:1.2.1'
compile 'androidx.material:1.2.1'
        
        
        With this plugin, you won't have to remember it anymore nor open an external browser to search for it on the Internet!
        
        Usage:
        Find the OK, Gradle action  with CTRL/CMD + SHIFT + A shortcut and type library's name that you are looking for in an input field.
        To make your life even more easier, assign a shortcut to it, e.g. CMD+K if you don't use VCS features in your IDE
        
        You need to have an active Internet connection to be able to use this tool.
        
        Disclaimer
        I want to thank Chris Broadfoot for creating http://gradleplease.appspot.com website, which was an inspiration for this plugin.
      '';
    };
  }) {};

  omt--odt-language = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OMT--ODT-Language";
    plugname = "OMT / ODT Language";
    plugid = "com.misset.OMT";
    version = "2.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15292/107100/OMT-2.3.1.zip";
      sha256 = "19d4pvql4wm435hcxlrd10mzzml7hvaz3gfa5i8qx8wrxgchswv6";
      name = "OMT--ODT-Language-2.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/timmisset/omt";
      license = lib.licenses.asl20;
      description = ''
        Plugin for the OPP specific languages OMT and ODT
      '';
    };
  }) {};

  osgi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OSGi";
    plugname = "OSGi";
    plugid = "Osmorc";
    version = "183.6156.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1816/59941/osmorc-183.6156.11.zip";
      sha256 = "1ajwxhpyypwlszf0gf72s4gbhq93rid0aflbp27pgdsh1dphwxks";
      name = "OSGi-183.6156.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-plugins/tree/master/osmorc";
      license = lib.licenses.asl20;
      description = ''
        Adds support for the development of OSGi-based applications.

    
    Open Settings | OSGI | IDE Settings | Framework Definitions.
    Add the OSGi framework that you want to work with (Equinox, Felix, etc.).
    Add the OSGi facet to any module that should be an OSGi bundle.
    You can either write your own manifest or let the plugin calculate the manifest for you.
    

    
      To run an OSGi bundle, create a new OSGi run configuration and select the framework that you set up in the first step.
      Then add the bundles you want to run. The plugin will run all dependencies automatically, so you don't need to manually add them.
      Finally run the newly created run configuration. If you chose to enable the OSGi console, you can then send commands
      to the OSGi container and start/stop bundles.
      '';
    };
  }) {};

  osgi-declarative-services-viewer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OSGi-Declarative-Services-Viewer";
    plugname = "OSGi Declarative Services Viewer";
    plugid = "net.chilicat.dsViewer";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7047/11626/declarative-services-viewer.jar";
      sha256 = "15gzif15gxzshjzc2n72cml0aar38ddblzzi481cr5r35i8nwqn3";
      name = "OSGi-Declarative-Services-Viewer-0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chilicat/declarative-services-viewer";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/chilicat/declarative-services-viewer/blob/master/README.md";
        free = false;
      };
      description = ''
        OSGi Declarative Services Viewer 
 Recent changes: 
0.4 
 
 Added icons to distinguish between XML and annotated service components. 
 Added icons for the tool window. 
 Show full class name for services. 
 Hide/Show Modules 
 Show XML icon for XML Components and Java icon for Java Components. 
 Open XML file instead of implementation is case Component is XML based. 
 Enter to open Service Component 
 Double Click/Enter on Service will open service interface. 
 
0.3 
 
 The service inspector will show a &quot;used by&quot; section which will display all components which uses the current selected component 
 Support and view XML Services Components 
 
 This plugin will add a new action to the Tools menu called &quot;View Declarative Services...&quot;. The action will open a OSGi declarative services inspector view. The inspector will show all available components in the project and displays them in a ToolWindow. The user can double click a service to jump to the source. The provided services and consumed references will be shown for selected service.  
Please note that this plugin is in a early stage and supports only Felix SCR annotated services components.  Planned features are:  
  
  Support and view standart OSGi annotated service components 
  Graph view to visualize Service Component usage 
   Feature requests are welcome. Please go to
      '';
    };
  }) {};

  object-mother-creator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Object-mother-creator";
    plugname = "Object mother creator";
    plugid = "inigo.objectmothercreator";
    version = "1.2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14774/108276/objectmothercreator-1.2.0.1.jar";
      sha256 = "01snl89dz254hdlsq84vqcj7111ld7shzw3abzp965rhfzb5kmcf";
      name = "Object-mother-creator-1.2.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/inigodm/";
      license = lib.licenses.gpl3Only;
      description = ''
        Creates object mothers for selected class on rigth clicking over it.
      Supports Java and Groovy projects
      Source code can be found HERE
       PR and issues are welcome

      IMPORTANT: Generated code uses, to generate random Strings, and only because is really funny, Javafaker library (in github)

      You can add it (it generates random data for your tests, very usefull) to your project using maven or gradle, as example, for version 1.0.2 (currrent);

      dependencies {
        testImplementation "com.github.javafaker:javafaker:1.0.2"
      }

      Anyway, if you don't want to use javafaker library, this plugin will do the TEDIOUS work of creating the packages, the ObjectMother.java files, and
      a 'randomClassName' static methods with required parameters and you only would have to change those parameters.
      
      https://martinfowler.com/bliki/ObjectMother.html
      
      To use it, select the file containing the class or over the editor tab of the opened file, rigth click -&gt; Create object mother for current class
      '';
    };
  }) {};

  objecthelper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ObjectHelper";
    plugname = "ObjectHelper";
    plugid = "cn.bigcoder.plugin.objecthelper";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15788/107808/object-helper.jar";
      sha256 = "0rwdznvyby1rgi39gq4f0ci7jnkwav87zhn3jb5dz50vz80wjsl9";
      name = "ObjectHelper-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tianjindong/object-helper-plugin";
      license = lib.licenses.asl20;
      description = ''
        This is a Java object toolset
      Copy the object
      '';
    };
  }) {};

  objectrivercloudcompiler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ObjectRiverCloudCompiler";
    plugname = "ObjectRiverCloudCompiler";
    plugid = "com.objectriver.cloudcompiler.plugin.idea";
    version = "2.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11295/53329/ObjectRiverCloudCompilerPlugin.zip";
      sha256 = "12qir59lfdndnqqb70irl01145zxa8x4dhk45bjiq2rdvn5rifqc";
      name = "ObjectRiverCloudCompiler-2.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.objectriver.net";
      license = lib.licenses.asl20;
      description = ''
        Congratulations you have installed the worlds only programmable metadata compiler that is capable of
      generating complex programming solutions.
      '';
    };
  }) {};

  objective-j = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Objective-J";
    plugname = "Objective-J";
    plugid = "cappuccino.intellij.plugin";
    version = "0.4.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10970/94684/Cappuccino_Plugin_Actual.zip";
      sha256 = "1nn2lxkry0npwc5qxj4k2zd45qam0wak1lb6rji8qlrw0lighx8h";
      name = "Objective-J-0.4.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bedalton/cappuccino_plugin";
      license = lib.licenses.mit;
      description = ''
        Objective-J Language plugin
    Provides basic autocomplete functionality for selector methods and variable names
    Plugin allows the use of a @var comment, in the format of "// @var ClassName variableName" to allow for more accurate completion suggestions
    Added support for @ignore comments to suppress inspections
    
      A plain annotation on a method with @ignore causes the method warnings to be skipped, as well as skip this method in suggestions
      Classes prefixed with an underscore are considered relative to document, and will not be suggested outside of it.**This can be disabled in settings
      To disable an inspection, press alt+enter to trigger dialog, then select the inspection and scope to ignore
    
    
    Added protocol method generator for required methods. Trigger generator with alt+enter while cursor is on protocol name
    
    Note
    
      Variable type resolution is not accurately implemented which causes suggestion of any method selector, even if not applicable to a variable's type
      This plugin requires the original source files for the cappuccino framework to work. They can be downloaded
        from the Cappuccino github page(Link)
      
      
        Plugin does NOT use Intellij's javascript plugin
        
          Javascript completion and error checking is not provided
        
      
    
    
    
    Please report issues to our GitHub issues page
    Working
    
      Method call selector completion
      Variable name completion
      Variable, Function and Method declaration resolution
      Syntax Highlighting
      Invalid method call selector warnings
      Improved automatic indentation. Formatter still needs work
    
    Experimental
    
      Infer variable type for method call completion.
        **May be too aggressive, eliminating valid options
      '';
    };
  }) {};

  objectivesql = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ObjectiveSql";
    plugname = "ObjectiveSql";
    plugid = "com.github.braisdom.object-sql-intellij";
    version = "1.3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15092/106302/object-sql-intellij-1.3.4.zip";
      sha256 = "0lbs257pzr64qd404bj896fqmv8jm8i4nim0mk5vzxwy96pvm0b9";
      name = "ObjectiveSql-1.3.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.objsql.com";
      license = lib.licenses.asl20;
      description = ''
        Filling the generated elements for ObjectSql. Discuss, review, and share code with your
            team in your JetBrains. The compile error of auto-generated code will be suppressed, and
            it implements code completion with PsiAugmentProvider in the IntelliJ
        Supported annotations of ObjectiveSql:
        
            @DomainModel
            @Column
            @PrimaryKey
            @Queryable
            @Transactional
            @Relation
            @Transient
        
        See more: ObjectiveSql
      '';
    };
  }) {};

  obsidian = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Obsidian";
    plugname = "Obsidian";
    plugid = "com.fernandojimenez.obsidian.theme";
    version = "3.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12434/75300/Obsidian.jar";
      sha256 = "1rjhy3fzwbb5sqprd74s59ix97gq1x8dly116sl257dfmr4ad74g";
      name = "Obsidian-3.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/luisfer0793";
      license = lib.licenses.asl20;
      description = ''
        A minimalist dark and light theme using comfortable UI colors.
      '';
    };
  }) {};

  oceanic-next-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Oceanic-Next-Color-Scheme";
    plugname = "Oceanic Next Color Scheme";
    plugid = "color.scheme.Oceanic Next";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14161/84190/Oceanic_Next.jar";
      sha256 = "193b16zc1mzh5ygf0xymbjcisfis0lx7lql2mi84nfwahaqnf1dq";
      name = "Oceanic-Next-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nzer0nz/oceanic-next-jetbrains";
      license = lib.licenses.mit;
      description = ''
        Oceanic Next for JetBrains IDE (focused on Golang) based on mhartington's oceanic-next and ChrisRM's material-theme-jetbrains.
      '';
    };
  }) {};

  oceanic-primal-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Oceanic-Primal-Theme";
    plugname = "Oceanic Primal Theme";
    plugid = "li.barlog.oceanic-primal";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15141/104645/oceanic-primal-0.0.6.jar";
      sha256 = "1qcnfg5bggfplr4ak1jcmwz7l7zlc2k4waa42sin6dqpx5zf6al6";
      name = "Oceanic-Primal-Theme-0.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/barlog-m/oceanic-primal-idea";
      license = lib.licenses.mit;
      description = ''
        Oceanic Primal color scheme for IntelliJ IDEA
      '';
    };
  }) {};

  odoo = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Odoo";
    plugname = "Odoo";
    plugid = "net.firebits.odoo";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12952/71277/FireOdoo.jar";
      sha256 = "0c7xj90cfjq9mcck3jj4fcpqhkq5hm452dkfi52aqxj6asi3lmra";
      name = "Odoo-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.firebits.net";
      license = lib.licenses.asl20;
      description = ''
        This Odoo-Intellij Plugin Adds Support for developing
        Odoo applications and modules with IntelliJ IDEA 
        and PyCharm IDEs.
        

        
        See How to use it in the Technical Documentation

        
        Plugin Dependencies
        
        Installing this plugin will also install the  Python plugin  if it is not already installed in your IDE.
        

        

        Plugin Features
        Current Features
        
        Collection of code snippets for Odoo
        Create New Odoo Files in New Menu (Model - View - Access)
        Create new projects from the IDE Welcome screen using Odoo CLI or built-in template for Odoo
        Code completion for Odoo in Python files 
        Completion for components, built-in and custom directives, and methods in templates 
        Navigation from the component, custom directives and event handlers to their definition 
        

        
        
        

        
        
        


        Documentation &amp; Tutorials
        
        For Developers Technical Documentation
        

        Help &amp; Feedback
        
         Please follow @firebitsnetwork for plugin updates and to share
         feedback and questions. You can also email us at tech@firebits.net.
        

        

        Bug Tracker
        Please report any issues on the tracker.

        

        Special Thanks For Contributors
        
        Mohamed Magdy (Live Templates Feature)
        Robin Keunen (Live Templates Variables Feature)
        

        

        Support Plugin Development
        
         Patreon (Amr Abd-Alkrim)
        

        Developed &amp; Maintained by
        
        FireBits Software Solutions

        Social Media
        Github
        Linkedin
        Facebook
        Twitter
        Instagram
      '';
    };
  }) {};

  odoo-autocompletion-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Odoo-Autocompletion-Support";
    plugname = "Odoo Autocompletion Support";
    plugid = "at.wtioit.intellij.plugins.odoo";
    version = "0.5.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13083/104644/odoo_plugin-0.5.5.zip";
      sha256 = "0zrb629ayayyaskxasaxblbzpxrdac3m8zag7m04rhhzwlsdcz8z";
      name = "Odoo-Autocompletion-Support-0.5.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.wt-io-it.at";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin adds support for Odoo Addon / Module paths to PyCharm / IntelliJ
      
        
          
          
          
        
        Features
        
          Search Everywhere supports odoo modules and models
          Odoo model inheritance is shown in the type hierarchy view
          Autocompletion and resolving for odoo.addons.... imports
          Autocompletion for model names in _name, _inherit, One2may, Many2One and Many2many fields
          Navigate to ... support for Odoo models
        
        Planned Features
        
          Navigate to ... support for xml and csv records
      '';
    };
  }) {};

  officefloor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OfficeFloor";
    plugname = "OfficeFloor";
    plugid = "net.officefloor.intellij.OfficeFloorPlugin";
    version = "3.31.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13151/108378/OfficeFloorPlugin-3.31.0.zip";
      sha256 = "0ap8qhgl0mjc304npmm276k8zl55ck3ypx9ai761siv1grqk8jgy";
      name = "OfficeFloor-3.31.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.epl20;
      description = ''
        Enables OfficeFloor development with IntelliJ
      '';
    };
  }) {};

  offline-module = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Offline-Module";
    plugname = "Offline Module";
    plugid = "OfflineModule";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1556/8595/OfflineModule_8595.zip";
      sha256 = "0f98lqgv4l0pvs93mf0njz5whlj87y7chb002689bxil12gd4lih";
      name = "Offline-Module-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Disable or enable modules in project without deleting
      '';
    };
  }) {};

  ogurets---cucumber-for-dart---by-blue-biscuit-design = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ogurets---Cucumber-for-Dart---by-Blue-Biscuit-Design";
    plugname = "Ogurets - Cucumber for Dart - by Blue Biscuit Design";
    plugid = "cogurets";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12687/87554/cucumber-dart.zip";
      sha256 = "0hv3xby18sk1dd8m2rp72cvb6mz2w1ra3q16p7x61cw34kalqxnv";
      name = "Ogurets---Cucumber-for-Dart---by-Blue-Biscuit-Design-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dart-ogurets/OguretsIntellij";
      license = lib.licenses.asl20;
      description = ''
        This plugin enables Cucumber and Gherkin support with step definitions written in Dart.
        The following coding assistance features are available:
        
          Code completion.
          Search for usages.
          Run configurations
          Debugging
        

      It is available on Github (source) at Ogurets Intellij.
      It is written and developed by
      
        Irina Southwell,Principal Engineer
        Richard Vowles, Software Developer
      '';
    };
  }) {};

  oh-my-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Oh-My-IDEA";
    plugname = "Oh My IDEA";
    plugid = "oh-my-idea";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13694/76323/Oh-My-IDEA.zip";
      sha256 = "077d2m1lfyi47lss1mqsh80xmsxb1a05y7mij7wa0l6sbc8kh80d";
      name = "Oh-My-IDEA-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vsmysee/oh-my-idea";
      license = lib.licenses.asl20;
      description = ''
        This plugin can choreography IDE action via groovy script.
    Also can define action in the groovy script then register it.





The sample config like this


    single {
        key "0", "CompileDirty"
    }


It means type 0, the IDEA compile action can be trigger.

This config just groovy, put it at your ''$home, named .oh-my-idea
      '';
    };
  }) {};

  okhttp-profiler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OkHttp-Profiler";
    plugname = "OkHttp Profiler";
    plugid = "com.itkacher.okhttpprofiler";
    version = "1.0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11249/92407/profiler.zip";
      sha256 = "1w75imlaj771yz0irrpbq7l2a33brybddq2jzyf1kc68nzbrmwga";
      name = "OkHttp-Profiler-1.0.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://localebro.com";
      license = lib.licenses.asl20;
      description = ''
        Created by LocaleBro team.
    The OkHttp Profiler plugin can show detail request information from the OkHttp library directly in the Android Studio toolwindow. 
    Also, you can easily create a Java/Kotlin model from the response data. Just click the right mouse button on a root element of the tree (or any other), choose Java or Kotlin, and select a folder for a new file in the project.
    It supports OkHttp v3 (http://square.github.io/okhttp/) or Retrofit v2 (https://square.github.io/retrofit/)
    Works ONLY with ANDROID
    More details by link: https://github.com/itkacher/OkHttpProfiler
    The Source Code: https://github.com/gektor650/OkHttpProfiler-AndroidStudio-Plugin
      '';
    };
  }) {};

  okhttpparamsget = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OkHttpParamsGet";
    plugname = "OkHttpParamsGet";
    plugid = "com.wang.okhttpparamsget";
    version = "2.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9545/95780/OkHttpParamsGet.jar";
      sha256 = "0663pzss33vl40zancckgcs9rwr331div3k2j6rkz2spy0p22qc9";
      name = "OkHttpParamsGet-2.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kingwang666/OkHttpParamsGet";
      license = lib.licenses.asl20;
      description = ''
        Help you to get Okhttp request params.
        Support: 
        
            Map&lt;String, String&gt;
            Map&lt;String, Object&gt;
            Map&lt;String, RequestBody&gt;
            List&lt;MultipartBody.Part&gt;
            MultipartBody.Builder
        
        
        
            How to use:
            
                Choose a class.
                Press Alt + P or click the Generate menu choose GetParams.
                Choose a type.
                click ok.
            
        
        
            ps: These annotations can be in any package
            
                @Ignore: dont add to params.
                @PostFile: post file. Support single, list, array and map
                @ParamName: custom param name.
                @PostFiles: post files. Removed use @PostFile
                @Key: post file key.
                @Filename: post file filename.
                @MimeType: post file mime-type.
                @Data: post file data.
      '';
    };
  }) {};

  okey-doke-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Okey-doke-Support";
    plugname = "Okey-doke Support";
    plugid = "com.github.s4nchez.okeydoke.idea";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9424/99706/okey-doke-idea.zip";
      sha256 = "0mywg3k1gwlbbdxxslscbj2h1swdvn9lhdykdm3qk68myqagjbyj";
      name = "Okey-doke-Support-0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/s4nchez/okey-doke-idea";
      license = lib.licenses.asl20;
      description = ''
        This plugin brings basic okey-doke support.
      Approve tests by using the context popup menu or using Ctrl + F11.
      '';
    };
  }) {};

  olymp-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Olymp-Plugin";
    plugname = "Olymp Plugin";
    plugid = "Olymp Plugin";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6870/10860/Olymp_Plugin_10860.jar";
      sha256 = "055rcl1fl63q89q2kc9ddgwryh90dlgxjfhyhwkcfd9wspgrdd7z";
      name = "Olymp-Plugin-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/licenses/lgpl.html";
        free = false;
      };
      description = ''
        Generates Main class without dependencies.
		This plugin is intended to be used at online contests (competitive programming). It does only one simple thing &mdash; adds button to IDEA's toolbar that can generate Main.java in default package using your solution (it integrates all dependencies and eliminates some unused code).
      '';
    };
  }) {};

  onclickme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OnClickMe";
    plugname = "OnClickMe";
    plugid = "com.liys.plugin.onclick";
    version = "2.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14634/108222/OnClickMe.jar";
      sha256 = "1hjf3xr65hk6l2wqkwzgy5w569v128gskv45hf045xxshsv6v6z1";
      name = "OnClickMe-2.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jianshu.com/p/24a80b6b6b50";
      license = lib.licenses.epl20;
      description = ''
        一款自动生成onclick框架代码的插件
        1. 选中ActivityMainBinding 也能找到对应布局activity_main
        2. 自动生成click方法，两种模式选择
        3. 通用模式解决 lib下无法使用Switch(viewId)的问题
        4. 可以自动生成注解类 + 解析类，无需添加其它包
        联系邮箱：401654546@qq.com
        Refer to：https://www.jianshu.com/p/24a80b6b6b50
      '';
    };
  }) {};

  one-dark-native = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "One-Dark-Native";
    plugname = "One Dark Native";
    plugid = "hu.aradipatrik.onedarknative";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12131/73857/one-dark-native.jar";
      sha256 = "0zn3hmdsvl8v3skv44xsd8hcwwj3f3j0nh2pagqrymb6gv0g33wz";
      name = "One-Dark-Native-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AradiPatrik/one-dark-native-intellij";
      license = lib.licenses.mit;
      description = ''
        This color theme try to recreate the theme of the Atom text editor, One Dark, using the new native theme support.
      Repo: https://github.com/AradiPatrik/one-dark-native-intellij
      '';
    };
  }) {};

  one-dark-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "One-Dark-theme";
    plugname = "One Dark theme";
    plugid = "com.markskelton.one-dark-theme";
    version = "5.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11938/106439/one-dark-theme-5.1.3.zip";
      sha256 = "1hayjngiw54lryqv6hfakjjbxwh6iknp5fwbg749bazgvziqxlvy";
      name = "One-Dark-theme-5.1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/one-dark/jetbrains-one-dark-theme";
      license = lib.licenses.mit;
      description = ''
        One Dark theme for JetBrains. 
   
   
  Sponsors 
   
  Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from inside your IDE while using jump-to-definition, your favorite keybindings, and other IDE favorites. Learn more 
  Do you need help? 
  Please check the docs FAQs to see if we can solve your problem. If that does not fix your problem, please submit an issue. 
  Setup 
  After installing the theme, go to Preferences | Appearance &amp; Behavior | Appearance and select one of the new themes in the theme dropdown. Once you have selected one of the theme options, click the OK button to apply the changes so you can start enjoying One Dark theme! 
   
  Configuration 
  After set up, you can configure the appearance of the syntax highlighting of the theme. 
  Go to Preferences | Appearance &amp; Behavior | One Dark Theme where you have various appearance settings at your disposal. 
   
  Further Documentation 
  Check out the docs for manual installation instructions, additional screenshots, and contributing guidelines. 
   
   Installation 
   Screenshots 
   Contributing
      '';
    };
  }) {};

  one-monokai-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "One-Monokai-Color-Scheme";
    plugname = "One Monokai Color Scheme";
    plugid = "color.scheme.One Monokai";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12892/67380/One_Monokai.jar";
      sha256 = "02rkkjfz8mb5n71bkvrfa8ha33qlcdh6f6zqbarydv07cjgb95ak";
      name = "One-Monokai-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nzer0nz/intellij-one-monokai";
      license = lib.licenses.mit;
      description = ''
        One Monokai colorscheme for Jetbrains Products (Modified from Material Monokai Pro &amp; Atom One Dark Colorscheme based on One Monokai on VSCode)
      '';
    };
  }) {};

  onedarkmonokai = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OneDarkMonokai";
    plugname = "OneDarkMonokai";
    plugid = "design.verybeautiful.onedarkmonokai";
    version = "0.1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12773/79612/OneDarkMonokai.jar";
      sha256 = "18p3117i09al7p7f176fmg2gpgypgy9v5lxf99b0j73awdpk95lr";
      name = "OneDarkMonokai-0.1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/keyvchan/OneDarkMonokai";
      license = lib.licenses.mit;
      description = ''
        This theme is combination of onedark theme and monokai color scheme. Inspire by monokai-one-dark-vivid from vscode.
        

        To install:
        
            Go to Settings (Preferences) | Plugins, find the theme plugin and install it
            Restart IDE
            Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
            Go to Settings (Preferences) | Editor | Color Scheme and select Monokai Adapted in the Scheme dropdown
      '';
    };
  }) {};

  onlinesearch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OnlineSearch";
    plugname = "OnlineSearch";
    plugid = "io.github.maddouri.intellij.OnlineSearch";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8298/25401/OnlineSearch.jar";
      sha256 = "0rnhcki9c4ki4fijybv4z6s1m0kpbg4z25fazqigbb6cnmhj37rn";
      name = "OnlineSearch-1.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/maddouri/IntelliJ-OnlineSearch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/maddouri/IntelliJ-OnlineSearch/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Search the selected text using any online search engine. 
 
 
 Compatible with all IntelliJ-based IDEs 
 Add custom search engines' URLs in (Settings | Other settings | OnlineSearch) 
 Launch the search from the editor's context menu (Select text | Right-click | OnlineSearch | Select a search engine) 
 Map a search engine to a keyboard shortcut (Settings | Keymap | &lt;search engine name&gt;) 
 Pop up the search engine list with a keyboard shortcut (Settings | Keymap | OnlineSearch) 
 Works with other IDE "views" that have text areas (e.g. Diff, Debugger Console, Run Console, etc.) 
 If you don't see the context menu entry, try a keyboard shortcut to show OnlineSearch's popup 
 Out-of-the-box support for Google, Github, GrepCode, CppReference, and others (Ability to add/remove/reorder any number of search engines)
      '';
    };
  }) {};

  onlinesearch2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OnlineSearch2";
    plugname = "OnlineSearch2";
    plugid = "io.github.maddouri.intellij.OnlineSearch2";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12678/65619/IntelliJ-OnlineSearch-v2.jar";
      sha256 = "1da3smyd58vklpagg2y3cfb9pcqy09sinsra0b6ggbsnklxbxarq";
      name = "OnlineSearch2-1.1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bluelovers/IntelliJ-OnlineSearch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/maddouri/IntelliJ-OnlineSearch/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Search the selected text using any online search engine.
      
          
              Compatible with all IntelliJ-based IDEs
              Add custom search engines' URLs in (Settings | Other settings | OnlineSearch)
              Launch the search from the editor's context menu (Select text | Right-click | OnlineSearch | Select a search engine)
              Map a search engine to a keyboard shortcut (Settings | Keymap | &lt;search engine name&gt;)
              Pop up the search engine list with a keyboard shortcut (Settings | Keymap | OnlineSearch)
              Works with other IDE "views" that have text areas (e.g. Diff, Debugger Console, Run Console, etc.)
              If you don't see the context menu entry, try a keyboard shortcut to show OnlineSearch's popup
              Out-of-the-box support for Google, Github, GrepCode, CppReference, and others (Ability to add/remove/reorder any number of search engines)
      '';
    };
  }) {};

  onlychecker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OnlyChecker";
    plugname = "OnlyChecker";
    plugid = "me.mbolotov.onlychecker";
    version = "0.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13572/75240/intellij-cypress-0.1-SNAPSHOT.zip";
      sha256 = "0wmlf5ranx816w0bddjzl006hvqdm1kyizlbrswsmd89akw5ifn8";
      name = "OnlyChecker-0.1-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Checks and warns if '.only' exist in changes
      '';
    };
  }) {};

  open-angular-console-here = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Open-Angular-Console-Here";
    plugname = "Open Angular Console Here";
    plugid = "com.wingcheongyip.angular-console-plugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12194/66512/intellij-open-angular-console-here-plugin-1.1.zip";
      sha256 = "16x5wj3mwgg20hp934irr3glkwv4qpidzj9cg5mdgzckqdfx9vph";
      name = "Open-Angular-Console-Here-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wingy3181/intellij-open-angular-console-here-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wingy3181/intellij-open-angular-console-here-plugin/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        An IntelliJ plugin for opening current directory in Angular Console.
      Source code: https://github.com/wingy3181/intellij-open-angular-console-here-plugin
      
      
      
      ## Usage
        Right click on target file or directory in Project view, then select Open Angular Console Here.
      ## Compatibility
        Mac and Win platforms are supported temporarily.
      ## Shortcut Key
        * Mac: option + A
        * Win: alt + A
      '';
    };
  }) {};

  open-commit-on-github = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Open-Commit-On-GitHub";
    plugname = "Open Commit On GitHub";
    plugid = "com.github.shiraji.opencommitongithub";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8297/26410/Open_Commit_On_GitHub-1.0.2.zip";
      sha256 = "1sxrb825p2gf8af3yy4v1a9a9gcfk46lr5qkvvl374hy66srrs71";
      name = "Open-Commit-On-GitHub-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/open-commit-on-github/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin add an editor popup menu. The menu opens GitHub page that the selected line is added.
      '';
    };
  }) {};

  open-liberty-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Open-Liberty-Tools";
    plugname = "Open Liberty Tools";
    plugid = "open-liberty.intellij";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14856/103031/open-liberty-tools-intellij-0.0.4.zip";
      sha256 = "0kxwhmcj5acb9z0lqj327010ccl76knggqg9p7dpicmddpgh53jc";
      name = "Open-Liberty-Tools-0.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://openliberty.io/";
      license = lib.licenses.epl20;
      description = ''
        Open Liberty Tools adds support in IntelliJ for your Open Liberty projects.
     Open Liberty development mode allows you to easily develop your cloud-native Jakarta EE and Java microservices (with MicroProfile) applications with hot reload and deployment.
     This is a preview release.
     
     The following features are available through the Liberty Dev Dashboard:
     
      View supported liberty-maven-plugin or
     liberty-gradle-plugin projects in the workspace
      Start/Stop dev mode
      Start dev mode with custom parameters
      Run tests
      View unit and integration test reports
      '';
    };
  }) {};

  open-policy-agent = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Open-Policy-Agent";
    plugname = "Open Policy Agent";
    plugid = "org.openpolicyagent.opa-idea-plugin";
    version = "0.4.0.0-202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14865/107035/opa-idea-plugin-0.4.0.0-202.zip";
      sha256 = "1jmpv5jhxrsy3rnnq3nyy2lq64y153ks8cyl3hrndccsqra3kyld";
      name = "Open-Policy-Agent-0.4.0.0-202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vgramer/opa-idea-plugin";
      license = lib.licenses.mit;
      description = ''
        Idea plugin for Open Policy Agent
    Main features are:
    
        Syntax Highlighting
        Opa eval
        Opa test
      '';
    };
  }) {};

  open-regex101 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Open-Regex101";
    plugname = "Open Regex101";
    plugid = "io.aesy.regex101";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14461/89022/regex101-intellij-0.2.zip";
      sha256 = "0gma93zg08m4b86pl47c1958084dwdda3fighz8mdb9760vnhlim";
      name = "Open-Regex101-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aesy/regex101-intellij";
      license = lib.licenses.mit;
      description = ''
        Adds an intention to open regular expressions on regex101.com
      '';
    };
  }) {};

  open-uploader = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Open-Uploader";
    plugname = "Open Uploader";
    plugid = "me.fingerart.idea.openuploader";
    version = "1.0.1";
    src = fetchurl {
      url = "https://github.com/fingerart/Open-Uploader/blob/master/Open%20Uploader.jar?raw=true";
      sha256 = "1mbv036yspjc6p6fa8cnxkbww64h4pfci0jlv5fi8vgaqird3ydf";
      name = "Open-Uploader-1.0.1.jar?raw=true";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://fingerart.me";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://fingerart.me";
        free = false;
      };
      description = ''
        File (default.Apk) upload plugin, do not need to open the page directly to the APK file or other files uploaded to the server, support for custom upload path and parameter information.
      '';
    };
  }) {};

  open-with-application = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Open-With-Application";
    plugname = "Open With Application";
    plugid = "cn.alanhe.plugin.openWithApplication";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13813/85413/open-with-application.jar";
      sha256 = "155hjxxnsjnf8wdawc361dqy5h3l6lvdr4p20l06afxvsis4f8il";
      name = "Open-With-Application-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alanhg/open-with-application";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/alanhg/open-with-application";
        free = false;
      };
      description = ''
        Some files, such as md, png, open with a program in the system, not the IDE.
      '';
    };
  }) {};

  open-current-activity = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Open-current-Activity";
    plugname = "Open current Activity";
    plugid = "org.jraf.intellijplugin.opencurrentactivity";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7877/88363/OpenCurrentActivityIntelliJPlugin.jar";
      sha256 = "07rrx3x1dl09lsj99gs80lj8zd73kg9k8574wbvkhj1pyv2ykd5i";
      name = "Open-current-Activity-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://JRAF.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/BoD/OpenCurrentActivityIntelliJPlugin/master/COPYING";
        free = false;
      };
      description = ''
        An action to open the class corresponding to the currently shown Activity on the attached Android device or emulator.
        
        This action can be found under Navigate / Current Activity.
        
        The default keyboard shortcut is Ctrl F10 (PC), ⌘F10 (Mac).
        
        Development
        
        https://github.com/BoD/OpenCurrentActivityIntelliJPlugin/
      '';
    };
  }) {};

  open-in-github = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Open-in-GitHub";
    plugname = "Open in GitHub";
    plugid = "com.vexus2.intellij.openingithub";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7190/14426/OpenInGitHub.jar";
      sha256 = "0qqh6p275iadf1d589x3k5p6vkh4vd8rg15vcr0lvabjdb3gjzxa";
      name = "Open-in-GitHub-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/vexus2";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://twitter.com/vexus2";
        free = false;
      };
      description = ''
        Open source code into GitHub with default browser.
      '';
    };
  }) {};

  open-in-lightpaper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Open-in-LightPaper";
    plugname = "Open in LightPaper";
    plugid = "com.skiftio.intellij.lightpaper";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7518/16785/open-in-lightpaper.jar";
      sha256 = "0i21nfnzqfh893jq1aa47aps4yrvd4pl3flahdyc7van59z87cxa";
      name = "Open-in-LightPaper-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/skift/open-in-lightpaper";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/skift/open-in-lightpaper";
        free = false;
      };
      description = ''
        Open markdown file into Markdown Viewer LightPaper.
 Default keymap is &quot;Ctrl+Alt+M&quot;.
 You need to install 'LightPaper'.
 Visit this site.
 http://clockworkengine.com/lightpaper-mac/
      '';
    };
  }) {};

  open-in-marked = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Open-in-Marked";
    plugname = "Open in Marked";
    plugid = "com.vexus2.intellij.marked";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7307/14542/open-in-marked.jar";
      sha256 = "0rhcf7gny6sysi038r3gf00fib0qnrrzbilddd9685h1m0n81z6g";
      name = "Open-in-Marked-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/vexus2";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://twitter.com/vexus2";
        free = false;
      };
      description = ''
        Open markdown file into Markdown Viewer Marked.
 Default keymap is &quot;Ctrl+Alt+M&quot;.
 You need to install 'Marked'.
 Visit this site.
 http://markedapp.com/
      '';
    };
  }) {};

  open-in-splitted-tab = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Open-in-splitted-tab";
    plugname = "Open in splitted tab";
    plugid = "org.para.plugin.openInSplittedTab";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7407/30314/OpenInSplittedTab.jar";
      sha256 = "0x2ci9bm5ailb1yvirscp4ankdp0fddcsrl5hi4m0m0v1xi2c334";
      name = "Open-in-splitted-tab-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/parallaxe";
      license = lib.licenses.mit;
      description = ''
        Inspired by the assistant-view in Xcode. Opens the declaration / implementation of the current selected symbol within a vertically splitted tab. 
If there already is an splitted tab, it will use this. If not, it will open a new one. There are two actions available: 
 
 "Open in splitted tab": Mimics the behaviour of Xcode and opens the file always in the same tab. 
 "Open in splitted (new) tab": Always opens the file in a new tab. 
 The actions have no shortcuts assigned by default and only accessible by the "GoTo"-menu.
      '';
    };
  }) {};

  openapi-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenAPI-Editor";
    plugname = "OpenAPI Editor";
    plugid = "org.semonte.intellij.swagger";
    version = "1.0.30";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12887/97899/intellij-swagger.zip";
      sha256 = "1f84yicp6r2i175bw0f0nbbm8nymyx4zh91sbdbbqq2snirmc60l";
      name = "OpenAPI-Editor-1.0.30.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gist.github.com/semonte/06c0811c92f9c29ef9d817b0b2b86726";
        free = false;
      };
      description = ''
        Easily edit OpenAPI and Swagger specification files! Based on the Swagger plugin, from the same author.

     The paid plugin provides the following benefits:

     
        Live templates, more completions, more references (including nested references), YAML anchors/aliases/merge keys support, ...
        Swagger UI and ReDoc support with real-time updates!
        Optimized for performance
        Support via email Sebastian Monte
        Possibility for extensions, contact for more information.
      '';
    };
  }) {};

  openapi-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenAPI-Generator";
    plugname = "OpenAPI Generator";
    plugid = "main.kotlin.com.jimschubert.intellij.swaggercodegen";
    version = "4.3.1-p0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8433/90523/intellij_openapi_generator-4.3.1-p0.zip";
      sha256 = "02n139jbi39988jl1nyjm0wgcla8jp2rcn34a8n965davxi6rvk4";
      name = "OpenAPI-Generator-4.3.1-p0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jimschubert.us";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jimschubert/intellij-openapi-generator/blob/master/LICENSE";
        free = false;
      };
      description = ''
        The OpenAPI Generator plugin allows you to generate client, server, or documentation code from your OpenAPI specifications within your IDE.
      '';
    };
  }) {};

  openapi-swagger-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenAPI-Swagger-Editor";
    plugname = "OpenAPI (Swagger) Editor";
    plugid = "com.crunch42.openapi";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14837/104616/intellij-openapi-1.4.zip";
      sha256 = "0i8ij6m8k69ymqwg8l0xzy0dpvcp4j2j6186l3558i8vghwxnngj";
      name = "OpenAPI-Swagger-Editor-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://42crunch.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://platform.42crunch.com/terms-and-conditions";
        free = false;
      };
      description = ''
        Provides support for editing the OpenAPI files (formerly known as Swagger).
  Features
  
    Supports versions 2.x and 3.x of OpenAPI. 
    Supports both YAML and JSON formats.
    Validation using OpenAPI JSON Schemas.
    Outline view
    Go to Definition for ''$refs
    Integrates with API Contract Security Audit by 42Crunch, to check the quality of API definition.
    Intellisense
    Code snippets to add paths, operations, components, security
    Supports popular OpenAPI documentation generators: SwaggerUI and ReDoc.
      '';
    };
  }) {};

  opencv-image-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenCV-Image-Viewer";
    plugname = "OpenCV Image Viewer";
    plugid = "pl.sudo.imageviewer.python";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14371/106691/opencv-viewer.zip";
      sha256 = "1briy7kh1zc0abjm6m42n8ib2i9q1p0pr3pszvr1r8rs2wx9rpv1";
      name = "OpenCV-Image-Viewer-1.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=q0kmx1fbubynfa5gth6bgugeahw4fvkw";
        free = false;
      };
      description = ''
        Treats numpy array as an image and displays its content without stopping the debugger. Only GRAY, BGR and BGRA images in HWC format are supported for now.
    You can middle-click, use Alt+I or choose the action from the context menu to show the image. The image can be displayed as a popup or in a dialog. You can change this behaviour in the settings.
    
    If the array is uint8, it is displayed as is
    If the array is uint16, int32 or int64, the pixel values are clipped to [0,&nbsp;65280] and divided by 256 ([0,65280] -&gt; [0,255])
    If the array is float16, float32 or float64, the pixel values are clipped to [0,&nbsp;1] and multiplied by 255 ([0,1] -&gt; [0,255])
    If the array is boolean, the pixel values are multiplied by 255 ({False,True} -&gt; {0,255})
      '';
    };
  }) {};

  opencms = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenCms";
    plugname = "OpenCms";
    plugid = "OpenCms";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7594/88718/opencms-intellijplugin.zip";
      sha256 = "11nmv8b05iw2a1bsh6p0byzsy2g96pzlv1614zdaciqyf0q3xl5s";
      name = "OpenCms-1.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mediaworx/opencms-intellijplugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mediaworx/opencms-intellijplugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        The OpenCms Plugin for IntelliJ lets you sync files and folders from your local Filesystem to the OpenCms VFS
        and vice versa. It enables OpenCms direct publishing right from your IDE and it lets you package your modules
        into module zips that can be imported in any OpenCms instance.
        
        Features:
        
            Integration of OpenCms menus in:
                
                    the IntelliJ Tools menu
                    the project popup menu
                    the editor popup menu
                    the editor tab popup menu
                
            
            Integration of menu actions to sync files and folders between your local file system and the OpenCms VFS
            Integration of menu actions to start OpenCms direct publish sessions for files and folders right from your IDE
            Integration of menu actions to generate manifest.xml files for your modules
            Integration of menu actions to package module zips that can be imported in OpenCms
            Integration of menu actions to import module zips in OpenCms
            Supports three different sync modes that can be configured for each module:
                
                    PUSH: Local file system is master
                    SYNC: Changes are synced depending on the file or resource date
                    PULL: The OpenCms VFS is master
                
            
            Automatic publishing of file changes (configurable)
            
                Automatically pulls resource meta data (e.g. properties) from OpenCms and stores it as XML files in the 
                local file system.
            
        
        See the plugin's GitHub Wiki for details
      '';
    };
  }) {};

  openconsolehtmllinkbywebbrowser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenConsoleHtmlLinkByWebBrowser";
    plugname = "OpenConsoleHtmlLinkByWebBrowser";
    plugid = "com.cyl.idea.plugin.OpenConsoleHtmlLinkByWebBrowser";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14553/105258/OpenConsoleHtmlLinkByWebBrowser-1.2.zip";
      sha256 = "02mcvqfh8xaw5zbp7xqg378cdglp22rwlgfy0j3gkbq3cmam8g3n";
      name = "OpenConsoleHtmlLinkByWebBrowser-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This plugin help to recognise the prefix "file://****.html" link in console. Click link, open web browser instead of an editor.
      '';
    };
  }) {};

  opencontainingfolder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OpenContainingFolder";
    plugname = "OpenContainingFolder";
    plugid = "OpenContainingFolder";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/701/1730/OpenContainingFolder_1730.jar";
      sha256 = "142wp5dzhvpq2kgjs0j1phjhl1l6fz5x1nk42jrsv42qwdif85sp";
      name = "OpenContainingFolder-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Plugin for Viewing folders with Windows Explorer - Category: Editor.  Added key binding and more robust exception handling.
      '';
    };
  }) {};

  opendspinclude = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OpenDSPInclude";
    plugname = "OpenDSPInclude";
    plugid = "OpenDSPInclude";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2164/6575/OpenDSPInclude_6575.jar";
      sha256 = "1fzsk99vg9lghm7xp0prslb6z7w0za5szji5hvgv9mrka92n3s0w";
      name = "OpenDSPInclude-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Allow control-click navigation and code completion for ATG's dsp:include tag in JSP files
      '';
    };
  }) {};

  openfilecountwidget = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "OpenFileCountWidget";
    plugname = "OpenFileCountWidget";
    plugid = "com.deepakm.plugins.intellij.misc";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8187/23838/EditorOpenFileCountPlugin.jar";
      sha256 = "07b71mlmx7xp2w8f3anhs5dn1rjjpbi12nv176qr0rh0c7gs76jw";
      name = "OpenFileCountWidget-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://soundcloud.com/xplosive_drop";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://soundcloud.com/xplosive_drop";
        free = false;
      };
      description = ''
        Enter short description for your plugin here.
 
most HTML tags may be used
      '';
    };
  }) {};

  openindebuggex = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenInDebuggex";
    plugname = "OpenInDebuggex";
    plugid = "com.johnlindquist.OpenInDebuggex";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7246/13449/debuggex.zip";
      sha256 = "02ip0pib61f8ymgn8czpmdjfg9r288rnv8yqsskh2fcmxqpvbd9x";
      name = "OpenInDebuggex-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://johnlindquist.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://johnlindquist.com/";
        free = false;
      };
      description = ''
        Place your cursor on a RegExp. Hit alt+enter, select &quot;Open in Debuggex&quot;. This will launch your RegExp at debuggex.com
      '';
    };
  }) {};

  openinidea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenInIDEA";
    plugname = "OpenInIDEA";
    plugid = "OpenInIDEA";
    version = "0.5.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1741/4616/OpenInIDEA_4616.zip";
      sha256 = "10ls58m2n5ry14isydpkv983g3gcf8zi205knpz2plc14cpadh6x";
      name = "OpenInIDEA-0.5.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/openinidea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/openinidea";
        free = false;
      };
      description = ''
        The OpenInIDEA plugin allows files to be opened in IDEA.
      '';
    };
  }) {};

  openjpa-enhancer-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenJpa-Enhancer-integration";
    plugname = "OpenJpa Enhancer integration";
    plugid = "OpenJpaIntegration_obsolete";
    version = "1.00.00";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6617/10411/OpenJpaIntegration_10411.zip";
      sha256 = "1pjcskygilm3zp998pg0ky7bqqml16cfkzd3d8xcbrx3py0gm6dw";
      name = "OpenJpa-Enhancer-integration-1.00.00.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/machak";
      license = lib.licenses.asl20;
      description = ''
        
      '';
    };
  }) {};

  opennlp-models-trainer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenNLP-Models-Trainer";
    plugname = "OpenNLP Models Trainer";
    plugid = "com.sannsyn.opennlpmodelstrainer";
    version = "0.9.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11289/100807/opennlptrainer.zip";
      sha256 = "0lndny0kx39vgcr4hx2syjlpymvk2akldk8myxk326bmzbygx8ax";
      name = "OpenNLP-Models-Trainer-0.9.4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sannsyn.com/";
      license = lib.licenses.bsd3;
      description = ''
        OpenNLP Models Trainer for IntelliJ Platform.
      
      Simplify your OpenNLP source file editing with ...
      
        One-click markup
        Automatic models generation
        Automatic models application / training file creation
      
      Project site: https://bitbucket.org/sannsyn/opennlp-models-trainer/
      '';
    };
  }) {};

  openresty-lua-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenResty-Lua-Support";
    plugname = "OpenResty Lua Support";
    plugid = "com.github.Deadleg.idea-openresty-lua-support";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8344/38752/openrestyLuaSupport-0.0.4.zip";
      sha256 = "0c4ay9pz7w53yfh2666gim8hw76fhkj4d1yx0bbz9yg63aqwzvrh";
      name = "OpenResty-Lua-Support-0.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://Deadleg.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Deadleg/idea-openresty-lua-support/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Adds lua-nginx-module auto-completion and documentation to Lua code. You must have the Lua plugin installed, otherwise this will throw an ungraceful exception.
      '';
    };
  }) {};

  openscad-language-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenSCAD-Language-Support";
    plugname = "OpenSCAD Language Support";
    plugid = "com.javampire.idea-openscad";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11198/102979/idea-openscad-2.0.1.zip";
      sha256 = "02bg86ll5dyjx21nhh071ba9p61gdgfp043dgjpbyxlzvg2b7rnl";
      name = "OpenSCAD-Language-Support-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/ncsaba/idea-openscad";
      license = lib.licenses.bsd3;
      description = ''
        OpenSCAD language support plugin. Provide highlighting, completion, code folding, structure views, completion, navigation, color edition,
    library support, actions for opening OpenSCAD and exporting model.
      '';
    };
  }) {};

  openshift-connector-by-red-hat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenShift-Connector-by-Red-Hat";
    plugname = "OpenShift Connector by Red Hat";
    plugid = "org.jboss.tools.intellij.openshift";
    version = "0.4.0.29";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12030/108228/intellij-openshift-connector-build-0.4.0.29.zip";
      sha256 = "0pd1iv0qmxlrfq9q6xb123y19jc6qs9c3qmrybgzghg38lr7sdzk";
      name = "OpenShift-Connector-by-Red-Hat-0.4.0.29.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.redhat.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/redhat-developer/intellij-openshift-connector/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Overview
      A plugin for interacting with Red Hat OpenShift using a local or remote instance of OpenShift clusters providing a streamlined developer experience. This extension is currently in Preview Mode and supports only Java and Node.js components. We will be supporting other languages in the future releases.
      To run the instance of OpenShift cluster locally, developers can use minishift / CDK. Currently all clusters are supported, but with some limitations for OpenShift Online Pro where additional storage might be required to create more than two components.
      '';
    };
  }) {};

  openwith = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OpenWith";
    plugname = "OpenWith";
    plugid = "OpenWith";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/50/4344/OpenWith_4344.zip";
      sha256 = "0mdrv71y6kxg4dz2l02qcijb8s3b0bjjikjiyciy1pg44xy72d5p";
      name = "OpenWith-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/50/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/50/sourceCode.zip";
        free = false;
      };
      description = ''
        Enables "Open With" different editor for any files in project.
      '';
    };
  }) {};

  opencell-community-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Opencell-Community-Tools";
    plugname = "Opencell Community Tools";
    plugid = "com.github.halvra.opencell";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15904/108457/Opencell-0.0.1.zip";
      sha256 = "13vkx06vhbvh3wqmivmq1jljwzzhmycs8iqf0chn7h5r3y63ga5r";
      name = "Opencell-Community-Tools-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Halvra/opencell-intellij-plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin adds to your IntelliJ IDE many features to simplify development with Opencell :
Generate Script JSON body and copy it to clipboardRegister your environments and define script interfaces (settings are project scoped)Auto deploy scripts to selected instance (on saving/on frame deactivation)
      '';
    };
  }) {};

  optic = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Optic";
    plugname = "Optic";
    plugid = "com.opticdev.ideplugins.jetbrains";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10786/47262/jetbrains.zip";
      sha256 = "0872bcnp3g4q5j8b9wfb1dvnnm06nfhgzs8fna3dgw38hcz57jx4";
      name = "Optic-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://useoptic.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/opticdev/optic-intellij-platform-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A lightweight plugin that allows you to use Optic with any JetBrains IDE
      '';
    };
  }) {};

  optimizely = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Optimizely";
    plugname = "Optimizely";
    plugid = "com.optimizely.intellij.sdk.action";
    version = "0.2.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13969/96109/OptimizelyPlugin-0.2.6.zip";
      sha256 = "1z369mxh3nnffkvda9lcxqpskk2b36mlaqy7sdfpni775msqlfwa";
      name = "Optimizely-0.2.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.optimizely.com";
      license = lib.licenses.asl20;
      description = ''
        A plugin for all versions of IntelliJ.

The plugin uses the Optimizely Java open source SDK.  It polls for datafile updates so that the latest datafile is available while you are editing.  The plugin is designed to be as light weight as possible so as not to slow down any other features.  You cut and paste your sdk key into the set sdk key dialog and then use the keyboard shortcuts to insert the appropriate Optimizely key.

The basic actions that are supported:

In the pulldown menu, there is a Optimizely option.  From there you can go to:

Set SDK Key -&gt; set an sdk key.

If the SDK key is set, it is displayed at the top level and the Jump To menu is available.

Jump To -&gt; Experiments, Features -&gt; open the Optimizely application edit page for the experiment or feature using your default browser.

List of Experiments-&gt; experiment key. If chosen, it will insert that key string at the current editor cursor location.

List of Features-&gt; feature key. If chosen, it will insert that key string at the current editor cursor location.

List of Variations -&gt; variation key or variable key dending on the last experiment or feature chosen. If chosen, it will insert that key string at the current editor cursor location.

List of Attributes -&gt; valid attribute keys. If chosen, it will insert that key string at the current editor cursor location.

List of Events -&gt; valid event keys. If chosen, it will insert that key string at the current editor cursor location.

Debug Dialog -&gt; Intuitive dialog that allows you to test and see log output from running your experiments or features.

Direct keyboard access can be achieved for inplace editing.  Below is a list of keyboard shortcuts:
option or alt o :

s - set the sdk key.

f - list of feature keys.

e - list of experiment keys.

v - list of variable or variation keys depending on which feature or experiment was chosen last.

t - list of event keys

a - list of attribute keys.

d - open debug dialog.

You can also use default autocomplete (go, python, java, kotlin) for feature methods such as isFeatureEnabled and getFeatureVariable to return only a feature key list. Same holds true for experiment methods.
Methods like getFeatureVariable and getFeatureVariable(Type) will autocomplete (command-space bar) to the available feature variable or nothing if there is not a match for that variable type for that feature key.
In order for getFeatureVariable to autocomplete on the feature variable, it relies on the feature key being in place quoted string.

We are relying on you to help us make Optimizely a seamless integration tool for your development environment.
If you want a new feature, discover a bug, or like it, leave a comment, or open an issue in github.  The plugin is
open sourced https://github.com/optimizely/intellij-plugin.
      '';
    };
  }) {};

  orchide = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OrchidE";
    plugname = "OrchidE";
    plugid = "com.taff.plugin.orchide";
    version = "2020.1.3.0-2019.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12626/105524/orchide-2020.1.3.0-2019.3.zip";
      sha256 = "1y5ycwcz9mxjn3mbmfhnb3rn2cdkabcv0dwvknrjzgk2vvm9i7zp";
      name = "OrchidE-2020.1.3.0-2019.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.orchide.dev";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://orchide.dev/pages/lizenz";
        free = false;
      };
      description = ''
        OrchidE provides language support for Ansible playbooks, roles and variables.
      
        Code Assistant (syntax highlighting, code completion)
        Configurable code completion support for different version of Ansible and available modules
        Navigation (goto roles, playbooks, jinja variables declaration)
        Support of Jinja variables including support in multi line strings
        Inspection of keywords
        Inspection of module arguments
        Inspection of deprecated modules
        Inspection of undefined variables
        Inspection of removed modules (&gt;= Ansible 2.8)
        Refactoring of string values in roles
        Quick documentation for Ansible keywords, modules and module arguments
        Improved labels in editor tabs showing role / playbook names
      
      
      Note: The parser of OrchidE does not support the complete YAML specification and is not intended as a replacement for a YAML editor.
        More details can be found in the OrchidE documentation.
      
      
        Supports highlighting and code completion for version 2.7 - 2.10 of Ansible.
      
      
      
        Support for Jinja2 template languages.
        
            Supports parsing of Jinja2 template expression for XML, JSON, properties and plain text files
            Supports highlighting of Jinja2 template expression for XML, JSON and properties files
            Code Completion for Ansible Jinja2 variables
            Inspection of undefined variables based on Ansible role and group/host variables. (no support for Jinja2 template defined variables, e.g set function)
      '';
    };
  }) {};

  org4idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Org4Idea";
    plugname = "Org4Idea";
    plugid = "Org4Idea";
    version = "0.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7095/45757/org4idea.zip";
      sha256 = "1zpd6a1gyg3j242bnwswhm0mq95mi5v0hx172ppszl85l311016j";
      name = "Org4Idea-0.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://skuro.tk";
      license = lib.licenses.mit;
      description = ''
        Idea plugin to edit 
OrgMode files 
 
 supports basic outline and comments 
 block elements folding 
 spell checking 
 live templates 
 More features on the go!
      '';
    };
  }) {};

  orion-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Orion-Integration";
    plugname = "Orion Integration";
    plugid = "Orion";
    version = "4.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/217/3523/Orion_3523.jar";
      sha256 = "01lvlyildpjiqx605rnyq4gkzffpnflaprzfq191r5wlgsxa22g0";
      name = "Orion-Integration-4.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.orionserver.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.orionserver.com";
        free = false;
      };
      description = ''
        Orion J2EE Integration
      '';
    };
  }) {};

  ormcodegen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OrmCodeGen";
    plugname = "OrmCodeGen";
    plugid = "com.yuzd.codegen.ktorm";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14033/106082/ktorm-1.7.zip";
      sha256 = "0gxs501dz50sggdfmzi5r778v6bdhfch40igl6jz6blx32cxvcss";
      name = "OrmCodeGen-1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yuzd";
      license = lib.licenses.asl20;
      description = ''
        GitHub
      
      This plugin helps you to generate dbmodels code for ktorm or antdata orm .
      
        Ktorm
        AntData
      '';
    };
  }) {};

  otrosjumptocode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "OtrosJumpToCode";
    plugname = "OtrosJumpToCode";
    plugid = "pl.otros.intellij.JumpToCode";
    version = "1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7406/43436/OtrosJumpToCode-1.9.zip";
      sha256 = "0n47znciplh93xd4p9v5kr94wpddc0xsgvic098ap3vdi6irqvz1";
      name = "OtrosJumpToCode-1.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/otros-systems/OtrosJumpToCode";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7406/license.txt";
        free = false;
      };
      description = ''
        Allows other programs to make IDEA jump to specified java code
 Plugin is made as add on to OtrosLogViewer
 Plugin is based on JumpToCode plugin.
      '';
    };
  }) {};

  output-link-filter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Output-Link-Filter";
    plugname = "Output Link Filter";
    plugid = "Output Link Filter";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7183/12743/output-link-filter.jar";
      sha256 = "0p5j73k34qngw4ig749cb3gvnhmwf09krk0cs4m89piw5p5405p9";
      name = "Output-Link-Filter-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/minchenkov/output-link-filter";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/minchenkov/output-link-filter";
        free = false;
      };
      description = ''
        Plugin that filters output window for HTTP links and file paths and converts them to clickable links. 
https://github.com/minchenkov/output-link-filter 
 Based on 
https://github.com/siosio/consoleLink
      '';
    };
  }) {};

  override-file-language = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Override-File-Language";
    plugname = "Override File Language";
    plugid = "com.github.mfedko.idea.plugins.filelanguage";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7404/21747/idea-file-language-0.1.1.zip";
      sha256 = "00x4sj9qn67i48zm0ifq0yn4d9wkbigf64jyxdzajsvgd74i1ibs";
      name = "Override-File-Language-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mfedko/idea-file-language";
      license = lib.licenses.asl20;
      description = ''
        Override file language. Useful for "unknown" files or files without extensions. Similar to SublimeText set syntax functionality.
      '';
    };
  }) {};

  p4-language-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "P4-Language-Support";
    plugname = "P4 Language Support";
    plugid = "org.p4.p4plugin";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10620/50679/IntelliJ-P4-Plugin.jar";
      sha256 = "17nz9rcwjyx7jp01r2hzm9xfr3dp6k1gx37v1mk6mvmnql6h2y8a";
      name = "P4-Language-Support-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "p4tw.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Plugin for P4 Language
      Includes syntax highlighting and simple grammar check.
      '';
    };
  }) {};

  pdf-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PDF-Viewer";
    plugname = "PDF Viewer";
    plugid = "com.firsttimeinforever.intellij.pdf.viewer.intellij-pdf-viewer";
    version = "0.10.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14494/107546/intellij-pdf-viewer-0.10.0.zip";
      sha256 = "1il0163sf79hjfzar9fdj3cgzng76k5xy638qiz8z39bl6m6z5wc";
      name = "PDF-Viewer-0.10.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/FirstTimeInForever/intellij-pdf-viewer";
      license = lib.licenses.mit;
      description = ''
        This plugin allows you to view PDF files directly in IDE.
    
    Main Features:
    
        Document navigation
        Presentation mode
        Text search*
        Document scaling
        Thumbnail view
        Sections list**
        Document information
        Auto-refresh on document change
        Pages spread (even/odd)
        Horizontal/vertical pages scroll directions
    
    * Search will work only in text-based documents. For example, it won't work in all-images documents (books scans).
    
    ** Document should define sections list. Otherwise, sections view won't be active.
      '';
    };
  }) {};

  phpunit-code-coverage = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PHPUnit-code-coverage";
    plugname = "PHPUnit code coverage";
    plugid = "PHPUnit code coverage";
    version = "0.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6167/16949/phpunit_codecoverage_display.jar";
      sha256 = "19ly8slaq8jw7ab7c5ckflm0f4gybvl23ih6vp149za3qnm7g8rh";
      name = "PHPUnit-code-coverage-0.5.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/oker1/phpunit_codecoverage_display";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/licenses/gpl.txt";
        free = false;
      };
      description = ''
        Displays PHPUnit code coverage of file in the editor.
      '';
    };
  }) {};

  pit-mutation-testing-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PIT-mutation-testing-Idea-plugin";
    plugname = "PIT mutation testing Idea plugin";
    plugid = "PIT mutation testing Idea plugin";
    version = "1.4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7119/95024/pit-idea-plugin.zip";
      sha256 = "00jhgya1kanqdy5yajskbs2r3yv3a38s3hk0b75hzw93rnm51f8j";
      name = "PIT-mutation-testing-Idea-plugin-1.4.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mjedynak/pit-idea-plugin";
      license = lib.licenses.mit;
      description = ''
        IntelliJ IDEA plugin for PIT mutation testing (http://pitest.org).
        
        Bundled with PIT 1.5.2
        
        Adds a 'Run configuration' that allows to execute PIT within IDE.
        
        Usage: Run-&gt;Edit Configurations-&gt;Defaults-&gt;Pit Runner
      '';
    };
  }) {};

  pkxspringbootcodegen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PKXSpringBootCodeGen";
    plugname = "PKXSpringBootCodeGen";
    plugid = "com.pkx.plugins.PKXCodeGen";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14141/84072/PKXSpringBootCodeGen.zip";
      sha256 = "1hjkx8hlwna2nw5ldiz2hkx8ah0fqa7n2cz8ss2zp3q3w2mgbkpy";
      name = "PKXSpringBootCodeGen-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://blog.csdn.net/pkxwyf";
      license = lib.licenses.asl20;
      description = ''
        PKXSpringBootCodeGen Intro
       Automatically generate microservice code developed based on spring boot.
       The functions are as follows:
       
        Automatically create controller class / service class / Dao class / entity class
        Automatically generate many methods in the
            controller / business layer / Dao layer,
            such as adding, deleting, modifying and querying data tables, paging, multi criteria query, etc.
        Automatically create feign interface
        Automatically enable swagger to generate API interface documents
        Automatically create springboot project startup class
        Automatically create the spring boot project core configuration file：application.yml
       
       if you have any questions, please email: 961968629@qq.com
      PKXSpringBootCodeGen简介
       自动生成基于SpringBoot开发的微服务代码。
       功能如下：
       
        自动创建控制器类/业务层类/DAO类/表对应的实体类
        自动在控制器/业务层/Dao层中生成对数据表进行增删改查，分页，多条件查询等众多方法。
        自动创建Feign接口
        自动启用Swagger，生成API接口文档
        自动创建SpringBoot工程启动类
        自动创建SpringBoot工程核心配置文件：application.yml
       
       如有问题请邮件告知：961968629@qq.com
      '';
    };
  }) {};

  plm-companion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PLM-Companion";
    plugname = "PLM Companion";
    plugid = "pl.dominikw.Windchill-Intellij-Plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13154/106039/PLM_Companion-1.0.2.zip";
      sha256 = "15gil3v2rldnzm4z17jw17vnrlvva0azbiip1yzmwpc6hs5k63rn";
      name = "PLM-Companion-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/d-wojciechowski/plm-companion";
      license = lib.licenses.gpl3Only;
      description = ''
        PLM Companion is an extension that allows developers to speed up the process of developing customizations to Large
    systems remotely.Plugin may be used wherever execution of custom commands or monitoring site availability may be
    handy.



    Main features:

     Windchill status/stop/start/restart
     Log Files tail (OOTB and custom)
     Easy xconf reload
     Load from file
     Custom command execution
     Custom run configurations

Full functionality overview you may find in our WIKI
    section


You may find me here: LinkedIn |
Personal Page | PayPal

GitHub handy links: Plugin |
Plugin-Add-on |
Plugin-Protobuf |
Wiki
      '';
    };
  }) {};

  pmd-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PMD-IDEA";
    plugname = "PMD-IDEA";
    plugid = "PMD-IDEA";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15412/107392/pmd-idea-1.3.3.zip";
      sha256 = "1m7vi91w8hdwf79m5ppsmg1ggkghki3f6cn5q2bbvnprf1x3q0r3";
      name = "PMD-IDEA-1.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ybroeker/pmd-idea";
      license = lib.licenses.bsd3;
      description = ''
        This plugin provides PMD support within IntelliJ and allows you to scan your code.

To enable PMD, configure a pmd ruleset in the plugin settings and select the appropriate pmd version.

PMD is integrated as an inspection, so that the currently opened file is scanned "on the fly".
Quick fixes are available for some common rules.

To scan your code manually, open the toolbar window and scan your entire project or the currently open file.

PMD versions 6.0.1 to 6.30.0 are supported and bundled.
      '';
    };
  }) {};

  pmdplugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PMDPlugin";
    plugname = "PMDPlugin";
    plugid = "PMDPlugin";
    version = "1.8.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1137/96044/PMD-Intellij.zip";
      sha256 = "0k438gln0j50y7kpc6mpgrxbbwnrd6z3widsbw6ypdl34bpr56ky";
      name = "PMDPlugin-1.8.15.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/amitdev/PMD-Intellij";
      license = lib.licenses.mit;
      description = ''
        A plugin to run static analysis using PMD in intelliJ.
      '';
    };
  }) {};

  png-optimizer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PNG-Optimizer";
    plugname = "PNG Optimizer";
    plugid = "com.bulenkov.intellij.png.optimizer";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7942/44124/PngOptimizer.jar";
      sha256 = "19xh1xwphmwhcc8d2vc6p4clirzd92cmkfdpa9r5k2g43rwbq4s6";
      name = "PNG-Optimizer-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bulenkov.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.bulenkov.com";
        free = false;
      };
      description = ''
        Plugin allows to optimize PNG files by size before commit and manually via context menu in Project View
      '';
    };
  }) {};

  pojo-builder-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "POJO-Builder-Generator";
    plugname = "POJO Builder Generator";
    plugid = "felix.plugins.pojo.builder.generator";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10186/40681/PojoBuilderGenerator.jar";
      sha256 = "0lhm6i2gha24x873r6jl9ysr0qyc9wmvbxvknswrd7b4j60ifdnn";
      name = "POJO-Builder-Generator-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Inner POJO Builder class generator.  
 Just check your code generate popover and enjoy.  
 Notes:  
 
  Code generated by this plugin depends on the getters and setters of your POJO.
      '';
    };
  }) {};

  pojo-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "POJO-Generator";
    plugname = "POJO Generator";
    plugid = "uk.me.jeffsutton.pojogen";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8113/23069/POJOGenerator.zip";
      sha256 = "0wfvliw4z10d84w1ng86x5p5wfyq9yaa1dyhpg2djgfdyzwa0npg";
      name = "POJO-Generator-1.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/iNdieboyjeff/SimplePOJO-IntelliJ";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/iNdieboyjeff/SimplePOJO-IntelliJ";
        free = false;
      };
      description = ''
        Generate Java objects from XML and JSON files.
 
 JSON generation using jsonschema2pojo and supports Gson or Jackson2 annotations.
 XML generation is done using a custom parser and supports Simple XML annotations.

 As with all automatic class generators, output should be reviewed and modified as required.
      '';
    };
  }) {};

  pojo-to-json = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "POJO-to-JSON";
    plugname = "POJO to JSON";
    plugid = "com.bigmy";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9686/34838/BMPOJOtoJson.jar";
      sha256 = "0lwhgdknas78xap8zh24j5y4a56wmhk2ssqmiq5pqgg6ndb025w6";
      name = "POJO-to-JSON-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://bigmy.me";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://bigmy.me";
        free = false;
      };
      description = ''
        选中类-右键-MakeJson 将简单Java类型转成JSON
 方便用postman或者curl的时候构造JSON body
 
 Convert POJO to JSON, easy to construct JSON body when you want posting a request throw Postman or curl-command.
 
 Select a class in editor, right click and choose [MakeJson], enjoy it.
 
 Please email me when you find any bug. 
d=====(￣▽￣*)b
      '';
    };
  }) {};

  ppdai-logging-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PPDai-Logging-Plugin";
    plugname = "PPDai Logging Plugin";
    plugid = "com.ppdai.booster.ppdai-logging-intellij-plugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10031/39463/ppdai-logging-intellij-plugin-1.1.jar";
      sha256 = "0jwkwir4v5wq9swr8xdsmwz4xhckyrxq39xqgynmgy2ip15s2xmi";
      name = "PPDai-Logging-Plugin-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/ppdai-booster/ppdai-logging-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/ppdai-booster/ppdai-logging-intellij-plugin";
        free = false;
      };
      description = ''
        A plugin that adds first-class support for PPDai Logging 
Features 
 
 @Slf4(system = "xxx", module = "yyy") 
 Code inspections
      '';
    };
  }) {};

  prpc-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PRPC-Tools";
    plugname = "PRPC Tools";
    plugid = "com.yamanyar.PegaRuleTools";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14432/107859/PegaRuleTools-1.0.7.zip";
      sha256 = "0sshs78q0li1xvw7j9r8bbyyr2c29srkiamylnsyqnfkdf3l1r06";
      name = "PRPC-Tools-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/yamanyar/prpc-tools/wiki/Home";
      license = lib.licenses.asl20;
      description = ''
        Simple tools for PRPC (PegaRULES Process Commander) project. Currently, it provides Java Source
        view/diff for activity and function files. It is intended for small group of developers who work with PRPC.

        New feature: Link to Java sources generated by PRPC in Console

        
        
        See demo here: https://bitbucket.org/yamanyar/prpc-tools/wiki/Home
        
        
        Please report issues here: https://bitbucket.org/yamanyar/prpc-tools/issues?status=new&amp;status=open
      '';
    };
  }) {};

  putvt = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PUTVT";
    plugname = "PUTVT";
    plugid = "com.cegin.PUTVT";
    version = "0.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9633/36110/PUTVT.zip";
      sha256 = "1n5mhds8a8s7wdan550jaipz0adsfyc6fpl7jf5nbic6vjdpfah9";
      name = "PUTVT-0.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "xcegin.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "xcegin.github.io";
        free = false;
      };
      description = ''
        PUTVT Python Unit Tests Visualization Tool 
 
This plugin is used for loading files with the logs of Pytest or Python failures/tracebacks and then visualizing them in the editor. This plugin also provides a Dependency Graph 
 
Here are listed the actions, which will appear in the tools menu in IDE: 
 
 Load and Visualize log .txt: A windows will appear where if the file containing the logs is selected and then the Editor of the IDE is used for visualizing/highlighting the lines. 
 Clear current View: Clears the view for the current opened tab, after refreshing the visualization will be redrawn. 
 Stop visualization: Stops the visualization for all the files, keeping the settings, but not the so far visualized data. 
 Visualize console logs:Visualizes the logs from the internal IntelliJ console log. Logs are visualized, if any errors happened and are drawn when the editor tabs are opened/reopened. 
 Listen for external jars:Listens for external logs, which can be send through a UDP protocol on port 9876 as 1024 bit words. These are then visualized. 
 
 
Here are listed the actions which can be used on the Dependency Graph window. 
 
 Visualize coverage: Creates a dependency Graph visualizing the actual coverage for all the modules (python files) of the project. The nodes are differently colorized according to their code coverage. 
 Reset view: Resets the view of the visualized graph - changes the focus. 
 Clean canvas: Cleans the canvas and reoves the entire visualization
      '';
    };
  }) {};

  pvs-studio-for-idea-and-android-studio = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PVS-Studio-for-IDEA-and-Android-Studio";
    plugname = "PVS-Studio for IDEA and Android Studio";
    plugid = "com.pvsstudio";
    version = "7.11.44138";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12263/105679/pvsstudio-idea-plugin-7.11.44138.zip";
      sha256 = "0c7278dhiaqx3rz4pd3hd9hr51hca2sjxmxxywdrg4f9pi6241iv";
      name = "PVS-Studio-for-IDEA-and-Android-Studio-7.11.44138.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.viva64.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://files.viva64.com/license.rtf";
        free = false;
      };
      description = ''
        PVS-Studio is a static analysis tool for detecting bugs and security weaknesses in the source code of programs written in C, C++, C# and Java.
        It works under 64-bit systems in Windows, Linux and macOS environments, and can analyze source code intended for 32-bit, 64-bit and embedded ARM platforms.
        
        The analyzer supports integration with JetBrains Rider, IntelliJ IDEA, Android Studio, and Visual Studio 2010 - 2019 IDEs.
        
        To get trial license for the analyzer please follow PVS-Studio Download Page and fill out the form. We'll send you the trial license shorty.
        PVS-Studio Java analyzer
        PVS-Studio Java analyzer supports analyzing Java projects under Windows, Linux and macOS. A full list of diagnostic rules provided by the analyzer is available here.
        PVS-Studio Java Features
        
          The analyzer can be integrated into the Maven and Gradle build systems using plug-ins.
          Online reference guide for all of the diagnostic rules, that is available locally, on our web site, and as a single .pdf file. More than 700 pages of documentation are available
          Intuitive interface - easy navigation along the warnings issued for the code. Everything you need is at your fingertips - warnings sorted by severity level, highlighted code fragments, and a quick access to the documentation. PVS-Studio documentation suggests ways of how to fix a detected error.
          Great scalability - PVS-Studio supports multi-core and multi-processor systems with the ability to specify the number of cores to use.
          Mass warning suppression - suppression of analyzer messages on legacy code. This allows to introduce the static analysis at any point in the development process. It's especially helpful in case you need to check only newly written code fragments.
          Interactive filtering of the analysis results: the issued warnings are sorted by diagnostic number, file name, a word from the analyzer's message, plus the ability to exclude files from the analysis by filename, folder, or path mask;
          Automatic notification of developers. The Blame Notifier tool allows you to send e-mail notifications to the developers about bugs that PVS-Studio found during a night run based on the blame information from version control system.
          False Alarm Marking - code markup to suppress a certain diagnostic in a particular code fragment.
          Ability to do nightly checks - the analyzer does the scanning during the night, and provides you with the completed result in the morning.
          Analysis from the command line: helps integrate PVS-Studio into nightly builds, CI/CD services.
          Relative paths in report files to view them on different machines.
          Integration with SonarQube - an open source platform, designed for continuous analysis and measurement of code quality.
        
        Detailed reference on using command line PVS-Studio Java analyzer is available here.
        PVS-Studio plugin for IDEA and Android Studio
        PVS-Studio plugin for IDEA and Android Studio provides a convenient graphical interface for using PVS-Studio Java analyzer to analyze Java projects from within the IDE. The plugin allows you to analyze projects and individual files, as well as work with the analyzer's warnings. Detailed description of PVS-Studio for IDEA and Android Studio plug-in is available here.
      '';
    };
  }) {};

  pypl-index-for-kotlin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PYPL-index-for-Kotlin";
    plugname = "PYPL index for Kotlin";
    plugid = "KotlinTIOBE";
    version = "2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9754/94329/KotlinPYPL.jar";
      sha256 = "0gnnj4cay89sraspw71nn0glvm05kimq2rdmlv4xacjcdrlhycdi";
      name = "PYPL-index-for-Kotlin-2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Vassiliy-Kudryashov/KotlinPYPL";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Vassiliy-Kudryashov/KotlinPYPL/blob/master/resources/META-INF/license.txt";
        free = false;
      };
      description = ''
        A small widget for status bar that shows actual PYPL index for Kotlin language
      '';
    };
  }) {};

  package-search = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Package-Search";
    plugname = "Package Search";
    plugid = "com.jetbrains.packagesearch.intellij-plugin";
    version = "1.0.1385";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12507/105441/packagesearchplugin-1.0.1385.zip";
      sha256 = "14n6kbjakdvw131yici53ksbbbahm6i1k7hhzv6azzry0jz5fxx0";
      name = "Package-Search-1.0.1385.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Find and manage dependencies for JVM and Kotlin Multiplatform projects.

    Supports Maven and Gradle projects. Please note that Gradle Kotlin build scripts aren’t supported yet.
      '';
    };
  }) {};

  packagejar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PackageJar";
    plugname = "PackageJar";
    plugid = "com.blueline.idea.plugin.packagejar";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11126/49768/PackageJar.jar";
      sha256 = "1gf8kyrandv3pv1wxpm4nxg5v1d3acqr8aqn29s2jpzvxmka3c5h";
      name = "PackageJar-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BailinSong/idea-plugin-PackageJar";
      license = lib.licenses.asl20;
      description = ''
        * Use the right click on the package click [Package 'xxxx']to generate the jar

      Modified from lxlqwo old version
      '';
    };
  }) {};

  pageobject-evaluator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PageObject-evaluator";
    plugname = "PageObject evaluator";
    plugid = "com.intellij.plugin.poe";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7553/18232/poe.zip";
      sha256 = "1vb4nvxmvq4dlzgjwkl4xd2w7yxrl1inyi9b4p45gpz8lg0clmrb";
      name = "PageObject-evaluator-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bjorm/PageObjectEvaluator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/bjorm/PageObjectEvaluator/master/LICENSE.TXT";
        free = false;
      };
      description = ''
        Allows evaluating PageObjects without starting a full Selenium test run, just feed it some HTML.
      '';
    };
  }) {};

  palenight = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Palenight";
    plugname = "Palenight";
    plugid = "dev.lankydan.palenightintellijtheme";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15515/105819/palenight-intellij-theme-0.0.2.zip";
      sha256 = "0xjxp2azwhaf1nsmhkxww569w2z4xpb3989anfd5gxf2z686gq9p";
      name = "Palenight-0.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This is an alteration on the Material Palenight theme, that brightens up some of the colours to increase readability.

The original theme that this was based on can be found here.
      '';
    };
  }) {};

  panda-android-coding-guidelines = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Panda-Android-Coding-Guidelines";
    plugname = "Panda Android Coding Guidelines";
    plugid = "com.panda.p3c.smartfox";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15055/107413/panda_android_guideline_v1.0.4.zip";
      sha256 = "1rrp2j7sd4k1ijbdsa1l1jjb3py582i0ndqikhhk4flr40g7gyx4";
      name = "Panda-Android-Coding-Guidelines-1.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Panda Android Coding Guidelines plugin support.
      '';
    };
  }) {};

  pandrkula-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pandrkula-Color-Scheme";
    plugname = "Pandrkula Color Scheme";
    plugid = "color.scheme.Pandrkula";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12247/60940/Pandrkula.jar";
      sha256 = "0jlwc4jp0dyj8x0hyi4a3b9kjmkd87g4iq6hhwc5amvp2sis1l8b";
      name = "Pandrkula-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/rainglow/jetbrains/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This theme was created by merge PHPStorm darcula theme and Dayle's Rees "Newton" theme (from rainglow package).
License of this theme is based on https://github.com/rainglow/jetbrains/blob/master/LICENSE
      '';
    };
  }) {};

  parcelableplease = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ParcelablePlease";
    plugname = "ParcelablePlease";
    plugid = "com.hannesdorfmann.parcelableplease.plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8099/25863/ParcelablePlease-intellij-plugin.jar";
      sha256 = "1jhjyx550xzl3y6fw9r8vjkbk23dagy8b6dn7xzniln9rxd54cz8";
      name = "ParcelablePlease-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://hannesdorfmann.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/sockeqwe/ParcelablePlease/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Generates code for ParcelablePlease. See 
ParcelablePlease on github
      '';
    };
  }) {};

  parsemybatissql = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ParseMybatisSql";
    plugname = "ParseMybatisSql";
    plugid = "com.github.odinggg.parsemybatissql.ParseMybatisSql";
    version = "1.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14401/87771/parseMybatisSql.jar";
      sha256 = "1c19b1m57bf27wrg0arpwj9x7r6dscmj1b6l530g143gll3dazsz";
      name = "ParseMybatisSql-1.01.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/odinggg/parseMybatisSql";
      license = lib.licenses.mit;
      description = ''
        转换mybatis日志中的sql为可执行sql。快捷键shift+alt+P。
    使用方式：选中日志中的sql与参数两行，按下快捷键。（注意：请选择完整的行日志内容）
    -----
    Convert sql in mybatis log to executable sql. Shortcut key shift+alt+P.
    Usage: Select the two lines of sql and parameters in the log, Press the shortcut key.
    (Note: Please select the complete line log content)
      '';
    };
  }) {};

  partial-navigation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Partial-Navigation";
    plugname = "Partial Navigation";
    plugid = "com.andreycizov.partialnav";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11952/81139/idea-partialnav-1.3.zip";
      sha256 = "0w11c1cbng7rig9ly3bhkjnbs4n3w30lvkgvvddg8fs1pdzrsixj";
      name = "Partial-Navigation-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andreycizov/idea-partialnav";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/andreycizov/idea-partialnav/blob/master/LICENSE-APACHE";
        free = false;
      };
      description = ''
        Partial PageUp and PageDown navigation plugin.

      Please note that while this plugin by default sets up the default (Page Up/Page Down) shortcuts to enable it's
      actions, it can't override the default actions by itself.

      For it to work, you'd need to go to keymap and disable the usual "Page Up" and "Page Down" shortcuts. Simply
      remove them and you're good to go.

      You can configure the scroll length in "Partial Navigation" configuration page.
      '';
    };
  }) {};

  paste-external = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Paste-External";
    plugname = "Paste External";
    plugid = "srgdev.com.PasteExternal";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13687/93427/PasteExternal-1.0.3.zip";
      sha256 = "12mzb4fnrfgz6hra4shsvdy7la5d959vda0z17df7yr85f1jql74";
      name = "Paste-External-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.srgdev.com";
      license = lib.licenses.gpl3Only;
      description = ''
        Sends selected text to an external command/script and replaces the selection with the command's output.
      '';
    };
  }) {};

  paste-images-as-base64str = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Paste-Images-as-Base64Str";
    plugname = "Paste Images as Base64Str";
    plugid = "github.com.zh1614933.Paste-Images-as-Base64Str";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14034/82212/Paste-Images-as-Base64Str.jar";
      sha256 = "0s7lcwcqxwzrx76gcpvmrvb59dvz3brffdq86fmn7blsgils3vfc";
      name = "Paste-Images-as-Base64Str-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zh1614933/Paste-Images-as-Base64Str";
      license = lib.licenses.bsd2;
      description = ''
        Paste images into MarkDown( not only Markdown) documents directly from clipboard
        You can choose your save method, save as image file or string, save to gallery is temporarily not implemented.
        Images files are deposited in a configurable directory relative to the markdown document.
        The Images is converted to a string and saved at the end of the article.
      '';
    };
  }) {};

  paste-images-as-file = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Paste-Images-as-File";
    plugname = "Paste Images as File";
    plugid = "com.github.youwi.pasteimages";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10515/44004/PasteImages.zip";
      sha256 = "0yss35b3c49crvnmmnfv7ba62dk9px7p8llv0rj6ihzfgif4w7k2";
      name = "Paste-Images-as-File-1.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/youwi/pasteimages";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/youwi/pasteimages";
        free = false;
      };
      description = ''
        Paste images into MarkDown( not only Markdown) documents directly from clipboard 
 Images files are deposited in a configurable directory relative to the markdown document.
      '';
    };
  }) {};

  paste-images-into-markdown = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Paste-Images-into-Markdown";
    plugname = "Paste Images into Markdown";
    plugid = "com.github.holgerbrandl.pasteimages/";
    version = "1.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8446/67386/pasteimages.zip";
      sha256 = "18qv55gjxg9anijj58znwxxv1nn3mnvnhhdk4ayg0pfag76m8wpq";
      name = "Paste-Images-into-Markdown-1.2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/holgerbrandl/pasteimages";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/holgerbrandl/pasteimages";
        free = false;
      };
      description = ''
        Paste images into MarkDown documents directly from clipboard
        Images files are deposited in a configurable directory relative to the markdown document.
      '';
    };
  }) {};

  paste-multiple = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Paste-Multiple";
    plugname = "Paste Multiple";
    plugid = "Paste Multiple";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3271/5817/Paste_Multiple_5817.jar";
      sha256 = "1cp01yk3p8dgx6vvyrb4pdallkxbsfq1xhafrx85w4q2cy7yvyx1";
      name = "Paste-Multiple-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/idea-pasteall";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/idea-pasteall";
        free = false;
      };
      description = ''
        Paste multiple contents at once
       
       Enhance the default paste from history action. By allowing you to select
       multiple content and paste all of them at once.

       Features:
       
            Filter you clipboard, to quickly find what to paste
            Choose in which order you want to paste (older first or recent first)
            Optionnaly, apply a live template to pasted items
       
       
            Warning: only ''$SELECTION$ variable of Live templates is evaluated
       
       
       This action is available under Edit Menu, or via the shortcut "alt shift V".
       

       
       Other actions
       
        Paste all the clipboard (older items first)
        Paste all the clipboard (recent items first)
        Paste all the clipboard and apply a live template before pasting (older items first)
        Paste all the clipboard and apply a live template before pasting (recent items first)
       
       
           Warning: that only ''$SELECTION$ variable of Live templates is evaluated
       
       
        All actions are available under Edit menu -> "Paste multiple".
       

        
        Advanced actions: Mark
            If you don't want to paste all the clipboard with the previous actions,
            you can use mark actions.
            When you set the mark, only contents copied after that will be pasted.
            This apply to all actions.
            
            Mark actions are available under Edit menu -> "Paste multiple".
      '';
    };
  }) {};

  paste-git-branch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Paste-git-branch";
    plugname = "Paste git branch";
    plugid = "ua.com.glebk.paste_git_branch";
    version = "1.0.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13876/80273/paste_git_branch-1.0.1-SNAPSHOT.zip";
      sha256 = "1f819aghb6h4n0fsrwph2ahpf2gd0qhh4akgprzsnijq47hwzgyx";
      name = "Paste-git-branch-1.0.1-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin adds a button that pastes current git branch name at the beginning of the commit message
      '';
    };
  }) {};

  pasteimageintomarkdown = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PasteImageIntoMarkdown";
    plugname = "PasteImageIntoMarkdown";
    plugid = "com.leyongleshi.idea.plugin.pasteimageintomarkdown";
    version = "1.5.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13610/76065/PasteImageToMarkdown.zip";
      sha256 = "0f0cbcx78v7gvzm6adzxcx77kzd7f8ribxwxxw6shg0aijwnr296";
      name = "PasteImageIntoMarkdown-1.5.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://blog.csdn.net/wilsonpeng3";
      license = lib.licenses.asl20;
      description = ''
        English description(中文描述在下方):

    Insert the image of the clipboard into the markdown file.

    The location where you can choose to save the image ：
    1. the relative dir
    2. qiniu.com
    3. aliyun.com
    4. cloud.tencent.com

    The plugin supports：
    1. Paste multiple images from hard disk at one time (the files which are not image will be filtered automatically)
    2. Support for pasting GIF images
    3. Paste the images saved to clipboard in other ways

    After installed,please go to: Setting-&gt;Other Settings-&gt;PasteImageIntoMarkdown to fill the necessary infos
    If something went wrong,do not be stingy about emailing me: rocky.peng@qq.com 
    or go to github to submit the issue
    github: https://github.com/rocky-peng/PasteImageToMarkdown 

    The version from jetbrains plugin repository may not be the newest,
    You can always reach the newest version at: the newest version

    The setting of relative dir(相对路径设置):
    

    The setting of qiniu.com(七牛云设置)：
    

    The setting of aliyun oss(阿里云设置)：
    

    The setting of tencent cloud oss(腾讯云设置)：
    

    

    中文介绍:

    把粘贴板的图片插入到markdown文件中。

    可以选择保存图片到：
    1. 本地保存
    2. 七牛云
    3. 阿里云
    4. 腾讯云

    可以支持：
    1. 一次性粘贴多张磁盘图片（会自动过滤非图片文件）
    2. 支持粘贴gif图片
    3. 其他方式保存到粘贴板的图片

    下载安装:
    1. 可以直接在jetbrains插件仓库搜索 PasteImageIntoMarkdown 安装。
    2. 由于jetbrains对插件发布有延迟，通过jetbrains插件仓库下载到的未必是最新版，
    最新版可以在这里下载：最新版下载

    安装完成后，请前往Setting-&gt;Other Settings-&gt;PasteImageIntoMarkdown填写七牛相关信息。
    如若使用出现问题，欢迎发送邮件到 rocky.peng@qq.com 或者前往github提交issue。
    github: https://github.com/rocky-peng/PasteImageToMarkdown
      '';
    };
  }) {};

  pastebin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pastebin";
    plugname = "Pastebin";
    plugid = "Pastebin-IDEA";
    version = "0.9.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7099/12038/pastebin-intellij-idea-plugin-new.jar";
      sha256 = "08p2qnjmzqxy111dg0qvgz23k7xyc4ajx0pjsm4bzdbw7w0r23g7";
      name = "Pastebin-0.9.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/YuriDenison/Pastebin-Intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/YuriDenison/Pastebin-Intellij";
        free = false;
      };
      description = ''
        Pastebin.com plugin for Intellij IDEA
      '';
    };
  }) {};

  pastel-licious = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pastel-licious";
    plugname = "Pastel-licious";
    plugid = "com.tylerthrailkill.intellij.pastellicious";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12257/61010/pastel-licious.jar";
      sha256 = "1l5cljwhj3dmszkfigbmhsbbcnkhp1nqyzlx7pgs4pgw09f22cx8";
      name = "Pastel-licious-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://tylerthrailkill.com";
      license = lib.licenses.mit;
      description = ''
        A delicious pastel theme, with bright cheery colors
      '';
    };
  }) {};

  path-title = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Path-Title";
    plugname = "Path Title";
    plugid = "com.hadihariri.pathtitle";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9975/38170/PathTitle-0.1.zip";
      sha256 = "0mlimhx1ym8pmif7j0ljan689mfq879mq979h7a6brprmn2g275h";
      name = "Path-Title-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://hadihariri.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/hhariri/path-title/blob/master/license.txt";
        free = false;
      };
      description = ''
        Set the window title to include full path
      '';
    };
  }) {};

  path-hide = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Path-hide";
    plugname = "Path hide";
    plugid = "com.pyango.gmbh";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8378/26181/path-hide.jar";
      sha256 = "0yav09d9671r9dv4b7qcr5qcb9d99fdrwy7mxv0l4jzq8bqp6h7n";
      name = "Path-hide-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://pyango.ch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://pyango.ch";
        free = false;
      };
      description = ''
        This is a very small plugin to remove the project path in the tree view to prevent horizontal scrolling.
      '';
    };
  }) {};

  pebble = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pebble";
    plugname = "Pebble";
    plugid = "com.github.bjansen.intellij.pebble";
    version = "0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9407/96567/pebble-intellij.zip";
      sha256 = "1z136sh91xlwx9fd9q4imb2xszsvb901vv7mrdlyy0ybj7a5aip3";
      name = "Pebble-0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bjansen";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/bjansen/pebble-intellij/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Support for the Pebble templating engine.
      '';
    };
  }) {};

  pegdown-doclet-for-idea = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pegdown-Doclet-for-IDEA";
    plugname = "Pegdown Doclet for IDEA";
    plugid = "PegdownDocletIdea";
    version = "1.3-1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7253/31604/pegdown-doclet-idea-plugin-1.3-1.jar";
      sha256 = "13q7w90dnnwx7y6g2nqwmzv75gkfksvacjrjypnalmfs687sglib";
      name = "Pegdown-Doclet-for-IDEA-1.3-1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Abnaxos/pegdown-doclet/";
      license = lib.licenses.gpl3Only;
      description = ''
        Enables support for Quick Documentation (Ctrl-Q) for projects that use the Pegdown Doclet. Enable and configure the plugin in "Settings – Pegdown Doclet". 
Tip: Also install the the PlantUML integration plugin for live-previews of your UML diagrams. 
Known Issues 
 
 Some formatting problems in certain constellations; the doc is still readable, though 
 No option for Pegdown parse timeout 
 
Limitation that won't be fixed 
 
 It will only process JavaDocs of project source files, external libraries won't be processed; use generated JavaDocs for libraries 
 It works only if the class where Ctrl-Q was used is located in a Pegdown-enabled module 
 It may get confused on certain constellations of Pegdown-enabled and Standard-JavaDoc modules
      '';
    };
  }) {};

  pepper-sdk = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pepper-SDK";
    plugname = "Pepper SDK";
    plugid = "com.softbank.robot.sdkplugin";
    version = "1.5.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8354/92773/peppersdk-1.5.3.zip";
      sha256 = "17fygr7h2ws5zbq7zjw6nj8fl94mln5bkpbyjqkyamch44p8hkd7";
      name = "Pepper-SDK-1.5.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.softbankrobotics.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://qisdk.softbankrobotics.com/license/peppersdk-eula-eng-update-20180629.pdf";
        free = false;
      };
      description = ''
        Create robot applications in Android Studio!
        This plugin allows for the development of the Pepper robot right inside of Android Studio. Your Android know-how is immediately applicable to the growing field of robotics! You can use your knowledge and understanding of Java to create robot applications, or modify your current Android applications to work in the real-world using the lovable, expressive power of Pepper. Easily re-use sample animations, or create robot animations in a simple and easy-to-understand animation timeline. Bring your experience and know-how to life on this revolutionary and powerful new platform, made available by SoftBank Robotics, powered by Android.
        
        
        Immediately use your Android programming know-how in the field of robotics, without having to learn new programming languages or complicated methodologies
        Combine Android APIs with Pepper-specific APIs to unite the power of Android with robotics and bring your applications to life in a new and exciting real-world environment
        Utilize hundreds of pre-programmed animations, or create your own unique animations in a simple timeline
        Use the Android Virtual Device emulator to display a virtual Pepper, allowing for programming and debugging all on your computer. No actual robot required!
        
        
        Contact info
        http://www.softbankrobotics.com
        
        Who is Pepper?
        Pepper if the first mass-produced commercial robot in the world. Utilizing a combination of touch sensors, cameras, and 3D-sensing, Pepper seamlessly interacts with the world around him. His omnidirectional wheels allow for fluid movement, and 20 motorized joints create beautiful, human-like movement not seen on any other robot available on the market today. Capable of fluid conversation, Pepper also comes equipped with a chest display powered by Android, allowing for smooth, entertaining, and educational human-robotic interaction.
        For more information on Pepper, please see http://www.softbankrobotics.com
      '';
    };
  }) {};

  perforce-idea-community-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Perforce-IDEA-Community-Integration";
    plugname = "Perforce IDEA Community Integration";
    plugid = "PerforceIC";
    version = "0.11.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7685/95673/p4ic4idea-plugin.jar";
      sha256 = "1i3g9c8rk2qmk9p79vc1gii75i7wmhyskqchx0wv4hi3inrgp2sn";
      name = "Perforce-IDEA-Community-Integration-0.11.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/groboclown/p4ic4idea";
      license = lib.licenses.asl20;
      description = ''
        [ Github ] | [ Open Issues ]
      
      
      Associate your IDEA project with Perforce ("p4") through the built-in version control.
      
      
      Limitations:
      
      
        Does not indicate to the user whether a file is
        synchronized to the head revision or not, or if the file is locked in Perforce.
        No resolving merge conflicts.
        Symlinks not properly supported.
      
      
      The plugin will keep your client's open changelists
      synchronized with the IDEA backed changelists, viewable
      under the "Changes" view.  If the changelists become
      out of sync, you can force the plugin to re-examine the
      mappings by pressing the refresh button in the changes view.
      
      
      Modifying a file, moving a file, copying a file, refactoring
      a file, and deleting a file will perform the correct Perforce
      operations, and put the changes into the currently selected
      IDEA changelist.  Per-file history allows for comparing
      against the depot versions, even against the inherited file
      history.
      
      Getting Started
      
      Once you install the plugin, you can associate a project directory
      with Perforce in the project settings (File - Settings...,
      then navigate to the Version Control panel).
      Click on the "edit" icon for the version control root directories to setup
      the server connection.
      
      
      For most people, the environment variables will be sufficient to use the
      same mechanism to connect to the Perforce server as what the
      command-line p4 tool does.  However, you may need to
      explicitly set the property values, or use a file that contains the
      settings.
      
      
      For SSL, you will want to use a P4PORT setting that starts
      with ssl:// (such as ssl://perforce:1666).  If
      you have the server registered in the authorized hosts, then make sure
      that `P4TRUST` setting points to that file; or you can add a SSL server
      fingerprint setting to explicitly state the expected SSL fingerprint.
      
      
      Full documentation on the configuration settings is on the
      main project page.
      
      
      Please visit the GitHub project
      open issues
      for a list of known issues, or for reporting new ones.
      '';
    };
  }) {};

  performance-toolbox = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Performance-Toolbox";
    plugname = "Performance Toolbox";
    plugid = "Performance Toolbox";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14857/104694/intellij-performance-toolbox-plugin-1.0.1.zip";
      sha256 = "0w2x93zh7i6az3hx8js7dbc8ra6gsbc8585zgphsfx5nr560r16g";
      name = "Performance-Toolbox-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Salomon88/intellij-performance-toolbox-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Salomon88/intellij-performance-toolbox-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin introduces tools that help you to analyze and troubleshoot various memory related issues in JVM applications without leaving the IDE.
        
        Features:
        
            Embedded well-known and all-loved GCViewer (v1.36) that visualizes verbose GC output generated by Sun / Oracle, IBM, HP and BEA Java Virtual Machines
            Histogram Dynamic Analyzer
      '';
    };
  }) {};

  permissionsdispatcher-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PermissionsDispatcher-plugin";
    plugname = "PermissionsDispatcher plugin";
    plugid = "com.github.shiraji.permissionsdispatcherplugin";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8349/47780/PermissionsDispatcher_plugin-2.0.1.zip";
      sha256 = "0sprch8g47154vpx513scqdqkcvyxjrn4g8qaq2a6cab7d3rm2cs";
      name = "PermissionsDispatcher-plugin-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/permissions-dispatcher-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        IntelliJ plugin for supporting PermissionsDispatcher. This is official plugin.

    PermissionsDispatcher is wonderful library for Runtime Permissions. However, it asks developers "attach annotations" and "delegate to generated class" and then after that "rebuild". It's hard to follow all steps correctly. This plugin generates the skelton of methods for "attach annotations" and "delegate to generated class" using GUI.
      '';
    };
  }) {};

  permute-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Permute-Plugin";
    plugname = "Permute Plugin";
    plugid = "Permute Plugin";
    version = "0.8.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/205/917/Permute_Plugin_917.jar";
      sha256 = "0l3ndqycwp5mx6wfd672cqc0s1bgqdpmdhvj7mjvirh4hkvfhmid";
      name = "Permute-Plugin-0.8.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The Permute Plugin offers a number of operations that permute the elements of a
textual comma-delimited list within the currently edited file.
The available actions can either be invoked from a submenu of the "Edit" menu or
via individual two-stroke shortcuts each of which starts (by default) with the
combination "Alt+F11".
The following actions are available.

  
    Action
    Shortcut
    Description
    Example
  
  
    Extend Left
    Alt+F11 - Left arrow
    Extend the left end of the selected list to the next entry
    
      In each of the cases below we assume that the selected list is
      one, two, three, four, five, six, seven
      and that the cursor is positioned on the word "four".
    
  
  
    Reduce Left
    Alt+F11 - Shift+Left arrow
    Exclude the leftmost entry of the selected list
  
  
    Extend Right
    Alt+F11 - Right arrow
    Extend the right end of the selected list to the next entry
  
  
    Reduce Right
    Alt+F11 - Shift+Right arrow
    Exclude the rightmost entry of the selected list
  
  
    Step Left
    Alt+F11 - Ctrl+Left arrow
    Move the cursor one entry to the left within the selection
  
  
    Step Right
    Alt+F11 - Ctrl+Right arrow
    Move the cursor one entry to the right within the selection
  
  
    Rotate Left
    Alt+F11 - L
    Rotate the entries of the selected list to the left
    
      two, three, four, five, six, seven, one
    
  
  
    Rotate Right
    Alt+F11 - R
    Rotate the entries of the selected list to the right
    
      seven, one, two, three, four, five, six
    
  
  
    Toggle Left
    Alt+F11 - T (as in Toggle)
    Interchange the list entry at the cursor position with its left neighbor
    
      one, two, four, three, five, six, seven
    
  
  
    Toggle Right
    Alt+F11 - E (as in togglE)
    Interchange the list entry at the cursor position with its right neighbor
    
      one, two, three, five, four, six, seven
    
  
  
    Push Left
    Alt+F11 - P (as in Push)
    Push the list entries from the cursor position to the left
    
      two, three, four, one, five, six, seven
    
  
  
    Draw Left
    Alt+F11 - D (as in Draw)
    Draw the list entries from the left to the cursor position
    
      four, one, two, three, five, six, seven
    
  
  
    Push Right
    Alt+F11 - H (as in pusH)
    Push the list entries from the cursor position to the right
    
      one, two, three, seven, four, five, six
    
  
  
    Draw Right
    Alt+F11 - W (as in draW)
    Draw the list entries from the right to the cursor position
    
      one, two, three, five, six, seven, four
      '';
    };
  }) {};

  permute-list-elementxml-attribute = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Permute-list-elementxml-attribute";
    plugname = "Permute list element/xml attribute";
    plugid = "com.mnw.permute";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10134/39995/Permute.jar";
      sha256 = "1jjvmglbhg4lp2sfxdvlg20n8xsal1zwz7kd5m9v0kwcbp8kvx1x";
      name = "Permute-list-elementxml-attribute-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin can 
swap items in a list left or right. Eg. in a parameter list you can move parameters freely, keeping the format (whitespaces in between elements are kept intact). It works similar to the "Flip" intention when your caret is on a coma, but this plugin 
 - does not need to stand on the coma, it can stand on the parameter, array item, etc.
 - works in free texts and comments (not just psiFiles)
 - tries to find the element even if the caret is on whitespace character
 - handles selection, so you can move more elements at the same time
 
The plugin treats comas (',') as element separators, and treats ('()', '&lt;&gt;', '{}', '[]') as list boundaries. Each swap will happen inside these boundaries. However if an element itself has these boundaries, the swap still happens. 
Note: The plugin does not deal with unclosed boundary characters inside a string. It will give you a warning about badly formatted string. In this case you can select the whole string and perform the swap without trouble. 
The plugin can also rearrange xml attributes in an xml tag. For this it uses a different approach, it uses intellij's psi hierarchy. 
The keyboard shortcuts for these two function can be the same, because normally they won't interfere with each other. 
Default shortcuts (but I recommend checking them with your current keymap): - Shift+Alt+K swap list element forward OR swap xml attribute forward - Shift+Alt+L swap list element backward OR swap xml attribute backward 
If you find this plugin useful, please consider inviting me for a beer. I develop this plugin in my free time and I'm more motivated when I have a beer on desk :-)  http://PayPal.Me/mnwDevelopment/
      '';
    };
  }) {};

  persian-translator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Persian-Translator";
    plugname = "Persian Translator";
    plugid = "com.github.mdk.jetbrains.plugin.persiantranslator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14165/84332/PersianTranslator.jar";
      sha256 = "0ilhzypfm5x0s0hjzsijy8hp6dsmrmcqwr4yl5kbiamj65ji6m7c";
      name = "Persian-Translator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MehrdadDehnamaki/JetbrainsPersianTranslator";
      license = lib.licenses.asl20;
      description = ''
        To use :
      
        CTRL + ALT + Q -&gt; Translate the selected text / ترجمه متن انتخاب شده
        CTRL + ALT + W -&gt; Replace selected text with translation / جایگزین کردن متن انتخاب شده به ترجمه
      '';
    };
  }) {};

  pest = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pest";
    plugname = "Pest";
    plugid = "rs.pest";
    version = "0.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12046/84621/intellij-pest-0.3.2.zip";
      sha256 = "0yc1p445q5lkicaz8smcq17vh39k9x8kwa7qvw429p10dzshnrrv";
      name = "Pest-0.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ice1000.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/pest-parser/intellij-pest/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Pest grammar language support.



You're encouraged to contribute to the plugin in any form if you've found any issues or missing functionality that
you'd want to see.

There are tutorial videos on both
YouTube and
Bilibili.

All your issues/pull requests will be replied very quickly.


Features as a standalone plugin:

	This is a dynamic plugin!
	File icon, different for dark and bright themes
	Rich completion for rules
	Live Preview -- syntax highlight with pest on-the-fly!
	Live Preview to HTML -- export your live-previewed file as HTML!
	Separated highlighting for different rule types
	Keyword highlight built-in rules
	Rename for rules (and validate your rename!)
	Backspace deletes corresponding parenthesis/bracket/brace as well
	Click to go to definition for rules
	GitHub error reporter
	Structure view
	Rule folding
	Find usages
	String literal injection
	Quote handler (automatic insert paired quote)
	Spell checker (for comments/rule names, strings are suppressed)
	Recursive rule line marker
	Duplicated rule checker
	Rule inline (this is very fancy!)
	Rule extraction (this is currently poorly implemented)
	Live template completion for COMMENT and WHITESPACE
	Completion for built-in rules


Features when co-installed with Rust plugin:

	Automatically highlight pest code in #[grammar_inline = "..."]


Hope one day this plugin can be integrated with the Rust plugin and provide completion/resolving for something like
Rule::rule_name.


Maintainers:

	@ice1000

Contributors:

	@MalteSchledjewski
      '';
    };
  }) {};

  phabricator-tasks-provider = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Phabricator-Tasks-Provider";
    plugname = "Phabricator Tasks Provider";
    plugid = "com.github.mmm444.ijphab";
    version = "0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9874/42375/ijphab.jar";
      sha256 = "04lcsl0ixv8fxi5pvjmbi0qgdpbm3bwi94nwpc9a9ir81kbq503g";
      name = "Phabricator-Tasks-Provider-0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/mmm444/ijphab";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mmm444/ijphab/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Provides access to 
Phabricator/Maniphest tasks.
      '';
    };
  }) {};

  phoenixtool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PhoenixTool";
    plugname = "PhoenixTool";
    plugid = "phoneixTool";
    version = "1.4-version";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13961/83608/PhoenixTool.zip";
      sha256 = "0ymixnsgk1sjdy926i8vylxfwiazw038718zn9wqpa0j3kqaqmhf";
      name = "PhoenixTool-1.4-version.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/yuanzizhenxin";
      license = lib.licenses.asl20;
      description = ''
        PhoenixTool is used to publish the system.It integrates the company's existing systems to deploy code.
            凤凰社工具组-目标是整合目前公司所有研发可用到的相关系统到此插件，一个插件搞定所有系统的使用问题（仅供京东开发内网使用)
            Through it, you can save the time of multiple clicks, and the system can help you complete the click operation.Plugin source code in http://git.jd.com/yuanzhen1/phoneixtool.
            通过它，你可以省下多次点击的时间，系统帮你完成点击操作。插件的源码可以在http://git.jd.com/yuanzhen1/phoneixtool获取或者联系erp:yuanzhen1。
            easy work, happy life!!!
      '';
    };
  }) {};

  phrase = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Phrase";
    plugname = "Phrase";
    plugid = "com.phrase.intellij";
    version = "4.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14581/90752/Phrase.zip";
      sha256 = "15dggw58nw56pl8a50pgg8z2dm3s71qpg7pzk587c3c6rny30yqn";
      name = "Phrase-4.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.phrase.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/phrase/phrase-intellij/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Phrase helps you manage Translations in your Android Studio projects. The plugin only supports CLI v2 https://github.com/phrase/phrase-cli
      '';
    };
  }) {};

  pig = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pig";
    plugname = "Pig";
    plugid = "org.apache.pig.plugin.idea";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7203/19054/intellij-pig.jar";
      sha256 = "0xp56vpf0hy2dq55zvz68vjb3lm545lx0qah3paw6k0s4vsf29wj";
      name = "Pig-1.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rmelick/intellij-pig-1";
      license = lib.licenses.asl20;
      description = ''
        Apache Pig Language Plugin
      '';
    };
  }) {};

  pinnote = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PinNote";
    plugname = "PinNote";
    plugid = "org.bigtows.PinNote";
    version = "2.0.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11224/106889/PinNote-2.0.2.2.jar";
      sha256 = "13x09j6kmmzzdj33mi4rjqh8db03vfx5dxvfkgvhrm8xwznpdsdj";
      name = "PinNote-2.0.2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/BigTows/PinNote";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/BigTows/PinNote/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A PinNote is a way to write notes in IDE by JetBrains.
        Now supported:
          
             Store your notes in different places
                 
                    Evernote
                    Locally on your computer
                 
             
             Sync notes between many instance IDE (Only Evernote).
          
          
          GitHub
          
          Created by: Alexander Chapchuk @BigTows
      '';
    };
  }) {};

  ping-test = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ping-Test";
    plugname = "Ping Test";
    plugid = "intellij.plugin.ping";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11422/53820/ping-1.1.zip";
      sha256 = "1fx60ira33mp8phhv8x6v470ny4a9l5mzbzncrd9pja1xw3pnqr3";
      name = "Ping-Test-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/anstkras/Ping-Plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html";
        free = false;
      };
      description = ''
        Shows the internet connection status obtained by launching ping utility
        periodically. The server address, the maximum round-trip time and
        the frequency of updating the internet connection status are
        configurable.
      '';
    };
  }) {};

  pink-as-heck = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pink-as-Heck";
    plugname = "Pink as Heck";
    plugid = "shoobah.pink.as.heck";
    version = "0.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13917/81219/PinkAsHeck-IntelliJ.jar";
      sha256 = "1lvadjjhv1pi52z9qyd42ig4xdfz13yk4lrzn2r10f2f47kjw371";
      name = "Pink-as-Heck-0.2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        A really pink color theme
      This is a really pink theme for those of you who might lack a bit of pink in your IDE :)
      '';
    };
  }) {};

  pipeprofen = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pipeprofen";
    plugname = "Pipeprofen";
    plugid = "pw.unbear.ijplug";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11257/51726/pipeprofen.jar";
      sha256 = "1534f7s63x5aqp48gkd9rj8vjsvb6zq46iydf4asg4126axbjqbg";
      name = "Pipeprofen-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.unbear.pw";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://unlicense.org/";
        free = false;
      };
      description = ''
        pipeprofen on github | report an issue
Run a bash shell command on the selected lines.
Execute a bash process that pipes the selected lines as if they were an input file, same as stdin, through a custom bash shell command. The output from the process replaces the selection with stderr and stdout. Works with multiple carets by piping each selection region separately into their own process. Also works with no carets.
General usage instructions
Invoke with ctrl-alt-shift-x, or by selecting text and right-click the editor to show the context menu. The menu item is called Pipe selected text to bash. When no lines are selected, use the keyboard shortcut to open the bash argument window.
Demo

Features
Remembers the last command argumentsTreats output containing either stderr and stdout the sameWorks with multiple carets, 1 caret and no caretsBug-free on Linux and WindowsActively supported -  open an issue on githubUnlicensed, free public domain source
Note: you must have bash in your environment's PATH.
Being able to run anything in the editor and change the buffer text was heavily inspired by emacs's lisp expressions (eval-last-sexp), (eval-defun) and (eval-expression). This plugin is intended to be a drop-in replacement for the antiquated Shell Process plugin.
      '';
    };
  }) {};

  pitch-black = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pitch-Black";
    plugname = "Pitch Black";
    plugid = "com.ajaaibu.pitch.dark";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14449/99344/theme.jar";
      sha256 = "0021w5dijfz0iiq7rahjqz1lv2i49gcnis7fbj6lhni9q9vfwrn0";
      name = "Pitch-Black-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/ajaaibu";
      license = lib.licenses.asl20;
      description = ''
        Pitch Black is a theme for those who love a simple dark appearance. It is a work in progress. Color scheme is based
    on Monokai Pro, modified to align with the IDE theme.
      '';
    };
  }) {};

  plantuml-parser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PlantUML-Parser";
    plugname = "PlantUML Parser";
    plugid = "plantuml-parser";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15524/104921/plantuml-parser-0.0.1.zip";
      sha256 = "1r09vj7yv7qs9pzqy4ywjflz5w4wvid9cnmffragfjkzdjh2ig29";
      name = "PlantUML-Parser-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shuzijun/plantuml-parser";
      license = lib.licenses.asl20;
      description = ''
        Convert the Java source code to Plantuml.
        
        
        
          This plug-in can convert java source code into plantuml syntax, and can be displayed with the help of PlantUML integration or markdown.This will greatly save your time to write puml.
        
        
        
          Select the java file or folder to be parsed in the project, right-click and select "Plantuml Parser", fill in the output file name (you can see the complete path in the dialog box) and configure other options, and click "generate" to complete.
        
        
        
          If you have any questions or suggestions, you can talk to plantuml-parser
        
        
        You can refer to the gif below to start your use.
      '';
    };
  }) {};

  plantuml-syntax-check = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PlantUML-Syntax-Check";
    plugname = "PlantUML Syntax Check";
    plugid = "de.docksnet.puml.syntaxchecker";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7166/12599/intellij-plantuml-syntaxcheck.zip";
      sha256 = "12vrfa19a9vcsy9z1x353pa7qcy9p7vfxl28xinmcchdjr89basl";
      name = "PlantUML-Syntax-Check-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Stefku/intellij-plantuml-syntaxcheck";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/copyleft/lgpl.html";
        free = false;
      };
      description = ''
        (EXPERIMENTAL) Checks the syntax of a PlantUML file via ExternalAnnotator based on SyntaxChecker of plantuml.jar. This plugin requires idea plugin 'PlantUML integration' (http://plugins.jetbrains.com/plugin?pluginId=7017).
      '';
    };
  }) {};

  plantuml-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PlantUML-integration";
    plugname = "PlantUML integration";
    plugid = "PlantUML integration";
    version = "3.6.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7017/108442/plantuml4idea.zip";
      sha256 = "141dqchjw58fxz0ybp0yh06l8afh1c6kr8rb2cr0ff7lxcqmrhba";
      name = "PlantUML-integration-3.6.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/esteinberg/plantuml4idea/";
      license = lib.licenses.asl20;
      description = ''
        PlantUML diagramming tool integration. Now better and faster, with code navigation and highlighting.
      '';
    };
  }) {};

  plantuml2ddl = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PlantUML2DDL";
    plugname = "PlantUML2DDL";
    plugid = "com.github.xwsg";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12801/68550/plantuml2ddl.jar";
      sha256 = "1c4plg2rs2rykzvp634qg0wr26avkas0yf173iwds824v4bq5q4i";
      name = "PlantUML2DDL-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/xwsg";
      license = lib.licenses.mit;
      description = ''
        PlantUML DDL Converter
      
      Convert PlantUML to DDL: Right-click in the PlantUML file or Alt-Insert -&gt; Generate -&gt; 'PlantUML -&gt; DDL'.
      Convert DDL to PlantUML: Right-click in the DDL file or Alt-Insert -&gt; Generate -&gt; 'DDL -&gt; PlantUML'.
      
      Source code available on GitHub.
      '';
    };
  }) {};

  play-2-routes = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Play-2-Routes";
    plugname = "Play 2 Routes";
    plugid = "com.github.tomasmilata.intelliroutes";
    version = "2020.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10053/100521/project-2020.2.4.zip";
      sha256 = "1jsisi47rgyxslahxahbwihv9v066fw6l04gkh4wh8wbf99iryb4";
      name = "Play-2-Routes-2020.2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tomas-milata";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tomas-milata/intelliroutes/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Support for routes files in Play 2 framework.

    
      Provides:
      
        Syntax highlighting
        Code completion
        Navigation between routes files and controller methods
      
    

    There are multiple Play plugins. Which one should I use?
    
      
        
        IntelliJ Community
        IntelliJ Ultimate
        IntelliJ Edu
      
      
        Play 2 Scala project
        this plugin
        JetBrains' Scala plugin (with built-in Play 2 support)
        this plugin
      
      
        Play 2 Java project
        this plugin
        this plugin (or the official Scala plugin but this one is more lightweight)
        this plugin
      
      
        Play 1 project
        no known plugins
        JetBrains' Play 1 plugin
        no known plugins
      '';
    };
  }) {};

  plug-in-devkit-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Plug-in-DevKit-Helper";
    plugname = "Plug-in DevKit Helper";
    plugid = "com.github.beansoft.devkit.helper";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14985/97970/devkit-helper.jar";
      sha256 = "1dkkfcz8c0z9gwbw8sgsimqzvv7vwx177yhavh4r2k118jx18bhx";
      name = "Plug-in-DevKit-Helper-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/beansoft/visualgc_java8/issues";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        IDEA Plugin DevKit Helper
        
            Provides helper features on IDEA Plugin DevKit. 
            When editing plugin.xml, the CDATA in description and change-notes will be treated as HTML so syntax
            highlighting and tag completion, Edit HTML Fragment editor will work.
            One-click jump from plugin.xml action/extension ref to plugin class code(supports Java, Kotlin) and vise
            versa(from the class to the xml ref).
        

        Chinese Description
        
            给插件开发所使用的IDEA Plugin DevKit提供一些辅助功能. 
            当修改plugin.xml时,将description 和 change-notes 中的 CDATA 字符串内容解析为 HTML 语言,
            这样就可以使用语法高亮和标签辅助以及分割修改HTML片段功能了.
            一键从plugin.xml中的action/extension引用类跳转到插件类代码(支持supports Java, Kotlin)以及反向跳转(从类跳转到xml中的引用).
        
        
            Made with ❤ by BeanSoft for IDEA Plugin developers.
            👉FYI React Native
            Console | FluterStorm
            which is also developed by me.
        

        Screenshot
      '';
    };
  }) {};

  plugin-developers-toolbox = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Plugin-Developers-Toolbox";
    plugname = "Plugin Developer's Toolbox";
    plugid = "com.vladsch.PluginDevelopersToolbox";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8138/73766/PluginDevelopersToolbox.1.2.zip";
      sha256 = "0wppi498wbljgsb98drazmz8f0gji85kp5q3y2bsy466zyvsabi4";
      name = "Plugin-Developers-Toolbox-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/vsch/PluginDevelopersToolbox";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/vsch/PluginDevelopersToolbox/blob/master/LICENSE";
        free = false;
      };
      description = ''
        For now only one very useful function: Slicy file
                mover/renamer.
            Plugin website:
                Plugin Developer’s Toolbox GitHub Repo
            Bug tracking &amp; feature requests:
                Plugin Developer’s Toolbox GitHub Issues
      '';
    };
  }) {};

  plugin-importerexporter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Plugin-Importer+Exporter";
    plugname = "Plugin Importer+Exporter";
    plugid = "com.github.shiraji.pluginimporterexporter";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7891/72935/plugin-importer-exporter-0.0.3.zip";
      sha256 = "1mysdg3lq36srh5scy062d52vjyr3mkxby29gan707l4cf01nlr6";
      name = "Plugin-Importer+Exporter-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shiraji";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/shiraji/plugin-importer-exporter/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin currently has two main features.
        
            Dump which plugins are installed to a JSON file
            Download all plugins from a JSON file
        
        This plugin DOES NOT export actual plugins.
        GitHub |
        Issues
      '';
    };
  }) {};

  pluginupdatenotifier = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PluginUpdateNotifier";
    plugname = "PluginUpdateNotifier";
    plugid = "PluginUpdateNotifier";
    version = "2.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1247/4630/PluginUpdateNotifier_4630.zip";
      sha256 = "1k1m91cbjsd0r9xbychqv1x45ig8aiid6g9zgn6lz8v1mmjq0azn";
      name = "PluginUpdateNotifier-2.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jroller.com/ulc/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jroller.com/ulc/";
        free = false;
      };
      description = ''
        Regularly checks with the IDEA plugin repository if there are updates available for any of the installed 3rd-party plugins and
        installs all of the available updates through a single click.
        
          Features:
          
            a notification popup is displayed when new updates are available
            an icon is displayed in the status bar that reflects the update state of the installed 3rd-party plugins
            clicking on the icon in the status bar shows a summary dialog
            a link is provided on the summary dialog to navigate to the plugin manager dialog
            a button is provided on the summary dialog which allows to update all plugins for which new versions are available
            the update interval can be configured to be hourly, daily, or weekly (in the IDEA Settings)
            an instant update check is available in the configuration dialog
            a configuration option is provided to ignore disabled plugins in IDEA 7
      '';
    };
  }) {};

  pluralsight-activity-dashboard = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pluralsight-Activity-Dashboard";
    plugname = "Pluralsight Activity Dashboard";
    plugid = "com.pluralsight.activity-insights-jetbrains";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14470/108384/activity-insights-jetbrains-1.1.2.zip";
      sha256 = "04mvznvvah49yka6zpbvr03jqwya6q2zfag2awbrq0n9v4ln8fg0";
      name = "Pluralsight-Activity-Dashboard-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.pluralsight.com";
      license = lib.licenses.asl20;
      description = ''
        Get insights into your daily coding activity, automatically.
          Requires a Pluralsight account.
          
          Installation instructions
          
            Search for "Pluralsight Activity Dashboard" in your plugins marketplace.
            Relaunch your IDE.
            Select Tools -&gt; Pluralsight Activity Dashboard -&gt; Register Device
            You should start seeing your coding activity populate within a minute.
          
          
          Viewing your dashboard
          
            Select Tools -&gt; Pluralsight Activity Dashboard -&gt; Open Dashboard
            Visit directly
      '';
    };
  }) {};

  poetry = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Poetry";
    plugname = "Poetry";
    plugid = "com.koxudaxi.poetry";
    version = "0.5.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14307/99990/poetry-pycharm-plugin.zip";
      sha256 = "1by9jcv097bx3m1knh3j1fdrdcpgx5a0siv02pplpcdpim5184cl";
      name = "Poetry-0.5.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/koxudaxi/poetry-pycharm-plugin";
      license = lib.licenses.asl20;
      description = ''
        This plugin supports poetry which is a package manager for Python
    Help
    See documentation for more details.
    This project is currently in an experimental phase
    

    Features
    Implemented
    add a new/existing poetry environment as a interpreter 
    install packages with pyproject.toml when add a interpreter
    add a new pyproject.toml when it does not exists
    install and import a package with poetry (QuickFix)
    install packages from poetry.lock
    update and lock with a popup
    show a message and a link to fix settings (QuickFix)
    install extras and run scripts by clicking a line marker (Toml plugin is required)
    show a message for outdated version packages (Toml plugin is required)
    install/uninstall packages from GUI
    - detect poetry project when open new project
      '';
    };
  }) {};

  pojo-builder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pojo-Builder";
    plugname = "Pojo Builder";
    plugid = "Pojo Builder";
    version = "1.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10516/60209/pojobuilder.jar";
      sha256 = "0h7wmpnig8gvclgd5bhrdrlzwg3kb6fayp8sj512k2dyfywgnir1";
      name = "Pojo-Builder-1.5.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/asklyushkin/pojobuilder";
      license = lib.licenses.asl20;
      description = ''
        Pojo Builder
      '';
    };
  }) {};

  pojogenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PojoGenerator";
    plugname = "PojoGenerator";
    plugid = "com.wlh.beangenerator";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10607/45617/PojoGenerator.jar";
      sha256 = "0a3cik1nsrscn89qnc0gv61dax2s5h2pb6nzpq6qavv8y7phk67i";
      name = "PojoGenerator-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/FSilence/PojoGenerator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/FSilence/PojoGenerator";
        free = false;
      };
      description = ''
        Bean对象生成器 
 github 
https://github.com/FSilence/PojoGenerator 
 Blog 
https://fsilence.github.io/
      '';
    };
  }) {};

  pojotojson = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PojoToJson";
    plugname = "PojoToJson";
    plugid = "PojoToJson";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11262/61212/PojoToJson.jar";
      sha256 = "0c0slxl0qqlm1pp0am4q07i4snvny2jhqaj0vhmiq45pnmwkgrqw";
      name = "PojoToJson-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.qbb6.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.qbb6.com";
        free = false;
      };
      description = ''
        Java Class to json plugin
      use way: right click choose BuildJsonWithType or BuildJson or BuildJsonForYapi
      dubbo use way: selected method name ,right,click choose BuildJsonForDubbo
      '';
    };
  }) {};

  pokemon-progress = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pokemon-Progress";
    plugname = "Pokemon Progress";
    plugid = "com.kagof.pokeprogress";
    version = "1.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15090/108493/pokemon-progress-1.4.2.zip";
      sha256 = "12wr1banps1kcifh26yff9pzyqgv37d9df6pf1l1s2j10akx1brs";
      name = "Pokemon-Progress-1.4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kagof";
      license = lib.licenses.mit;
      description = ''
        Replaces your IDE's progress bars with random Pokémon. The chosen Pokémon are configurable, though all are used by default. Pokémon sprites may also be turned off to only use the type colours, for a more professional look.





    
    
    
    
    
    
    
    
    
    



See the Github Repository
      '';
    };
  }) {};

  pokemon-trainer-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pokemon-Trainer-Progress-Bar";
    plugname = "Pokemon Trainer Progress Bar";
    plugid = "manjaro.ptpb";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14609/100001/PokemonTrainerProgressBar.jar";
      sha256 = "1ch0w2r8hxa8ixrg01gazj3v7y6314xagrawnnrpdanjz6fasiz6";
      name = "Pokemon-Trainer-Progress-Bar-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This is the Pokemon Trainer Progress Bar for IJ based IDEs based on the Nyan Progress Bar by Dmitry Batkovitch.
      It display Red and Pikachu for the basic bar and the bike animation for the indeterminate one.
      
      
      DETERMINATE:
      
      
      
      INDETERMINATE:
      '';
    };
  }) {};

  polar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Polar";
    plugname = "Polar";
    plugid = "dev.thull.polar";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14551/103461/polar-1.0.4.jar";
      sha256 = "1lz3ldbj7k0j6rz39mxdg1aq4jmplkv59dfqbs9h7974cna01gjf";
      name = "Polar-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/mtyn/polar";
      license = lib.licenses.mit;
      description = ''
        A light editor and UI theme based on Arctic Ice Studio's Nord theme
      '';
    };
  }) {};

  polidroid-as---privacy-policy-verification = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PoliDroid-AS---Privacy-Policy-Verification";
    plugname = "PoliDroid-AS - Privacy Policy Verification";
    plugid = "edu.utsa.cs.sefm.privacypolicyplugin";
    version = "v1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12170/62794/PoliDroid-AS.zip";
      sha256 = "1m4gnpandch7n1asfcnl554vayn6zx84b1348xn7szc8svv6fsdn";
      name = "PoliDroid-AS---Privacy-Policy-Verification-v1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://polidroid.org";
      license = lib.licenses.gpl3Only;
      description = ''
        Detects potential Android privacy policy misalignments.
      '';
    };
  }) {};

  polyglot-translators = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Polyglot-Translators";
    plugname = "Polyglot Translators";
    plugid = "me.bytebeats.polyglot";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15036/101290/polyglot-1.3.2.jar";
      sha256 = "0a6i80s51spd9k4cm49c6k39z0bhcwvbksq2gqmhz7vdw0sxi341";
      name = "Polyglot-Translators-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bytebeats";
      license = lib.licenses.asl20;
      description = ''
        Polyglot: to translate different languages with different translators!
      An Intellij platform plugin project.
      If your project is relevant to many languages in which translation is needed, this plugin will help you a lot.
      一个 Intellij 插件项目, 当工程需要支持多语言时, 本插件能够帮助你省去在浏览器或者翻译软件与你的项目之间来回切换的麻烦.
      A good plugin is No.1 productive force. 插件是第一生产力啊!
      Introduction: https://github.com/bytebeats/polyglot
      '';
    };
  }) {};

  polymer-snippets = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Polymer-Snippets";
    plugname = "Polymer Snippets";
    plugid = "de.ifahrentholz.snippets.polymer";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9602/34382/intellij-polymer-live-templates-master.zip";
      sha256 = "0i1bgspd7vq2f9yrk8ixszhx5ran4qj3zs0pxha8g3kfcxb2mrsq";
      name = "Polymer-Snippets-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ifahrentholz/intellij-polymer-live-templates";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ifahrentholz/intellij-polymer-live-templates/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A collection of common Polymer templates / snippets. 

 
GitHub Homepage 
Issues
      '';
    };
  }) {};

  pom-format = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pom-Format";
    plugname = "Pom Format";
    plugid = "com.uso.plugin.pom";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12003/103090/pom-format-plugin-0.0.6.zip";
      sha256 = "1awm8bj2pqlfrs36c3kp6qkk4wdvhhdid1whn0dc3rs584xyxycs";
      name = "Pom-Format-0.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://termsfeed.com/eula/07f3cb1efba570e438422f3ebf196780";
        free = false;
      };
      description = ''
        After formatting the pom file with this plugin,
            the version in your pom file will be replaced by properties
            and the elements will also be sorted according to certain rules.
      '';
    };
  }) {};

  pom-sorter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pom-sorter";
    plugname = "Pom sorter";
    plugid = "Pom sorter";
    version = "1.0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7084/16140/pom-sorter.zip";
      sha256 = "0aw1bb1z4qir5v8fymngv5lb0ll08zsy7l7k5k79wx4fhp14v2v2";
      name = "Pom-sorter-1.0.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/it-crowd/pom-sorter";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/it-crowd/pom-sorter";
        free = false;
      };
      description = ''
        Sorts contents of maven project descriptor
      '';
    };
  }) {};

  pomodoro-tm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pomodoro-tm";
    plugname = "Pomodoro-tm";
    plugid = "Pomodoro-tm";
    version = "0.60";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4954/40803/pomodoro.zip";
      sha256 = "07j45mmn63grs4fckansk3vripnin0qqv07aifwl2csylmnww13j";
      name = "Pomodoro-tm-0.60.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/dkandalov/pomodoro-tm";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://github.com/dkandalov/pomodoro-tm";
        free = false;
      };
      description = ''
        Time management plugin for 
Pomodoro Technique. 
 How to use it: 
 
 Choose a task to be accomplished and start pomodoro timer (Ctrl+Shift+P or Cmd+Shift+P). 
 Work on the task until the timer rings. If distracted during pomodoro, restart timer. 
 Take a break until the timer rings again. 
 For more details see 
plugin page on GitHub.
      '';
    };
  }) {};

  pony = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pony";
    plugname = "Pony";
    plugid = "me.piotrbuda.intellij.pony";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7955/21443/intellij-pony.zip";
      sha256 = "1ra67fmcszr0fmc54y9r86pr63y6wdq31bbbihvfcm2351iyw1fn";
      name = "Pony-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pbuda/intellij-pony";
      license = lib.licenses.asl20;
      description = ''
        Language support - Pony language (http://ponylang.org)
      '';
    };
  }) {};

  pony-language-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pony-Language-support";
    plugname = "Pony Language support";
    plugid = "org.hedhman.pony.idea.pony-idea-plugin";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14256/85623/ponylang-intellij-plugin.jar";
      sha256 = "06k5dqv271j0i1nr4n7k5ql19l068904aimcmy3agw58lnmcyqr1";
      name = "Pony-Language-support-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/niclash";
      license = lib.licenses.asl20;
      description = ''
        Pony Language support for IntelliJ platforms. Features; Pony Language syntax highlighting. Work in ptogress with
    refactoring, compilation, debugging and intentions in the plans.
      '';
    };
  }) {};

  ponytail = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PonyTail";
    plugname = "PonyTail";
    plugid = "com.fishy.plugin.idea.ponytail";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7934/21149/PonyTail.zip";
      sha256 = "00s9344v7qz0a11x09av99hk7hv8dw1va3ksq8jr4687snfpl33j";
      name = "PonyTail-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://passport.weibo.com/visitor/visitor?entry=miniblog&a=enter&url=http%3A%2F%2Fweibo.com%2Fdxkkk&domain=.weibo.com&ua=php-sso_sdk_client-0.6.23&_rand=1488538881.6228";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://passport.weibo.com/visitor/visitor?entry=miniblog&a=enter&url=http%3A%2F%2Fweibo.com%2Fdxkkk&domain=.weibo.com&ua=php-sso_sdk_client-0.6.23&_rand=1488538881.6228";
        free = false;
      };
      description = ''
        It's a tool for track log as cat / tail command. 
1. you can bind log trackers with a project. 
2. it support big logs. 
3. it support charset changing. 
4. you should not tail the log with any other window. 

If you download slow here, please go 
https://github.com/i17c/PonyTail/tree/master/releases 

Why PonyTail? 
Because of my son, obsessing about Badanamu's first Song - Ponytail 
and it's a tool like tail command for us. 
so, just for memory. 

本工具用于跟踪log日志的变化情况,像cat命令,或者tail命令. 
1. 你可以为单个项目绑定相关日志 
2. 支持超大文件部分读取 
3. 支持字符集改变 
4. 不必再开另外的窗口去查看日志 

如果你觉得很慢, 请去 
https://github.com/i17c/PonyTail/tree/master/releases 下载 

为什么叫PonyTail? 
因为我儿子正痴迷于Badanamu的第一首儿歌 - Ponytail 
然后这个工具也类似于tail一样的作用, 所以做个纪念吧!
      '';
    };
  }) {};

  poor-check = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Poor-Check";
    plugname = "Poor Check";
    plugid = "org.aber.plugins.poorcheck";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13483/83713/poor-check-1.0.2.jar";
      sha256 = "1c9h0bcrbnlv8p9lm6axgkyradhqqv0qg7xhsnkm0jrvc7vlbs2b";
      name = "Poor-Check-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/androberz/poor-check";
      license = lib.licenses.mit;
      description = ''
        Warn of possible poor code usage in Java.

    Code usage cases to cover:

    1. Not overridden toString() call;
    2. Not overridden equals() call;
    3. java.util.Optional isPresent() always returns true;
    4. java.util.Optional isEmpty() always returns false;
    5. Class with not overridden equals()/hashCode() methods is used as a key in a hash structures (including java.util.stream.Collectors toMap());
    6. Added support for Lombok's @EqualsAndHashCode
    7. Added support for Guava's ImmutableSet and ImmutableMap
    
    When an above case occurs the warning is shown.
    An action to generate the missed code is proposed (Alt + Enter)
      '';
    };
  }) {};

  post-to-instacode = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Post-to-Instacode";
    plugname = "Post to Instacode";
    plugid = "com.eugeny.instacode.idea";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7178/12885/InstacodeIdea.jar";
      sha256 = "1w0chhyznxmzla92p5nyzfck7yf52p9j4g88qkflwm1va4f72hfc";
      name = "Post-to-Instacode-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://instaco.de/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/copyleft/lesser.html";
        free = false;
      };
      description = ''
        Lets you post code snippets to 
instacod.es
      '';
    };
  }) {};

  postman-to-retrofit2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Postman-to-Retrofit2";
    plugname = "Postman to Retrofit2";
    plugid = "com.kevinshu.retrofit2.plugins";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11612/87353/Retrofit2Plugin.jar";
      sha256 = "14yxhc2lsn3zyfm83jlssga26p2s3z542gw1yh69m76j3gm33g2x";
      name = "Postman-to-Retrofit2-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "yibinshu@gmail.com";
      license = lib.licenses.mit;
      description = ''
        Convert postman collection to Retrofit2 java code
      '';
    };
  }) {};

  power-mode-3 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Power-Mode-3";
    plugname = "Power Mode 3";
    plugid = "com.nmeylan.powermode";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13226/71326/power-mode-intellij-plugin.jar";
      sha256 = "15900sy0p1zichl5a6kqxlmvx9xdyy21mahrjg6kji7v6wgdi87k";
      name = "Power-Mode-3-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nmeylan/power-mode-3-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Power Mode 3
        Forked from axaluss on Github. Credits to https://github.com/axaluss/power-mode-intellij-plugin.
        Source available here: https://github.com/nmeylan/power-mode-3-intellij-plugin
      '';
    };
  }) {};

  power-mode-ii = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Power-Mode-II";
    plugname = "Power Mode II";
    plugid = "de.ax.powermode";
    version = "99.99";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8251/78403/power-mode-intellij-plugin.zip";
      sha256 = "0snq88db1kv3wzrdj2z638n22vn1n2li41b9h4nay1366r017srb";
      name = "Power-Mode-II-99.99.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/axaluss/power-mode-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Power Mode
        Based on the activate-power-mode atom plugin and forked from Baptiste Mesta on Github.
        Features
        
            Exploding falling sparks
            Editor shaking
            Flames
            Heatup based on typing speed. The more you type the more happens.
            Keyboard shortcut to toggle power mode [shift ctrl alt O]
            Choose particle colors and transparency within a color space
            Adjust particle velocity and gravitation
            Modify the animation frame rate
            Multi caret support
            Animation on caret movement
            Play music folder: volume based on heatup
            Play next song action: [shift ctrl alt M]
            Visualize bigger file editing with "BAM!"
            See your power level in the indicator box
            Customizable animation images
            Everything is configurable
        
        Usage
        
            Install the plugin
            ENTER POWER MODE in Preferences &gt; Appearance &gt; Power mode II
            CHANGE THE SLIDERS and options to your liking
        

        
            Latest Release Download
        

        
            
            Want to pass me a Beer?
      '';
    };
  }) {};

  powermouse = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PowerMouse";
    plugname = "PowerMouse";
    plugid = "PowerMouse";
    version = "2.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7904/82712/power-mouse-2.10.jar";
      sha256 = "00rf9m77zgi2a37x73japhhj5anfqcks20gxzzq1d3w3qvmyygqz";
      name = "PowerMouse-2.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://bitbucket.org/batrdmi/power-mouse";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://bitbucket.org/batrdmi/power-mouse/raw/9a6d5f54903069375084b52e5e59667cfad29d63/src/license.txt";
        free = false;
      };
      description = ''
        Allows to bind actions of your choice to the following mouse gestures performed in editor:
      
        press-and-hold of right mouse button (bound to "File Structure" by default)
        simultaneous press of left and right mouse buttons (bound to "Show Usages" by default)
      '';
    };
  }) {};

  powershell = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PowerShell";
    plugname = "PowerShell";
    plugid = "com.intellij.plugin.adernov.powershell";
    version = "2.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10249/94564/PowerShell-2.0.5.zip";
      sha256 = "0pnnh0yk4prmg3ajdz8cck5yz8gssvrbpl0n7zcwkkqlw5njxmvj";
      name = "PowerShell-2.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ant-druha/PowerShell/issues";
      license = lib.licenses.asl20;
      description = ''
        Provides PowerShell intellisense and script execution support for IntelliJ IDEs.
    
    Plugin page: https://plugins.jetbrains.com/plugin/10249
      '';
    };
  }) {};

  predlab = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Predlab";
    plugname = "Predlab";
    plugid = "com.predlab.jet";
    version = "0.6.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13568/88527/Predlab_Sync-0.6.8.zip";
      sha256 = "0qqrdrzkx30qczzhlm99vj4zgxas4r5c9nikf4kwz54hh7d5zacz";
      name = "Predlab-0.6.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://predlab.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://predlab.com";
        free = false;
      };
      description = ''
        A team-centric, cloud-based extension for IntelliJ IDEs that:
        
        Allows developers to collaborate and share within editor "Project Workspaces"
        Allows developers to document their projects with in-editor, cloud-synced annotations (code flags).
        Allows adding team members to workspaces, each of them has real-time access to annotations, code snippets, and
        content.
        A real-time live feed of team members activity!
      '';
    };
  }) {};

  prependappend = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PrependAppend";
    plugname = "PrependAppend";
    plugid = "PrependAppend";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/172/795/PrependAppend_795.zip";
      sha256 = "0qn6cp9lb59gnf11lbbrmy2jxgzr90v34k5n09apkl3k46h8nnxk";
      name = "PrependAppend-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin provides a way to easily prepend and append one or more characters to the beginning or end of lines.
      '';
    };
  }) {};

  preprocessor-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Preprocessor-Support";
    plugname = "Preprocessor Support";
    plugid = "dev.falsehonesty.intellij-preprocessor";
    version = "0.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14029/106955/intellij-preprocessor-0.6.0.zip";
      sha256 = "0xnx5nhbp3ykcyzr29fj5m8isq6vjpwvqrl4brljiq3yckbrxfma";
      name = "Preprocessor-Support-0.6.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://chattriggers.com";
      license = lib.licenses.mit;
      description = ''
        An IntelliJ plugin to add support for comment-based
    preprocessor macros.
      '';
    };
  }) {};

  presentation-assistant = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Presentation-Assistant";
    plugname = "Presentation Assistant";
    plugid = "org.nik.presentation-assistant";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7345/106045/Presentation_Assistant-1.0.7.zip";
      sha256 = "0mx5r1pg5kwsmcslmr3sp2y65dhdc3l0yva9i3dz2aylh8v3vjjh";
      name = "Presentation-Assistant-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chashnikov/IntelliJ-presentation-assistant";
      license = lib.licenses.asl20;
      description = ''
        This plugin shows name and Win/Mac shortcuts of any action you invoke (View | Appearance | Descriptions of Actions)
      '';
    };
  }) {};

  preserve-layout-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Preserve-Layout-Plugin";
    plugname = "Preserve Layout Plugin";
    plugid = "com.duseev.intellij.preservelayout";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10097/39691/preserve-layout-plugin.jar";
      sha256 = "0iwwbw3d5p3n0x0j98x2l039yzlh7r4cbbwwmdkh1vm8g2slqilg";
      name = "Preserve-Layout-Plugin-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://duseev.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://duseev.com";
        free = false;
      };
      description = ''
        This plugin provides Export &amp; Import functionality for IntelliJ window layout. Preserve your favorite layout across different projects. 
 Plugin is accessible via 
Window Menu: 
 
 Export project layout: export current window layout to 'layout.xml' 
 Import project layout: import 'layout.xml' into current project 
 
 
Important Note: You have to reopen a project after layout import to apply changes. 
 
 Feature improvements: 
 
 Get rid of need to reopen a project 
 
 Plugin documentation &amp; Sources are available at 
GitHub
      '';
    };
  }) {};

  previewimage = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PreviewImage";
    plugname = "PreviewImage";
    plugid = "com.linmilin.plugin.PreviewImage";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10914/47562/PreviewImage.jar";
      sha256 = "02wz3pyn9wi4imwnzpdp01mcslalyw9cm24624mc48lyfx1fw3s1";
      name = "PreviewImage-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lanxiaoha/previewimage";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        show imageIcon for selected special format url.  p url=; eg:p url=http://www.linmilin.com/1.png;
      how to use：1: p url=http://www.linmilin.com/1.png;2: select "p url=http://www.linmilin.com/1.png"3:click this plugin in Edit Menu
      '';
    };
  }) {};

  primitive-vr-java-analyzer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Primitive-VR-Java-Analyzer";
    plugname = "Primitive VR Java Analyzer";
    plugid = "io.primitive.primitive-intellij-plugin";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11587/66789/primitive-intellij-plugin-1.0.3.zip";
      sha256 = "1xpf5f6j3vi5v643nvca09r3nqw939l9d3qb18vbiwbx5kl526ca";
      name = "Primitive-VR-Java-Analyzer-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://primitive.com";
      license = lib.licenses.mit;
      description = ''
        A plugin that performs static analysis and tracing on Java and Kotlin projects. The output is viewable in the
      Primitive Immersive Development Environment (available on Viveport and Steam).
      '';
    };
  }) {};

  prisma = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Prisma";
    plugname = "Prisma";
    plugid = "fr.gabrielcolson.prisma.prisma-intellij-plugin";
    version = "1.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14240/90872/intellij-prisma-1.2.3.zip";
      sha256 = "0jlh6567v88jsnwsf4lc8l1clyf55j315b54859fz00dskmr3iz6";
      name = "Prisma-1.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/gabrielcolson";
      license = lib.licenses.mit;
      description = ''
        Add support for the Prisma Schema Language (PSL)
      '';
    };
  }) {};

  prisma-cloud = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Prisma-Cloud";
    plugname = "Prisma Cloud";
    plugid = "com.paloaltonetworks.PrismaCloudPlugin";
    version = "3.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13555/106264/PrismaScanPlugin-3.0.0.zip";
      sha256 = "11ar4mzrx3dp4dyh0zimdbk9p3ws8nrssr4ra859ixjyc162rmh0";
      name = "Prisma-Cloud-3.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin enables Prisma Cloud Infrastructure-as-Code (IaC) scan functionality from Palo Alto Networks Inc. in IntelliJ IDE. Prisma Cloud IaC Scan identifies insecure configurations in common Infrastructure-as-Code (IaC) templates - for example, AWS Cloud Formation Templates, HashiCorp Terraform templates, Kubernetes App Deployment YAML files. More details about the functionality can be found here: https://docs.paloaltonetworks.com/prisma/prisma-cloud/prisma-cloud-admin/prisma-cloud-devops-security.html
     
     Once this plugin is installed, you can run IaC scans right inside IntelliJ IDE and see results that are sorted by policy severity. Scan your IaC templates by right clicking on the template file in 'Project Structure' and click on Prisma Scan in 'Project View' pop-up. Scan results are displayed in the 'Scan Result' window.
     
     Features:
     
        Scan Infrastructure-as-Code (IaC) templates (AWS CFT, Terraform templates, Kubernetes app deployment YAML files)
        Display sorted results based on policy severity
        Option to copy policies violation data to clipboard after the scan
     
     
     Prerequisites: Authentication credentials from Prisma Cloud https://marketplace.paloaltonetworks.com/s/product-rdl
     
     Documentation: https://docs.paloaltonetworks.com/prisma/prisma-cloud/prisma-cloud-admin/prisma-cloud-devops-security/use-the-prisma-cloud-plugin-for-intellij.html
     
     For plugin support, please email us: prisma-scanapi-support@paloaltonetworks.com
      '';
    };
  }) {};

  problems-view = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Problems-View";
    plugname = "Problems View";
    plugid = "Problems View";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/928/2826/Problems_View_2826.zip";
      sha256 = "031qxr49y70s3jqb3panp5lp7fc3r7gxna9kdza3bh2g9qb4bifx";
      name = "Problems-View-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/928/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/928/sourceCode.zip";
        free = false;
      };
      description = ''
        The problems detector for monitoring something wrong in
        IDE (incomplete settings, wrong configurations, etc)
      '';
    };
  }) {};

  programmer-motivator-chaoyue-yang = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Programmer-Motivator-Chaoyue-Yang";
    plugname = "Programmer Motivator: Chaoyue Yang(超越鼓励师)";
    plugid = "cn.fantasticmao.ycy.intellij.plugin";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12204/85708/ycy-intellij-plugin.jar";
      sha256 = "0m1bahbh010zrsp3m6xj7g9x1qfj24jf8az9wgpj7rw5r1wmhbxw";
      name = "Programmer-Motivator-Chaoyue-Yang-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com/idea";
      license = lib.licenses.mit;
      description = ''
        Coding won't be lonely anymore with Chaoyue Yang's accompany!
        Chaoyue Yang will remind you to have a rest when you work constantly for an hour at IntelliJ IDEA~
        
        写代码不再孤单，有杨超越与你同在！
        在 IntelliJ IDEA 中连续编写代码一小时，会有杨超越提醒你该休息啦～
        
        GitHub: https://github.com/fantasticmao/ycy-intellij-plugin
      '';
    };
  }) {};

  programmer-motivator-yibo-wang = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Programmer-Motivator-YiBo-Wang";
    plugname = "Programmer Motivator: YiBo Wang(鼓励师)";
    plugid = "cn.ivhik.wyb.intellij.plugin";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12814/73768/wyb-intellij-plugin.jar";
      sha256 = "1mrsryrf7dvhw56ky5izca421zkpcwjha23qa21dgsj1jx3mnqv3";
      name = "Programmer-Motivator-YiBo-Wang-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com/idea";
      license = lib.licenses.asl20;
      description = ''
        Coding won't be lonely anymore with YiBo Wang's accompany!
        YiBo Wang will remind you to have a rest when you work constantly for an hour at IntelliJ IDEA~
        
        写代码不再孤单，有王一博与你同在！
        在 IntelliJ IDEA 中连续编写代码一小时，会有王一博提醒你该休息啦～
        
        GitHub: https://github.com/Lanseria/wyb-intellij-plugin
      '';
    };
  }) {};

  proguard-retrace-unscrambler = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Proguard-Retrace-Unscrambler";
    plugname = "Proguard Retrace Unscrambler";
    plugid = "com.cmgapps.intellij.proguard-retrace-unscambler";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15267/102411/Proguard_Retrace_Unscrambler-1.3.0.zip";
      sha256 = "01qzm725ikbgmkkppx0cx5iqm7phngy32vx42pq94nv0bbfcdnbl";
      name = "Proguard-Retrace-Unscrambler-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.cmgapps.com";
      license = lib.licenses.asl20;
      description = ''
        Adds Unscrambler support for Proguard's mapping files and Android's R8 mapping files.
    Use to de-obfuscate your stacktrace
      '';
    };
  }) {};

  proguard-unscramble = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Proguard-Unscramble";
    plugname = "Proguard Unscramble";
    plugid = "com.chimerapps.proguard-retrace";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11971/78659/proguard-retrace-1.0.1.zip";
      sha256 = "0dzqp1lxkd1qnj8dccirvyfgccn6hfzmsd6i9929dvbdblxg978h";
      name = "Proguard-Unscramble-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.chimerapps.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Chimerapps/intellij-proguard-unscramble/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Unscrample Support for ProGuard. Use with 'Analyze Stack Trace'
      '';
    };
  }) {};

  project-env = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Project-Env";
    plugname = "Project-Env";
    plugid = "ch.repolevedavaj.projectenv.intellijplugin";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15746/108337/Project-Env-1.0.1.zip";
      sha256 = "0y1hljwg9i6sy7as57y20r6x9k3l36249snnv0m6vnyrczs3gd6j";
      name = "Project-Env-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Project-Env/project-env-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        This plugin sets up tools declared in the project-env.yml Project-Env config file and configures them, as far as possible, in the IntelliJ project settings.

Currently, the following project settings are configured automatically if the tool is declared:
JDK: Adds the JDK to the JDK table and sets it as project JDKMaven: Sets the project specific path to Maven to the corresponding location.Makes all environment variables of all declared tools available to Maven executionsConfigures the user specific settings file - the global settings file is (if existing) linked into the Maven distribution.Gradle:Sets the project specific path to Gradle to the corresponding location.Makes all environment variables of all declared tools available to Gradle executionsNode: Adds a new interpreter and set it as project default interpreter

Please note that changes in this file are only loaded once after opening the project.
      '';
    };
  }) {};

  project-label = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Project-Label";
    plugname = "Project Label";
    plugid = "com.drinchev.projectlabel";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8032/70822/project-label-1.0.jar";
      sha256 = "1anjawnb49h3sy6l96rhq3xyh30121vdag9i248z271j085xnlym";
      name = "Project-Label-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/drinchev/project-label";
      license = lib.licenses.mit;
      description = ''
        Project label creates a small label on the bottom right project window with the name and a changeable color.
      '';
    };
  }) {};

  project-necromancer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Project-Necromancer";
    plugname = "Project Necromancer";
    plugid = "org.nik.project-necromancer";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10284/41700/project-necromancer-0.1.0.zip";
      sha256 = "01g6ddg1qs4swklhs1cc0lgaxvk2g44zm0ihlxxhmk1m6xw51rii";
      name = "Project-Necromancer-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Provides 'Resurrect Project' action (in 'Tools' menu) which recreates project directories from its configuration files.
      '';
    };
  }) {};

  project-opener = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Project-Opener";
    plugname = "Project Opener";
    plugid = "com.rspn";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11384/93839/project-opener-1.0.3.jar";
      sha256 = "0xcnv9y5iwfmv3x7y897xcmdfnnxs2ic30i42w9ki9h1zal8f225";
      name = "Project-Opener-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/rsperezn/project-opener";
      license = lib.licenses.asl20;
      description = ''
        With a single keyboard shortcut (Ctrl+Shift+O / Cmd+Shift+O) quickly navigate to your projects.
        Type '*' to view all project, or start typing the name of project to search for it.
        
         Your projects root directories are customizable via the Settings menu.
      '';
    };
  }) {};

  project-set-loader = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Project-Set-Loader";
    plugname = "Project Set Loader";
    plugid = "de.bewalt.intellij.plugin.psl";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7217/13143/ProjectSetLoader.jar";
      sha256 = "139vj7z8ajm6f270sbrj5zkh2piw66n98ar6bm3p1ckzp47lzwcw";
      name = "Project-Set-Loader-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bewalt.de";
      license = lib.licenses.asl20;
      description = ''
        This plugin loads the modules referenced in a project set file (PSF) into the current project or updates the modules to the sticky tag given in the project set file.
 The plugin works with project set files from the Eclipse Project Set plugin and only does support CVS. 
To start loading from CVS use &quot;Update modules from project set file&quot; in the context menu of the project set file. 
To do: Automatically launch &quot;Import Modules&quot; wizard.
      '';
    };
  }) {};

  projecttree-color-highlighter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ProjectTree-Color-Highlighter";
    plugname = "ProjectTree Color Highlighter";
    plugid = "dev.pnbarx.idea.treecolor";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13951/105273/treecolor-1.2.0.zip";
      sha256 = "0ljvxyxayks8z6fhlq6ys6a4dgipz930mry0myxr2di80ddrgv68";
      name = "ProjectTree-Color-Highlighter-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pnbarx";
      license = lib.licenses.asl20;
      description = ''
        Highlights your project files and folders in colors.
        
        

        
        
        

        When you are working on a large complex project you may need to highlight
        some of its parts in different colors.
        
        

        Previously, there was only one way to do this:
        create a scope, specify its name and filename pattern, then add a color
        and attach it to the created scope, then click Ok and Apply
        to see how it looks now. If the color doesn't fit, double-click it, select a new color,
        click OK and Apply again to see the changes. If the color
        doesn't fit again - repeat until it fits.
        This is a rather inconvenient way (and takes a lot of time).
        
        

        ProjectTree Color Highlighter was made to get rid of this inconvenience.
        Highlight your files and folders with ease using the context menu. Adjust the colors
        using the color picker, get an instant preview of the project tree and editor tabs
        while adjusting.
        
        

        
        
        

        All settings are persistently stored in the .idea/highlightedFiles.xml,
        so you can read and change it externally, clone or copy-paste to other projects, etc.
        (This allows you to create various project boilerplates with predefined highlighting settings.)
        
        

        
        
        
        

        Enjoy and write a lot of awesome code!
      '';
    };
  }) {};

  promena = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Promena";
    plugname = "Promena";
    plugid = "pl.beone.promena.intellij.plugin.Promena";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13689/76107/promena-1.0.0.zip";
      sha256 = "1br0csb06mxbqfj6vv7gf0jp02gzlxyvipsx0zq4cqm2b25llqf8";
      name = "Promena-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Executes a transformation directly from IntelliJ on Promena. This plugin uses "promena-connector-http" connector module so it's required to include it on Promena.
      '';
    };
  }) {};

  promyze = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Promyze";
    plugname = "Promyze";
    plugid = "com.promyze.promyze_plugin";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15503/105124/promyze_plugin-1.1.0.zip";
      sha256 = "0rmqgma8fdw37fk8spl8zwq49q1grjmjfkdskh3q65wi1h0983k9";
      name = "Promyze-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.promyze.com";
      license = lib.licenses.asl20;
      description = ''
        Promyze, the platform for defining your practices through code review.

Identify practices on your code, discuss them with your team to define together the best practices adapted to your context. Promyze helps teams to improve code quality and maintainability.
If you want to discover Promyze, click here.

The Promyze plugin allows you to find your main information directly in IntelliJ and other JetBrains IDEs.
Requires at least 2017.1 version.

Read plugin documentation for more details here : Documentation

Features :

    Set a practice example
    Create a new practice
    Submit a snippet for session
    Submit a correction to your last negative practice example
    Search and browse your practices
    List all ongoing sessions
    List all ongoing battles


Extension Settings
This extension contributes the following settings:

    Api Key: Your api key generated from your Promyze profile
    SaaS: Use or not the SaaS version of Promyze
    Server Host: Host used for Promyze server if not using SaaS
    Server Port: Port used for Promyze server if not using SaaS
    Secure connection: Use secure connection to Promyze server if not using SaaS
      '';
    };
  }) {};

  properties = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Properties";
    plugname = "Properties";
    plugid = "ignaciotcrespo.github.com.android-gradle-switches";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10718/46131/Properties.zip";
      sha256 = "1kpfmb7ah0q9m69fwlc0fphdjn59qwwi4ivqf7crm74lj82dh5z4";
      name = "Properties-1.1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ignaciotcrespo";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ignaciotcrespo";
        free = false;
      };
      description = ''
        Display all properties in the entire project, searching in ".properties" files and "settings.gradle" file. 
Show also a quick reference of properties useful for android builds
      '';
    };
  }) {};

  properties-file-sorter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Properties-File-Sorter";
    plugname = ".Properties File Sorter";
    plugid = "com.wzportal.idea.tool.propertiesfilesorter";
    version = "1.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12646/64847/PropertiesFileSorter.jar";
      sha256 = "1fbgj6bicv6h7hkr5jml7hqxwvsqi9hbhpr78j48vxxbrp3csrfq";
      name = "Properties-File-Sorter-1.01.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.wzportal.com";
      license = lib.licenses.asl20;
      description = ''
        Sort the key-values with annotation of the properties files
      
      1. install this plugin
      2. open a .properties file
      3. right click in the editor, then editor shows the popup menu
      4. select the last one "Sort"
      5. done, you could press CTRL+Z to recover in case of any problem
      '';
    };
  }) {};

  properties-translation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Properties-Translation";
    plugname = "Properties Translation";
    plugid = "com.bwdvolde.idea.propertiestranslation";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15163/107968/idea-properties-util-0.0.3.zip";
      sha256 = "1rdb9cx3zl8gxwhi8l6bc923l3biba7ny3377351hifhiccdfn2d";
      name = "Properties-Translation-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bwdvolde/idea-properties-translation-plugin";
      license = lib.licenses.mit;
      description = ''
        Plugin for intellij IDEA that adds automated translation functionality to properties files.
      '';
    };
  }) {};

  properties-to-yaml-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Properties-to-YAML-Converter";
    plugname = "Properties to YAML Converter";
    plugid = "io.codearte.props2yaml";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8000/24970/props2yaml-idea-plugin.zip";
      sha256 = "0nr8rs4wj41vhbbg0i7k80nj668b3psfvag78c2cb2fak7wpb4ix";
      name = "Properties-to-YAML-Converter-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.codearte.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Codearte/props2yaml-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Properties to YAML Converter
      '';
    };
  }) {};

  propertiestoclass = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PropertiesToClass";
    plugname = "PropertiesToClass";
    plugid = "com.xiyuan.PropertiesToClass";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9226/30372/PropertiesToClassIdeaPlugin_1.2.jar";
      sha256 = "1zhrxkna0biprnd03f2dgjpnsc5284zm024vqwibga87wqxna4gv";
      name = "PropertiesToClass-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xiyuan-fengyu/PropertiesToClassIdeaPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/xiyuan-fengyu/PropertiesToClassIdeaPlugin";
        free = false;
      };
      description = ''
        A tool to generate a class for a properties file.
 Right click on the *.properties file, then click Generate Class, choose a package, a java file will be generated.
      '';
    };
  }) {};

  property-sorter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Property-Sorter";
    plugname = "Property Sorter";
    plugid = "Property Sorter";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4055/6843/Property_Sorter_6843.zip";
      sha256 = "121ajxhiszdm51viisbvvsqg5yn0kvm71p3hbigf4lpc9g8gs5l4";
      name = "Property-Sorter-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/ideapropertysorterplugin";
      license = lib.licenses.asl20;
      description = ''
        Imagine you work with property files every day. The files are updated on different branches copied up to the trunk
    and merged down to new branches, sometimes even updated externally. I got a couple of times into not so funny merge
    conflicts since people did not sort the property files in the same way. To get around that I used an external tool
    to sort the files just before committing them.
    This plugin sorts the property files inside IDEA.
    Simply open a properties file and choose Code - Sort Properties. It detects if this is a real properties file
    (e.g. all lines do have a # at the start or do follow the pattern key=value) and sorts them. If things go boom
    you always can undo ;-).
      '';
    };
  }) {};

  proto-with-id = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Proto-with-Id";
    plugname = "Proto with Id";
    plugid = "org.intellij.intellij-protobuf-id";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15658/108035/intellij-protobuf-id-1.2.0.zip";
      sha256 = "0vkbyc982czk9kvgfdxh7gfcq4kb39rb2xldnfwl0dcd23v40c96";
      name = "Proto-with-Id-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yidayoung/intellij-protobuf-id";
      license = lib.licenses.asl20;
      description = ''
        support @id tag for proto.
    
    add tag comment "@module_id = 1" at first line of proto file or change proto filename start with number
    then you can add id quick by this plugin
    

    
    if message field name is result, and editor on result, plugin support quick comment for result code,
    you can change template format at Editor-&gt;Live Templates-&gt;proto-&gt;rc
      '';
    };
  }) {};

  protobuf-plus = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ProtoBuf-Plus";
    plugname = "ProtoBuf-Plus";
    plugid = "com.hbmy.bageyang.Protoc-Plus";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13669/75941/ProtoBuf-Plus.jar";
      sha256 = "148bwl8nxx92s2z7g8w7j2v5880b0qzps39w26djzasm2s5nf75i";
      name = "ProtoBuf-Plus-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bageyang/protoBuf-Plus";
      license = lib.licenses.asl20;
      description = ''
        Simple conversion of .proto files to java classes via protocol buffer compiler
      '';
    };
  }) {};

  protocodegen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ProtoCodeGen";
    plugname = "ProtoCodeGen";
    plugid = "org.yuzd.codegen.protocodegen";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14067/82722/protocodegen-1.1.zip";
      sha256 = "1wax7ck1azc3nhlc45k5ypmga71570xv7invfszjbns703gddzys";
      name = "ProtoCodeGen-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yuzd";
      license = lib.licenses.asl20;
      description = ''
        GitHub
      
      This plugin helps you to generate proto3 .
      '';
    };
  }) {};

  protobuf-erlang = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Protobuf-Erlang";
    plugname = "Protobuf Erlang";
    plugid = "org.intellij.intellij-protobuf-erlang";
    version = "1.0-1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15646/106017/intellij-protobuf-erlang-1.0-1.zip";
      sha256 = "0njbj5wdg5sf546qddgpqcimav66lvzx5mikqx3lfr4gj910xm2s";
      name = "Protobuf-Erlang-1.0-1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yidayoung/intellij-protobuf-erlang";
      license = lib.licenses.asl20;
      description = ''
        Support Erlang record fields resolve to proto file
    Need plugin Erlang and Protocol Buffer Editor

    make sure your proto file into path like thismake sure your proto trans to record not maps
    then plugin will support proto record resolve to proto not generated record define
    also field support doc if there has document in proto file
    create issue here here
      '';
    };
  }) {};

  protobuf-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Protobuf-Generator";
    plugname = "Protobuf Generator";
    plugid = "com.protobuf.free.gen.plugin.ProtobufGenerator";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14330/86829/ProtobufGenerator.jar";
      sha256 = "1abggbv3mbvlm9mgn39knvgjpr0p77gjjm5bzzl1g74jxl8g9lf0";
      name = "Protobuf-Generator-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        generate code from .proto files (they must have a .proto extension).

      GenProtobuf adds two right click menu entries "quick gen protobuf here" and "quick gen protobuf rules" to the project
      area and "Configure GenProtobuf" and "Generate all Protobufs" to the tools menu.

      quick gen protobuf here will quickly generate code for selected protobuf files in a single selected langauge
      as configured under "Configure GenProtobuf" in the tools menu placing the output in the same directory as the
      selected protobuf files.

      quick gen protobuf rules will generate code for selected protobuf files according to the rules set with
      "Configure GenProtobuf" in the tools menu and place the output in the configured output location.

      Finally you can use Generate all Protobufs under the tools menu
      and it will apply the rules set in Configure Genprotobuf (again under the tools menu,) to all the protobuf files
      it finds in your project.

      As stated in the descriptions above you can configure this plugin from the Configure GenProtobuf menu that gets
      added to the tools menu. You are able to set what programming language to use for the quick gen options and
      toggle different languages to be generated for protobuf files as well as different directories for the various
      language outputs.

      Whenever you generate code from a .proto file a tool window is created to display the resulting textual output.

      Contact me,WeChat:lchb5288
      '';
    };
  }) {};

  protobuf-highlight = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Protobuf-Highlight";
    plugname = "Protobuf Highlight";
    plugid = "com.jumpnotzerosoftware.protohighlight-jetbrains-plugin";
    version = "0.11.06";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12567/64576/protohighlight-jetbrains-plugin-0.11.06.zip";
      sha256 = "0aid2df405ygzkkz8zy4l3pjxdd14dysnfj0ispv057rdl5hpai0";
      name = "Protobuf-Highlight-0.11.06.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pbirnie/protobuf-highlight-jetbrains-plugin";
      license = lib.licenses.asl20;
      description = ''
        Java code using generated protobuf classes is highlighted within JetBrains products.
        This makes it easier to see when a method or class you are using is actually a protobuf / protobuf stub
        
        Features:
        
            Visually see which methods are part of the autogenerated protobuf stubs ie. Code using generated protobuf classes is highlighted
            Setting panel to specify which package generated protobuf classes can be found in
        
        
        Roadmap
        Issue tracker
      '';
    };
  }) {};

  protocol-buffer-editor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Protocol-Buffer-Editor";
    plugname = "Protocol Buffer Editor";
    plugid = "idea.plugin.protoeditor";
    version = "2.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14004/98151/protobuf-editor.jar";
      sha256 = "1635myhcsgw6pv0y2fif7bgyi9apx2sr3v3llbnqqkyd0rrw5mgy";
      name = "Protocol-Buffer-Editor-2.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jvolkman/intellij-protobuf-editor";
      license = lib.licenses.asl20;
      description = ''
        Editor for Protocol Buffers


Features:

    Support for proto2 and proto3 syntax levels
    Syntax highlighting
    Completion
    Semantic analysis
    References and navigation
    Quick documentation
    Editor enhancements (completion, brace matching, etc.)
    Navigating between protobuf files and some other languages (Java, Go, Python)
    Full support for text format, both standalone and in custom options


See the repository for more info.
      '';
    };
  }) {};

  protocol-buffer-linter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Protocol-Buffer-Linter";
    plugname = "Protocol Buffer Linter";
    plugid = "com.yoheimuta.intellij.plugin.protolint";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12641/93691/intellij-protolint-1.0.0.zip";
      sha256 = "0y20nhlra7iwynwn6bvs78hh9rbf2g3fda817hzbd11gvw48zg2z";
      name = "Protocol-Buffer-Linter-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yoheimuta";
      license = lib.licenses.mit;
      description = ''
        Protolint plugin for all products based on IntelliJ Platform (IntelliJ IDEA, GoLand, RubyMine, WebStorm, PhpStorm, PyCharm, AppCode, etc.)

      

      
      
      The plugin does not require configuration by default, for the majority of projects it should work out of the box.
      
      It is assumed that protolint executable is installed and available in your PATH by default.

      
      
      You can configure the path to the protolint executable and its config through Preferences -&gt; Tools -&gt; Protocol Buffer Linter

      
      
      NOTE: protocol-buffer-editor must be installed.

      
      
      Documentation
      | Issue tracker
      | Protolint releases
      '';
    };
  }) {};

  protostuff-tag-annotator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Protostuff-Tag-Annotator";
    plugname = "Protostuff Tag Annotator";
    plugid = "ProtostuffAnnotator";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11364/52534/protostuff-annotator.jar";
      sha256 = "07f47xmk05glyhvwgfvsgi15xaz6rxk17gpwfz3k0w1gv3bdlah9";
      name = "Protostuff-Tag-Annotator-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DushmanthaBandaranayake/protostuff-annotator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://termsfeed.com/eula/5d6e947f6717fdf9f9a99b10c253288e";
        free = false;
      };
      description = ''
        Add protostuff @Tag annotations to fields.See&nbsp;https://protostuff.github.io/docs/protostuff-runtime/
        How to use
         Code -&gt; generate(CRL+Insert) -&gt; generate Protosfuff Tags
      '';
    };
  }) {};

  pubassist = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PubAssist";
    plugname = "PubAssist";
    plugid = "com.spidev.pubassist";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14412/87730/PubAssist.zip";
      sha256 = "1irdk7nc5wjdnjzl0y8l99bssazv43k7ngaz8w26hsxvkkr243s2";
      name = "PubAssist-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.spidev.codes";
      license = lib.licenses.gpl3Only;
      description = ''
        Add packages to pubspec for Dart and Flutter projects without leaving the comfort of your IDE.
      '';
    };
  }) {};

  puppet = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Puppet";
    plugname = "Puppet";
    plugid = "com.intellij.lang.puppet";
    version = "6.5.0.20140515";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7180/16114/puppet.jar";
      sha256 = "0my8wlg3bian5r2xxqrphc5z6xp1sk5qbyal66dw9hvbbgyjc6bx";
      name = "Puppet-6.5.0.20140515.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Provides Puppet language support. Current features include:
        
          Puppet 3.x, Puppet 4+ and EPP language syntax
          Syntax highlighting and formatting
          Code assistance (completion, navigation, refactoring, etc.) for
            variables, classes, resources, types, facts and functions
          Code inspections
          Dependencies installation
          Quick documentation
          Structure view
      '';
    };
  }) {};

  purescript = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Purescript";
    plugname = "Purescript";
    plugid = "net.kenro.ji.jin.intellij.purescript";
    version = "v0.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9738/108454/purity-intellij-v0.6.0.zip";
      sha256 = "1xh532v4c0vvp34lrv3xd5s99754mwckbmsyxjcihdrpbcqshhri";
      name = "Purescript-v0.6.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/intellij-purescript/intellij-purescript";
      license = lib.licenses.bsd3;
      description = ''
        This plugin provides Purescript language support
      Features:
      
        Syntax highlight
        Language server support:
          Annotations
          Intentions
        
        Find usage of top level declarations
        Find usage of parameters
        Autocomplete of top level declarations
        Autocomplete of parameters
      
      for LSP to work you need to have purescript language server installed in
      the projects node_modules
      '';
    };
  }) {};

  pycharm-cell-mode = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "PyCharm-cell-mode";
    plugname = "PyCharm cell mode";
    plugid = "net.fhtagn.pycharm.cellmode";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7858/60284/PythonCellMode.jar";
      sha256 = "0y29w4mw36fh5igy7aginrcr3js59mrljal9x1s1nb9jffn457xb";
      name = "PyCharm-cell-mode-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/julienr/pycharm-cellmode";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Cell mode execution for PyCharm (provides an action to send code between
      ## marks to the python console.
      '';
    };
  }) {};

  pycrunch---live-testing = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PyCrunch---Live-Testing";
    plugname = "PyCrunch - Live Testing";
    plugid = "com.pycrunch.intellijconnector";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13264/94823/pycrunch-intellij-connector-1.2.zip";
      sha256 = "1z8ra22ql28fsnzkj5h4n7g2hxkq4xs2z5v7m60qqmmj9k5bqd4w";
      name = "PyCrunch---Live-Testing-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://pycrunch.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        PyCrunch is an continuous test runner for Python.
    
    Automatically runs impacted tests on code change
    Shows coverage inline with your code
    See which lines are hit by each tests
    Instant feedback about failing tests and affected lines
    Captures output for each test separately, allowing better diagnostics per test
    Easy navigation between code and tests
    Support for Django



Say hello to the real TDD - no longer need to run your tests manually. Let the engine do this for you.



Live testing - run tests as you type:





Variables Tracing - inspect state of application without debugger:



Documentation about variables tracing





Exact location of test failure:




Detailed coverage per each test:




Output interception:





In order for plugin to work properly:

pip install pycrunch-engine

After pip package is installed in your virtual env, you can start engine from PyCharm top menu:

PyCrunch-&gt;Run/Restart PyCrunch Engine




This test runner is greatly inspired by NCrunch, and applied to Python.



Check documentation before you start.



GitHub page:

https://github.com/gleb-sevruk/pycrunch-engine


Official Site:

https://pycrunch.com
      '';
    };
  }) {};

  pyenv-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PyEnv-Integration";
    plugname = "PyEnv Integration";
    plugid = "com.maxifom.pyenv-integration";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14342/88845/pyenv-integration-0.0.2.zip";
      sha256 = "1mw0li6njwd5qsjyz8my6bhwnv3l209781wdyq3s8vn8klr4nknb";
      name = "PyEnv-Integration-0.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://maxifom.com";
      license = lib.licenses.mit;
      description = ''
        This plugin help integrate PyEnv into IntelliJ IDEA-based IDEs
      '';
    };
  }) {};

  pysynthetic = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PySynthetic";
    plugname = "PySynthetic";
    plugid = "com.wishtack.pysynthetic.intellij";
    version = "0.7.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9879/62225/pysynthetic-intellij-0.7.0.zip";
      sha256 = "0pzk79siy9mhdf2f585ma5k50slshfqycfmxkirqf5m6vkkv6g3k";
      name = "PySynthetic-0.7.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/jhominal/pysynthetic-intellij";
      license = lib.licenses.mit;
      description = ''
        A plugin to provide IDE assistance for members and constructors generated by
      PySynthetic.
      '';
    };
  }) {};

  pyvenv-manage = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "PyVenv-Manage";
    plugname = "PyVenv Manage";
    plugid = "com.github.nokia.pyvenv";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10085/102007/PyVenv.Manage-1.3.0.zip";
      sha256 = "1rdk8c3lxvfh4dbnrgkvd9hqz2mq20b7c9xrga12bpc38ynm40n8";
      name = "PyVenv-Manage-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nokia/PyVenvManage";
      license = lib.licenses.bsd3;
      description = ''
        PyVenvManage is a plugin for managing the Python interpreter of Pycharm Projects.

It is a general issue that Python projects may have several interpreters in different
virtual environments for the various versions of the language. Managing these venvs
is easily done with tox, but configuring the project in Pycharm is painful.

With PyVenvManage the selection and setup of the venv is a few clicks without dialog boxes.

Features

Popup menu item to set the project interpreterIcon provider to indicate virtual environments in the project view
      '';
    };
  }) {};

  pydantic = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pydantic";
    plugname = "Pydantic";
    plugid = "com.koxudaxi.pydantic";
    version = "0.1.19";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12861/107137/pydantic-pycharm-plugin.zip";
      sha256 = "187qxlygdi7wv9d9cxalhcn8rav3nndh8x1v1w809g84yszw8yrz";
      name = "Pydantic-0.1.19.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/koxudaxi/pydantic-pycharm-plugin";
      license = lib.licenses.mit;
      description = ''
        This plugin provides autocompletion support for pydantic
    Help
    See documentation for more details.
    Features

    
        pydantic.BaseModel
            
               Model-specific __init__-signature inspection and autocompletion for subclasses of pydantic.BaseModel
               Model-specific __init__-arguments type-checking for subclasses of pydantic.BaseModel
               Refactor support for renaming fields for subclasses of BaseModel
               (If the field name is refactored from the model definition or __init__ call keyword arguments, PyCharm will present a dialog offering the choice to automatically rename the keyword where it occurs in a model initialization call.
               Search related-fields by class attributes and keyword arguments of __init__. with Ctrl+B and Cmd+B
               Provide an inspection for type-checking which is compatible with pydantic. the inspection supports parsable-type. the detail is at  Inspection for type-checking section
               Insert unfilled arguments with a QuickFix for subclasses of pydantic.BaseModel
            
         
        pydantic.dataclasses.dataclass
            
                Support same features as pydantic.BaseModel
                    (After PyCharm 2020.1 and this plugin version 0.1.0, PyCharm treats pydantic.dataclasses.dataclass as third-party dataclass.
                    Exclude a feature which is inserting unfilled arguments with a QuickFix
      '';
    };
  }) {};

  pylint = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Pylint";
    plugname = "Pylint";
    plugid = "com.leinardi.pycharm.pylint";
    version = "0.12.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11084/84715/pylint-plugin-0.12.2.zip";
      sha256 = "05q20hy0p9wk5cpbj5pdx0i57ygc0ngsnqnw964k2gmaccximrhp";
      name = "Pylint-0.12.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/leinardi/pylint-pycharm";
      license = lib.licenses.asl20;
      description = ''
        This plugin provides both real-time and on-demand scanning of Python files with Pylint from within the PyCharm IDE.
      '';
    };
  }) {};

  python-enhancements = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Python-Enhancements";
    plugname = "Python Enhancements";
    plugid = "com.pythondce";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10194/41756/PythonDCE.zip";
      sha256 = "1a1f6hm6cv0321dj59x4r2lv4axmbf3r964xjpnvfgcmxipnqlam";
      name = "Python-Enhancements-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andreisilviudragnea/PythonDCE";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/andreisilviudragnea/PythonDCE";
        free = false;
      };
      description = ''
        Inspections for detecting potentially dead code and intentions for generating boilerplate code.
      '';
    };
  }) {};

  python-prefix-f-string-intention = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Python-Prefix-f-string-Intention";
    plugname = "Python: Prefix f-string Intention";
    plugid = "cms.rendner.intellij.py-prefix-fstring-plugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14336/94249/py-prefix-fstring-plugin-1.1.zip";
      sha256 = "1yq3lg7sz1jl8jmmqb2v4dh4vkvs24fwhymrr3qir4mjrv71hgaz";
      name = "Python-Prefix-f-string-Intention-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rendner/py-prefix-fstring-plugin";
      license = lib.licenses.mit;
      description = ''
        Provides a "prefix f-string" intention.
    
    The intention prefixes a string literal with f without additional changes.
    The intention has the label Prefix string with 'f' to make it an f-string.
    
    Note:
    PyCharm 2020.2 now auto-enables f-strings when the user adds curly braces within a string statement.
    Source: Twitter - JetBrains PyCharm
      '';
    };
  }) {};

  python-security = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Python-Security";
    plugname = "Python Security";
    plugid = "org.tonybaloney.security.pycharm-security";
    version = "1.23.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13609/106518/pycharm-security-1.23.1.zip";
      sha256 = "1fdjqaj4679jp8clq7y1mxh8rvga8q08f2fiqiwv9gz1c91jsr4q";
      name = "Python-Security-1.23.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tonybaloney/pycharm-security/";
      license = lib.licenses.mit;
      description = ''
        Analyzes potential security flaws in your Python code and suggests fixes. Designed to find common security issues in Python code.
    Reports on installed packages and any known security reports. 

    Also available for your CI/CD as a GitHub Action on the GitHub marketplace.

    Features
    
     Over 40 builtin code checks giving your contextual security warnings in your code
     Misconfiguration warnings for Django and Flask web frameworks
     Cross-Site-Scripting detection for both Jinja2 and Mako templating engines
     SQL Injection detection in all Python string formats
     Automatic reporting of known vulnerabilities and CVEs in your installed Python Packages within PyCharm
     Detection of security flaws and misconfiguration in 3rd party libraries like Jinja2, Paramiko and Mako
     Can be used to scan large code bases with inspection profiles
     Configurable alert levels and warning suppression by file, line, or project
     Scan code in your CI/CD using Docker
      '';
    };
  }) {};

  python-smart-execute = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Python-Smart-Execute";
    plugname = "Python Smart Execute";
    plugid = "python-smart-execute";
    version = "0.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11945/58433/pycharm-smart-execute.jar";
      sha256 = "0v7qaxpv12kfyq9fsfdiq3m8br2xnnkm1hfwmbc54gr4vcqvi26c";
      name = "Python-Smart-Execute-0.1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/pull/711";
      license = lib.licenses.gpl3Only;
      description = ''
        Automatically determines the number of lines to be sent to the Python console. An alternative to “Execute Line in Console”.

        keyboard shortcut: alt shift A.

        A plugin implementation of the following PyCharm pull request.
      '';
    };
  }) {};

  python-custom-import = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Python-custom-import";
    plugname = "Python custom import";
    plugid = "com.orleviad.python-import";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12857/84878/python-import-fixer-2.0.1.zip";
      sha256 = "0vvjnaw68g3nnbinr0x4k741sz49wv4smxim6zl5z77kp16hrwjj";
      name = "Python-custom-import-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.bsd2;
      description = ''
        Plugin that copy import in python interpreter style
      '';
    };
  }) {};

  pyxl-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Pyxl-Support";
    plugname = "Pyxl Support";
    plugid = "com.christofferklang.pyxl";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7509/28991/pycharm-pyxl.jar";
      sha256 = "0li79l53yvn616pknvb5dpbf0v39pa5h798y1gsr5g9r3w3yfhvw";
      name = "Pyxl-Support-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Adds support for 
Pyxl files. 
 Created by Nils Bunger (nils@dropbox.com), Robert Kajic (kajic@dropbox.com) and Christoffer Klang (christoffer@dropbox.com). 
 Please report any bugs or missing features to https://github.com/christoffer/pycharm-pyxl, or email any of the creators. 
 Requires PyCharm or the Python plugin.
      '';
    };
  }) {};

  qa-lithium = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "QA-Lithium";
    plugname = "QA Lithium";
    plugid = "org.strangeway.qa.lithium";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13267/104574/qa-lithium-1.3.0.zip";
      sha256 = "1k8vplynjq02wdh4dxnbakqwdpmpzb760mdd2p9zx6871xncsm0c";
      name = "QA-Lithium-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.strangeway.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://creativecommons.org/licenses/by-nd/4.0/";
        free = false;
      };
      description = ''
        Important: If you use IntelliJ IDEA Ultimate it is recommended to install
    Selenium UI Automation Testing plugin instead.
    
    Basic highlighting of XPath and CSS in UI testing APIs for Java: Selenium, Selenide, Geb, Atlas and webtau.
      '';
    };
  }) {};

  qaplug = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "QAPlug";
    plugname = "QAPlug";
    plugid = "QAPlug";
    version = "1.3.23";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4594/95248/qaplug.zip";
      sha256 = "00hnww3kajzp6cwpp5c2g60vqndmxp2dxp5scyr2vf7av14qw4j0";
      name = "QAPlug-1.3.23.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://qaplug.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://qaplug.com/about/license-agreement/";
        free = false;
      };
      description = ''
        QAPlug is an Intellij IDEA plugin to manage code quality which integrates tools such as PMD, Checkstyle and Findbugs.
      '';
    };
  }) {};

  qaplug---checkstyle = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "QAPlug---Checkstyle";
    plugname = "QAPlug - Checkstyle";
    plugid = "QAPlug - Checkstyle";
    version = "1.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4595/76725/checkstyle.zip";
      sha256 = "147cds2jfg32facdmh2msk2vra4r7hscslnxnzdx0vl6sh7gma52";
      name = "QAPlug---Checkstyle-1.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://qaplug.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://qaplug.com/about/license-agreement/";
        free = false;
      };
      description = ''
        Checkstyle module for QAPlug - an Intellij IDEA plugin to manage code quality which integrates tools such as PMD, Checkstyle and Findbugs.

        Included Checkstyle version: 8.29
      '';
    };
  }) {};

  qaplug---findbugs = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "QAPlug---FindBugs";
    plugname = "QAPlug - FindBugs";
    plugid = "QAPlug - FindBugs";
    version = "1.3.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4597/45264/findbugs.zip";
      sha256 = "02acniyc1hj94mgg6iighmkdrbnmxr3392n56fwqkmjcvqym8r1g";
      name = "QAPlug---FindBugs-1.3.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://qaplug.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://qaplug.com/about/license-agreement/";
        free = false;
      };
      description = ''
        FindBugs module for QAPlug - an Intellij IDEA plugin to manage code quality which integrates tools such as PMD, Checkstyle and Findbugs.
      '';
    };
  }) {};

  qaplug---pmd = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "QAPlug---PMD";
    plugname = "QAPlug - PMD";
    plugid = "QAPlug - PMD";
    version = "1.4.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4596/101002/pmd.zip";
      sha256 = "10dxzwlf7gv2gm7rwr0flh186jkk8fymrnm1d1vc7f0byv6yawsp";
      name = "QAPlug---PMD-1.4.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://qaplug.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://qaplug.com/about/license-agreement/";
        free = false;
      };
      description = ''
        PMD module for QAPlug - an Intellij IDEA plugin to manage code quality which integrates tools such as PMD, Checkstyle and Findbugs.

        Included PMD version: 6.21.0
      '';
    };
  }) {};

  qassist = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "QAssist";
    plugname = "QAssist";
    plugid = "com.qburst.plugins.android";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9487/38939/QAssistAndroidPlugin.jar";
      sha256 = "107g4i30j2ca95v5k7phmy9vb25695q7rgaxvyjalwlfs3naqhn2";
      name = "QAssist-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.qburst.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.qburst.com";
        free = false;
      };
      description = ''
        This plugin is indented to reduce effort of Android application development by generating common code accross various applications. Now we completed retrofit integrator only it can be be used to Integrate Retrofit to your project(for server communications).
      '';
    };
  }) {};

  qml-editor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "QML-Editor";
    plugname = "QML Editor";
    plugid = "quickturnstudio.language.qml.QmlEditor";
    version = "0.9.6-2019.3+";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14434/108264/QmlEditor-0.9.6.jar";
      sha256 = "17538g078nb6m9dmwnymqn1i93fmhbpxkz1n8i10blh7ipnzsz78";
      name = "QML-Editor-0.9.6-2019.3+.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.quickturnstudio.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://quickturnstudio.com/qml-editor-end-user-license-agreement/";
        free = false;
      };
      description = ''
        IMPORTANT:
        Please uninstall or deactivate QML Support plugin before installing QML Editor.
        Plugins conflict can cause problems.
    
    
    
    
        This plugin is a part of 
                                    "Working with Qt in JetBrains Editors"
                                  project.
    
    
        Request feature
         | Report bug
         | Vote for features
    
    
        Description:
    
    
        QML Editor helps to work with QML (Qt Modeling Language). 
        QML Editor 0.9.4 is beta version with 50% discount and fallback licence,
        so if you buy it now you will have access to full version for a bought subscription period.
    
    
        Features:
            
                Syntax highlighting
                Incorrect syntax recognition
                Customizable Code Color Scheme
                Commenting blocks of code
            
    

    
        If you have any ideas or needs to boost your coding experience with Qt,
        please request a plugin or vote for existing idea.
    

    
        Screenshots:
    
    
        
        
        
    

    
        Plugin created by
      '';
    };
  }) {};

  qml-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "QML-support";
    plugname = "QML support";
    plugid = "name.kropp.intellij.qml";
    version = "0.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9532/61412/intellij-qml-0.3.3.zip";
      sha256 = "0ni580010jw7fsrvjxbm4zl5xvdd3nagb3rnl0fz6qz10r5j0scz";
      name = "QML-support-0.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://victor.kropp.name/projects/intellij-qml/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/kropp/intellij-qml/raw/master/LICENSE";
        free = false;
      };
      description = ''
        Support for Qt QML
      '';
    };
  }) {};

  qrcoder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "QRCoder";
    plugname = "QRCoder";
    plugid = "com.idlesign.qrcoder";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11581/54334/qrcoder-1.0.jar";
      sha256 = "1rrxi609alpyalwhbhlh19my7z4pvkvzf4c9753b360hlncsgbdx";
      name = "QRCoder-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/idlesign/qrcoder";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/idlesign/qrcoder/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Creates popups with QR code based on selected text.
    Bind custom keystrokes for "Show QR Code" action in Keymap.
    
    Uses http://goqr.me service.
      '';
    };
  }) {};

  qccrmvpcreator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "QccrMVPCreator";
    plugname = "QccrMVPCreator";
    plugid = "com.qccr.mvp.id";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11079/49377/QccrMVP.zip";
      sha256 = "12mrjaznb2gymx84z9wg65cbrvb5cb9g8cb088hmavx26zvm2s71";
      name = "QccrMVPCreator-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/WelliJohn";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.qccr.com";
        free = false;
      };
      description = ''
        one key create qccr mvp template code
      '';
    };
  }) {};

  qlang = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Qlang";
    plugname = "Qlang";
    plugid = "com.q-ide";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8547/27694/qlang.jar";
      sha256 = "1za3pamssm9dkng3y3d690h143ka5m17di2kqrw59b8lr22v52m7";
      name = "Qlang-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bingohuang/qlang-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/bingohuang/qlang-idea-plugin";
        free = false;
      };
      description = ''
        Language support for Qiniu Qlang language. 
The plugin provides the following features: 
 
 define Qlang and file type 
 
More are planned for the future.
      '';
    };
  }) {};

  qovery = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Qovery";
    plugname = "Qovery";
    plugid = "com.qovery";
    version = "0.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14032/100156/Qovery-0.1.5.zip";
      sha256 = "1dw8405hjsqr9gc3q9v7bvx8drqqsjk2q9zcm5xi9fy7y4vjziiq";
      name = "Qovery-0.1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.qovery.com";
      license = lib.licenses.gpl3Only;
      description = ''
        A plugin to help you easily edit Qovery specification files.

     

     Like this plugin? Give it a star at GitHub and spread the word!
      '';
    };
  }) {};

  qt-style-sheet-highlighter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Qt-Style-Sheet-Highlighter";
    plugname = "Qt Style Sheet Highlighter";
    plugid = "quickturnstudio.sdk.language.qss.QtStyleSheetHighlighter";
    version = "0.1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13963/102922/QtStyleSheetHighlighter-0.1.9.jar";
      sha256 = "0h1w1x2sa3537vkrd8m7hadywg27z8cda38ljxvzr2mny24jp7p8";
      name = "Qt-Style-Sheet-Highlighter-0.1.9.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.quickturnstudio.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://quickturnstudio.com/license-agreement-for-qt-style-sheet-highlighter/";
        free = false;
      };
      description = ''
        This plugin is a part of "Working with Qt in CLion" project.
    
    
        Request feature
         | Report bug
         | Vote for features
    
    
        Description:
    
    

        Qt Style Sheet Highlighter plugin is free to use.
        It improves coding Qt Style Sheet files experience in CLion.
    
    
        Features:
            
                Simple highlighting QSS file keywords and simple values.
                Incorrect syntax recognition
                Finding simple typos
                Customizable Code Color Scheme
            
    

    
        Out of scope:
        
            This plugin does not verify logic of QWidgets
            This plugin does not support code completion.
        

    

    
        If you have any ideas or needs to boost your coding experience with Qt,
        please request a plugin or vote for existing idea.
    

    
        Screenshots:
    
    
        
        
        
    

    
        Plugin created by
      '';
    };
  }) {};

  quarkus-run-configs = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Quarkus-Run-Configs";
    plugname = "Quarkus Run Configs";
    plugid = "io.conceptive.quarkus-intellij-plugin";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14242/103104/QuarkusRunConfigs-1.1.2.zip";
      sha256 = "0xgfkpajr0z1wkzrh7iq2jbayz6al8vz3k2q73nmg9s50qpdaihm";
      name = "Quarkus-Run-Configs-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/conceptivesolutions/quarkus-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        This plugin adds features to JetBrains IntelliJ IDEA to integrate quarkus.io a lot better and make it behave like
    a regular IntelliJ IDEA application. This means that this plugin will execute all necessary build steps automatically
    and attaches a debugger if you want to. Debug your quarkus applications without effort!
      '';
    };
  }) {};

  quarkus-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Quarkus-Tools";
    plugname = "Quarkus Tools";
    plugid = "com.redhat.devtools.intellij.quarkus";
    version = "1.3.0.103";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13234/107763/Quarkus_Tools-1.3.0.103.zip";
      sha256 = "1g5hqp48rfz6scmh36v8k57ajyl4g5s7v01ayn4yay10x63pgkxb";
      name = "Quarkus-Tools-1.3.0.103.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.redhat.com";
      license = lib.licenses.epl20;
      description = ''
        Quarkus Tools for IntelliJ
      A plugin aim at Quarkus based development, providing easy bootstrapping and code assist from Quarkus related assets.
      '';
    };
  }) {};

  quick-file-preview = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Quick-File-Preview";
    plugname = "Quick File Preview";
    plugid = "net.seesharpsoft.intellij.plugins.file-preview";
    version = "1.6.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12778/97202/file-preview-1.6.4.zip";
      sha256 = "1kljpii0c3y6b91pfrmdmxmwhbvny4nryy3i75k1n68b57j0ym7j";
      name = "Quick-File-Preview-1.6.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SeeSharpSoft/intellij-file-preview";
      license = lib.licenses.asl20;
      description = ''
        This plugin enables a quick file preview/open/edit on simple selecting files in Project View - similar to the preview in Sublime or VSCode.
        Features:
        
            show preview (open temporary editor) of selected file (single click or keyboard navigation)
            focus editor of selected file if already opened
            open/close tree nodes on single click
            settings page to individualize preview behavior
            NEW setting to keep collapse/expand state of folders in project view (enabled by default)
        
        
        Please note: If Autoscroll to source/Open files with single click is enabled, the actual editor tab is opened instead of a preview, as it is intended by this option. Therefore, to make use of the preview tab, Autoscroll to source/Open files with single click must be disabled!
        
        
        Feel free to contribute issues, ideas and feedback in GitHub.
        
        Thanks to FineVisuals GmbH for the plugin logo.
      '';
    };
  }) {};

  quick-find = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Quick-Find";
    plugname = "Quick Find";
    plugid = "Quick Find Plugin";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10635/53428/quick-find-plugin.jar";
      sha256 = "17yrr2xafxfv9g7m9w1cn9649fmh0yb1jdp91q33fy0amlngz9x3";
      name = "Quick-Find-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://plugins.jetbrains.com/plugin/10635-quick-find-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/SevaSafris/quick-find-plugin/master/LICENSE.txt";
        free = false;
      };
      description = ''
        A one-keystroke way to navigate to the next/previous occurrence of selected text (just like in Eclipse).
    
    Use Alt+G and Shift+Alt+G (or assign your own shortcuts in the Keymap settings) to navigate to each next and previous occurrence of the selected text.
    
    Ensure that these shortcuts are not mapped to other actions in the Keymap settings.
    
    Source available at http://github.com/sevasafris/quick-find-plugin.
      '';
    };
  }) {};

  quick-notes = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Quick-Notes";
    plugname = "Quick Notes";
    plugid = "Quick Notes";
    version = "3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4456/65758/QuickNotes.jar";
      sha256 = "1r1dic49fr13z1k7rz70a3f0mg2bmy4fmrb63dh60091c1rbnihg";
      name = "Quick-Notes-3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jrana/quicknotes";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jrana/quicknotes/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Quick Notes is a plugin written for IntelliJ IDEA. This plugin adds the ability to manage multiple text notes
    within the IDEA itself. These could be some tips, notes, code snippets, etc that usually comes to mind while
    coding and Quick Notes provides an ideal way to save those thoughts quickly and easily.
    Quick Notes is compatible with multiple opened IDEA instances, so any change made to any note in one instance
    of IDEA gets reflected in the other IDEA instances without any delay.

    Features
    Quick Notes plugin provides many features aimed towards easy maintenance and quick access to the Notes.
    Here are some of the major features of this plugin
    
    Add and Manage multiple notes
    Rename an existing note
    Delete an existing note
    Manage notes across multiple IDEA instances
    Show or hide line numbers
    Ability to change Font of notes
    Ability to search notes
    
    Click here to read/download the manual for this plugin.
    For any bugs or suggestions, please leave a comment on the plugin page at
    https://plugins.jetbrains.com/plugin/4456-quick-notes
    Quick Notes is an open source project hosted at github and you are always welcome to join this project and contribute.
      '';
    };
  }) {};

  quick-patch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Quick-Patch";
    plugname = "Quick Patch";
    plugid = "Quick Patch";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5974/60507/QuickPatch-0.1.1.zip";
      sha256 = "0mb0qcnq3fgs4qb38z2549q3rwfayjm4w8rr4yxn9p98im04bhyy";
      name = "Quick-Patch-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jozic/quick-patch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jozic/quick-patch/blob/master/LICENCE";
        free = false;
      };
      description = ''
        Quick Patch plugin: Save your patches at one click!
        Quick Patch is an IntelliJ IDEA plugin which allows you to save all the change lists you want as patches.
        Idea
        The major use case is you have a project with some "ancient" vcs (like svn) where branching is painful and you have some unfinished work you want to:
        
        share it with someone
        finish it later and/or at some other place (home vs office)
        
        
        So in both cases you need to create a patch of what you have done so far. It's pretty easy to do that in Intellij, but we can do better. Quick Patch will save all your changes at one click or a key stroke (there is one assigned by default, but you can change it).
        
        When you want to continue your hacking, let's say at home, you need to move your patches somehow. Dropbox to the rescue! Quick patch idea works really nice with Dropbox (and friends). You can set up plugin to save you patches into Dropbox directory and you are done! One key stroke and you ready to go, your patches are already waiting for you at home.
        Settings
        To configure the plugin go to Settings -&gt; Tools -&gt; Quick Patch
        
        Save my patches to - select a directory where your patches should be stored. You will get a growl if you try to save patches without directory selected.
        Save Default change list - Mark it if you want to save "Default" changelist. Marked by default.
        Save empty change lists - Mark it if you want to save empty change lists as patch files. Unmarked by default.
        Add project name as prefix - Useful when you work on multiple projects and want to distinguish your patches later.
        Ignore change lists pattern - Type in a valid regex to ignore change lists you don't want to save. If the field is empty or regex isn't valid then this option will be ignored.
        Usage
        When the plugin is installed you get an additional action on IDEA's Changes panel. If you have at least one change list which satisfies your settings the action is enabled and you can click the icon or use associated shortcut to activate it. Voila, your patches are already in the specified folder.
      '';
    };
  }) {};

  quickcompare = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "QuickCompare";
    plugname = "QuickCompare";
    plugid = "com.happysoftware.quickcompare.plugin";
    version = "0.5.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8427/34628/QuickCompare.jar";
      sha256 = "14dvp6ykm7f7k24ylqa07qf5yi9xvdbdznjn2vl7k024wx6247xy";
      name = "QuickCompare-0.5.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nziyouren/QuickComparePlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/nziyouren/QuickComparePlugin";
        free = false;
      };
      description = ''
        Quick compare tool.
      '';
    };
  }) {};

  quickjump = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "QuickJump";
    plugname = "QuickJump";
    plugid = "QuickJump";
    version = "4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6311/11691/QuickJump.jar";
      sha256 = "1fs8685bllnynshvix50430l72k67b818rzd2bqlzm4gji07hyq2";
      name = "QuickJump-4.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/johnlindquist/open-source-plugins";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/johnlindquist/open-source-plugins";
        free = false;
      };
      description = ''
        QuickJump allows you to quickly navigate the cursor to any position visible in the editor. Simply hit &quot;ctrl+;&quot; then start typing. Once options appear, hit Enter or the number key corresponding to the position where you want the cursor to move. 
 ctrl+; Jump Only 
 ctrl+shift+; Jump and Select 
 ctrl+alt+; Jump and Autocomplete 
 
 When Selecting Enter or # 
 ctrl+# New line after 
 ctrl+shift+# New line before 
 alt+# Space after 
 ctrl+alt+# Space Before
      '';
    };
  }) {};

  quickweather = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "QuickWeather";
    plugname = "QuickWeather";
    plugid = "QuickWeather";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7514/22105/quickweather.zip";
      sha256 = "0x0vj514wikg6l3ma8grkgnfv4n79cczalsbdsrz461cq7dwz9jm";
      name = "QuickWeather-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/ideaquickweather";
      license = lib.licenses.asl20;
      description = ''
        Quick Weather plugin displays the current weather condition in IDEA status bar. Clicking on the weather condition displays the weather in detail with five days forecast. Weather data is fetched from Yahoo weather.
      '';
    };
  }) {};

  quoit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Quoit";
    plugname = "Quoit";
    plugid = "com.shenhua.idea.plugin.quoit";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10424/42917/Quoit-idea_v1.0.3.zip";
      sha256 = "0yji8wa54v4icywd61f90f33amsm4zi45m3jvlrk18lllr2x9550";
      name = "Quoit-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shenhuanet.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/shenhuanet/Quoit-idea/master/LICENSE";
        free = false;
      };
      description = ''
        A plug-in that generates a two-dimensional code of a specific text.
      '';
    };
  }) {};

  quokka = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Quokka";
    plugname = "Quokka";
    plugid = "quokka.js";
    version = "1.0.271";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9667/108461/quokka-intellij-v1.0.271.zip";
      sha256 = "11rz1cpry7mv1ij4192q68v8pb3gx7mkzryvan73bihxjd6zgf3d";
      name = "Quokka-1.0.271.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://quokkajs.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wallabyjs/quokka/blob/master/EULA.md";
        free = false;
      };
      description = ''
        Quokka is a rapid prototyping playground in your editor, with access to your project's files, inline reporting, code coverage and rich output formatting.
      '';
    };
  }) {};

  qupla-language = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Qupla-Language";
    plugname = "Qupla Language";
    plugid = "org.qupla.language";
    version = "0.1.14-alpha";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11479/60124/qupla-language-support.jar";
      sha256 = "082zza15zd807bynpfakabzlz717ad42wi45j782r18p41rsn7rm";
      name = "Qupla-Language-0.1.14-alpha.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ben-75/qupla-idea-plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        Support for Qupla language

      Features
      
       Syntax highlighting
       Static resolution of trit vector size
       Resolve references (also cross file references)
       LUT: detection of duplicate entries, detection of inconsistent input(resp. output) length
       Code folding
       Braces matching
       Check args count
       Integration with Qupla interpreter
       ...
      '';
    };
  }) {};

  raml-plugin-for-intellij = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RAML-Plugin-For-IntelliJ";
    plugname = "RAML Plugin For IntelliJ";
    plugid = "org.mule.tooling.intellij.raml";
    version = "0.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8459/37865/raml-plugin-0.13.zip";
      sha256 = "0rhlf1rxya68swwij9rqc84ify5sr1spb8l495c0lcpg6m891mcd";
      name = "RAML-Plugin-For-IntelliJ-0.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/machaval/mule-esb-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/machaval/mule-intellij-plugins";
        free = false;
      };
      description = ''
        RAML Plugin For IntelliJ
      '';
    };
  }) {};

  rbesort = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RBESort";
    plugname = "RBESort";
    plugid = "de.santiv.rbesort";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7585/17530/RBESort_v1.2.jar";
      sha256 = "00i9avkwxlfydm8100qvf5pnhg9pws8swfdcrv4wlbvk5z34ljxf";
      name = "RBESort-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://santiv.de/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://santiv.de/";
        free = false;
      };
      description = ''
        RBESort is a IntelliJ plugin which helps to sort your property files in the same way like the fantastic ResourceBundle Editor by Paul Essiembre for Eclipse (http://essiembre.github.io/eclipse-rbe/) it does. 
This plugin is intended to prevent merge conflicts if IntelliJ and Eclipse are used within the same project.
      '';
    };
  }) {};

  rest-client-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "REST-Client-plugin";
    plugname = "REST Client plugin";
    plugid = "REST Client plugin";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2200/5362/REST_Client_plugin_5362.zip";
      sha256 = "0myq5mb6vnm1snngs3ax3dc0n0k2nym684bgr2ggkm3hpzsxfcvl";
      name = "REST-Client-plugin-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/rest-client";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/rest-client";
        free = false;
      };
      description = ''
        RESTClient is a Java application to test RESTful webservices.
      '';
    };
  }) {};

  restkit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RESTKit";
    plugname = "RESTKit";
    plugid = "io.github.newhoo.restkit";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14723/94130/RESTKit-1.0.1.zip";
      sha256 = "1vxr8mb3a46y0fymra289ysmkvy6yqmylpmi0b2armjlhggi7815";
      name = "RESTKit-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Another RestfulToolkit

  A toolkit for RESTful services development.
  
   1.ONE STEP to navigate to service declaration. ( use: Ctrl + \ or Ctrl + Alt + N ) 
   2.Show RESTful services structure.
   3.A useful http request tool like Postman.
   4.Other functions: Convert to JSON.
 
    support Spring framework (Spring MVC / Spring Boot)
    support JAX-RS
    support Java and Kotlin languages
 
  
  一套 RESTful 服务开发辅助工具集。
  
   1.根据 URL 直接跳转到对应的方法定义 ( Ctrl \ or Ctrl Alt N ); 
   2.提供了一个 Services tree 的显示窗口; 
   3.一个好用的类似Postman的 http 请求工具;
   4.其他功能: java 类上添加 Convert to JSON 功能。

   支持 Spring 体系 (Spring MVC / Spring Boot)
   支持 JAX-RS
   支持 Java 和 Kotlin 语言。
      '';
    };
  }) {};

  restman = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RESTMan";
    plugname = "RESTMan";
    plugid = "com.github.RESTMan";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13466/73960/RESTMan.zip";
      sha256 = "1d5fs8rj1vg6sm7iw4xyzs7k360p500cphv20cpgw20zgmp241cj";
      name = "RESTMan-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BlueDriver/RESTMan";
      license = lib.licenses.mit;
      description = ''
        An IDEA plugin that can be used for testing RESTful Web services.
      Support both JSON and XML request body.
      '';
    };
  }) {};

  ribs = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RIBs";
    plugname = "RIBs";
    plugid = "com.badoo.ribs.intellij-plugin";
    version = "0.3.1-SNAPSHOT-1568815603.957";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12087/68958/rib-intellij-plugin-0.8.0.zip";
      sha256 = "1r9ppdqnacjawgsgb74ij0pjz390vfbpdrhlp993crqhcb2akdjl";
      name = "RIBs-0.3.1-SNAPSHOT-1568815603.957.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/badoo";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/badoo/RIBs/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Badoo RIBs template generator plugin  
      
        Easily create new RIBs.
      '';
    };
  }) {};

  rips-security-analysis = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RIPS-Security-Analysis";
    plugname = "RIPS Security Analysis";
    plugid = "com.ripstech.intellij";
    version = "2.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10447/70974/rips-intellij-2.2.3.jar";
      sha256 = "1lm09pp1jf3byvv7qpd26v7gcdf9k3wf5gjw5k116bix2hp2izw5";
      name = "RIPS-Security-Analysis-2.2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.ripstech.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://files.ripstech.com/eula/eula-v3-onprem.pdf";
        free = false;
      };
      description = ''
        RIPS is a static code analysis software that automatically detects critical security issues in PHP/Java code with data flow analysis. It is available as local installation and as Software as a Service (SaaS) solution. With this plugin, you can start new security scans directly out of your IDE and review detected issues as soon as they are found.
      '';
    };
  }) {};

  rmi-explorer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RMI-Explorer";
    plugname = "RMI Explorer";
    plugid = "RMI Explorer";
    version = "0.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/156/709/RMI_Explorer_709.jar";
      sha256 = "0ig5cnsr3xjm0ggb9zi7y8zkpi7bwjz85jinxk56b6j1a0d7b321";
      name = "RMI-Explorer-0.2.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.it-insourcing.ch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.it-insourcing.ch";
        free = false;
      };
      description = ''
        explores a local or remote RMI registry and executes remote methods
      '';
    };
  }) {};

  ron-extended-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RON-Extended-Support";
    plugname = "RON Extended Support";
    plugid = "com.github.madwareru.intellijronremix";
    version = "0.1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15878/108383/RON_Extended_Support-0.1.7.zip";
      sha256 = "1jdjdbgwdgprqjpf7abi1wdc5jmvf2fin4my1nzf00a2dqq75db1";
      name = "RON-Extended-Support-0.1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/madwareru/intellij-ron-remix";
      license = lib.licenses.mit;
      description = ''
        Plugin adds support for Rusty Object Notation files.

This is initially a fork of intellij-ron.
      '';
    };
  }) {};

  ros-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ROS-Support";
    plugname = "ROS Support";
    plugid = "ros-integrate";
    version = "0.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11235/98714/ros-integrate-0.1.6.zip";
      sha256 = "0gz68d8q20bckncxmd92ba3fg0b7d4h48sy5i48189nphqsxz6h1";
      name = "ROS-Support-0.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Noam-Dori/ros-integrate/";
      license = lib.licenses.asl20;
      description = ''
        Extends IntelliJ-Based IDEs with ROS specific development tools
      '';
    };
  }) {};

  rpm-spec-file = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RPM-SPEC-File";
    plugname = "RPM SPEC File";
    plugid = "com.carbonblack.intellij.rpmspec";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12552/83313/intellij-rpmspec-1.1.1.zip";
      sha256 = "0ghlc8a7qaa4v1s8lssk17mbvv0f2hwjzl55sks0lxgnh0mjjic6";
      name = "RPM-SPEC-File-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.carbonblack.com";
      license = lib.licenses.asl20;
      description = ''
        Plugin for syntax highlighting and basic macro support in RPM SPEC files.
      '';
    };
  }) {};

  rsd-editor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RSD-editor";
    plugname = "RSD editor";
    plugid = "rsdeditor";
    version = "1.09";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12406/104824/rsdeditor.jar";
      sha256 = "1nsahw2nq5pjiy3j5jchfn2c8l4vnia6cc50r1gv197bxmdl0hr1";
      name = "RSD-editor-1.09.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "mailto://wuping1984@gmail.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        RSD and LCF editor, which is used to format the .rsd and .lcf file.
      '';
    };
  }) {};

  rtctasks = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RTCTasks";
    plugname = "RTCTasks";
    plugid = "org.rtctasks";
    version = "2.04";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7865/86586/RTCTasks.zip";
      sha256 = "0c2razxcnfj52chl3pb109mqww8aiysyi8d0gfz6ccsayivfrp8i";
      name = "RTCTasks-2.04.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        RTC task provider, allows searching for tasks in jazz rtc and make them into a change list
      '';
    };
  }) {};

  racket = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Racket";
    plugname = "Racket";
    plugid = "org.racket.lang";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14752/101120/intellij-racket-0.0.6.zip";
      sha256 = "137xn82z7wyk8a4bcgr7gx42s6dfnwrdi805ciqmf4323rag6pjq";
      name = "Racket-0.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aymanosman";
      license = lib.licenses.asl20;
      description = ''
        Provides support for the Racket programming language.

Features:

  Syntax Highlighting
      '';
    };
  }) {};

  radeevharmony-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RadeevHarmony-Color-Scheme";
    plugname = "RadeevHarmony Color Scheme";
    plugid = "color.scheme.RadeevHarmony";
    version = "0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13504/74420/RadeevHarmony.jar";
      sha256 = "07hd2gvxmyzh4bk157rnxjlj0y55cq7ck33yz40891d5sq49nmyv";
      name = "RadeevHarmony-Color-Scheme-0.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://vk.com/alyambr";
      license = lib.licenses.mit;
      description = ''
        Brightful and bold light scheme
      '';
    };
  }) {};

  rails-model-shadow = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Rails-Model-Shadow";
    plugname = "Rails Model Shadow";
    plugid = "kg.akoikelov.intellij.rms";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11490/58101/rm-rails-model-shadow.jar";
      sha256 = "0a63qsirdzy61h1yg4gm8nz7a6ql0b11d4aj3x7yv5qr70nm359d";
      name = "Rails-Model-Shadow-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/akoikelov/rm-rails-model-shadow";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/akoikelov/rm-rails-model-shadow/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Simple RubyMine plugin which helps to see rails model fields list
      '';
    };
  }) {};

  rainbow = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Rainbow";
    plugname = "Rainbow";
    plugid = "zjhmale.rainbow";
    version = "1.8.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8214/42009/rainbow-1.8.8.jar";
      sha256 = "0sarf8msp32bghndl6071vq7w1wzx2k32hgspgcggmwp4ddspf7q";
      name = "Rainbow-1.8.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zjhmale";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zjhmale";
        free = false;
      };
      description = ''
        Rainbow highlighting identifiers and delimiters for IntelliJ IDEA-based IDEs
      '';
    };
  }) {};

  rainbow-brackets = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Rainbow-Brackets";
    plugname = "Rainbow Brackets";
    plugid = "izhangzhihao.rainbow.brackets";
    version = "6.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10080/107152/intellij-rainbow-brackets-6.13.zip";
      sha256 = "1v6vj8vcawamb6l60xn4jrz2m6qlaw1kb47ghgfdy9yzw6iv2x9n";
      name = "Rainbow-Brackets-6.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/izhangzhihao";
      license = lib.licenses.asl20;
      description = ''
        Rainbow Brackets / Rainbow Parentheses for IntelliJ based IDEs
        

        Sponsors
        This plugin is sponsored by Codota and CodeStream

        
            
        
        Code faster and smarter using code completions learned from millions of programs directly in IntelliJ, Android Studio or Eclipse.
        Get Codota
        

        
            
        
        Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from inside your IDE while using jump-to-definition, your keybindings, and other IDE favorites.
        Learn more
        

        Supported languages:
        Java, Scala, Clojure, Kotlin, Python, Haskell, Agda, Rust, JavaScript, TypeScript, Erlang, Go, Groovy, Ruby,
            Elixir, ObjectiveC, PHP, HTML, XML, SQL, Apex language, C#, Dart ...
        
        Author's choice：Rainbow Brackets + Material Theme UI(Oceanic theme) + Nyan Progress Bar + Fira Code(Font)
      '';
    };
  }) {};

  rainbow-csv = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Rainbow-CSV";
    plugname = "Rainbow CSV";
    plugid = "com.andrey4623.rainbowcsv";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12896/89545/RainbowCSV.zip";
      sha256 = "0cskcnz9brpxh6w3161ba7c7cya1cw3j0l2caq19h6la8cgpa5sg";
      name = "Rainbow-CSV-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andrey4623";
      license = lib.licenses.mit;
      description = ''
        Plugin for highlighting CSV files in different colors.
      
      
      
      Features:
      
        Supports comma, semicolon, pipe, tab and colon as a delimiter;
        Supports double quote and backslash as an escape character;
        Supports custom column colors;
        Supports a custom comment line prefix.
      
      
      
      Rainbow CSV settings can be changed in Preferences -&gt; Editor -&gt; General -&gt; Rainbow CSV. 
      Column colors can be changed in Preferences -&gt; Editor -&gt; Color Scheme -&gt; Rainbow CSV.
      '';
    };
  }) {};

  rainbow-fart = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Rainbow-Fart";
    plugname = "Rainbow Fart";
    plugid = "izhangzhihao.rainbow.fart";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14543/98182/intellij-rainbow-fart-1.3.3.zip";
      sha256 = "1g42agsk1km9pqzpd8995d4kv288bm38pmnnm4js1y23ljr4bnfr";
      name = "Rainbow-Fart-1.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/izhangzhihao";
      license = lib.licenses.mit;
      description = ''
        Rainbow Fart for IntelliJ based IDEs
        
        IntelliJ Rainbow Fart is an extension that keeps giving you compliment while you are coding. It will check the keywords in your code to play relative sounds.

        Rainbow Fart is a literal translation word from Chinese, which means giving somebody exaggerated compliment that even seems a little fake. It is not connected to any specific group or individuals.
      '';
    };
  }) {};

  rally-alm-tasks-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Rally-ALM-Tasks-Integration";
    plugname = "Rally ALM Tasks Integration";
    plugid = "Rally ALM Tasks Integration";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7361/14796/rallydev.zip";
      sha256 = "0pvv8h19khjw1d9hf837xw82kxwjwj6sb6rk9xmp0khdgafvxif5";
      name = "Rally-ALM-Tasks-Integration-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/crc83/rallydev";
      license = lib.licenses.mit;
      description = ''
        Rally ALM Tasks Integration
      '';
    };
  }) {};

  random-background = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Random-Background";
    plugname = "Random Background";
    plugid = "io.allandequeiroz.random.image.background";
    version = "2.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9692/91672/random_image_background_any_jetbrains_plugin.jar";
      sha256 = "0h14l0pwlaz62lh7y420446a8c50rh5d9z04k3y65zc7j2ny3cr1";
      name = "Random-Background-2.1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/allandequeiroz";
      license = lib.licenses.mit;
      description = ''
        Give some personal touch to your IDE with background images randomly picked from a directory of your choice.
        
        The usage is quite straight forward, set two parameters, tweak the third one, and you're ready to go. 
        
        

        Overview
        Let's start with a quick explanation about each of the fields
        
        Image folder: The folder containing the images to be used as background.
        Time (seconds): The timeframe that each image will remain visible before being replaced by the next one.
        
        Opacity: The IDE opacity (transparency) over the background image. Darker to the left, lighter to the
            right.
        
        Disabled:
            If you want to disable the background change features without uninstalling the plugin, disable it. If you change
            your mind, enable it again.
        
        

        How it looks like
      '';
    };
  }) {};

  random-password-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Random-Password-Generator";
    plugname = "Random Password Generator";
    plugid = "com.wzportal.idea.tool";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12603/64454/RandomPasswordGenerator.jar";
      sha256 = "1pcpayask7lkgy4mg4zmcivpdak40j8iw5ilbkzvvapirrbmvn2w";
      name = "Random-Password-Generator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.wzportal.com";
      license = lib.licenses.asl20;
      description = ''
        Random Password Generator: 
      1. A - Z
      2. a - z
      3. 0 - 9
      4. !@#''$%&amp;*
      5. Character Number Support Customization
      
      please visit the site www.wzportal.com for more info.
      '';
    };
  }) {};

  randomness = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Randomness";
    plugname = "Randomness";
    plugid = "com.fwdekker.randomness";
    version = "2.7.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9836/106688/intellij-randomness-2.7.0.zip";
      sha256 = "1rmswva763mg04ca26c1wfbcrhi6y2ci1x91g0q2m7mq5akcdms1";
      name = "Randomness-2.7.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://fwdekker.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/FWDekker/intellij-randomness/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Insert random numbers, strings, and UUIDs using an IntelliJ action.

To insert random data, press Alt + R (⌥R) and choose the type of data you want to insert.
A different value will be inserted at each caret.



🕸 Data Types
There are five types of data that can be inserted:

    Integers, such as 7,826,922, in any base from binary to hexatrigesimal.
    Decimals, such as 8,816,573.10, using customisable separators.
    Strings, such as "PaQDQqSBEH", with custom symbol lists.
    Words, such as "Bridge", with custom word lists.
    UUIDs, such as 0caa7b28-fe58-4ba6-a25a-9e5beaaf8f4b, with or without dashes.


In addition to these data types, it's also possible to generate entire arrays of a data type.
For example, an array of integers might look like [978, 881, 118, 286, 288].

⚙ Settings
The way the data is generated can be adjusted to your demands.
You can customise the smallest integer to generate, the quotation marks to surround strings with, the number of elements
to put in an array, the decimal separator to use, the capitalisation of strings and UUIDs, and much more.

👀 Previews
To help you decide what settings to choose, a preview of the data that is generated with your current settings is
shown at the bottom of the settings window.

💨 Shortcuts
Instead of using up all your shortcuts, Randomness only uses the Alt + R (or ⌥R) shortcut by
default.
However, you have the option to assign a unique shortcut to each individual data type and each settings window to
streamline your workflow.

💬 Symbol sets
While Randomness comes with a varied selection of symbols to use for generating strings, it also gives you the option to
add your own symbols, with support for Chinese symbols and emoji.

📚 Dictionaries
Randomness is bundled with a small English dictionary from which it chooses random words.
However, you may want to add random words from another language or insert random movie quotes.
You can create your own dictionaries by creating a text file and putting one option on each line, and saving the
file with the .dic extension.
Empty lines and lines that start with a # are ignored.
      '';
    };
  }) {};

  rest-console = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ReST-Console";
    plugname = "ReST Console";
    plugid = "uk.me.jeffsutton.restconsole";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8114/46298/IntelliReST.zip";
      sha256 = "1frqnpag8skac34x47bxng2b1l1ky3kpdl3yvpyzkx0ixq36ipz1";
      name = "ReST-Console-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/iNdieboyjeff/IntelliReST";
      license = lib.licenses.asl20;
      description = ''
        A simple ReST console for IntelliJ. 
Create and test network calls using OK HTTP. 
Supports import of requests in Charles Proxy XML format, and DHC Json format.
      '';
    };
  }) {};

  resharper-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ReSharper-Keymap";
    plugname = "ReSharper Keymap";
    plugid = "com.intellij.plugins.resharperkeymap";
    version = "202.5103.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13092/87906/ReSharperKeymap.zip";
      sha256 = "1mfhv46ha1hg4agld6nk39f97czxz8nxg60kqdg81rj1zn1p1icd";
      name = "ReSharper-Keymap-202.5103.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        ReSharper keymap for all IntelliJ-based IDEs.
    Use this plugin if ReSharper keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  restructuredtext = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ReStructuredText";
    plugname = "ReStructuredText";
    plugid = "org.jetbrains.plugins.rest";
    version = "134.SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7124/14700/rest.jar";
      sha256 = "10viic4fmnijv909d2mmj6yhlyi4q7y5ni4gh7iy2kasjmr997vf";
      name = "ReStructuredText-134.SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        This plugin enables support for reStructuredText files (*.rst)
      '';
    };
  }) {};

  react-component-creator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "React-Component-Creator";
    plugname = "React Component Creator";
    plugid = "com.faebeee.reactcomponentcreator";
    version = "0.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13965/100463/react-component-creator-plugin.zip";
      sha256 = "0fgy01264cc3bgzlii80yi3v696b2kj9yagyaj1hlpyszy4ppiah";
      name = "React-Component-Creator-0.6.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://fabs.io";
      license = lib.licenses.mit;
      description = ''
        An Brainstorm Plugin to create a new react functional component with all additional files like
SCSS, Spec, Storybook. Add Redux reducer module with actions, mutations, state and types.
Add custom templates to match your coding style and your needs.
      '';
    };
  }) {};

  react-kotlin-live-templates = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "React-Kotlin-Live-Templates";
    plugname = "React Kotlin Live Templates";
    plugid = "com.sidneibjunior.react";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10906/47641/kotlin-react-intellij-plugin-1.1.zip";
      sha256 = "1nxjyzj7f9nvwiiffsvybybzimvqzzkwi3kr4w4f0n3q3730ncp1";
      name = "React-Kotlin-Live-Templates-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sidneibjunior";
      license = lib.licenses.mit;
      description = ''
        Live Templates For Kotlin React wrapper
     Show details in Preferences -&gt; Editor -&gt; Live Templates -&gt; Kotlin React Group.
      '';
    };
  }) {};

  react-native-console = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "React-Native-Console";
    plugname = "React Native Console";
    plugid = "com.github.beansoftapp.reatnative.idea";
    version = "2020.3.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9564/107530/react-native-console_release.jar";
      sha256 = "0q06s8lajzfcl6mi0rns7w8ihggh3dxj1wxxx2qfj2r0b5y0w0m4";
      name = "React-Native-Console-2020.3.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/beansoftapp/react-native-console";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        React Native Console
        an IDEA/WebStorm/Android Studio Plugin for run React Native commands and coding easier
        Notice: this plugin doesn't provide step to step debug function, to do so, please using WebStorm/PhpStorm/GoLand or IntelliJ IDEA Ultimate, see:
        Developing
            mobile apps with React Native in WebStorm.
        FREE or discount provided: this paid version provides the same offer as Jetbrains' Special
            Offers, so For students and teachers, For classroom assistance, For Open Source projects, it's free.
        You can mail me to apply it in case you meet the condition.
        
        Features
        
            Support whole iOS distribution progress just in IDE: edit iOS app version, archive iOS project, export
                to IPA, open Transporter, open App Store Connect, open Xcode and iOS Simulator
            
            Auto complete package names in package.json
            Auto completion image name and preview icon, insert with relative path when typing in require('path'),
                no more to remember where the picture folder name is. (Req running with *Storm, IDEA Ultimate)
            
            Display usages inlay editor hints for JSX language, can be closed in Inlay Hints Settings(Req running
                under *Storm, IDEA Ultimate)
            
            Single click in js file to open imported package's homepage or source code(Req running with WebStorm,
                IDEA Ultimate)
            
            Single click in package.json file to open dependency package's homepage in web browser
            Debug Android devices over wifi with just one click
            Display colorful terminal output
            Start Xcode, Android Studio with one click
            New React Native/Expo project on *Storm, Android Studio
            open current Android activity source code in project
            run React Native Debugger https://github.com/jhen0409/react-native-debugger(Mac Only)
            Ctrl + F2 to reload android js bundle
            list and run scripts in package.json
            react-native run-android
            list and run android emulator(avd)
            list all connected android devices(includes simulator and physical) and run as target
            react-native link
            react-native run-ios
            run CocoPods commands: pod install, pod update
            run on physical iOS device
            list all iOS devices(includes simulator and physical) and run as target
            npm run start
            npm install
            Open dev menu on Android device(adb shell input keyevent 82)
            forward android device request to dev machine(adb reverse tcp:8081 tcp:8081)
            Android Reloading JavaScript
            open React Native debugger ui(Chrome browser required)
            react-native log-android
            react-native log-ios
            gradlew assembleRelease
            react-native bundle --platform android/ios --dev false
            yarn
            jest
            react-native uninstall
            react-native start
            gradlew clean
            react-native react-native-git-upgrade
            yarn add project, dev, global dependencies
            npm add project, dev, global dependencies
            auto install and run react-devtools
            Last Edit Location(main toolbar)
            Reveal file in Finder/Explorer(main toolbar)
            Reveal project folder in Finder/Explorer
            Specify js project work directory, eg ./jsapp, from welcome screen or toolbar (optional, see
                https://github.com/beansoftapp/react-native-console for more info)
            
            Modify Metro Bundler port(need React Native 0.56+)
            
                Auto detect React Native package.json or build.gradle in current folder and parent/children folder(eg
                only
                coding Java in Android Studio),
                thus the command will auto execute in the correct folder
            
            
                Remove Source Code Comments(for Java IDE only) - if your IDEA can parse the code, such as .js, .java,
                .xml, right click on code editor to use it
            
        

        Contributors
        
            dmportenko@gmail.com
        
        Installation
        
            First, please setup your React Native dev env:
            
                https://reactnative.dev/docs/environment-setup,
            Then install this plugin to your IDE, then you will find a React Native tab on your bottom dock bar.
        

        ISSUES
        
            Suggestions or Bugs
      '';
    };
  }) {};

  react-snippets = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "React-snippets";
    plugname = "React snippets";
    plugid = "com.jinsihou.react.snippets";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10113/61244/ReactSnippets.jar";
      sha256 = "19rdql9hdinchnjz0snnb33nz5hf3wwc4wdnin31xrpc95gcacz5";
      name = "React-snippets-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jinsihou19/ReactSnippets";
      license = lib.licenses.mit;
      description = ''
        Live Templates For React
      Show details in Preferences -&gt; Editor -&gt; Live Templates -&gt; React Group.
      '';
    };
  }) {};

  readhub = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ReadHub";
    plugname = "ReadHub";
    plugid = "com.madfish.ide.readhub";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10539/77356/Readhub-1.2.0.zip";
      sha256 = "0xxf93j4nmhv4r37cwxgmb8cr4pxkb5vyasmlx9h0bmd4ik1y5mr";
      name = "ReadHub-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yaohui-wyh";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/yaohui-wyh/Readhub/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Readhub IDE 插件 - 每天高效浏览行业资讯
      Readhub is a News Reader application mainly for Chinese articles
      
          在 IDE 中快捷查阅科技动态、招聘信息等资讯，有效利用日常工作碎片时间
          更多介绍，请访问：GitHub | Issues | Readhub
      '';
    };
  }) {};

  realigner = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Realigner";
    plugname = "Realigner";
    plugid = "Realigner";
    version = "1.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7082/49935/realigner.jar";
      sha256 = "1pvjpy2s0589idzb5r8y82m7z4mx9jfh7fs3jhwp76qi9115056w";
      name = "Realigner-1.6.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kstenschke/realigner-plugin";
      license = lib.licenses.asl20;
      description = ''
        The Realigner plugin adds three tools for reformatting code:
    Join (Ctrl+Shift+Alt+J) - Removes newlines from selected lines, optionally joining them using a "glue" string.
        Split (Ctrl+Shift+Alt+L)- Replaces arbitrary strings with newlines.*
        Wrap / Unwrap (Ctrl+Shift+Alt+W) - Adds or removes a prefix- and postfix- string to a selection, the current line or each of multiple selected lines. Frequently used wraps can be stored as quick-wrap buttons, hint: quick-wrap buttons can be selected via cursor up/down keys as well.
    
    Mac Users: On Macs, the keyboard shortcuts are J, L or W together with Shift+Alt+Cmd
    *Splitting with an empty delimiter and w/o selection inserts a newline at the soft-wrap boundary.
    
    Realigner is helpful e.g. for:
    Reformatting lines into comma-separated lists
        Converting lists into lines
        Breaking up long URLs for easier analysis
        Quickly commenting-out multiple lines of code even if that particular language is not supported
        Quickly un-commenting lines of code even if that particular language is not supported
        Commenting-out / un-commenting using keyboards with layouts not compliant to the keyboard shortcuts for the similar in-built function
        Reformatting long lines to wrap at the soft-wrap boundary (120 chars)
    
    Please note: This plugin is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      '';
    };
  }) {};

  rearranger = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Rearranger";
    plugname = "Rearranger";
    plugid = "Rearranger";
    version = "5.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/173/10217/Rearranger_10217.jar";
      sha256 = "162fcf5rmlqmrmxm7vrp6dpk8320pnang41vcr1c90ld2h5844hj";
      name = "Rearranger-5.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DaveKriewall/Rearranger";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/DaveKriewall/Rearranger";
        free = false;
      };
      description = ''
        Rearranges (reorders) class and class member declarations according to a user-specified order and/or method call hierarchy;
 generates section-marking comments;
 provides several controls for spacing within and between methods and classes; and
 permits the user to manually rearrange items.
      '';
    };
  }) {};

  reasonml = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ReasonML";
    plugname = "ReasonML";
    plugid = "reasonml";
    version = "0.96-2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9440/107225/idea-plugin-0.96-2020.3.zip";
      sha256 = "19pmry7xn7d7y91aykflbzkj8aww71xl9xdhayg6c19m9h5c16g9";
      name = "ReasonML-0.96-2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/giraud/reasonml-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/giraud/reasonml-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Add support for ReasonML language. Also add support for OCaml and Dune.
      '';
    };
  }) {};

  recent-projects-extender = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Recent-Projects-Extender";
    plugname = "Recent Projects Extender";
    plugid = "com.steve.plugins.recentprojects";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7684/18622/recentprojects-plugin.jar";
      sha256 = "1jg7nwmjmn5rv8nqwhda36h0m3lkjhdc4l58izwj1z4i7wwsy86x";
      name = "Recent-Projects-Extender-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Extends the size of your &quot;Reopen Recent Projects&quot; list (alt-R) to 50.
 
 In IntelliJ you can do this via ctrl+shift+A, type &quot;Registry&quot;, hit enter and modify &quot;ide.max.recent.projects&quot;.
 
 This plugin is made for IDE's where the &quot;Registry&quot; action is not available (e.g. Android Studio)
 
 
If you find this plugin useful, please consider leaving a Star-rating and comment :)
      '';
    };
  }) {};

  record2gsetter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Record2GSetter";
    plugname = "Record2GSetter";
    plugid = "com.supermuscleman.record2gstter";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11607/77541/record2GStter.jar";
      sha256 = "13zzs554sy2wzp0l9qfqknqnfml2rx66fsgaxv82zvq0mf7qh61z";
      name = "Record2GSetter-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SuperMuscleMan";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.gnu.org/licenses/";
        free = false;
      };
      description = ''
        This is a small tool,Generating Getter and Setter code from Erlang records,Similar to Java,Only Erlang currently supported. 

      I made this little tool because of my laziness. 
      There may be defects, please contact me by email.
      Guide:
      1.For success, make sure the record declaration is typed in your code.
      2.Inside your IntelliJ IDEA,select the menu bar -&gt; Code -&gt; record2GStter;  Click on it.
      &nbsp;&nbsp;Or press the shortcut key,(Ctrl + Shift + Alt + 0).
      3.Check the last GetterSetter generated by code.
      '';
    };
  }) {};

  recordcompletion = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RecordCompletion";
    plugname = "RecordCompletion";
    plugid = "io.github.QCute.RecordCompletion";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12771/95357/RecordCompletion.jar";
      sha256 = "1fwcaymdi1kszk6kd3556f4q5c8p1nlzalbq4rp70q3ibyw2fly0";
      name = "RecordCompletion-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/QCute/RecordCompletion";
      license = lib.licenses.gpl3Only;
      description = ''
        Complete record field code, See Edit menu or use Shift + Alt + P.
      Complete record name code, See Edit menu or use Shift + Alt + O.
      Complete record bind code, See Edit menu or use Shift + Alt + K.
      '';
    };
  }) {};

  redpen-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RedPen-Plugin";
    plugname = "RedPen Plugin";
    plugid = "cc.redpen.intellij";
    version = "1.8.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8210/47229/redpen-intellij-plugin-1.8.2.zip";
      sha256 = "1abj11v187m7zrq7yxk7k8rlqzdx9c2605zv5kpnpk4p8c2q4ndv";
      name = "RedPen-Plugin-1.8.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://redpen.cc";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/redpen-cc/redpen-intellij-plugin/master/LICENSE.txt";
        free = false;
      };
      description = ''
        RedPen is a proofreading tool to help writers or programmers who write technical documents or manuals that need to adhere to a writing standard.
      The plugin validates text files with RedPen by adding a 'RedPen' inspection, which is enabled by default after installation.
      Some errors can be fixed via quick fixes (Alt + Enter)
      Language and variant are autodetected per file, however you can manually override them in IDEA status bar.
      RedPen settings can be configured and imported/exported using native RedPen config format. All settings are stored per project.
      Custom RedPen dictionaries can be put to .idea/redpen directory and JavaScriptValidator scripts can be put to .idea/redpen/js.

      The following file types are supported (provided you have necessary plugins installed):
      
        Plain text
        Properties
        Markdown
        AsciiDoc
        Re:VIEW
        LaTeX
        reStructuredText
      

      Please report any issues on GitHub.
      '';
    };
  }) {};

  redis = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Redis";
    plugname = "Redis";
    plugid = "com.bruce.intellijplugin.RedisPlugin";
    version = "2021.01.01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12820/106974/RedisNew-2021.01.01.zip";
      sha256 = "0m5c562iql247c12cz10rwilsrrp8asdrhf5v4vhkyzskshi7474";
      name = "Redis-2021.01.01.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/gejun123456/redispluginIssues/blob/master/pics/license.md";
        free = false;
      };
      description = ''
        The plugin is forked from https://github.com/dboissier/nosql4idea mainly focus on support for redis
            Support redis cluster
            Support add key value and delete key value
            Support millions of keys without freeze ui
            Rename key
            Add value to list,set,zset,hash
            Remove value from list,set,zset,hash
            Json value view
            TTL support
            SSH and SSL support
            Compatibility for Community version
            Redis cli support
            Clone key
            
            GitHub
            qq group:674948973
      '';
    };
  }) {};

  redis-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Redis-Manager";
    plugname = "Redis Manager";
    plugid = "com.hjf.redis.manager.redis-manager";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15722/108572/redis-manager-1.1.1.zip";
      sha256 = "0rwv66446zh0nq1v9yhkp4wqykl0nm4x539rlz0hizmad0vc7xqa";
      name = "Redis-Manager-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hongjinfeng";
      license = lib.licenses.asl20;
      description = ''
        Redis Manager
        
        1.Support string,list,set,zset and hash data structure manager.
        2.Support redis console.
        3.Redis console support command hint.
        4.Clone key to another redis server.
        5.Total free and maybe will open source.
        6.Batter ui than other redis plugin.
        6.I18n support.Support English,Chinese.
        
        
        If you have any advice,or you want any features,please contact me.
        email: 2544324090@qq.com
        wechat: hjffjr
      '';
    };
  }) {};

  redoc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Redoc";
    plugname = "Redoc";
    plugid = "com.phpinnacle.redoc";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12822/67275/redoc-0.3.zip";
      sha256 = "0r6j4wpfpggd0qcz6snpc7dwfwkj7f09r32bx9z7q5f0lyarmqg5";
      name = "Redoc-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.phpinnacle.com";
      license = lib.licenses.mit;
      description = ''
        OpenAPI 3.0 (Swagger) documentation render via Redoc JS library

        Features:

        
        OpenAPI 3.0 and Swagger 2.0 specifications
        Specifications in YAML or JSON
        Redoc settings supported
      '';
    };
  }) {};

  redsoft-yapi-upload = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Redsoft-YApi-Upload";
    plugname = "Redsoft YApi Upload";
    plugid = "RedsoftYapiUpload";
    version = "2.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12733/96708/redsoft-yapi-upload-2.0.5.jar";
      sha256 = "0g7d3g4gd0y7n9xhw9pq8ffpkd0khiab81ii20wh0wggbhcaby8f";
      name = "Redsoft-YApi-Upload-2.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.qdredsoft.com";
      license = lib.licenses.asl20;
      description = ''
        a small plugin for IntelliJ IDEA uploading http api information to YApi.(Base on YApiIdeaUploadPlugin)
      less inputing
      Avoid duplication of work,Reducing Development Pressure,improve work efficiency.Code annotations are also standardized
      github: RedsoftYApiUpload
      for help to see guide
      
      
      一个快速上传HTTP接口文档到YApi的IntelliJ IDEA小插件（基于YApiIdeaUploadPlugin）重构
      减少开发人员接口信息的重复录入
      避免重复的工作，减轻开发压力，提高工作效率！同时还规范了代码注释
      github地址: RedsoftYApiUpload
      使用方法见使用指南
      '';
    };
  }) {};

  reece-stash-bamboo-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Reece-Stash-Bamboo-Tools";
    plugname = "Reece Stash Bamboo Tools";
    plugid = "au.com.reece.intellij.plugin.BambooMenu";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10826/46797/bamboo-build-lookup.jar";
      sha256 = "1qc9s7sv1g0gy417by602f37l4cpynaswgnqhbi4rnhwilj9wjhy";
      name = "Reece-Stash-Bamboo-Tools-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.reece.com.au";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.reece.com.au";
        free = false;
      };
      description = ''
        Lookup a bamboo build plan on local server
      '';
    };
  }) {};

  reedelk-intellij-flow-designer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Reedelk-IntelliJ-flow-designer";
    plugname = "Reedelk IntelliJ flow designer";
    plugid = "com.reedelk.plugin";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13420/104971/reedelk-intellij-plugin-1.0.9.zip";
      sha256 = "1h1y8di4h4imd3qv1hnnk5ypr1nhdylgcqfwxs45h56vri6jq6q9";
      name = "Reedelk-IntelliJ-flow-designer-1.0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.reedelk.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.reedelk.com/license/eula";
        free = false;
      };
      description = ''
        Reedelk Integration Platform IntelliJ flow designer
      '';
    };
  }) {};

  refactor-popup = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Refactor-Popup";
    plugname = "Refactor Popup";
    plugid = "Refactor Popup";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/73/85190/Refactor_Popup.jar";
      sha256 = "146sp8j9j66fs5b0afy437264cckawrfgqdakv6da5cdwddk8ygd";
      name = "Refactor-Popup-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/javaerb/RefactorPopup/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/javaerb/RefactorPopup/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Mouse shortcut pops up refactor menu as context menu.
 Action found under the "Plug-ins" category on Keymap.
 By default mapped to Ctrl+Button3 (works best on Windows), but you can remap.
      '';
    };
  }) {};

  referencer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Referencer";
    plugname = "Referencer";
    plugid = "Referencer";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7104/35658/referencer.jar";
      sha256 = "06yl9a0zc5v6vf9s0rjn6zdy21wvjswz6aplpjwwxbf317pszvjx";
      name = "Referencer-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kstenschke/referencer-plugin";
      license = lib.licenses.asl20;
      description = ''
        The plugin adds three new tools for inserting, copying and navigating among references out of the edited file(s) and other contexts. To copy and insert items, a list suggestions is added to the editor, taken from various contexts: 
 
 File(s) 
 Text selection 
 Caret position in the editor 
 Date and time 
 And more.... 
 
 When evoking the referencer plugin, a list of reference items taken from the current contexts is opened. 
 KEYBOARD SHORTCUTS 
 
 
 Ctrl+Shift+Alt+V twice - Open list of references for inserting into the current document 
 Ctrl+Shift+Alt+C twice - Open list of references for copying to clipboard 
 Ctrl+Shift+Alt+G twice - Open list of jump destinations in current file for going to 
 
 TYPES OF REFERENCES TO INSERT/COPY 
 All parsed items in the following list are relative to the current caret position, for example "previous classname" refers to the first classname found when searching backwards starting from the caret position. Some references are only specifically available for certain file types.
 
 
 
 Current date/time formatted as YYYY-MM-DD and YYYY-MM-DD HH:MM:SS 
 Current UNIX timestamp in seconds and milliseconds 

 
 Path to current file 
 Current filename 
 Current filename::line number 
 Path to current file::line number 
 When having a multi-line selection: File path / selection: line num. sel. start - line num. sel. end 
 When having opened more than one file: list of paths to all opened files 

 
 PHP files: list of method names in current file 
 PHP files: previous classname::previous method name 
 PHP files: previous classname::line number 
 PHP files: previous classname 
 PHP files: previous function name 
 PHP files: previous/next variable name 

 
 JavaScript files: namespace.classname 
 JavaScript files: namespace.classname.previous method name 
 JavaScript files: namespace.classname::line number 
 JavaScript files: previous/next method name 
 JavaScript files: filepath formatted as namespace 

 
 General word-completions: all continuations to the word to the left of the caret, found in the current file 
 
 TYPES OF REFERENCES TO GO TO 
 
 
 All lines with bookmarks in the current file 
 All lines with PHP or JavaScript method declarations in the current file 
 All lines with occurrences of any of the configured dynamic jump patterns in the current file 
 
 Please note: This plugin is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      '';
    };
  }) {};

  reformatme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ReformatMe";
    plugname = "ReformatMe";
    plugid = "pl.dmazuruk.reformat-plugin";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10586/108339/reformat-me-1.0.1.jar";
      sha256 = "10wxg7ljyd44vpi1jxq9nb6lhfbbzi2i9k6a02fvnh48zzch575i";
      name = "ReformatMe-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dmazuruk/";
      license = lib.licenses.asl20;
      description = ''
        ReformatMe plugin allows to reformat selected text using the code style associated with the selected language.
    Usage: Code | Reformat Selection...
      '';
    };
  }) {};

  regex-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Regex-Tool";
    plugname = "Regex Tool";
    plugid = "com.obroom.plugin.regextool";
    version = "2021.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15433/107919/regex-tool.jar";
      sha256 = "14h3wr4hhpxgnpvskdfyzpsbbykhfrd982b20wd5cmaqgvzq5vxi";
      name = "Regex-Tool-2021.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/organization/abc";
      license = lib.licenses.gpl3Only;
      description = ''
        Regular Expression Tester for IntelliJ-based IDEs.
Tester Tab: Dynamically test regular expressions.
Extract Tab: Extract from the original text and assemble the results you want.
Replace Tab: Custom add right-click regex replace menu.
Help Tab: Summary of regular-expression constructs.


Recommended plugin: ★Toolset★
A plugin for the IntelliJ-based IDEs, Which can help coding and contains various tools to improve development efficiency.


  ★Plugins★ |
  Manual |
  Issues |
  Email
      '';
    };
  }) {};

  regexptester = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RegexpTester";
    plugname = "RegexpTester";
    plugid = "org.intellij.RegexpTester";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2917/89049/regexTester-1.0.8.jar";
      sha256 = "1wxy3ahgchxy14vq9mz551kcz6v4m4is3mdnji6m3z02868x6c06";
      name = "RegexpTester-1.0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://myregexp.com/ideaPlugin.html";
      license = lib.licenses.asl20;
      description = ''
        Regular Expression Tester for IntelliJ IDEA.
    Allows you to experiment with Java regular expressions in a dynamic environment.
            
    
        Full highlighting of regular expression syntax for an easy visual clue (including bracket matching and error detecting)
        Tooltips with context help will be shown when the mouse is over a part of the regex.
        Synchronized selection of regular expression and text:
        Just select part of the regexp to see which part of the text is matched by this part.
    

    Functionality of this plugin is available as java-applet at http://myregexp.com/applet.html
      '';
    };
  }) {};

  regularjs-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Regularjs-Support";
    plugname = "Regularjs Support";
    plugid = "com.netease.regular";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9391/32450/RegularPlugin.jar";
      sha256 = "008g96b4dwy0gcbzdbf757ynz2fq6pbfy28mb665gysj5lsqw75d";
      name = "Regularjs-Support-0.3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AbnerZheng/RegularPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/AbnerZheng/RegularPlugin";
        free = false;
      };
      description = ''
        Regularjs support. 
Thanks for GoJet plugin, it help this project a lot.
      '';
    };
  }) {};

  relentless-colors-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Relentless-Colors-Color-Scheme";
    plugname = "Relentless-Colors Color Scheme";
    plugid = "color.scheme.Relentless-Colors";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14347/96113/Relentless-Colors.jar";
      sha256 = "1zxmydliwgw6gq835f7v9g71rqm4f16bfs2b8l0raszzw32i99g4";
      name = "Relentless-Colors-Color-Scheme-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DAmNRelentless";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/DAmNRelentless/idea-relentless-colors/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        I like my editor colorful. There's nothing better than vibrant colors!
      '';
    };
  }) {};

  remote-debug = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Remote-Debug";
    plugname = "Remote Debug";
    plugid = "me.vukas.remote-debug";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10993/48505/remote-debug.jar";
      sha256 = "0jn9pzbp7s7jgzvvzvgi2p9gkiqzai46r4vfs8w0jrn1b4l8r5wn";
      name = "Remote-Debug-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.vukas.me";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.vukas.me";
        free = false;
      };
      description = ''
        Allows remote debug of java code inside docker images or remote linux server.
      Nice if you want to do development on windows and debug and run code in linux server.
      
      In order to use this plugin, you will need my prepared docker image on dockerhub "bojanv55/rds". 
      This image has server that communicated with plugin and executes your local code in docker.

      For more info, tutorial is at https://bojanv55.wordpress.com/
      '';
    };
  }) {};

  remote-groovy-console = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Remote-Groovy-Console";
    plugname = "Remote Groovy Console";
    plugid = "Remote Groovy Console";
    version = "0.1.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5373/9677/Remote_Groovy_Console_9677.zip";
      sha256 = "081ak092vmiw402libamp58ym6dzm7airynphpdabcba9lrrkvbv";
      name = "Remote-Groovy-Console-0.1.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.devcake.org/Projects/idea-remoteGroovyConsole";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows to run Groovy Console attached to Remote Console Sever. So that you can easily integrate Remote Console Server into your application, and execute any script remotely in your application on-the-fly, while having all IDEA's goodies - syntax highlighting, refactoring, code completion and so on. The plugins also is able to run Remote Console Server in IDEA JVM, and run any groovy script in IDEA on-the-fly. This feature makes the plugin extremely useful fot IDEA plugins developers.
      '';
    };
  }) {};

  remote-call = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Remote-call";
    plugname = "Remote call";
    plugid = "Remote call";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6027/72309/RemoteCall.jar";
      sha256 = "0i1l83a4pp0isbwswyzcqcl0wd6ygpyzdl6gmzwli2bhcpv22xi6";
      name = "Remote-call-1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://farpost.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        IntelliJ IDEA plugin for remote call some procedures.

    At the moment it can open the files on http GET-request to localhost:8091 with "message" parameter looking like
    "FileName.java:89" or "any/path/FileName.java:89".
    In this case plugin will try to find the most appropriate file basing on the specified path in opened projects and
    navigate to it.

    By default sending requests is permitted from localhost only. You can change it in Settings | Remote Call.

    Listening port also can be configured in Settings.
      '';
    };
  }) {};

  remotesynchronizer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RemoteSynchronizer";
    plugname = "RemoteSynchronizer";
    plugid = "RemoteSynchronizer";
    version = "1.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/20/32174/idea-plugin-remotesynchronizer.jar";
      sha256 = "0q56i4paphdb5kc2s5254cj6chy92gfc01yy197459iqcxihbjbn";
      name = "RemoteSynchronizer-1.12.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/syllant/idea-plugin-remotesynchronizer";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/syllant/idea-plugin-remotesynchronizer";
        free = false;
      };
      description = ''
        RemoteSynchronizer plugin allows you to synchronize files with remote locations. Instead of manually copying files from your project to other locations using external tools (command line, file explorer, etc.), RemoteSynchronizer launches copies from your IDE, relying on mappings defined for your project. It can also delete obsolete files on remote locations.
      '';
    };
  }) {};

  remotetail = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RemoteTail";
    plugname = "RemoteTail";
    plugid = "RemoteTail";
    version = "0.3.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1119/2604/RemoteTail_2604.zip";
      sha256 = "08y6h13n77kk401jdps1q80dqxsydwg33lrzxwshqh8bsf8rzd4j";
      name = "RemoteTail-0.3.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1119/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1119/sourceCode.zip";
        free = false;
      };
      description = ''
        The plugin allows the user to view the content of a file which could be on a different computer.
            The file's content is presented to the user in a console as the file grows.
            In this way the user can monitor a log file in a test or production environment,
            and if the project's sources are synchronized with the deployed application the user can navigate
            classes by clicking the stack traces in the console.
            The user can configure alarms for the console so he is warned when a new info/warning/error is added and
            he doesn't need to keep an eye on the console.
            Initially the plugin supports SSH but it is developed in a way that it can be easily extended to support
            other protocols, like Telnet.
      '';
    };
  }) {};

  remove-butterknife = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Remove-ButterKnife";
    plugname = "Remove ButterKnife";
    plugid = "com.dengzii.plugin.rbk";
    version = "1.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15665/106512/RemoveButterKnife.jar";
      sha256 = "033f4f0b3vsv6hqjrp2c2gnqzm70al4vgiqn8lgvavbkdiqrhggs";
      name = "Remove-ButterKnife-1.2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dengzii/RemoveButterKnife";
      license = lib.licenses.asl20;
      description = ''
        Remove ButterKnife
        
        Remove ButterKnife binding annotations, generate `bindView` method and `findViewById` instead.
        
        
        Usage
        1. In Code Editor &gt; Right Mouse button &gt; Refactor &gt; Remove ButterKnife 
        2. In Project View &gt; Right Mouse Button &gt; Remove ButterKnife in Directory 
        
        Source Code
        
        Feedback or Bug Report
      '';
    };
  }) {};

  remove-databinding = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Remove-DataBinding";
    plugname = "Remove DataBinding";
    plugid = "me.texy.databindinghunter";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11496/53731/RemoveDatabinding.jar";
      sha256 = "1lhvipikpd7bp5d4kq5n40k82kndx27fkpb4bid4r0igrc436laz";
      name = "Remove-DataBinding-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shineM";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        A plugin to help removing databinding from your Android Project.
      How to use: Click 「Code」 -&gt; Click 「Remove DataBinding」
      '';
    };
  }) {};

  remove-recursion-inspection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Remove-Recursion-Inspection";
    plugname = "Remove Recursion Inspection";
    plugid = "com.remove.recursion.inspection";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10295/41755/RemoveRecursionRefactoring.zip";
      sha256 = "1nr59yaz763crw732gxrdrya2222lj7k90y0ylvzgrpqpz2bdjnc";
      name = "Remove-Recursion-Inspection-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andreisilviudragnea/remove-recursion-inspection";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/andreisilviudragnea/remove-recursion-inspection";
        free = false;
      };
      description = ''
        This plugin adds a complex inspection which detects and reports recursive calls which may exhaust stack space. Methods which make recursive calls can be replaced with methods that don't make recursive calls, by simulating the call stack in the user program code. The initial method code is replaced with a while statement containing a switch statement that jumps between basic blocks of code in the original method.
      '';
    };
  }) {};

  removebutterknife = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RemoveButterKnife";
    plugname = "RemoveButterKnife";
    plugid = "com.u3coding.removebutterknife";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8432/53549/RemoveButterKnife.zip";
      sha256 = "0nngziy4g98rh3948691gjj0iq8cn705vgvk0nnsvk2k306g22cc";
      name = "RemoveButterKnife-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "about:blank";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/u3shadow/RemoveButterKnife/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        What's the plugin

   An Android Studio plugin to help remove use of ButterKnife


    Why i do this

   ButterKnife is a wellknow open source tool to help you inject your view, but some times, you use plugin to gen butterknife's code, but you don't want to use it again.
    It's a very horrible job to delete every line inject code and write findviewbyid code, so, i made this plugin to do it. 


   How to use it

   1.Clone the code and build it in your idea 
   2.Then, you can find a jar, install it as a plugin in your AndroidStudio(You also can find the jar in the project)
   3.Open your Activity/Fragment you want to change.
   4.Find the RemoveButterKnife button in your android studio edit menu
      '';
    };
  }) {};

  removenextlineneedlesswhitespaces = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RemoveNextLineNeedlessWhitespaces";
    plugname = "RemoveNextLineNeedlessWhitespaces";
    plugid = "com.cyl.idea.plugin.RemoveNextLineNeedlessWhitespaces";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14694/105259/RemoveNextLineNeedlessWhitespaces-1.1.zip";
      sha256 = "159wsbr3sjf20pxsqzxipvnz4cr0xjac2g06ivdp5wkirbcqhv37";
      name = "RemoveNextLineNeedlessWhitespaces-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        remove next line needless leading whitespaces when delete line end
      '';
    };
  }) {};

  renamefilex = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RenameFileX";
    plugname = "RenameFileX";
    plugid = "com.pingfangx.plugin.RenameFileX";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10651/47521/RenameFileX.jar";
      sha256 = "1rrhnr4ndymp5hbfv1ks0jq74kiaiijajadwk8zqy4lhh3g8y21n";
      name = "RenameFileX-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.pingfangx.com";
      license = lib.licenses.mit;
      description = ''
        Select one or more files,rename and copy them into your project easily.
    The rename action will not affect the original files.
    
    选择一个或多个文件，重命名并复制到项目中。
    重命名操作不会影响原始文件。
      '';
    };
  }) {};

  replacestrings = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ReplaceStrings";
    plugname = "ReplaceStrings";
    plugid = "com.ganshenml.unique.plugin.id";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13962/83877/ReplaceStrings.zip";
      sha256 = "19117cipdyq2x8k1naqwl6k0pscc2sr1y3slqjg5rkg80yyfpx9s";
      name = "ReplaceStrings-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ganshenml";
      license = lib.licenses.asl20;
      description = ''
        The plugin does two things (string tag files for XML) :
      1.The plugin has two functions (string tag files for XML) : formatting English (capitalizing the first word of a line of strings) to conform to the English presentation format.

      2.Translate the content into the specified language.

      ps:Translation access to YouDao public API, so need to go to the YouDao platform to create generate AppID and AppSecret. It's free.


      该插件有两个作用（针对XML的string标签文件）： 
      1.格式化英文（将一行字符串的第一个单词首字母大写），符合英文展示格式；

      2.将内容翻译成指定语言；

       ps:翻译接入有道公开api，因此需要去有道平台创建生成AppID及AppSecret。这是免费的。
      '';
    };
  }) {};

  request-mapper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Request-mapper";
    plugname = "Request mapper";
    plugid = "com.viartemev.requestmapper";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9567/87499/Request_mapper-1.0.zip";
      sha256 = "1v2k48pmim14yf5bqc43fac9l2sa7bv88im3bnyqff709ybf941n";
      name = "Request-mapper-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/viartemev";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/viartemev/requestmapper/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for quick navigation to url mapping declaration.
      Supported languages:
      
        Java
        Kotlin
      
      Supported frameworks:
      
        Spring
        JAX-RS
        Micronaut
      '';
    };
  }) {};

  resman-file-support-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ResMan-file-support-plugin";
    plugname = "ResMan file support plugin";
    plugid = "com.dtforce.resman.plugin";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9352/31117/idea-test.zip";
      sha256 = "1kxvs6km3d4lc6finccxp4kvi3z7jgrf1b24fm27pj2vmy3xr8zz";
      name = "ResMan-file-support-plugin-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.dtforce.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/DTForce/resman-translate-intellij/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for IntelliJ/PhpStorm facilitating usage of 
ResMan translate.
      '';
    };
  }) {};

  research = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Research";
    plugname = "Research";
    plugid = "Research";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/639/4163/Research_4163.zip";
      sha256 = "15hsjjm43hkdahnh04sy6m9rxspz2l5h3agya1409wm5lz54z5v9";
      name = "Research-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/639/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/639/sourceCode.zip";
        free = false;
      };
      description = ''
        Perform researching of current selection or word
      '';
    };
  }) {};

  reshift-security = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Reshift-Security";
    plugname = "Reshift Security";
    plugid = "com.reshiftsecurity.plugins.intellij";
    version = "2.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14538/108163/reshiftsecurity-intellij-2.5.1.zip";
      sha256 = "1ks2sgqdqb9h8c12rj4y2nyja02zqwsi4cql01ywb68x7yd6pcr3";
      name = "Reshift-Security-2.5.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://reshiftsecurity.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.gnu.org/licenses/lgpl-2.1.en.html";
        free = false;
      };
      description = ''
        Reshift is a lightweight Java security plugin for IntelliJ that quickly finds vulnerabilities, offers multiple code remediation snippets, together with rich documentation that covers detecting, fixing and testing each vulnerability.
        
        The plugin is for Java developers looking to integrate security seamlessly into their software development practices. reshift is wholly focused on security, allowing Java developers to meaningfully shift left - fixing security vulnerabilities early on in their IntelliJ IDE.
        
        *Based on SpotBugs IntelliJ plugin by Jetbrains
        Features:
        
            A curated list of security checks, vetted by security experts
            Rich developer-centric issue descriptions
            Additional vulnerability resources
                
                    remediation help
                    real company examples
                    external links
                
            
            No configuration
            No login required
      '';
    };
  }) {};

  resource-dimen-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Resource-Dimen-Tools";
    plugname = "Resource Dimen Tools";
    plugid = "com.mesmers.dimentools";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13972/81602/ResourceTools.jar";
      sha256 = "0ifbc3r896pwwqsnk7xj3d6h4dgqg3laggrlmjybhl91q2nx5f7v";
      name = "Resource-Dimen-Tools-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Mars-GZ/ResourceTools";
      license = lib.licenses.asl20;
      description = ''
        This is a dimen tools,Automatically generate dimen with different densities
      '';
    };
  }) {};

  restfultool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RestfulTool";
    plugname = "RestfulTool";
    plugid = "cn.cloud.auto.restful.tool";
    version = "1.2.8.219";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14280/97367/RestfulTool-1.2.8.219.zip";
      sha256 = "00kb6wkifz2rfb7f8vr9mjkbpk97ch1xa5lfwlvx191zqlx0nshq";
      name = "RestfulTool-1.2.8.219.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com/idea";
      license = lib.licenses.epl20;
      description = ''
        Gitee |Github

        
            
                A set of auxiliary tools for Restful service development
                
                    Provides a display window of Services tree
                    Double click the URL to jump directly to the corresponding method
                        definition
                    
                    A simple http request tool
                    Support Spring system (Spring MVC / Spring Boot)
                    Support JAX-RS
                    Support `Navigate-&gt; Request Service` search Mapping (Ctrl + Alt + /)
                
            
            
            
                一套 Restful 服务开发辅助工具集
                
                    提供了一个 Services tree 的显示窗口
                    双击 URL 直接跳转到对应的方法定义
                    一个简单的 http 请求工具
                    支持 Spring 体系 (Spring MVC / Spring Boot)
                    支持 JAX-RS
                    支持 `Navigate -&gt; Request Service` 搜索 Mapping (Ctrl + Alt + /)
      '';
    };
  }) {};

  restfultoolkit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RestfulToolkit";
    plugname = "RestfulToolkit";
    plugid = "com.zhaow.restful.toolkit";
    version = "2.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10292/60616/RestfulToolkit-2.0.9.jar";
      sha256 = "02n6pybxvfqfa2ixic03klk1qjcw4wizl27a85kaqwhrwx4wsx64";
      name = "RestfulToolkit-2.0.9.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/10292-restfultoolkit";
      license = lib.licenses.asl20;
      description = ''
        A toolkit for RESTful services development.
  
   1.ONE STEP to navigate to service declaration. ( use: Ctrl(Command) + \ or Ctrl + Alt + N ) 
   2.Show RESTful services structure.
   3.A simple http request tool.
   4.Add some useful functions at request method, Generate&amp;Copy Query Param, Generate&amp;Copy URL, etc. 
   5.Other functions: Convert to JSON; to java class，format json data ( Windows: Ctrl + Enter; Mac: Command + Enter ) .
 
    support Spring framework (Spring MVC / Spring Boot 1.x,2.x)
    support JAX-RS
    support Java and Kotlin languages
 
  
  一套 RESTful 服务开发辅助工具集。
  
   1.根据 URL 直接跳转到对应的方法定义 ( Ctrl \ or Ctrl Alt N ); 
   2.提供了一个 Services tree 的显示窗口; 
   3.一个简单的 http 请求工具;
   4.在请求方法上添加了有用功能: 复制生成 URL;,复制方法参数... 
   5.其他功能: java 类上添加 Convert to JSON 功能，格式化 json 数据 ( Windows: Ctrl + Enter; Mac: Command + Enter )。

   支持 Spring 体系 (Spring MVC / Spring Boot 1.x,2.x)
   支持 JAX-RS
   支持 Java 和 Kotlin 语言。
      '';
    };
  }) {};

  retail-code-sorter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Retail-Code-Sorter";
    plugname = "Retail Code Sorter";
    plugid = "com.retail.sorter";
    version = "1.0.0-beta02";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15358/104275/RetailCodeSorter-1.0.0-beta02.zip";
      sha256 = "0qrckdljvk7yrnk3z5fd4cf78bd7hhrp3k66g5grqbgsvypsdd2x";
      name = "Retail-Code-Sorter-1.0.0-beta02.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Retail Code Sorter
Sorts by the following order (Shortcut: Option + Command + k)

PrimaryConstructor
  The primary constructor is sorted by this order in addition to alphabetically:

Modifier-less param e.g preferences: Preferences
val param
var param
private val param
private var param

The sorting maintains the integrity of the constructor i.e annotations etc. Constructor params that span more than one line before sorting, will each be put on a new line on sorting completion e.g
     constructor(
          private a,private b
     )
  would become: 
     constructor(
          private a,
          private b,
     )
  NB: A trailing comma automatically gets added to sorted constructor.

Properties and Fields

Injected Properties
LateInit Properties
Constants
Delegated Properties
Backing Fields
Immutable Properties
Mutable Properties
Other Properties

NB: Properties are subject to this order:

Android Views
RxBehaviourSubject
RxObservable
RxCompletable 
RxSingle
Other


Secondary Constructor

Init

Functions

Lifecycle functions
Override Functions
Other Functions
Extension Functions


Classes and Interfaces

Class
Inner Classes
Interfaces


Companion object


NB: Each sorting is subject to modifier sorting in addition to alphabetical sorting according to this order:

public
protected
internal
private


To avoid issues with extra blank lines, go to Kotlin Code style settings and Keep Maximum Blank Lines to 1, for declarations
      '';
    };
  }) {};

  retrofit-rest-client-2-0 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Retrofit-Rest-Client-2.0";
    plugname = "Retrofit Rest Client 2.0";
    plugid = "cn.vove7.ide.plugin.rest";
    version = "2.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13075/82219/retrofit-rest-client.zip";
      sha256 = "1xj48y87fnjrgbnariqck8bq0ffm18kddh9kyippxl6hgrmyif6i";
      name = "Retrofit-Rest-Client-2.0-2.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Vove7/retrofit-rest-client";
      license = lib.licenses.gpl3Only;
      description = ''
        📡Github📡
        

        
            The best http client for Android Studio.
            This plugin is based on idea-rest-client.
        
        
            
                Support run retrofit api interface functions directly.
                Supports GET, POST, PUT, DELETE, PATCH requests
                Multiline request parameters
                Rest file type support
                Internally supported dynamic parameters
                Response auto format (based on response Content-Type header)
                Customized colors and fonts
                Customized keyboard shortcuts
                Comments
            
        
        使用方法：
            1. 新建 xxx.rest 格式文件，按照 Preview 编辑即可
            2. 直接在 Retrofit Api 函数左侧 Run 即可
        How to use：
            1. New a xxx.rest file，and edit like preview
            2. Click the Run icon which left in Retrofit Api function
        
                    
                    
                Preview
        
            Rest file
        
        You can create rest file to edit.
        Content structure
        
        
            Gif
        
        Run retrofit api method
        
        
                    
                    
                Demo
        
            GET
        
        
            
    GET
    {BASE_URL}/get
    # query params
    &amp;id=1
    &amp;type=2

    # headers
    @Content-Type: application/json
    @timestamp: {TS_SEC} # current time in seconds
        
        
            
                POST
                
                    Json
                
                Apponit content-type: @Content-Type: application/json
                
                    
    POST
    {BASE_URL}/post_json

    # request headers
    @Content-Type: application/json

    # request body
    {"a":"{a}","b":"{b}"}
                
                
                    Form
                
                Apponit content-type: @Content-Type: application/x-www-form-urlencoded, and last line is
                    form data(can be multiple line)
                
                    
    POST
    {BASE_URL}/post_form/{user_id}

    # Headers:
    @Content-Type: application/x-www-form-urlencoded

    # Form data separate with '&amp;'
    id=1&amp;s=hello

    # also can be:
    &amp;id=1
    &amp;s=hello
                
            
        
        
                    
                    
                Retrofit Guide
        We can find execute icon on api method:
        
        click the icon will create a rest file in {PROJECT_DIR}/.idea/rest-client/pkg/cls_fun.rest
        
            
    GET
    {BASE_URL}/abc
    &amp;q={q}

    # Headers
    @a: {a}
        
        don't forget Set env params
        
                    
                    
                Set env params
        You can use {name} to reference env variable.
        
            To create json file {PROJECT_DIR}/.idea/rest-client/rest_env.json(Auto create)
            
        
        
            
  {
    "test": {
    "BASE_URL": "http://localhost:8080",
    //common headers
    "headers": {
      "Content-Type": "application/json",
      "timestamp": "{TS}"
    },
    "user_id": "1",
    "a" : "a",
    "b" : "b"
    },
    "dev": {
      "BASE_URL": "http://xxx.xxxx.xxx"
    }
  }
            
        
        
            Choose env to tun
        
        
        
                    
                    
                Install
        
            Marketplace
        
        IDEA or Android Studio Settings/Plugins/Marketplace search Retrofit Rest Client
        
            download retrofit-rest-client.zip
                file.
        
        Settings/Plugins/ Install Plugin from Disk.
        
                    
                    
                Advanced
        
            internal support placeholder
        
        {TS}
        
    GET
    http://xx.xx.xx/api
    @timestamp: {TS}   # current time in milliseconds
    @timestamp_sec: {TS_SEC}   # current time in seconds
    @timestamp_custom: {TS_yyyy-MM-dd#HH:mm:ss}   # current time custom format with SimpleDateFormat (use '#' instead of ' ')
    
        
                    
                    
                Thanks
        This plugin is based on idea-rest-client.
        
                    
                    
                TODO
        
            
                Multiple requests in one file. [like http client]
            
            
                Response result output tu run window. [like http client]
      '';
    };
  }) {};

  return-highlighter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Return-Highlighter";
    plugname = "Return Highlighter";
    plugid = "com.github.lppedd.idea-return-highlighter";
    version = "0.8.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13303/83026/idea-return-highlighter-0.8.1.zip";
      sha256 = "12cknwj14zjxjdwa5i8bkb3qrx2fs9zml5rdlgv5xxdh9c05jswb";
      name = "Return-Highlighter-0.8.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lppedd/idea-return-highlighter";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/lppedd/idea-return-highlighter/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Highlight return statements.
    Useful for hard-to-read sources.


The plugin

    Shows a gutter icon next to the returning lines (clicking on it will take you to the return statement!)
    Highlights the return keyword, so that it stands out more


Supported languages are

    Java
    JavaScript and TypeScript
    Python
    PHP
    Need another language? Open an issue



    Read the full description here at GitHub.
      '';
    };
  }) {};

  reveal-in-project-view = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Reveal-in-Project-View";
    plugname = "Reveal in Project View";
    plugid = "com.github.syuchan1005.revealinprojectview";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12150/94727/Reveal_in_Project_View.zip";
      sha256 = "1c6p06q7pjklnxvlqynglc78qjhczz4lzz5nz2dgl9503fy4pi3r";
      name = "Reveal-in-Project-View-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://syuchan1005.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/syuchan1005/RevealInProjectView/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        Add [Reveal in Project View] in content menu.
      '';
    };
  }) {};

  review-board-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Review-Board-Support";
    plugname = "Review Board Support";
    plugid = "com.guyazhou.tools.plugin.reviewboard";
    version = "3.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10570/49713/review-board-support-3.0.4.zip";
      sha256 = "1rxism0g3vc1d55qzwcj8i0f1y2wg1v4yaldndcjl8597rzd9ikg";
      name = "Review-Board-Support-3.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/asiaon123/review-board-support";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/asiaon123/review-board-support/master/LICENSE";
        free = false;
      };
      description = ''
        Features
        
            Support Subversion, Git
            Auto review for some users@lvmama
        
        About
        
            Usage
            Issues
      '';
    };
  }) {};

  review-board = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Review-board";
    plugname = "Review board";
    plugid = "com.ritesh.intellij.plugin.reviewboard";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7872/45580/review-board-idea-plugin.jar";
      sha256 = "1flizzgpm45jy2725lxxj1wx15akh9nq938wfmk1bm095xmhhpkd";
      name = "Review-board-0.1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ritesh-kapoor/review-board-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ritesh-kapoor/review-board-idea-plugin";
        free = false;
      };
      description = ''
        Review Board Code Review Tool 
Only Reviewboard 2.0.5 or newer is supported 
Features: 
 
 Do reviews directly from your IDE 
 View all, pending or submitted reviews 
 Compare (Diff) changes in review locally 
 Submit changes to the reviewboard server 
 Comment on reviews Usage: Add new comments in file diff window with click on line; 
 Submit/Discard Reviews 
 
 
Limitations: 
 
 Viewing multiple reviews is not supported 
 Updating diff is not supported 
 
 
If you find any issues, please report them (please use the GitHub issue tracker instead of review comments). 
If you like this plugin, you can support it by writing review and voting for it on IntelliJ plugin repository
      '';
    };
  }) {};

  reykjavik = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Reykjavik";
    plugname = "Reykjavik";
    plugid = "Reykjavik";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12333/96991/reykjavik.jar";
      sha256 = "1szb81nqahw697p8vk1hnaz006nwxvmsvfj352i73ggxf3vdpd0c";
      name = "Reykjavik-0.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        Custom dark theme for Intellij editors, fits perfectly with reykjavik editor theme.
      '';
    };
  }) {};

  rholang = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Rholang";
    plugname = "Rholang";
    plugid = "coop.rchain.lang";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9833/49528/rholang-idea.jar";
      sha256 = "1h8z6p211q5whp2svi8ak6i28drzfql4yd87f5ymd9vfmm1xq6vn";
      name = "Rholang-0.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://rchain.coop";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tgrospic/rholang-idea/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Language support for Rholang.

      Official language for RChain distributed virtual machine.
      '';
    };
  }) {};

  rich-presence-integration-discord-slack = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Rich-Presence-Integration-Discord-Slack";
    plugname = "Rich Presence Integration (Discord, Slack)";
    plugid = "com.tsunderebug.discordintellij";
    version = "3.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10217/49429/discord-intellij-3.0.0.zip";
      sha256 = "0k7a1w0cn453vczghb7fih4q1f0l2l7kmfrqnygb8djw9a09yq2r";
      name = "Rich-Presence-Integration-Discord-Slack-3.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://g.s5.pm/";
      license = lib.licenses.gpl3Only;
      description = ''
        Adds rich presence integration to IntelliJ.
        Doesn't support your language? Request it via commenting.

        Features:
        
            What file you're editing, what language you're using, and what IDE you prefer will now be shown in Discord!
            You can see how long since you started working on a project!
            "What if my project is a surprise or I'm under an NDA?" You can disable the Rich Presence from showing per-project!
            Amazing flat icons mainly created by HelloWorld017.
      '';
    };
  }) {};

  rider-dark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Rider-Dark-Theme";
    plugname = "Rider Dark Theme";
    plugid = "com.lol1pop.intellij-visual-studio-code-dark-plus";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12546/64574/rider_dark.jar";
      sha256 = "10zjmw4awxqvvzkh12g6ma3dhh0f3vrz26zald8gz96niaqxh4al";
      name = "Rider-Dark-Theme-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lol1pop";
      license = lib.licenses.asl20;
      description = ''
        Dark theme out Rider Dark for Intellij IDEA
      '';
    };
  }) {};

  rider-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Rider-Keymap";
    plugname = "Rider Keymap";
    plugid = "com.intellij.plugins.riderkeymap";
    version = "201.6251.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13952/80904/RiderKeymap.zip";
      sha256 = "0dy7pnjcc1cwcrxnx9ychqi3yixkjwmk0gc2h7qlcv3xd6lvn49v";
      name = "Rider-Keymap-201.6251.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Rider keymap for Rider IDE. The keymap is based on the default IntelliJ keymap and adds a few Rider-specific shortcuts.
    Use this plugin if the Rider keymap is not pre-installed in your IDE version.
      '';
    };
  }) {};

  rider-ui-theme-pack = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Rider-UI-Theme-Pack";
    plugname = "Rider UI Theme Pack";
    plugid = "Rider UI Theme Pack";
    version = "0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13883/104874/Rider_UI_Theme_Pack-0.7.zip";
      sha256 = "0c1ydgbg0k7mf98p6dda54mc9y9ddgl587zf6ba064j3nkw4iyfj";
      name = "Rider-UI-Theme-Pack-0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.asl20;
      description = ''
        Set of UI themes for Rider IDE:
        - Rider Dark
        - Rider Light
        - Rider Melon Dark
        - Rider Melon Light
        - ReSharper Dark
        - ReSharper Light
        - Visual Assist Dark
        - Visual Assist Light
        - Visual Studio Dark
        - Visual Studio Light
      '';
    };
  }) {};

  rmunusedmethod = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RmUnusedMethod";
    plugname = "RmUnusedMethod";
    plugid = "com.qbb6.RmUnusedMethod";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11377/52521/RemoveUnusedMethod.jar";
      sha256 = "1r5ik08w45rl5d8brjxhib4m1jm4d7njmklyw9pl8xr33rgasljc";
      name = "RmUnusedMethod-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.qbb6.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.qbb6.com";
        free = false;
      };
      description = ''
        note: delete unused method
      ways：code-&gt;RmUnusedMethod or shift q
      '';
    };
  }) {};

  roidea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RoIdea";
    plugname = "RoIdea";
    plugid = "ro.idea";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7600/17702/ro-idea.zip";
      sha256 = "0mz3895b2s4h4yhid0drvpw1azfj28zvshfi7cj6c296minhxrx1";
      name = "RoIdea-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        follow my twitter for support 
Follow @chinococoadesu  Enter short description for your plugin here.
 
most HTML tags may be used
      '';
    };
  }) {};

  robo-hexar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Robo-Hexar";
    plugname = "Robo Hexar";
    plugid = "com.smilingrob.plugin.robohexar";
    version = "1.11.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8026/25019/RoboHexar.jar";
      sha256 = "013hz74yi99lzbg5zwi7w36cmpsmm8i4dylrfh5vlhhzqs1gsg3s";
      name = "Robo-Hexar-1.11.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/RoboPlugins/RoboHexar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/RoboPlugins/RoboHexar";
        free = false;
      };
      description = ''
        I am the grammar robot. I have been activated. Missing punctuation and grammar will be punished.
      '';
    };
  }) {};

  robopojogenerator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RoboPOJOGenerator";
    plugname = "RoboPOJOGenerator";
    plugid = "com.robohorse.robopojogenerator";
    version = "2.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8634/85327/RoboPOJOGenerator-2.2.0.zip";
      sha256 = "1m9miw5d32rf046fd6naa9nggf9n6km0frxcp74g8b1r036lw4wn";
      name = "RoboPOJOGenerator-2.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/robohorse/RoboPOJOGenerator";
      license = lib.licenses.mit;
      description = ''
        Generate Java and Kotlin POJO files from JSON: GSON, FastJSON, AutoValue (GSON), Logan Square, Jackson, empty annotations template.
      Supports: primitive types, multiple inner JSONArrays.

      key words: JsonToPojo, Json2Pojo, Kotlin, GSON, FastJSON, AutoValue, Jackson, LoganSquare, Moshi, Parcelable
      '';
    };
  }) {};

  robot-framework-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Robot-Framework-Support";
    plugname = "Robot Framework Support";
    plugid = "amailp.intellij.robot";
    version = "0.24";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7415/104821/robot-plugin-0.24.zip";
      sha256 = "0w94phgv6f7irs8kxfqlvx8cn73a5kdm3ml4n2dg6v8gjmhkjqgl";
      name = "Robot-Framework-Support-0.24.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AmailP/robot-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://gplv3.fsf.org/";
        free = false;
      };
      description = ''
        Robot Framework support plugin for IntelliJ Idea
      
        Syntax highlighting
        Code completion support:
          
            User defined keywords from .robot files
            User defined keywords from Static Python libraries [*]
            Robot Library keywords [*]
          
        
        Jump to keyword definition, from local file and from the recursively imported resources
        Jump to resource
        Find usages / rename of keywords and resources
        Structure view for test cases and keywords
      
      [*] requires PyCharm or Python plugin from JetBrains
      '';
    };
  }) {};

  robot-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Robot-Plugin";
    plugname = "Robot Plugin";
    plugid = "com.jivesoftware.robot.intellij.plugin";
    version = "1.7.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7430/18661/robot-intellij-plugin.jar";
      sha256 = "1lfvpwj6igfs68271bw6zv7kca4hnqss3yi23ax4r331nwxhad64";
      name = "Robot-Plugin-1.7.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jivesoftware/robot-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        The Robot Plugin provides integration with Robot Framework Test Case Files (http://www.robotframework.org). This plugin provides integration with Robot keywords implemented in Java that are in the same IntelliJ project as your Robot test case files. This plugin also provides many features supporting coding in the Robot Framework that are useful whether or not you use Java.  Features include: 
 
 Syntax highlighting 
 Rename refactoring for Robot Keywords, whether defined in Java or Robot files. 
 Structure View support for Robot files 
 Invalid Robot syntax is underlined in red, so you can catch errors before committing your code. 
 Go to declaration of a Keyword from the point of use. Jump to Java or Robot file Keyword definition. 
 Find usages of Keywords defined in Java or Robot files 
 Autocomplete Keywords and Test Case tags 
 Autocomplete Variables that are in scope 
 Find Robot Keywords and Test Cases by symbol name (ctrl+shift+alt+n) or (cmd+shift+alt+n) for Mac  
 Go to Resource file by ctrl+click resource setting. 
 Create a Robot Test Case file from a template 
 ...and much more 
 
by Charles Capps, an engineer at Jive Software
      '';
    };
  }) {};

  robotpy = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RobotPy";
    plugname = "RobotPy";
    plugid = "com.noskcaj19.robotpy-pycharm";
    version = "1.3.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12544/76654/robotpy-pycharm-1.3.1-SNAPSHOT.jar";
      sha256 = "1idpddp0plah61x1jjdn0vmhxj5p7kdmg174qbkiml3h05gnr91m";
      name = "RobotPy-1.3.1-SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://noskcaj19.github.io";
      license = lib.licenses.mit;
      description = ''
        Utilities for building FRC robots with RobotPy and PyCharm
      '';
    };
  }) {};

  roboticket-light-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Roboticket-Light-Theme";
    plugname = "Roboticket Light Theme";
    plugid = "ru.serafimarts.roboticket";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12191/73807/RoboticketLight.jar";
      sha256 = "03a3x6qd0f66m9wmn98s4ajw7v1bgr5kilwas9wyfzgd8cj5wmwh";
      name = "Roboticket-Light-Theme-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SerafimArts";
      license = lib.licenses.mit;
      description = ''
        A low-contrast light theme.
        

        For version 2019.1 and above.
        

        Please note that this theme overrides your font settings.
        Uncheck "Use color scheme font instead of the default" in
        Setting | Editor | Color Scheme | Color Scheme Font to return your font settings.
        

        To install:
        
            Go to Settings (Preferences) | Plugins, find the theme plugin and install it
            Restart IDE
            Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and see the Theme dropdown
        
        

        Report an issue |
        On GitHub
      '';
    };
  }) {};

  rubber-duck = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Rubber-Duck";
    plugname = "Rubber Duck";
    plugid = "Rubber Duck";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7184/12759/rubberDuck.jar";
      sha256 = "063fh4zgh65a9mrnw19h120l2ghf6l0prfpwqav5pxk2x30i0kli";
      name = "Rubber-Duck-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rfreedman/intellij-rubber-duck-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/rfreedman/intellij-rubber-duck-plugin";
        free = false;
      };
      description = ''
        A plugin to help with Rubber Duck Debugging
      '';
    };
  }) {};

  run- = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Run-";
    plugname = "Run ♫";
    plugid = "info.loric.run";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14312/86338/RUN.jar";
      sha256 = "1038grax4xycpxddrrj6g3b137giqm0amm9gfd0r97nv3qgqrc9q";
      name = "Run--1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/loricvdt";
      license = lib.licenses.mit;
      description = ''
        Plays the "Run" meme song whe the run button is pressed
      '';
    };
  }) {};

  run-configuration-for-external-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Run-Configuration-For-External-Tools";
    plugname = "Run Configuration For External Tools";
    plugid = "de.markiewb.idea.externalrunconfiguration";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15178/98998/idea-externaltools-runconfiguration-plugin-1.2.jar";
      sha256 = "01a9qwpj6jjy886hyhwqwkjiyxnki1h7kpc3k9mnkw72v1lzwlil";
      name = "Run-Configuration-For-External-Tools-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/markiewb/idea-externaltools-runconfiguration-plugin";
      license = lib.licenses.asl20;
      description = ''
        It adds a 'Run Configuration' type for 'External Tools'.

The configuration executes nothing, BUT you can associate an 'External Tool' via the 'Before Launch' section.
Thus the 'External Tool' is available via the Run-/Debug-Popup.



It solves or helps you with the issues
IDEA-104897,
IDEA-168555,
IDEA-161285

Configuration
      '';
    };
  }) {};

  run-configuration-as-action-1_3 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Run-Configuration-as-Action-1_3";
    plugname = "Run Configuration as Action";
    plugid = "tianhongzeng";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13414/73351/RunConfigurationAsAction.zip";
      sha256 = "121w25ynlhigda4xc172hwrqcvic7v89chkbainy4dq9xsyjcpmj";
      name = "Run-Configuration-as-Action-1_3-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/turbanoff/RunConfigurationAsAction";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/turbanoff/AsAction";
        free = false;
      };
      description = ''
        Register all run configuration as actions.
Now you can assign shortcuts to run configurations!
Also it allows to create button in toolbar to run specific configuration.
      '';
    };
  }) {};

  run-configuration-as-action-1_4_2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Run-Configuration-as-Action-1_4_2";
    plugname = "Run Configuration as Action";
    plugid = "org.turbanov.run.configuration.as.action";
    version = "1.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9448/82777/RunConfigurationAsAction.jar";
      sha256 = "01h735rvmd3knis2in66jav1f91qq2arvwlygfwm8nks0yzgimmq";
      name = "Run-Configuration-as-Action-1_4_2-1.4.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/turbanoff/RunConfigurationAsAction";
      license = lib.licenses.gpl3Only;
      description = ''
        Register all run configuration as actions.
Now you can assign shortcuts to run configurations!
Also it allows to create button in toolbar to run specific configuration.
      '';
    };
  }) {};

  run-configuration-for-typescript = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Run-Configuration-for-TypeScript";
    plugname = "Run Configuration for TypeScript";
    plugid = "io.plugin.tsnode";
    version = "2020.09.01-0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10841/95848/idea-run-typescript.jar";
      sha256 = "1rakynrhq1x7cisyng36rx2cpcmaag52big61zx92273nf879nyx";
      name = "Run-Configuration-for-TypeScript-2020.09.01-0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bluelovers/idea-run-typescript";
      license = lib.licenses.mit;
      description = ''
        IntelliJ IDEA (and WebStorm...) plugin to support 'TypeScript' as a run configuration

Run Configuration for TypeScript
IntelliJ IDEA (and WebStorm...) plugin to support 'TypeScript' as a run configuration

requirements

  plugin: NodeJS

install

  via jetbrains https://plugins.jetbrains.com/plugin/10841-run-configuration-for-typescript
  github idea-run-typescript.jar / idea-run-typescript.zip

screenshot

  support run/debug .ts , .tsx



  support scratch file



  support select esm-ts-node, ts-node



  other




about this plugin
this is my first time touch kotlin/java
this plugin made by

  copy / paste form many plugin
  idea auto complete api
  google lol

dev
IDEA 2019.1.4
IntelliJ IDEA 2019.1.4 (Ultimate Edition)
Build #IU-191.8026.42, built on July 30, 2019
JRE: 1.8.0_212-release-1586-b4 amd64
JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o
Windows 10 10.0


link

  https://github.com/JetBrains/intellij-community
  https://zh.wikipedia.org/wiki/Kotlin
  https://www.kotlincn.net/
  https://github.com/t3hnar/CmdSupport
  https://github.com/jasmine/IdeaJasmine
  https://github.com/jansorg/BashSupport
  https://github.com/TypeStrong/ts-node
  https://github.com/xiyuan-fengyu/IdeaPluginTypeScriptExecutor
  https://github.com/nguyennk92/run-typescript-plugin
  https://plugins.jetbrains.com/docs/marketplace/intellij-plugin-recommendations.html
  


Icons made by Freepik from www.flaticon.com is licensed by CC 3.0 BY
      '';
    };
  }) {};

  run-popup = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Run-Popup";
    plugname = "Run Popup";
    plugid = "ch.raffael.idea.plugins.runpopup";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11042/105729/idea-run-popup-1.2.0.zip";
      sha256 = "14cyjj91gxx1a7qwkm6f3jz2fg1xbqrdjnmr73s0v3nzhpla6wsh";
      name = "Run-Popup-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Abnaxos/idea-run-popup";
      license = lib.licenses.mit;
      description = ''
        A popup menu for IDEA to provide easier access to run
    configurations.

    
    

    The popup menu shows a list of run configurations in two sections:
    Favorites (first) and others. Each section can be separately configured to
    show the configurations last used first or using the ordering of the run
    configurations settings dialog.

    For each entry, the popup remembers the last executor used (Run, Debug,
    etc.)

    The popup menu is searchable and also handles searching for the first
    letters of words (e.g. search for "riwp" to find "Run IDEA with
    plugin").

    It can be both placed into the toolbar or bound to a key. It can
    replace the default run dropdown.

    See the Project’s
    GitHub page for more information.

    Configuration Tips
    

      Remove "Select Run/Debug Configuration" action and
        "Run/Debug" group from your toolbar, then add "Run Popup"
        and "Stop" instead. The "Stop" action will show a
        drop-down to choose which process to stop when more than one is
        running (if only one process is running, it will just stop that one).
      

      By default, the run popup is bound to Alt-X. You may also
        want to bind "Stop" to Alt-Shift-X to get a stop
        popup.
      '';
    };
  }) {};

  run-robot-framework-testcase = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Run-Robot-Framework-TestCase";
    plugname = "Run Robot Framework TestCase";
    plugid = "com.github.youwi.runrobot.plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10701/45550/robot-run-plugin.jar";
      sha256 = "0qi4jrmm7bqxa2b88qgy2y61wy8mdl680bhz1n4dawmm6rbqmf3a";
      name = "Run-Robot-Framework-TestCase-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/youwi/robot-run-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/youwi/robot-run-plugin";
        free = false;
      };
      description = ''
        run testcase by python 
 support debug python, !not debug robot file ! 
 support pycharm 
 support *.robot 
 preview 
 
preview 
most HTML tags may be used
      '';
    };
  }) {};

  run-robot-framework-file = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Run-Robot-framework-file";
    plugname = "Run Robot framework file";
    plugid = "com.github.youwi.robotlauncher";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10693/45520/context_menu_launcher.jar";
      sha256 = "1l4kf5lcz1gx62vg2h7xhxkg7rqnglj5dv4gh3jzk701dppv01yd";
      name = "Run-Robot-framework-file-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/youwi/robot-launcher-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/youwi/robot-launcher-plugin";
        free = false;
      };
      description = ''
        Run Robot framework TestCase from context menu.
 tested on idea (macOS) tested on pycharm (macOS) 
preview
      '';
    };
  }) {};

  runincmd = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RunInCmd";
    plugname = "RunInCmd";
    plugid = "org.turbanov.execution.cmd";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7976/69770/runInCmdPlugin.jar";
      sha256 = "1ld5zmdn2i7bmmrwz08nv53ly3nix0zxv81jkxkn8lxcvk9chy0w";
      name = "RunInCmd-1.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/turbanoff/RunInCmdPlugin";
      license = lib.licenses.asl20;
      description = ''
        Run java program in cmd.exe instead of internal IDEA console.
    Also it allows to modify program and VM options before run
      '';
    };
  }) {};

  russellcloud-cli = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RussellCloud-Cli";
    plugname = "RussellCloud Cli";
    plugid = "russellcloud.cli";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11101/49549/russell-plugin.zip";
      sha256 = "1kjz3d2y8481lcskd0mwlhvswh4y8vq6glgwpskj85p5hzf2n5jg";
      name = "RussellCloud-Cli-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.russellcloud.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://russellcloud.com";
        free = false;
      };
      description = ''
        cli for russellcloud.You can login, init project and run task.
      '';
    };
  }) {};

  rust = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Rust";
    plugname = "Rust";
    plugid = "org.rust.lang";
    version = "0.3.131.3366-202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8182/97387/intellij-rust-0.3.131.3366-202.zip";
      sha256 = "036mgwfiqadcz4sar1vlh9j1ylf4c7n6bnf9mssjzs7cjc4nmhgd";
      name = "Rust-0.3.131.3366-202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/intellij-rust/intellij-rust";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Rust language support
      '';
    };
  }) {};

  rxjava-postfix-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "RxJava-Postfix-Plugin";
    plugname = "RxJava Postfix Plugin";
    plugid = "com.github.droibit.plugin.rxjava.postfix";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9455/32321/rxjava-postfix-plugin.zip";
      sha256 = "1ajhwismvwf2mj88y8lq3v3m5inf5n0ypnq8wk8hbmrbysb7ja6n";
      name = "RxJava-Postfix-Plugin-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/droibit";
      license = lib.licenses.asl20;
      description = ''
        Postfix Completion with RxJava2 to use in IntelliJ Idea/Android Studio.
 
 Available templates:
 
 Observable 
 
  .ojust Creates Observable from item. Observable.just(expr)  
 
 
  .ofrom Creates Observable from iterable/array. Observable.fromIterable(expr) Observable.fromArray(expr)  
 
 
  .oerror Creates Observable from throwable. Observable.error(expr)  
 
 
 Flowable 
 
  .fjust Creates Flowable from item. Flowable.just(expr)  
 
 
  .ffrom Creates Flowable from iterable/array. Flowable.fromIterable(expr) Flowable.fromArray(expr)  
 
 
  .ferror Creates Flowable from throwable. Flowable.error(expr)  
 
 
 Single 
 
  .sjust Creates Single from item. Single.just(expr)  
 
 
  .serror Creates Single from throwable. Single.error(expr)
      '';
    };
  }) {};

  rxmvphelper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "RxmvpHelper";
    plugname = "RxmvpHelper";
    plugid = "com.zsc.mvpHelper";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10754/46143/MvpHelper.jar";
      sha256 = "1nn8i3734j9756aylz44w4a6a3fq2zq2319z0ndp4bzif6kjkib6";
      name = "RxmvpHelper-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zhousongchao/Rxmvp";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zhousongchao/Rxmvp";
        free = false;
      };
      description = ''
        since for com.zsc.core:rxmvp:1.0.1
      '';
    };
  }) {};

  sap-commerce-developers-toolset = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SAP-Commerce-Developers-Toolset";
    plugname = "SAP Commerce Developers Toolset";
    plugid = "com.intellij.idea.plugin.sap.commerce";
    version = "2001.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12867/90504/SAP-Commerce-Developers-Toolset.zip";
      sha256 = "1qp2hb0z38r0zqhqp0di41dwsppf4z4j2mw8dcq34qkdrkx240by";
      name = "SAP-Commerce-Developers-Toolset-2001.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/epam/sap-commerce-intellij-idea-plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin is a plugin for SAP Commerce integration.

          If you have any questions you can send an email to:
          
              EPAM Systems
          

          Features:
          
              Import of Hybris extensions to Intellij IDEA with automatic dependency resolution and classpath configuration optimized for fast compilation.
              Automatic configuration of Spring, Web, Ant, Database Connector Intellij IDEA plugins.
              Import your custom Eclipse, Maven and Gradle extensions together with Hybris platform.
              Custom editor for flexible Search queries with an ability to execute them on a remote Hybris instance right from your IDE by a single click of a button.
              Custom editor for impex files with automatic formatting, find usages and go to declaration actions, validation and import of impexes into a remote Hybris instance right from your IDE by a single click of a button.
              Custom editor for items.xml with validation, best-practices analyses, quick-fix autosuggestion and easy navigation.
              Custom editor for beans.xml with custom automated Intellij refactorings actions.
              Visualization of business process graph (use context menu of the file "Diagrams/Show Diagram", only Ultimate IDEA).
              Enhanced project view tree.
              Execution of Flexible Search queries, Groovy scripts, Impexes though IDE using HAC Integration tool.
              Execution of queries on remote Solr instances.
              And much more
          

          Contribution guidelines:
          
              Please read Contributor License Agreement
              Available tasks are in our board: Project board
              How to Configure Project Environment For Plugin Developers
              We are working with Pull Requests. You need to fork this repository, implement a feature in a separate branch, then send us a pull request.
              Be sure to include into your pull request and all commit messages the following line: "Signed-off-by: Your Real Name your.email@email.com" otherwise it can not be accepted. Use your real name.
              For additional questions you can send an email
          

          Contributors and Developers
          This project exists thanks to all the people who contribute.

          
              Alexander Bartash
              Vlad Bozhenok
              Martin Zdarsky-Jones
              Alexander Nosov
              Eugene Kudelevsky
              Cristian Caprar
              Daniel Carter
              Oleksandr Mishchuk
              Michael Golubev
              Nicko Cadell
              Dan Wanigasekera
              Markus Priegl
              Sergei Aksenenko
              Roger Ye
              Hector Longarte
              Fabian Necci
              Markus Perndorfer
              FAIR Consulting Group
              Mykyta Kostiuk
              Dmytro Lytvynenko
              Oleksandr Shkurat
              Maxim Bilohay
              Eugene Koryakin
              Yevhenii Koshevyi
      '';
    };
  }) {};

  sapopen-ui5 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SAPOpen-UI5";
    plugname = "SAP/Open UI5";
    plugid = "com.atsebak.ui5";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7591/20059/UI5-IntelliJ-Plugin.zip";
      sha256 = "0qpfqhl80harkawqrns2cm062vf8f3lpv224g001jvbhx6iq4r5w";
      name = "SAPOpen-UI5-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.atsebak.com/win.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.atsebak.com/win.html";
        free = false;
      };
      description = ''
        This is the SAP/Open UI5 Plugin for IDEA Platforms.
      '';
    };
  }) {};

  sass-sorter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SASS-Sorter";
    plugname = "SASS Sorter";
    plugid = "pl.consdata.cd-commons-sass-sorter";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14268/85826/Consdata_SASS_Sorter-1.0.zip";
      sha256 = "14kspw8bi4263x0kh1rxmvy9vdnqsi1h61z1mcjx0vh21agdj3qw";
      name = "SASS-Sorter-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.consdata.com";
      license = lib.licenses.asl20;
      description = ''
        Sort your styles in scss/css files in thematic order
            How to use
            
                Open .scss or .css file
                To sort whole file: CTRL+ALT+O or RMB -&gt; Sass Sorter -&gt; Sort All
                To sort selected lines: Select line and CTRL+ALT+I or RMB -&gt; Sass Sorter -&gt; Sort Selection
      '';
    };
  }) {};

  sbbrowser = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SBBrowser";
    plugname = "SBBrowser";
    plugid = "SBBrowser";
    version = "1.06";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4698/12345/SBBrowser.jar";
      sha256 = "0jdla4mkzdhhja669kxba6snc8sz31z3qj085k8zncjkd2v282mn";
      name = "SBBrowser-1.06.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://serbis.freemagi.ga/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://serbis.freemagi.ga/";
        free = false;
      };
      description = ''
        browsing directories and files inside and outside of the current project for opening files in IDEA
      '';
    };
  }) {};

  sbc-annotator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SBC-Annotator";
    plugname = "SBC Annotator";
    plugid = "itbuddy.Annotator.SBC";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11929/57610/SBCAnnotator.zip";
      sha256 = "0j200iwwhnz2iigz670sxaw56kijvfbqk2dsqj5mrpc6a42rkjnj";
      name = "SBC-Annotator-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/smoothwind/SBCAnnotator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/smoothwind/SBCAnnotator/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Detecting and highlighting full-width character(SBC case) automatically.
    Helping programmer to locate and fix bugs or potential deficiencies caused by full-width character.
      '';
    };
  }) {};

  sbjava2sql = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SBJava2SQL";
    plugname = "SBJava2SQL";
    plugid = "SBJava2SQL";
    version = "1.04";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6559/51877/SBJava2SQL.jar";
      sha256 = "0wkxjy3ycs1dcxy5z7ld3pg92mwbabbwiicqffc6d26cq3cs89s3";
      name = "SBJava2SQL-1.04.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://serbis.net.ru";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/garbarick/SBJava2SQL/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Extract strings fields value to clipboard as SQL
      '';
    };
  }) {};

  sbjspclass = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SBJspClass";
    plugname = "SBJspClass";
    plugid = "SBJspClass";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6607/14947/SBJspClass.jar";
      sha256 = "0fywpbfks5k1kb695yp56scwai0jb3wqvwgdgfmfrmsnr3b6l5yr";
      name = "SBJspClass-1.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://qip.ru/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://qip.ru/";
        free = false;
      };
      description = ''
        SBJspClass : edit jsp files as java Class
      '';
    };
  }) {};

  sbt-executor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SBT-Executor";
    plugname = "SBT Executor";
    plugid = "com.mle.idea.sbtexecutor";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7247/83532/sbt-executor.zip";
      sha256 = "0q0grlr9pspbvfc444jc04v9lmfc81y2nnd1w7yds7srkni264fa";
      name = "SBT-Executor-1.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/malliina/sbt-executor";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Execute sbt commands through a menu in IDEA.
      SBT is a build tool typically used for Scala projects.
      '';
    };
  }) {};

  scss-breadcrumbs = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SCSS-Breadcrumbs";
    plugname = "SCSS Breadcrumbs";
    plugid = "net.denysloshkarev.plugins.jetbrains-breadcrumb-plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11109/81462/jetbrains-breadcrumb-plugin-1.0.2.jar";
      sha256 = "1lmmxy0mkhhm6w7vsvz2a494d99vvbbsw9px4dnd53xxknl30dk1";
      name = "SCSS-Breadcrumbs-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.my-company-hane-no-site.com";
      license = lib.licenses.mit;
      description = ''
        This plugin provide you an option to fast copy of the SCSS structure.
    Use context menu or CTRL+ALT+C (Win), ⌘ + ⌥ + C (Mac) to copy breadcrumbs structure.
    Also, you could use the class insert functionality to add a comment after the block start to make the search of a specific class or structure easier.
      '';
    };
  }) {};

  sde-for-intellij-idea-community-edition = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SDE-for-IntelliJ-IDEA-Community-Edition";
    plugname = "SDE for IntelliJ IDEA (Community Edition)";
    plugid = "SDE for IntelliJ IDEA (Community Edition)";
    version = "2.0-build-20041218g";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/242/1128/SDE_for_IntelliJ_IDEA_(Community_Edition)_1128.jar";
      sha256 = "08lgfs5v8mwcgp2n8j4bkc6xv18vpnv7hr13fxbs0rhx2kvhi5q8";
      name = "SDE-for-IntelliJ-IDEA-Community-Edition-2.0-build-20041218g.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.visual-paradigm.com/features/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.visual-paradigm.com/features/";
        free = false;
      };
      description = ''
        The latest release from Visual Paradigm, the Smart Development Environment (SDE) 3.0 for IntelliJ IDEA, is now available and well-tested in platforms including Linux, Windows and Java Desktop. SDE 3.0 for IntelliJ is a plug-in of IntelliJ IDEA for model-driven development with Unified Model Language (UML). Visual Paradigm embeds itself to IntelliJ IDEA to provide a unified modeling and development environment, dramatically increase the speed of requirement capturing, analysis, design, development, testing and deployment for software architects, analyst, designer and developers using IntelliJ IDEA.
		Here are the main features:
		
			Use Case Details Editor
			Enhanced XMI Import/Export to support UML 2.0
			Enhanced Smart Resources
			EJB Code Generation and Deployment
			EJB Diagram Support
			Advanced ORM Features
			Customizable SQL
		
		For more infomration, please visit: http://www.visual-paradigm.com/product/sde/ij/
      '';
    };
  }) {};

  sgsonformat = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SGsonFormat";
    plugname = "SGsonFormat";
    plugid = "SGsonFormat";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11100/49532/SGsonFormat.jar";
      sha256 = "0s7jgbidww9zxagksz6dxbbhnc66f5swpbm7hjr6kspsxr6cc6d1";
      name = "SGsonFormat-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.zuche.com";
      license = lib.licenses.bsd2;
      description = ''
        Base on GsonFormat plugin, make Json bean class implements Serializable;
    To make Json bean class available after proguard
      '';
    };
  }) {};

  sk-fluent-builder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SK-Fluent-Builder";
    plugname = "SK Fluent Builder";
    plugid = "com.sskorupski.intellij.plugin.builder.mock.fluent";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11045/53018/java-fluent-builder.jar";
      sha256 = "1i0qqhc0zv6wwdncdyjyvahpn8wf2asagnvfcgbskg6337v1gvy1";
      name = "SK-Fluent-Builder-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/sskorupski/java-mock-fluent-builder/wiki/Home";
      license = lib.licenses.gpl3Only;
      description = ''
        Intellij Idea plugin to generate Java Builders for a class:

      
        A simple fluent builder
        A Mockito fluent builder for mocking a class fields accessors
      

      
      Thanks to Anshul Bajpai Builder plugincode which helps me to release
      this one
      '';
    };
  }) {};

  smog-matcher-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SMOG-Matcher-Generator";
    plugname = "SMOG Matcher Generator";
    plugid = "com.mistraltech.smogen";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7469/106893/SMOG_Matcher_Generator-1.0.2.zip";
      sha256 = "1v3qpxyq1wjn4fk24pkrwb8h5d3ahgm2igzi1s13bjmjh0466mjz";
      name = "SMOG-Matcher-Generator-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mistraltech.co.uk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7469/license.txt";
        free = false;
      };
      description = ''
        Generates a companion matcher class for a selected Java class based on the SMOG library extension to Hamcrest.

The SMOG library supports property matching on object graphs. For more details, see the project page
at GitHub

This plugin is also hosted at GitHub

Usage

This plugin adds a Generate Matcher menu option to the Code menu in IntelliJ IDEA.

It generates matcher classes that can be used as Hamcrest matchers.

The generated class has a dependency on the supporting SMOG library, hosted at https://github.com/mistraltechnologies/smog
and available from Maven Central.

The menu option is enabled when a Java class is selected.

After selecting the menu option, a dialog is provided to specify parameters relating to how the new matcher will be generated.

Confirming the dialog causes the new class to be generated.
If the class already exists, you are given the option to overwrite the existing class or abort.
      '';
    };
  }) {};

  soar = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SOAR";
    plugname = "SOAR";
    plugid = "io.github.helloworlde.soar";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11417/53241/Soar-1.0.2.zip";
      sha256 = "17aylqxwdr4867bqyanfn40wa7hcaqps66yx8w0pma1aks1vswzl";
      name = "SOAR-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/helloworlde";
      license = lib.licenses.asl20;
      description = ''
        SOAR(SQL optimizer And Rewrite) is plugin of SOAR which for
            analysis SQL performance and optimize.
        
        
        How to use it
        
        
            SOAR dependent GO environment, so you need install and configure Go environment first
            Open settings and find SOAR configuration panel, click Init button
            Execute download and modify permission command like content in dialog
            After executed the command, input SOAR location and click check button to verify SOAR is installed
                correctly
            
            Modify configuration of database as your's by file or manual config
            Choose SQL content you need to analysis or format, right click call Editor popup, find SOAR and click
                relevant menu, then show analysis result dialog or replace origin content as formatted SQL
            
        
        
        
            You can get more help of configuration or report issue in
            soar-jetbrains-plugin
        
        
        
            SOAR(SQL optimizer And Rewrite) 是一为小米数据库工具 SOAR 开发的 IDE 插件，用于
            SQL 优化改写
        
        如何使用
        
        
            SOAR 执行依赖于 GO 运行环境，请先确保 GO 环境安装配置正确
            打开设置，找到 SOAR 的设置面板，点击 Init 按钮获取安装命令
            执行弹窗内的命令，下载 SOAR 并修改执行权限
            执行完命令后，将 SOAR 的路径填写在配置中，点击 Check 按钮检查是否正确配置
            修改配置文件，可以选择使用文件配置或者手动配置
            选择需要分析或格式化的 SQL 内容，右键选择编辑弹窗，找到 SOAR 菜单并选择需要的功能，执行完成之后会弹窗显示分析结果或用格式化后的 SQL 替换原来的内容
            
        
        
        
            可以在 soar-jetbrains-plugin 获取详细配置信息或反馈问题
      '';
    };
  }) {};

  sql-android = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SQL-Android";
    plugname = "SQL Android";
    plugid = "com.sqlandroid";
    version = "0.1.48";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11283/79977/SQLAndroid_0.1.48.jar";
      sha256 = "1djm5jscqx0hvdf8xqhg7akjmvkcsc7p5i4y06l60in1ylhbvfn2";
      name = "SQL-Android-0.1.48.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.sqlandroid.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.sqlandroid.com/eula.html";
        free = false;
      };
      description = ''
        SQLAndroid improve the work with databases allowing you to download the data for editing and then send it back to the device or emulator.
   
  This year, for free, the premium package for everyone!!
  
    Get databases from device
    Update database from device
    Upload database back to device
    Filter rows
    Edit database
    
      Add rows
      Clone rows
      Edit cells
      Delete rows
      Apply changes
    
    Backup database
    
      Backup your database
      Restore backups
    
    SQL scripts
    
      Execute SQL scripts
      Save SQL scripts
      Change SQL scripts database
      Select environment
    
    Environments
    
      Define variables
    
    Compare databases
    
      Compare with device versionpluginIcon.svg
      Compare with backup versionpluginIcon.svg
      Compare with another database
      '';
    };
  }) {};

  sql-dal-maker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SQL-DAL-Maker";
    plugname = "SQL DAL Maker";
    plugid = "dal-mpe";
    version = "1.161.2021-01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7092/108448/external1";
      sha256 = "0g3bmwrcgagpxkpf2kn7fwj4xy66c74c1v98gqnr1r2fa2slis5a";
      name = "SQL-DAL-Maker-1.161.2021-01";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://sqldalmaker.sourceforge.net/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/panedrone/sqldalmaker/blob/master/src/LICENSE.txt";
        free = false;
      };
      description = ''
        SQL DAL Maker is a generator of DTO and DAO classes to access relational databases. Target programming languages:
PHP, Java, C++, Python, Ruby. To generate the class, you declare it in XML meta-program.

Download mp4
      '';
    };
  }) {};

  sql-formatter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SQL-Formatter";
    plugname = "SQL Formatter";
    plugid = "jp.roundrop.sqlformatter";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10858/47151/SQLFormatter.jar";
      sha256 = "0j62clhwm0wibr918xb4n9w3knfrqjhnq7bmnwl2alz3jqy8fxcs";
      name = "SQL-Formatter-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/roundrop";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/licenses/lgpl-2.1.html";
        free = false;
      };
      description = ''
        JetBrains IDE plugin for viewing formatted SQL text on tool window.
      '';
    };
  }) {};

  sql-params-setter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SQL-Params-Setter";
    plugname = "SQL Params Setter";
    plugid = "com.yangchenwen.sqlparamssetter";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14608/95061/sql-params-setter.jar";
      sha256 = "11dcmhnwl2156kpil8ny2f05lkigpvjzzs0i0lc4m2d09kn6fg84";
      name = "SQL-Params-Setter-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yangchenwen/sql-params-setter";
      license = lib.licenses.asl20;
      description = ''
        A simple tool that helps you to extract a executable sql from mybatis logs like below:
      
      
          &nbsp;&nbsp;&nbsp;&nbsp;==&gt; Preparing: select * from table where name = ?
      
      
          &nbsp;&nbsp;&nbsp;&nbsp;==&gt; Parameters: Tom(String)
      
      
      After selecting these two lines of logs above, you can right click your mouse
      and select "SQL Params Setter" in the popup menu, then the result executable sql,
      i.e. "select * from table where name = 'Tom'" will be copied to your clipboard.
      
      
      
        Note:
        
          The selected area should contain both keyword [Preparing:] in the 1st line and keyword [Parameters:] in the 2nd line.
        
      
      
      
        Github
      '';
    };
  }) {};

  sql-query-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SQL-Query-Plugin";
    plugname = "SQL Query Plugin";
    plugid = "SQL Query Plugin";
    version = "2.2";
    src = fetchurl {
      url = "http://java.sstiller.de/sql/ks-sql_2.2.zip";
      sha256 = "0cch9z0lj36mhnzl7dncz018igic1mgkgq16f0cdhpyn3hj94g36";
      name = "SQL-Query-Plugin-2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://java.sstiller.de/sql/index.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/228/license.txt";
        free = false;
      };
      description = ''
        A tool for executing SQL statements through a JDBC connection.
		Features:
		Syntax highlighting
			Executing multiple statements at once
			Highlighting of primary and foreign keys
			Editing of results
			Support for easier configuration of common JDBC driver
			Support of different column formats (including custom formats)
			Browser for database structure
			Statement templates for often used statements
			Support for Java BLOB's
			Export into XML, HTML, CSV and Excel
			Data Load
      '';
    };
  }) {};

  sql2javabean = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SQL2JavaBean";
    plugname = "SQL2JavaBean";
    plugid = "com.netease.music";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13494/75255/sql2meta.zip";
      sha256 = "0s49s479jm53h5py3f9bpigz521k3pr520ihjndjfqqn44yw6jgr";
      name = "SQL2JavaBean-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Convert SQL to Java Bean.
      SQL
      Java Bean
      Converter
      '';
    };
  }) {};

  sqldelight = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SQLDelight";
    plugname = "SQLDelight";
    plugid = "com.squareup.sqldelight";
    version = "1.4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8191/99132/SQLDelight-1.4.4.zip";
      sha256 = "1692sfsx8nw16h43jc7qlw9iwd7fw2wsdqh230rc91zddjnl0xfk";
      name = "SQLDelight-1.4.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/square";
      license = lib.licenses.asl20;
      description = ''
        Generates typesafe Kotlin APIs from SQL, and provides language
      features for SQL inside the IDE.
      '';
    };
  }) {};

  sqlhelper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SQLHelper";
    plugname = "SQLHelper";
    plugid = "com.RedTeam.unique.plugin.id";
    version = "0.81";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8329/25590/SQLHelper.zip";
      sha256 = "07bp1h6q3xz1ibmmp6mdr6nnyl3si4d6jmjfzr19pgfqxb303dsy";
      name = "SQLHelper-0.81.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/VertigoStr/SQLHelper/tree/master";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/VertigoStr/SQLHelper/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        SQLHelper is a simple tool for generation Java code to work with SQLite database. The following features are available:
  
 
 Generation of Java code that implements the basic functions to work with databases : update, delete, insert and select 
 Generation of Java code that uses sqlite-jdbc 3.7.2 
 Generation of Java code that uses Android SDK 
 Editing database on the device or on your computer 
 Push or Pull database file using Android Debug Bridge 
 Creating SQL queries 
 Device monitor, which will help you navigate the connected device or emulator 
  Requirements
  
 
 Android Debug Bridge 1.0.32 
 Root access on device 
 sqlite3 on device
      '';
    };
  }) {};

  sqlscout-sqlite-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SQLScout-SQLite-Support";
    plugname = "SQLScout (SQLite Support)";
    plugid = "com.idescout.sqlite";
    version = "7.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8322/106913/SQLScout-7.3.0.zip";
      sha256 = "1qwy5klhnngx3xaqgcjplaa6fbcmsnynm78al1q4r8rjaisb2f3n";
      name = "SQLScout-SQLite-Support-7.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.idescout.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.idescout.com/secure/buy";
        free = false;
      };
      description = ''
        First-class SQLite support for Android Studio and IntelliJ IDEA.
      View, manage and update SQLite databases in your Android device (in real time) and file system, from
      Android Studio and IntelliJ IDEA.
      '';
    };
  }) {};

  ssmcodegen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SSMCodeGen";
    plugname = "SSMCodeGen";
    plugid = "SSMCodeGen";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12705/65305/SSMCodeGen.zip";
      sha256 = "0ja67gxrlyzw03di630kl1yz589pdgm9yz0b04sc2z3qpacd6j06";
      name = "SSMCodeGen-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://example.com";
      license = lib.licenses.asl20;
      description = ''
        SSM Code Generate
      
      JavaToWeb
      Integration SpringMVC
      Integration MyBatis
      Integration Shiro
      '';
    };
  }) {};

  ssv-normandy-progress-bar = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SSV-Normandy-Progress-Bar";
    plugname = "SSV Normandy Progress Bar";
    plugid = "io.acari.normandy.progress.bar";
    version = "1.9.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12025/104679/normandy-progress-bar.1.9.8.zip";
      sha256 = "1ww64n0d3lfdjn69qnzgfjxgg5m83lzd5r4xk1w717s73lkhivb0";
      name = "SSV-Normandy-Progress-Bar-1.9.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://unthrottled.io";
      license = lib.licenses.mit;
      description = ''
        Your progress bar becomes the SSV Normandy SR-1 traveling at FTL.
      '';
    };
  }) {};

  stser = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "STSer";
    plugname = "STSer";
    plugid = "com.rhtech.stser";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10184/40950/STSer.jar";
      sha256 = "0kwg219kp8lkxdrkm7z9g6r513a0gfys7g9sfwc049yf2rq1qp5f";
      name = "STSer-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rozaydin/STSer";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/rozaydin/STSer";
        free = false;
      };
      description = ''
        STSer Reads STS configuration from downloaded STS config (default location is ''${user.home}/Downloads) and sets in to active intellij run configuration
      '';
    };
  }) {};

  sv-lab = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SV-Lab";
    plugname = "SV Lab";
    plugid = "com.microfocus.sv.intellij-idea-plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13464/105503/sv-lab-idea-plugin-1.0.2.zip";
      sha256 = "1yb2sl110h3i1pj1dgklc00j6lpg7lskrfa457lizh6lmys63p00";
      name = "SV-Lab-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.microfocus.com/products/service-virtualization";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.microfocus.com/media/documentation/micro_focus_end_user_license_agreement.pdf";
        free = false;
      };
      description = ''
        Debug SV Lab simulation models in your IDE.
    This plugin integrates with Java tests using SV Lab providing virtual
    services and displays messages processed/simulated by virtual services
    during the test.
    
      
        See the demo
        of the plugin in action.
      
        SV Lab
        is a powerful service virtualization toolkit which integrates seamlessly
        with Java, JavaScript and mobile application tests.
      '';
    };
  }) {};

  svg2vectordrawable = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SVG2VectorDrawable";
    plugname = "SVG2VectorDrawable";
    plugid = "com.moxun.plugin.s2v";
    version = "1.9.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8103/102125/svg2android.zip";
      sha256 = "1q17qii2wq14pja5gahaz284ws9xjrppcr1qd0ac4i12hbrbkx7x";
      name = "SVG2VectorDrawable-1.9.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/misakuo/svgtoandroid";
      license = lib.licenses.mit;
      description = ''
        Tools for convert SVG file to Android VectorDrawable.
      
      Sourcecode and Tutorial
      Bug report
      If this tool is helpful to you, please give me a star on Github
      '';
    };
  }) {};

  svga-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SVGA-Support";
    plugname = "SVGA Support";
    plugid = "cc.moky.intellij.plugin.svga-support";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12760/96638/intellij-plugin-svga-support-1.0.8.zip";
      sha256 = "08z0rsvgbml1g6z7hnq4m27jcp5v7z8pcfpws86cq78zcsk1q5j1";
      name = "SVGA-Support-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mokyue";
      license = lib.licenses.asl20;
      description = ''
        SVGA Support Plugin

Source&nbsp;|&nbsp;
Issues&nbsp;|&nbsp;
SVGA Homepage

The Latest Animation Format

    SVGA is a cross platform animation format. Furthermore, SVGA is also a perfect solution for creating animation in cooperation with designers and developers. SVGA includes SVGAConverter and SVGAPlayer. Designers aim at the design of excellent visual effect and animation content, then export SVGA file by SVGAConverter. Developers use SVGAPlayer to play animation without extra coding. SVGAPlayer is available in different platform including iOS, Android, Web. &gt;&gt; Getting Started


Why SVGA？

    Friendly to the Developer - The convenient SDK enables SVGA to run on different platforms. The integration step is easy and easy.
    Friendly to the Designer - Designers can use After Effects or Animate CC (Flash) for animation design, and SVGA can support most of them. Animation files can be converted to SVGA file by using the tools.
    Cost-Effective - The smaller animation files, the higher performance animation play will provide, the more realistic animation effects will be.
      '';
    };
  }) {};

  svn-disconnect = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SVN-Disconnect";
    plugname = "SVN Disconnect";
    plugid = "SVN Disconnect";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6529/11948/SVNDisconnect.jar";
      sha256 = "0pssfqkwslsx7knk659dlzmfm0vsr5icjk73ghn15qdih9zn510j";
      name = "SVN-Disconnect-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/6529/license.txt";
        free = false;
      };
      description = ''
        This plugin add SVN disconnect action to VCS menu. This action perform disconnect project from SVN and clean project from svn specific folders (.svn)
      '';
    };
  }) {};

  svnlabel = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SVNLabel";
    plugname = "SVNLabel";
    plugid = "com.ponshine.svnlabel";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14018/86303/SVNLabel-1.6.zip";
      sha256 = "1d7540hiam7qhvc3m9xgfgc90xsvc755hyfgqbqgb59sa3si603s";
      name = "SVNLabel-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pxzxj";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.baidu.com";
        free = false;
      };
      description = ''
        Subversion label decoration right next to the file like they have in eclipse .
    Label shows SVN information on resources in projects under SVN control. 
    Information includes the revision number, author and commit time. 
    Do you like it? Give it a star at GitHub.
      '';
    };
  }) {};

  svntoolbox = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SVNToolBox";
    plugname = "SVNToolBox";
    plugid = "zielu.svntoolbox";
    version = "202.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7321/93506/SVNToolBox-202.0.0.zip";
      sha256 = "01n8cm6qw8mdvnj6430xx66cqx6dzlpnh5qjq88vrw02xrvkw65c";
      name = "SVNToolBox-202.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zielu/SVNToolBox";
      license = lib.licenses.asl20;
      description = ''
        Enriches SVN integration
    Development status
    Maintenance - bug fixes and releases for new IntelliJ versions
    Features
    
      Status bar component:
        
          displays branch for currently open file
          shows tooltip with URL for currently open file
        
      
      Project View decorations:
        
          display branch for module
          display branch for switched files
          can be toggled in VCS -&gt; Svn ToolBox
          can be customized in Settings -&gt; Svn ToolBox
        
      
      Additional Subversion context menu actions:
        
          'Configure branches' extracted from 'Update' dialog as item
          'Copy URL' to clipboard action
          'Show Lock Info' for current selection
      '';
    };
  }) {};

  sage-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sage-Theme";
    plugname = "Sage Theme";
    plugid = "com.funk.sage.theme";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12308/68307/sage-1.0.4.jar";
      sha256 = "0m1sdsw0l4l27xw7x3grjjwqkm6zd4g7az3ypqqa8w1qmkgbkfdm";
      name = "Sage-Theme-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/funkhouser/intellij_themes/tree/master/sage";
      license = lib.licenses.asl20;
      description = ''
        A theme with green throughout for use in Intellij 2019.1 and beyond.
      '';
    };
  }) {};

  saker-build-system = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Saker.build-system";
    plugname = "Saker.build system";
    plugid = "saker.build.ide.intellij";
    version = "0.8.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14152/92239/saker.build.ide.intellij-v0.8.15.jar";
      sha256 = "1a8ir75rnv2cwi3x9f7a5ykg9a49fgba3p33ji21hqyz8y163k6h";
      name = "Saker.build-system-0.8.15.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://saker.build";
      license = lib.licenses.gpl3Only;
      description = ''
        Core plug-in for the saker.build system.
        
        Enables running saker.build for your projects and provides build script assistance.
      '';
    };
  }) {};

  salesforce-id-converter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Salesforce-Id-Converter";
    plugname = "Salesforce Id Converter";
    plugid = "com.malukenho.saleforceid";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11561/54307/salesforceid.jar";
      sha256 = "0yg4vdjbrghhxb9qhk88x7rlgycpkwimpmwaiq8vlr99ia2cl1x8";
      name = "Salesforce-Id-Converter-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/malukenho";
      license = lib.licenses.mit;
      description = ''
        It generates 18 digits IDs from 15 Salesforce Id.
      '';
    };
  }) {};

  salesforce-package-xml-sorting = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Salesforce-package.xml-sorting";
    plugname = "Salesforce package.xml sorting";
    plugid = "com.zabadaj.marcin.sorting.packagexml";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12457/63006/XMLSorting.jar";
      sha256 = "1gd20bwi179v1wbd57ciwa3n1pscsn0dqf9w18cwxq9gyyfk484s";
      name = "Salesforce-package.xml-sorting-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://marcin-zabadaj.herokuapp.com/";
      license = lib.licenses.mit;
      description = ''
        Plugin can be used for sorting alphabetically entries in Salesforce manifest file
      To use, open package.xml file, click on "Salesforce" in top menu and select "Sort package.xml"
      '';
    };
  }) {};

  samebug = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Samebug";
    plugname = "Samebug";
    plugid = "Samebug";
    version = "1.0.0+idea";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8174/49365/samebug-idea-plugin-1.0.0+idea.zip";
      sha256 = "1h6fvj1yp86gbmxa41qb1bhd38q83xrvv32i2fhb93p1wdb492qm";
      name = "Samebug-1.0.0+idea.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://samebug.io";
      license = lib.licenses.asl20;
      description = ''
        Automated stack trace search integration from samebug.io
      
        Captures stack traces on your debug console
        Connects your stack traces to the Samebug knowledge base
      '';
    };
  }) {};

  save-actions = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Save-Actions";
    plugname = "Save Actions";
    plugid = "com.dubreuia";
    version = "2.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7642/97103/intellij-plugin-save-actions-2.2.0.jar";
      sha256 = "0d9iai0bbwdakbhag158ncqcfx6glfnqyikgxdsi08b9lvy41i7a";
      name = "Save-Actions-2.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/dubreuia";
      license = lib.licenses.mit;
      description = ''
        Supports configurable, Eclipse like, save actions, including "optimize imports", "reformat code", "rearrange code", "compile file" and some quick fixes for Java like "add / remove 'this' qualifier", etc. The plugin executes the configured actions when the file is synchronised (or saved) on disk.

Features


  Optimize imports
  Run on file save, shortcut, batch (or a combination)
  Run on multiple files by choosing a scope
  Reformat code (whole file or only changed text)
  Rearrange code (reorder methods, fields, etc.)
  Include / exclude files with regex support
  Works on any file type (Java, Python, XML, etc.)
  Uses a settings file per project you can commit
  Available keymaps and actions for activation
  Launch any editor action using "quick lists"
  [Java IDE] Eclipse configuration file `.epf` support
  [Java IDE] Automatically fix Java inspections
  [Java IDE] Compile project after save
  [Java IDE] Reload debugger after save


Compatibility


  Intellij IDEA
  PyCharm
  PHPStorm
  AndroidStudio
  WebStorm
  RubyMine
  CLion


Documentation


  Jetbrains plugin page
  Github README
  Github issues
  Twitter
      '';
    };
  }) {};

  save-backup = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Save-Backup";
    plugname = "Save Backup";
    plugid = "com.ken.savebackup";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10932/106451/SaveBackup.jar";
      sha256 = "0l5sz4zn5hzr9h200mza09ijim46slc87f7ln06v6j2pvknb9lsv";
      name = "Save-Backup-2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://kenstuddy.com";
      license = lib.licenses.mit;
      description = ''
        This JetBrains IDE plugin saves a backup copy of your current open file every time you save the file.
      '';
    };
  }) {};

  save-changelist-patches = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Save-ChangeList-Patches";
    plugname = "Save ChangeList Patches";
    plugid = "Save ChangeList Patches";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4279/45770/SaveChangeListPatches-1.5.0.zip";
      sha256 = "10ya85pwnsndib8agg6vnphrf7spys3r0yr7zxcmxf2z187384am";
      name = "Save-ChangeList-Patches-1.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/GunoH/saveChangelistPatches";
      license = lib.licenses.asl20;
      description = ''
        Saves each changelist as a patch in the location set in configuration.
      '';
    };
  }) {};

  save-to-bookmarks-dev = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Save-to-Bookmarks.dev";
    plugname = "Save to Bookmarks.dev";
    plugid = "dev.bookmarks.intellij.plugin";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14456/88244/bookmarks.dev-intellij-plugin.jar";
      sha256 = "17b45kwhlk2pivhajwdiaz9sjri58k4xhsflsilbwmb4jc64plha";
      name = "Save-to-Bookmarks.dev-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.bookmarks.dev";
      license = lib.licenses.mit;
      description = ''
        Supports saving code snippets on www.bookmarks.dev from IDE

      
      Select text:Right Click:Save to Bookmarks.dev - you are taken to the website,
       where most of the metadata for the codelet is auto-completed.
      

      
      See the HowTo/Codelets page for more information
      about managing your code snippets
      '';
    };
  }) {};

  scabbard---dagger-2-visualizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Scabbard---Dagger-2-Visualizer";
    plugname = "Scabbard - Dagger 2 Visualizer";
    plugid = "dev.arunkumar.scabbard.idea-plugin";
    version = "0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13548/89518/Scabbard_-_Dagger_2_Visualizer-0.4.0.zip";
      sha256 = "0xh34hypp52bznzmq81ayh6v1ngfg45nlvhizc7am505i3r8qc2k";
      name = "Scabbard---Dagger-2-Visualizer-0.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://arunkumar.dev";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ plugin to visualize Dagger 2 dependency graphs. Works alongside Scabbard gradle plugin.

    

    

    

    
        
            Visualize entry points, dependency graph, component relationships and scopes in your Dagger 2 setup.
        
        
            Minimal setup - Scabbard's Gradle plugin prepares your project for graph generation and provides ability to customize graph generation behavior.
        
        
            IDE integration - Easily view a @Component or a @Subcomponent graph directly from source code via gutter icons (IntelliJ/Android Studio).
        
        
            Supports both Kotlin and Java.
        
    
    

    More advanced examples.
      '';
    };
  }) {};

  scala = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Scala";
    plugname = "Scala";
    plugid = "org.intellij.scala";
    version = "2020.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1347/97667/scala-intellij-bin-2020.3.3.zip";
      sha256 = "0f5zzcphdsjb0gnhlddb4vvlgw159i1qhszad0jjfwjbsdcay3vm";
      name = "Scala-2020.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://confluence.jetbrains.com/display/SCA/Scala+Plugin+for+IntelliJ+IDEA";
      license = lib.licenses.asl20;
      description = ''
        Adds support for the Scala language. The following features are available for free with IntelliJ IDEA Community Edition:
        
        
          Coding assistance (highlighting, completion, formatting, refactorings, etc.)
          Navigation, search, information about types and implicits
          Integration with sbt and other build tools
          Testing frameworks support (ScalaTest, Specs2, uTest)
          Scala debugger, worksheets and Ammonite scripts
        
        
        Support for Play Framework, Akka and Scala.js is enabled in IntelliJ IDEA Ultimate.
      '';
    };
  }) {};

  scalagen-java-to-scala-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Scalagen-Java-to-Scala-converter";
    plugname = "Scalagen, Java to Scala converter";
    plugid = "org.github.feiwongreed";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8457/40303/idea-scalagen.zip";
      sha256 = "1jkf3w0xl16y3bcjd39b8mm8pa8c8p9w56qc5nxpxdnhd0i00pxr";
      name = "Scalagen-Java-to-Scala-converter-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pshirshov/idea-scalagen";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.wtfpl.net/txt/copying/";
        free = false;
      };
      description = ''
        This plugin allows you to convert Java code into Scala. Selection in current editor will be converted if any and the whole document if nothing is selected.  
 
 Default shortcut is Ctrl+K, Ctrl+G 
 Supports quick opening of Scala scrathes (default shortcut is Ctrl+K, Ctrl+S) and Java scratches (default shortcut is Ctrl+K, Ctrl+J)
      '';
    };
  }) {};

  scalariform = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Scalariform";
    plugname = "Scalariform";
    plugid = "com.thesamet.intellij.ScariformFormat";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7480/29477/scalariform-intellij-plugin.zip";
      sha256 = "01b4v3g5zdrcr264lrm76hbhp6s09xfmnrq95vn2qxhrm8i3g6al";
      name = "Scalariform-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.thesamet.com";
      license = lib.licenses.asl20;
      description = ''
        Formats Scala sources using Scalariform.
      '';
    };
  }) {};

  scarlett = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Scarlett";
    plugname = "Scarlett";
    plugid = "ru.scarlett";
    version = "0.1.alpha";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10868/47255/scarlett-plugin-0.1.alpha.jar";
      sha256 = "0rp1pg080f05k910j5b3c49d8a4f2arav19bh253kcqlnf2k6vsl";
      name = "Scarlett-0.1.alpha.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Speech control for IDEA.
    Scarlett listen for user commands and call matched actions.
      '';
    };
  }) {};

  scio-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Scio-IDEA";
    plugname = "Scio IDEA";
    plugid = "com.spotify.scio-idea";
    version = "0.1.21";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8596/73940/scio-idea-0.1.21.zip";
      sha256 = "074dl9hycxwpapp542q4mz3qy8mjpy3h35yakpzyxh9qz1gnysp1";
      name = "Scio-IDEA-0.1.21.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/spotify/scio-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/spotify/scio-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        IntelliJ IDEA plugin for Scio - https://github.com/spotify/scio
      '';
    };
  }) {};

  scipio-erp-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Scipio-ERP-Integration";
    plugname = "Scipio ERP Integration";
    plugid = "com.ilscipio.scipio.ce.scipio-editor";
    version = "4.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12108/83320/scipio-ide-4.2.0.zip";
      sha256 = "06v40h0hs8g38nnq3x30bmcwzgbdkcpgjx50la688j5n4zjw5g1j";
      name = "Scipio-ERP-Integration-4.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.ilscipio.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.scipioerp.com/license/editor-plugin-eula/";
        free = false;
      };
      description = ''
        Scipio ERP is a framework for the development of custom ecommerce and business application software distributed
          under the Apache License. The plugin works with all versions of Scipio ERP (although autocomplete is specific to latest release). OFBiz is also partially supported.

          Features:
          
              
                  New import option and auto-detection to simplify the setup of Scipio ERP projects in Intellij
                  New preconfigured Scipio ERP run/debug templates for easier system integration
                  New ToolbarMenu &amp; Project actions to refresh library sources (jar, sources)
                  Custom Editor for freemarker files. Adds templating toolkit autocomplete, full element documentation, highlighting and more. Detects inline expressions, directives, expressions and user directives. Supports new structure View.
                  Custom Editor for all Scipio ERP xml files. Detects and interprets "component://... " links. Adds autocomplete and documentation for services, entities. Adds structure view for all files.
                  Automatically sets up ant build (Note: Intellij uses an outdated ANT version. So running and task directly from intellij can result in incomplete or erroneous results. We are looking for alternatives for future releases.)
                  Various live-templates for Scipio ERP xml files and new context menu
                  Element folding &amp; structured overview
                  And much more
              
          
          Hints
          
          
              "Reload Resource Directories" can be triggered when a new component is added. This will allow for src directories of new components to be automatically detected.
              When in Scipio ERP XML files use "s:" or right click on location to access new autocomplete options
              For the templating toolkit editor, we highly recommend to set the severity level for html elements during
              code inspection to a lower level as html can sometimes be interrupted by templating code.
              "Help, my autocomplete seems broken in *.ftl files": Validate the file type association. A quick indicator is the file icon, which should display the
              scipio logo in the lower right corner. If missing, go to "Settings" &gt; "File Types" &gt; "Templating Toolkit" &gt; List should include *.ftl; Add if missing
          
          

          Bugs &amp; Feature Requests
          If you have any questions, feature requests or stumble upon the occasional bug, come join us at the Scipio ERP community
      '';
    };
  }) {};

  scopes-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Scopes-Manager";
    plugname = "Scopes Manager";
    plugid = "com.alexey-anufriev.scopes-manager-intellij-plugin";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14987/104505/scopes-manager-intellij-plugin-1.3.0.zip";
      sha256 = "02h1i2fhnhhmb5222ra1bs51jsn8kzzq36vqv4cqkbf8dhybriil";
      name = "Scopes-Manager-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://alexey-anufriev.com";
      license = lib.licenses.asl20;
      description = ''
        Scopes Manager
        

        GitHub |
        Issues
        
        

        Scopes bring more structure and easier navigation across the project tree.
        Scopes Manager Plugin is important for handy scopes management and related project resources.
        Any file or folder can be assigned to a scope (or unassigned) right from the tree view.
        
        

        Shortcuts:
        
        
        Add to Scope: Alt+S / ⌥+S
        Remove from Scope: Alt+D / ⌥+D
      '';
    };
  }) {};

  scorpion-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Scorpion-Progress-Bar";
    plugname = "Scorpion Progress Bar";
    plugid = "scorpion.progress.bar";
    version = "1.00";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12589/64340/ScorpionProgressBar.jar";
      sha256 = "04avrkrg40x8ayqj68k9j19yqa37j1xi7gpdjk00cjaq8f3c4p1i";
      name = "Scorpion-Progress-Bar-1.00.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Awesome progress bar for IJ based IDEs. Based on the Nyan Progress Bar by Dmitry Batkovich
      '';
    };
  }) {};

  scratch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Scratch";
    plugname = "Scratch";
    plugid = "Scratch";
    version = "1.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4428/36063/scratch.jar";
      sha256 = "0vkn5w040v815f319r1xfdmgk8b4xqh3ygvqbhsz0f1igj2bwy8g";
      name = "Scratch-1.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/scratch";
      license = lib.licenses.asl20;
      description = ''
        Quickly opens temporary IntelliJ text editor tab. 
 
 
 Alt+C, Alt+C - open default scratch 
 Alt+C, Alt+S - open list with all scratches 
 Alt+C, Alt+A - add new scratch 
 In scratches list popup: 
 
 Alt+Insert - add new scratch 
 Alt+Up/Down - move scratch 
 Shift+F6 - rename scratch 
 Delete - delete scratch 
 Ctrl+Delete - delete without prompt 
 (See also "Main menu -&gt; Tools -&gt; Scratch") 

 For more details see 
GitHub page.
      '';
    };
  }) {};

  screen-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Screen-Generator";
    plugname = "Screen Generator";
    plugid = "pl.gmat.screengenerator";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12020/103940/screengenerator-1.2.0.zip";
      sha256 = "1082l64pja64r8pfqnl2hbi4wgzaxw2sxgz32589pl9bqpgs1jw2";
      name = "Screen-Generator-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gmatyszczak/screen-generator-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/gmatyszczak/screen-generator-plugin/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin helps you automate your everyday development by generating all necessary files for your project's architecture
    when you are creating a new screen.

    For example, you are using MVP architecture and you are creating the Main screen. You can set up the plugin to generate for you:
    
    MainActivity.kt
    MainView.kt
    MainPresenter.kt
    activity_main.xml
    
    And you can also set content of each file!

    Plugin is fully open-source, you can find it here: https://github.com/gmatyszczak/screen-generator-plugin.
    Feel free to open an issue there if you notice any bug or have any feature request.
      '';
    };
  }) {};

  screenmatch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ScreenMatch";
    plugname = "ScreenMatch";
    plugid = "com.duke.screenmatch";
    version = "3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10058/101038/ScreenMatch.jar";
      sha256 = "1kxamcspfgcvwyawxfzijzyhjxj20v600h9kh6rgi6jhq418kcw5";
      name = "ScreenMatch-3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.csdn.net/fesdgasdgasdg?viewmode=contents";
      license = lib.licenses.asl20;
      description = ''
        A app screen match tools for android mobile devices.
      For example you can use on phone,pad,TV or other devices of android system.
      '';
    };
  }) {};

  screencasteditor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ScreencastEditor";
    plugname = "ScreencastEditor";
    plugid = "com.github.recognized.screencast.editor";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11442/53264/ScreencastEditor.zip";
      sha256 = "14cgdvsqvin32cxc43vjg9rsfr8z8rvxlwsr358ifq5na3bz3b02";
      name = "ScreencastEditor-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Recognized";
      license = lib.licenses.asl20;
      description = ''
        Plugin for editing IDE screencasts. (See ScreencastRecorder for recording)
    
    Features:
    
    Built-in audio editor and player. (Currently supports WAV and MP3 formats).
    Transcript based mode of audio editing.
    If transcript is absent it can be obtained by transcribing recorded speech using external speech recognition service. (Now, only Google Speech-to-text API is supported).
    Visual editor of script's actions' timings.
    Script can be edited as regular Kotlin file without time offsets, ScreencastEditor will automatically try to guess missing offsets.
    
    See GitHub repository for complete description and guide.
      '';
    };
  }) {};

  screencastrecorder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ScreencastRecorder";
    plugname = "ScreencastRecorder";
    plugid = "com.github.recognized.screencast.recorder";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11439/60789/ScreencastRecorder.zip";
      sha256 = "0b7g10fz8jxya7ll8m1cbh46x9m8c3z5rrnsj2hlgcjbgbnjjcjw";
      name = "ScreencastRecorder-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Recognized";
      license = lib.licenses.asl20;
      description = ''
        Plugin for recording and reproducing IDE screencasts.
    
    Recording:
    
    Start: Tools menu → Screencast Recorder →  Start recording
    Stop: Tools menu → Screencast Recorder → Stop recording
    
    After recording has been finished, you can san save or discard recorded screencast.

    Reproducing:
    
    Start: Right click on screencast in project view → Run screencast
    

    See ScreencastEditor plugin for editing.
      '';
    };
  }) {};

  scriptshortcut = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ScriptShortcut";
    plugname = "ScriptShortcut";
    plugid = "sncf.oui.scriptshortcut";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12509/69700/ScriptShortcut-2.0.0.jar";
      sha256 = "09nycfz2zkax0l15kxymcam98s81y1iys3liq2pfx09q9br8w14l";
      name = "ScriptShortcut-2.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/voyages-sncf-technologies/scriptshortcut";
      license = lib.licenses.bsd3;
      description = ''
        Script Shortcut is an Android Studio plugin. It allows you to bind a .sh file of your project to a Keybord shortcut.
    You can set your file in Settings&gt; Tools&gt; Script Shortcut. You can run it with the keyboard shortcut or from the toolbar menu Tools.
      '';
    };
  }) {};

  search-examples = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Search-Examples";
    plugname = "Search Examples";
    plugid = "com.yilnz.intellij.searchExamples";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15078/97050/searchExamples-1.0.zip";
      sha256 = "1s681xksa3jn8kyr9k1wbg2q35mndwbgmyb282jdxy4azss34nd4";
      name = "Search-Examples-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/me10zyl";
      license = lib.licenses.asl20;
      description = ''
        Search Java API Examples with caret select word
    
    Use editor context menu click Search Examples to search java api examples.
      '';
    };
  }) {};

  search-selected-text = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Search-selected-text";
    plugname = "Search selected text";
    plugid = "ru.andrey.search-plugin";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11437/53459/search-plugin-1.1.0.zip";
      sha256 = "0mx5y0gsz1rk985k61zfv8fx4ij2ggqrpcqs39pzc8xma3j8ims8";
      name = "Search-selected-text-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AntipovAndrey";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://termsfeed.com/eula/f5dbe30c54d027e804d206ee48097e23";
        free = false;
      };
      description = ''
        Search text that you've selected with Alt + G. Change the search engine in Settings | Tools | Change search engine
      '';
    };
  }) {};

  search-string-constants = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Search-string-constants";
    plugname = "Search string constants";
    plugid = "search-constant-strings";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11016/48959/idea-constant-string-plugin.jar";
      sha256 = "05bph2p4x4v9l775icwxya5z96plajjnz2ima38a04h1n7z3ipya";
      name = "Search-string-constants-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        The purpose of this plugin is to search for string literals in your code and replace them with existing constants from your code, SDK or libraries.
      It does so via a new inspection. For example: You create a REST service and filter http requests based on Content-type header.
      It's always better to use a constant for things like header names and values. And most probably you already have it somewhere in your http libraries.
      But which class, how to find them? Right, using this plugin and its inspection.
      '';
    };
  }) {};

  selectorchapek-for-android = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SelectorChapek-for-Android";
    plugname = "SelectorChapek for Android";
    plugid = "eu.inmite.android.plugin.selectorchapek";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7298/14065/android-selector-chapek.zip";
      sha256 = "0iwjxkhmglmv8dfawbgd64slmf1y9jll51ncx0qj8x3vlq61wd33";
      name = "SelectorChapek-for-Android-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/inmite/android-selector-chapek";
      license = lib.licenses.asl20;
      description = ''
        This plugin automatically generates drawable selectors from appropriately named Android resources.
      '';
    };
  }) {};

  selenium-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Selenium-plugin";
    plugname = "Selenium plugin";
    plugid = "SeleniumPlugin";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7676/25062/selenium_idea_plugin.zip";
      sha256 = "07ihbjrchsw80fkz6waig24q2j0vwfwjaychb77va8n1hhfhy066";
      name = "Selenium-plugin-1.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.perfect-test.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.perfect-test.com";
        free = false;
      };
      description = ''
        With our plugin your web tests development using selenium becomes as simple as it could be. All info you could find on our site : http://perfect-test.com
      '';
    };
  }) {};

  seleniumrc-server = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SeleniumRC-Server";
    plugname = "SeleniumRC Server";
    plugid = "SeleniumRC Server";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/648/1662/SeleniumRC_Server_1662.zip";
      sha256 = "1il47g36b2p3rmpqmgcl2fxy6ga4snrnjns4nikp2a5midkif24i";
      name = "SeleniumRC-Server-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        The Selenium Remove Control Server embedded as a plugin.
      '';
    };
  }) {};

  send-to-terminal = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Send-To-Terminal";
    plugname = "Send To Terminal";
    plugid = "send2terminal";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9409/66816/send2terminal.zip";
      sha256 = "05n1cp5b84bb1b7pwyybn8mvvnfhbyamjwggq38fj743409jzlvk";
      name = "Send-To-Terminal-1.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/holgerbrandl/send2terminal";
      license = lib.licenses.bsd2;
      description = ''
        Intellij plugin to send and evaluate current, selection or expression in terminal

        The following modes are supported
        
             Evaluate the current line or selection in the terminal
             Evaluate the current most top-level expression under the caret in the terminal
        

        Supported evaluation targets are
        
            Terminal (MacOS)
            iTerm2 (MacOS)
            R GUI (MacOS)
            Cmdr/ConEmu (Windows)
            R GUI (Windows)
      '';
    };
  }) {};

  sensei---code-reviews = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sensei---Code-Reviews";
    plugname = "Sensei - Code Reviews";
    plugid = "ca.ulaval.glo.sensei";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14037/83668/sensei-1.0.3.zip";
      sha256 = "0z52sl8w5b2y3lmzpi2xc0ll20r09l4y204ljxdi3avpj97f6v0i";
      name = "Sensei---Code-Reviews-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SamuelCabralCruz";
      license = lib.licenses.mit;
      description = ''
        This plugin has been developed to ease the work of software engineer courses' assistants that are in charge
        of going through tons of source files in order to provide feedback and advices to students. With this plugin,
        you will be able to attach comments to specific piece of code and/or general remarks about the entire project
        along with producing a simple and good looking static html report ready to be handed.
      '';
    };
  }) {};

  sensei-by-secure-code-warrior = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sensei-by-Secure-Code-Warrior";
    plugname = "Sensei by Secure Code Warrior®";
    plugid = "com.sensei.solutions";
    version = "4.29";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14015/103474/Sensei_Security-4.29-obf.zip";
      sha256 = "10jbpzj7bkyyi063mh27wjjab8g0xqmxxavr653fhccga9bbycl4";
      name = "Sensei-by-Secure-Code-Warrior-4.29.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.securecodewarrior.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://securecodewarrior.com/terms-of-service";
        free = false;
      };
      description = ''
        Sensei IntelliJ plugin helps you find and fix bad coding patterns dynamically by automatically
        highlighting violations as you write code and suggesting fixes that can be applied with a
        mouse click.
        
        Wipe out recurring anti-patterns in your code.
        Create Sensei recipes which detect the anti-patterns and can automatically rewrite the code
        using your preferred coding pattern.
        Making it easy to proactively improve your code quality.
        
        The recipes you create can be stored in your project and added to version control,
        making it easy to share recipes with your team. You can gradually build
        team-specific coding guidelines.
        
        Repeated use in the IDE helps build muscle memory so you stop making the same mistakes
        and move from detecting and fixing issues,
        to actively preventing them from entering your code in the first place.
        
        
        Additional Benefits include:
        
            Dynamically spot low-quality code patterns as you write code
            Automate code changes to implement your coding patterns
            Codify your coding standards
            No waiting for a static analysis tool report,
            analyze your code automatically on the fly
            Share your coding knowledge among teams
            Create recipes to recommend best practices
            Increase the consistency of your coding approach
            Link to any training material accessible online from the code in the IDE itself
            Link back to Secure Code Warrior learning platform material using categories
            Works with both Java and Kotlin
            Create recipes for instant feedback against common potential bugs
            Mitigate security vulnerabilities by creating rules that detect vulnerable code
            and provide an automated fix to a secure implementation
            Enforce coding patterns to improve the performance of your software
            Help weed out bad practice and common mistakes
            Create multiple quick-fix actions to automatically resolve any issue
            depending on your common use cases
            Preview both the detection and the automated fix against your actual
            code as you create the recipes
            Reduce false positives by writing your own recipes which match your environment
        
        
        Other tools might talk about rules, and rulesets, but that seems a little dictatorial to us.
        We like to think in terms of recipes because you can adjust them, season them,
        and tweak them for your own taste - using the ingredients you have available.
        And cookbooks because you’ll build your own collection of favourite recipes.
        
        Target bad coding patterns and fix them on the spot.
        Sensei allows you to create coding recipes that are distributed across teams so you can share
        coding knowledge, guide best practice and increase consistency.
        Sensei improves code quality across teams by stopping recurring flaws and makes it easier to
        implement guidelines,
        upgrade components or share guidance.
      '';
    };
  }) {};

  senya-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Senya-Editor";
    plugname = "Senya Editor";
    plugid = "io.senya.editor.intellij.plugin";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10690/69876/senya-intellij-1.2.1.zip";
      sha256 = "1v42v1265pcn9rjzgg2xa3s97wd0lv17pxsvmnjam0vpi96l4gfl";
      name = "Senya-Editor-1.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://senya.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://senya.io/senya-editor-end-user-license-agreement/";
        free = false;
      };
      description = ''
        Senya Editor: Design OpenAPI and Swagger specifications fast and effectively​
      Features:
      
        Supports OpenAPI 3.0 and Swagger 2.0 specifications
        Write specifications in YAML or JSON
        Code completions
        Specification validation
        Swagger UI integration
        OpenAPI Generator integration
      '';
    };
  }) {};

  sequencediagram = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SequenceDiagram";
    plugname = "SequenceDiagram";
    plugid = "SequenceDiagram";
    version = "2.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8286/107641/SequenceDiagram-2.0.6.zip";
      sha256 = "0s48vkc62f8qp2rd555gybd2yhh8lznh3sp767sywg99qw1ffjjg";
      name = "SequenceDiagram-2.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Vanco/SequencePlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        SequenceDiagram for IntelliJ IDEA
http://vanco.github.io/SequencePlugin.

with this plugin, you can
+ generate Simple Sequence Diagram.
+ Navigate the code by click the diagram shape.
+ Delete Class from diagram.
+ Export the diagram as image.
+ Export the diagram as PlantUML file.
+ Exclude classes from diagram by Settings &gt; Tools &gt; Sequence Diagram
+ Smart Interface(experimental)
+ Lambda Expression(experimental)

SequencePluginReload rename to SequenceDiagram.
Simple Sequence Diagram Generator. fixed version of SequencePlugin , work from 13.x.
The original version SequencePlugin come from ksibilev@yahoo.com.
      '';
    };
  }) {};

  serenade = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Serenade";
    plugname = "Serenade";
    plugid = "ai.serenade.intellij";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14939/108544/serenade-0.0.6.zip";
      sha256 = "1q52s7pxx1dykr9ig3kwa7n7al9pwssbzbcm18a4im95p02vxknh";
      name = "Serenade-0.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        The Serenade for IntelliJ plugin provides editing support and tab management.
      '';
    };
  }) {};

  serial-port-monitor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Serial-Port-Monitor";
    plugname = "Serial Port Monitor";
    plugid = "SerialPortMonitor";
    version = "0.5.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8031/79263/intellij-serial-monitor-0.5.5.zip";
      sha256 = "0dqcanwgxwha4zw6zk6cc3h4yrxh36xraisn0kxihzzvlabmksd5";
      name = "Serial-Port-Monitor-0.5.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/dmitry_cherkas/intellij-serial-monitor";
      license = lib.licenses.mit;
      description = ''
        This plugin aims to leverage Arduino development with CLion by providing Serial Monitor Tool Window. It allows you to communicate to your
      Arduino device without leaving the IDE. Functionality is pretty similar to those, available in Arduino IDE through "Serial Monitor Tool".
      

      Features:
      
       Serial Monitor Tool Window with project-based persistent settings
       Status widget
       Duplex Console View (Regular view + HEX)
      
      
      Note: Only COM port (both hardware and virtual) is currently supported. In order to use
      virtual COM port please make sure to install all necessary drivers.
      
      Icons made by Smashicons from  www.flaticon.com
      '';
    };
  }) {};

  serializethis = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SerializeThis";
    plugname = "SerializeThis";
    plugid = "com.brain.intelligent.SerializationCoder";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11175/50285/SerializeThis.jar";
      sha256 = "0j9af70w0cm157pqh40ssj1r2s1xqmjjwq1cyba7sbmnbsc2ps17";
      name = "SerializeThis-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        It is a tool for making a Java class &amp; its fields' class type to implement java.io.Serializable interface.
      '';
    };
  }) {};

  servicestack = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ServiceStack";
    plugname = "ServiceStack";
    plugid = "net.servicestack.ideaplugin";
    version = "1.0.41.41";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7749/107053/ServiceStackIDEA-1.0.41.41.zip";
      sha256 = "17lnx0yxxbaxh1yd22bbfkjbf7qfqqym66a20nvmv3n37m52lxym";
      name = "ServiceStack-1.0.41.41.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://servicestack.net/";
      license = lib.licenses.bsd3;
      description = ''
        Integration with ServiceStack Web Services, includes support for Java, Kotlin and TypeScript Add ServiceStack Reference.
      '';
    };
  }) {};

  set-of-inspections-for-check-a-getters = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Set-of-inspections-for-check-a-getters";
    plugname = "Set of inspections for check a getters";
    plugid = "com.github.profeg.IntelliJGettersCheckInspections";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8083/22686/IntelliJGettersInspections.jar";
      sha256 = "1nm6vrc7nh9q7cxikfg8kjxllknxln3rm4llb6637yqiscz7drha";
      name = "Set-of-inspections-for-check-a-getters-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://tndprof.wordpress.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/profeg/IntelliJGettersInspections/blob/pre_release/LICENSE";
        free = false;
      };
      description = ''
        Set of inspections for check getters.
 
 
 Check for name of a boolean property getter 
 Check for a probably getter 
 Check for a clashing getter names 
 Check for a methods name started from modal verb and probably getter 
 All inspections set off by default. So dont forget to swich it on.
      '';
    };
  }) {};

  settings-enforcer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Settings-Enforcer";
    plugname = "Settings Enforcer";
    plugid = "com.agido.idea.settings";
    version = "0.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9585/83819/SettingsEnforcer.jar";
      sha256 = "1021x81249a43phh0yzy9s9pd8c4psxf0sxrr1zvb69gbslislf0";
      name = "Settings-Enforcer-0.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/agido/settingsenforcer/";
      license = lib.licenses.asl20;
      description = ''
        Supports storing of IDEA Settings under version control that are normally stored as user settings.
      '';
    };
  }) {};

  sexy-editor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sexy-Editor";
    plugname = "Sexy Editor";
    plugid = "Sexy Editor";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1833/39039/Sexy_Editor.jar";
      sha256 = "0k9ln4y86zd49l1nzih83jzc3kga2q08k5bj2msvclxsyx0s3lii";
      name = "Sexy-Editor-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://oblac.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://oblac.com";
        free = false;
      };
      description = ''
        Make your IntelliJ IDE editor 
sexy with a background image in your editor's area :) Use different image(s) for different file sets, on various positions, in random mode, or even in slide-show mode! 

 This plugin is totally useless, but, hey, you'll become a major geek in the office:) Beware: usage of this plugin may produce some jealousy among your co-workers; or it may attract some romantic and passionate love: use it on your own risk! 

 https://github.com/igr/idea-sexyeditor
      '';
    };
  }) {};

  shadow-import-detector = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Shadow-Import-Detector";
    plugname = "Shadow Import Detector";
    plugid = "com.clazz.sonar";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11246/51230/clazz-sonar.jar";
      sha256 = "140zhbnky7vy4r1m7zl1dj37a5w4abjccykwgg06ahhz6wvbvva9";
      name = "Shadow-Import-Detector-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Class shadowing is bad, let's not do it.
      Seek help from "Analyse Imports" Menu!
      '';
    };
  }) {};

  share-on-sharemycode-io = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Share-on-ShareMyCode.io";
    plugname = "Share on ShareMyCode.io";
    plugid = "fr.nouvelle-techno.share-on-sharemycode-io";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15869/108253/share-on-sharemycode-io.jar";
      sha256 = "1a3i34i8l11fvd59hmx348nawrikw4igk8ck6jsz2a5kc62bi6ww";
      name = "Share-on-ShareMyCode.io-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://nouvelle-techno.fr";
      license = lib.licenses.mit;
      description = ''
        Easily share code snippets on ShareMyCode.io websiteSelect some code or open a file, then right click on selection or code and select "Share on ShareMyCode.io" option. You'll get your code shared on https://sharemycode.io and the share link copied to clipboard.Now, just send this link to anyone.
      '';
    };
  }) {};

  share-with-pastie = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Share-with-Pastie";
    plugname = "Share with Pastie";
    plugid = "Share with Pastie";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6267/13774/idea-pastie-plugin.jar";
      sha256 = "1rcdvs7sf40rbz0hyhivx1lyvzx95ws94f3k3zycm2zy0rlh63yh";
      name = "Share-with-Pastie-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://softwaremill.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/softwaremill/idea-pastie-plugin/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        This plugin allows to share selected code fragment using http://pastie.org service. It automatically detects language of selected fragment and then copies link to shared code into your clipboard. Sent code is marked as private so it is not visible publicly, only through the link. 

 Currently most languages connected with Java/JavaEE development are supported. If you find any language missing, please contact with author.
      '';
    };
  }) {};

  shared-views = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Shared-Views";
    plugname = "Shared Views";
    plugid = "com.hotels.intellij.plugins.sharedviews";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7911/20910/shared-views.jar";
      sha256 = "0h7wa58vvqww9myixiwzdqp3fi8a7910bgfw73pyk0wq5abw35b7";
      name = "Shared-Views-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/HotelsDotCom/shared-views";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows the grouping of classes and/or files into a view which can be shared by committing into a VCS.
      '';
    };
  }) {};

  sharedprefsmanager = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SharedPrefsManager";
    plugname = "SharedPrefsManager";
    plugid = "com.devlomi.sharedprefsmanager";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11034/49010/SharedPrefsManager.jar";
      sha256 = "0g4wyammx8lgj8lwwcs5hb4yclyvdbbl1p438nzrkp7rxq3rn7dj";
      name = "SharedPrefsManager-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.devlomi.com";
      license = lib.licenses.asl20;
      description = ''
        A plugin to Generate SharedPreferences methods easily
      '';
    };
  }) {};

  shell-filter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Shell-Filter";
    plugname = "Shell Filter";
    plugid = "de.dieploegers.develop.idea.shellfilter";
    version = "3.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9958/98553/shellfilter-3.0.3.zip";
      sha256 = "1dwsgf87d8fgh0601c9gd4wmp5mmzdnvb2c6ra0bjmk4r42dv4yj";
      name = "Shell-Filter-3.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dploeger/idea.shellfilter";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/dploeger/idea.shellfilter/master/LICENSE";
        free = false;
      };
      description = ''
        The Shell Filter plugin for Jetbrains IDEs enables the developer to run
an external shell command and insert or replace the returned output
into the current Editor.
      '';
    };
  }) {};

  shell-process = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Shell-Process";
    plugname = "Shell Process";
    plugid = "Shell Process";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6001/77728/shell-process.jar";
      sha256 = "11jfkr5yw6mzfkyw22i888l42n382zhhmf70bhf5dxfdvv7rsagp";
      name = "Shell-Process-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://code.google.com/p/shell-process/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/6001/license.txt";
        free = false;
      };
      description = ''
        Run a shell command on selected lines or the entire current buffer.
      '';
    };
  }) {};

  shifter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Shifter";
    plugname = "Shifter";
    plugid = "Shifter";
    version = "1.9.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6149/54647/Shifter.jar";
      sha256 = "1ip8bjs2mdkcvaba99rbikanz5ax03r0wcdyadcaqs1dzbdyqbcf";
      name = "Shifter-1.9.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/idea/plugin/6149";
      license = lib.licenses.asl20;
      description = ''
        String and code manipulations, performed on keyboard shortcut with detection of intended manipulation.
    The type of manipulation only has to be selected manually when multiple are possible.
    
    Do you like it? Give it a star at GitHub.
    Rate it at plugins.jetbrains.com.
    There's no future for Shifter without support from the community!
    
    When evoked, Shifter detects the type of selection (or lets the user chose when ambiguous) in the current line or
    keyword at the caret and performs the possible string manipulation.
    
    If there's only one shiftable word in a line, it can be shifted without the caret touching it.
    Lowercase/uppercase or lower case with upper first character within shifted words is maintained.
    
    DEFAULT KEYBOARD SHORTCUTS
    
        Ctrl+Shift+Alt+Comma  - Shift Down
        Ctrl+Shift+Alt+Period - Shift Up
        Ctrl+Shift+Alt+K - Shift Up More*
        Ctrl+Shift+Alt+J - Shift Down More*
    
    Shift more: repeats shifting a value multiple times. The amount of repetitions can be configured in the plugin configuration (default: 10).
    
    Mac Users:
    On Macs, the keyboard shortcuts are Comma or Period key together with Shift+Alt+Cmd
    
    SHIFTING TYPES
    
    Sorting
    
        Shifting a multi-line selection sorts the lines alphabetically ascending/descending.
        Shifting a single-line selection, that is a comma- or pipe-separated list, sorts the items ascending/descending.
        Shifting a single-line selection, that is XML attribute-value pairs, sorts them alphabetically.
        Shifting a single-line selection, that is a tupel, flips the items' order (delimiters: ":", "|", ", ", " - ", " + ", " &lt; ", " &gt; ", " &lt;= ", " &gt;= ", " == ", " != ", " === ", " !== ", " || ")
        Shifting a selection that is a camelCased (w/ lower or upper lead character) word pair, flips the order of the words.
        Shifting a selected AND &amp;&amp; or OR || logical conjunction with two operands, swaps the operands' order
        Shifting a selected (from questionmark on) ternary expression, swaps "than" and "else" statements
        Shifting a selected PHP concatenation from two strings / variables, toggles the concatenated items' order
        Shifting a selection from a CSS file, sorts all attributes inside their selectors (alphabetically, vendor-attributes and vendor-styles at the end)
        Shifting selected attribute-style lines inside a CSS (or LESS or SASS) file, sorts them (alphabetically, vendor-attributes and vendor-styles at the end)
    
    Numeric Shifting
    
        Numeric values - Incrementing/decrementing numbers
        Strings ending with numbers - increments/decrements the postfix
        Numeric block selection: opens dialog to chose: 1. in/decrement each or: 2. replace by enumeration
        UNIX (and millisecond based) timestamps - Increments/decrements by one day, shows a balloon info with the shifted date in human-readable format
        CSS hex RGB colors - Shifts color value lighter/darker
        CSS length values - Shifts numeric length values up/down by 1 (units: em, in, px, pt, cm, rem, vw, vh, vmin, vmax)
        Increment/decrement roman numerals
    
    String Manipulations
    
        Shifting a selection within a single line: detects and swaps characters: single quote vs. double quote OR slash vs. backslash
        Shifting a selected (or the caret touching a) camel-cased string, converts it into a minus- or underscore-separated path (and vice versa)
        Strings wrapped in single/double quotes and backticks - Shifts to alphabetically next/previous quoted string found in current document
        Parenthesis: Strings surrounded by round, square or curly brackets: toggles surrounding "(" and ")" to "[" and "]" to "{" and "}"
        Logical operators: toggles between (selected) "&amp;&amp;" and "||"
        HTML en/decoding of selected special characters
        Single characters and string consisting from any amount of the same character can be shifted to the previous/next ASCII value
        Escaped single or double quotes can be unescaped when shifting a selection
    
    Code- and DOC Comments
    
        Selection which is a block comment or multiple line-comments (e.g. PHP, JavaScript, C syntax) - toggle among comment type (//... vs. /*...*/). Merges multi-line comments into 1 line.
        Selected line of code ending with a trailing //-comment - Moves the comment into a new line before the code
        Selected HTML comment inside a PHP / PHTML file: converts it into a PHP block comment (and vice versa)
        PHPDoc: Shifting a selected PHP doc comment block that contains @param comments w/ variable name but no data type, guesses and inserts data types
        PHPDoc: Shifting while the caret is inside an @param annotation that contains no data type, inserts a data type (guessed from the variable name)
        JsDOC: Shifting w/ the caret touching a data type that is not wrapped in curly brackets, inside an "@param", "@returns" or "@type" annotation: adds the missing curly brackets
        Selected JsDoc block: Convert "@return" into "@returns", add missing curly brackets around data types in "@param", "@returns" and "@type" lines, correct invalid data types into existing data types (bool =&gt; boolean, int(eger) =&gt; number), reduce empty JsDoc lines
    
    PHP, JavaScript and TypeScript shifting
    
        PHP variables - Shifts to alphabetically next/previous variable found in current document ("shift more" shifts until first variable with a different first letter)
        Selected PHP array - Shifts among long and shorthand syntax (PHP &gt;= 5.4)
        Selection which is a Sizzle-Selector - Converts the selector into a corresponding JavaScript variable declaration
        Selection of multiple JavaScript var declarations in succession - are joined into multiple comma-separated declarations
        Selected deprecated jQuery observer methods are modernized, e.g. ".click(" becomes ".on('click', ": Event types: blur, change, click, dblclick, error, focus, keypress, keydown, keyup, load, mouseenter, mouseleave, resize, submit, scroll, unload
        Selected JavaScript string concatenation in TypeScript file - Converts to TypeScript string interpolation
    
    Dictionaric Keyword Shifting
    
    Shifter comes with a customizable, file extension specific and globally usable dictionary of shiftable keywords.
    Some keyword types from the default dictionary:
    
        PHP core magical constants - Shifts PHP's magic constants (__FILE__/__LINE__ etc.)
        CSS orientations and positioning: top/right/bottom/left and absolute/relative, and geographical directions (north/east/south/west)
        Accessibility types: public/private/protected
        MySql data types: Shifts to next bigger/smaller numeric/string type
        Primitive data types of Java, JavaScript, PHP, Objective-C
        Doc comment tags (Java, JavaScript, PHP)
        JavaScript event types (mouse, keyboard, frame/object, form, control, touch)
        Named colors from the sRGB color space (white/lightgray/gray...)
        Text styles (bold, italic...)
        Web image (gif/jpg/png) and audio (au/aif/wav etc.) format extensions
        Full and abbreviated names of months and weekdays and units of time
        Logical operators (and/or/xor/not), arithmetic operations (addition/subtraction...) and arithmetic elements (sum/difference/product..)
        Meta-syntax terms: foo/bar/baz...
        Names of common data collection types (list/set/bag/dictionary/tree...)
        Names of numbers (one/two/three etc.) and ordinal numbers (first/second/third  etc.)
        Boolean (paired) keyword values - Toggles true/false, on/off, yes/no (e.g. Objective-C), shown/hidden, show/hide, positive/negative, from/until, enable(d)/disable(d), pass/fail, min/max, expand/collapse, asc/desc, first/last
        
    
    
    Tip: Using Mouse Wheel
    
    To setup the mouse wheel to invoke shifting, open the IDE preferences and go to: “Keymap”.
    Search for “Shift”, than right-click the shifter action items and use the option “Add mouse shortcut”.
    Mouse shortcuts can include hotkeys, this way for instance “Shift + Wheel Up” can be assigned to “Shift-Up”,
    “Shift + Wheel Down” to “Shift-Down”.
    
    Please note: This plugin is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      '';
    };
  }) {};

  shortcut-trainer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Shortcut-Trainer";
    plugname = "Shortcut Trainer";
    plugid = "Shortcut Trainer";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7064/11469/shortcut-trainer.jar";
      sha256 = "1l1mg7qx59bcnnbvclnpnzajzshrdkrasg6zx74ylzh6p2nx65pf";
      name = "Shortcut-Trainer-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Allows you to train your current keymap by presenting the description of a random shortcut (Cmd-Shift-K / Ctrl-Shift-K). If you don't know the shortcut you can ask for the solution (Alt-S) or try the next (Alt-N).
      '';
    };
  }) {};

  shortcut-translator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Shortcut-Translator";
    plugname = "Shortcut Translator";
    plugid = "Shortcut Translator";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6827/18355/shortcuttranslator.jar";
      sha256 = "0dl1cz38brgrwa5jbjm7qkw71s1p3gs4yh1vqiqz3k4mh4a32vrp";
      name = "Shortcut-Translator-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/janickr/shortcuttranslator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/6827/license.txt";
        free = false;
      };
      description = ''
        Translates shortcuts from one keymap to another. Let's say you want to try this Jetbrains IDE you heard about, but you are used to the Eclipse / TextMate / Emacs / Netbeans shortcuts. Sure, you can easily change your keymap in IDEA / RubyMine / PyCharm ... But you want to learn the default Intellij shortcuts, just like you learned the TextMate shortcuts in TextMate and the Eclipse shortcuts in Eclipse. This plugin together with the ctrl+shift+a shortcut wil get you up to speed in no time. press Ctrl+Shift+K to activate the plugin or select &quot;Translate Shortcut&quot; from the help menu
      '';
    };
  }) {};

  shortcuts-stats = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Shortcuts-stats";
    plugname = "Shortcuts stats";
    plugid = "com.github.marbor.shortcutsstats";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14712/99123/shortcuts-stats-2.0.0.zip";
      sha256 = "01jswx4fzh6f726l29na1vhqzbl7hlz5lrwyjg930g5awadjni6k";
      name = "Shortcuts-stats-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/borowskimarcin/shortcuts-stats";
      license = lib.licenses.asl20;
      description = ''
        Intellij plugin that counts number of shortcuts used. Find more here: https://github.com/borowskimarcin/shortcuts-stats.
      '';
    };
  }) {};

  shorty-mnemonic = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Shorty-Mnemonic";
    plugname = "Shorty Mnemonic";
    plugid = "shorty.mnemonic";
    version = "1.41";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13447/77300/ShortyMnemonic.jar";
      sha256 = "1ysr5043662jm30j8ldr86nm5gn01d80ivcs83rv2qm7y74wqhvc";
      name = "Shorty-Mnemonic-1.41.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        It suggests to assign smart shortcut like Alt+F, Alt+B combination when you use 'Foo Bar' action that doesn't have shortcuts at all.
      '';
    };
  }) {};

  show-as---- = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Show-As-...";
    plugname = "Show As ...";
    plugid = "Show As ...";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7010/90418/show-as.jar";
      sha256 = "07q2a54zwjcxdhd2kh361vhnrby2fbcln0k0a5s2sxhsbfz0bfzd";
      name = "Show-As-...-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/woezelmann/show-as";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "osl-3.0";
        free = false;
      };
      description = ''
        DISCLAIMER:
      
      This plugin is developed for and with IntelliJ Idea. The compatibility list is compiled automatically by JetBrains. Bugs in other JetBrain products still might appear.
      Nevertheless I encourage you to file issues in github. 
      

      A small plugin to display formatted data out of the debugger and console.
      Uses IntelliJ's build-in formatting capabilities.
      No more need to copy values from debugger or console to a file to format them there.

      Following formats are supported: 
      
         JSON
         SQL (optional, requires database plugin)
         XML
         Base64 encoded JSON
         Base64 encoded text
       

       Usage:
       
        
       While debugging, a new context menu item ("Show as") is added to every variable, allowing you to display the value of this variable formatted.
       The context menu item is available in debugger -&gt; variables, debugger -&gt; watches and when evaluating expressions.
        
        
       From console, just select text that should be formatted, right click it and select "Show as".
      '';
    };
  }) {};

  show-rest-services = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Show-REST-Services";
    plugname = "Show REST Services";
    plugid = "Show REST Services";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9503/42603/RestDocumentation.jar";
      sha256 = "0wbnnfzrjmzz2phab58yjx04jbs2lhdxisaapmvn6ba60cpawyvr";
      name = "Show-REST-Services-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/miguelcordovam/intellij_plugins/tree/master/RestDocumentation";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/miguelcordovam/intellij_plugins/tree/master/RestDocumentation";
        free = false;
      };
      description = ''
        Donate with PayPal

 Show REST Services will create a Tool Window containing all the REST services in your project grouped by module and HTTP method. 
 
How does it work?
 1. Install the plugin and restart.
 2. Go to "Tools &gt; Show REST Services".
 3. A Tool Window named "REST Services" will show up on your right.
 4. Navigate through the tree, click on any REST Service and you will go directly to that service code in your Editor.
 5. Right-click on any service and copy the full url or copy a cURL command.
 6. Use the search box to filter the services. 

 If you find the plugin useful, please consider any of these: 
 - 
Donate with PayPal  to support the project
 - Send me an email or leave a comment saying thanks.
      '';
    };
  }) {};

  show-and-hide-modules = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Show-and-hide-modules";
    plugname = "Show and hide modules";
    plugid = "com.syndatis.idea.showandhide";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7803/20614/showandhide.jar";
      sha256 = "06yzfrk15g62i9lwkz1hjggz1pz0lxhh3zyy38mbldd6cz7n0ayp";
      name = "Show-and-hide-modules-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://syndatis.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://syndatis.com/";
        free = false;
      };
      description = ''
        Automates the enabling and disabling of active modules via the &quot;Mark as excluded&quot; mechanic.
      '';
    };
  }) {};

  showdialog = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ShowDialog";
    plugname = "ShowDialog";
    plugid = "com.wildma.plugin.showdialog";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12464/63046/ShowDialog.jar";
      sha256 = "12q7hil77z9q8q3lx8sczbkmb9w30hamgvxixddkrwjz9rnbhyjp";
      name = "ShowDialog-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wildma";
      license = lib.licenses.asl20;
      description = ''
        You can show a dialog, and you can enter your name here, then your name will be displayed.
      '';
    };
  }) {};

  siddhi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Siddhi";
    plugname = "Siddhi";
    plugid = "org.wso2.siddhi";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10212/42654/Siddhi-IntelliJ-Plugin.zip";
      sha256 = "13rg2a1p65rxkmylxp1pilzbi25ssy0xmdgmgrdk0g70prab789s";
      name = "Siddhi-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://wso2.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wso2/siddhi-plugin-idea/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Siddhi is a java library that listens to events from data streams, detects complex conditions described via a Streaming SQL language, and triggers actions. 
 It performs both Stream Processing and Complex Event Processing. 
 This plugin supports development of Siddhi applications with IntelliJ IDEA.
      '';
    };
  }) {};

  side-mirror = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Side-Mirror";
    plugname = "Side Mirror";
    plugid = "com.wajahatkarim3.sidemirror";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13983/84498/mirror-1.0.2.zip";
      sha256 = "0mjgy9xjcnv4j2v2n3ffh2rlkndy8vcvpkczc5kvbgf3izjx4gfg";
      name = "Side-Mirror-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://wajahatkarim.com";
      license = lib.licenses.asl20;
      description = ''
        Mirror your connected Android devices with scrcpy directly from Android Studio.
    Made with ❤ by Wajahat Karim and Side Mirror contributors.

    

    
    Usage:
    Install the plugin.
    Download and install scrcpy from this link.
    Click on Side Mirror option in Toolbar and set the path to scrcpy EXE file.
    Now, this will start the scrcpy when you press Side Mirror button.
    All done!
      '';
    };
  }) {};

  sidenotes = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SideNotes";
    plugname = "SideNotes";
    plugid = "de.cmm.side_nodes";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13006/86391/SideNotes.jar";
      sha256 = "06j7ky1ki9vpgyiwqybnxmr353150j3dyapfs3ddl7gj1ijfw5vn";
      name = "SideNotes-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Adds a tool window, which lets you write notes for each individual project.
      '';
    };
  }) {};

  silverstripe-template-language-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SilverStripe-Template-Language-Support";
    plugname = "SilverStripe Template Language Support";
    plugid = "com.raket.silverstripe";
    version = "0.9.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7201/34634/idea-silverstripe.jar";
      sha256 = "0i5d7yg9iydaac7i693kvxl8cjbc1h19j3afag2xh1jg7lvz6gmv";
      name = "SilverStripe-Template-Language-Support-0.9.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/raket/idea-silverstripe";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/raket/idea-silverstripe";
        free = false;
      };
      description = ''
        SilverStripe template language support
 
 Issues, feature requests and contributions welcome: 
https://github.com/raket/idea-silverstripe
      '';
    };
  }) {};

  simple-builder-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Simple-Builder-Generator";
    plugname = "Simple Builder Generator";
    plugid = "net.objecthunter.idea.BuilderGenerator";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12420/62407/idea-builder-plugin.jar";
      sha256 = "14rvp0vhmxslvkpppazr4n7yki4v74qvf22sj1a7jrjil3q9ysqr";
      name = "Simple-Builder-Generator-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.objecthunter.net";
      license = lib.licenses.asl20;
      description = ''
        This plugin creates static inner Builders, as proposed in Josh Bloch's Book 'Effective Java'
      '';
    };
  }) {};

  simple-camelcase = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Simple-CamelCase";
    plugname = "Simple CamelCase";
    plugid = "com.fan.plugin.SimpleCamelCase";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12884/67529/SimpleCamelCase.jar";
      sha256 = "0id9xkzrbbis9baycp58amv2zycsqqf7lgrdpf1im2wg7yrcs7as";
      name = "Simple-CamelCase-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        'Toggle Case' support camelCase .remove 'Toggle Case' shortcut.CAMELCASE &lt;-&gt; camelcase camelCase &lt;-&gt; CAMEL_CASE
      
      default keymap:
            windows -&gt; ctrl + shift + U 
            Mac     -&gt; command + shift + U 
            just make caret on the word that you can convert it.
            (不选择会转换光标位置上的单词)
      
      rule:
            CAMELCASE -&gt; camelcase
            camelcase -&gt; CAMELCASE
            java file:
            camelCase -&gt; CAMEL_CASE
            CAMEL_CASE -&gt; camel_case
            camel_case -&gt; CAMEL_CASE
            camel_camelCase_CASE -&gt; CAMEL_CAMEL_CASE_CASE
            xml file:
            camelCase -&gt; camel_case
            camel_case -&gt; CAMEL_CASE
            CAMEL_CASE -&gt; camelCase
            camel_camelCase_CASE -&gt; camel_camel_case_case
            
      other:
      Better to remove 'Toggle Case' shortcut or replace it.
      How to remove:
      Settings -&gt; keymaps -&gt; search 'Toggle case' -&gt; right click -&gt; remove shortcut
      '';
    };
  }) {};

  simple-module-dependency-graph = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Simple-Module-Dependency-Graph";
    plugname = "Simple Module Dependency Graph";
    plugid = "de.docksnet.moddep";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7176/12661/moduleDepGraph.jar";
      sha256 = "1v5mb4mfglllj9m56998rdvrqc2sx7yqy16zhc47c34ykxjzsx4y";
      name = "Simple-Module-Dependency-Graph-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Stefku/intellij-simplemoddepgraph";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Stefku/intellij-simplemoddepgraph";
        free = false;
      };
      description = ''
        This very simple plugin generates the module dependencies as source for PlantUML and GraphML. You have to copy and paste the source into a viewer like http://www.yworks.com/en/products_yed_about.htm for GraphML.
      '';
    };
  }) {};

  simple-titles = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Simple-Titles";
    plugname = "Simple Titles";
    plugid = "com.roomj.simpletitles";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7750/83657/simple-titles-1.3.zip";
      sha256 = "141gzvgilg57prrbirvs1k85ljc20dcd2lg06894k5prshkifqbh";
      name = "Simple-Titles-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tylercal/simple-titles";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/tylercal/simple-titles/master/LICENSE";
        free = false;
      };
      description = ''
        Limit the file part of the window title only include the file name.

      Windows speech recognition fails when a window title is too long, this alleviates the problem.
      '';
    };
  }) {};

  simpleactions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SimpleActions";
    plugname = "SimpleActions";
    plugid = "SimpleActions";
    version = "1.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/207/3454/SimpleActions_3454.zip";
      sha256 = "1i91yws3j3my49mx2w409qhmx46b3fxlcynd9afhxwahqj2gbv33";
      name = "SimpleActions-1.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jroller.com/ulc/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jroller.com/ulc/";
        free = false;
      };
      description = ''
        Adds some simple but convenient actions for IntelliJ IDEA.
     
       Actions:
       
         hide all bottom tool windows, press Shift+Alt+F12 (or choose 'Hide Bottom Tool Windows' from Window menu)
         highlight method implementations, press Ctrl+Alt+Shift+F7 on any interface or class reference that the current class implements or extends
             (or choose 'Highlight Implementations in Class' from Search and Context menu)
         copy Class.Method(ParameterTypes) to clipboard, press Ctrl+Alt+Shift+M on any method
             (or choose 'Copy Class.Method' from Edit and Context menu)
      '';
    };
  }) {};

  simplecodereview = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SimpleCodeReview";
    plugname = "SimpleCodeReview";
    plugid = "org.idea.SimpleCodeReview";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12267/69538/SimpleCodeReview.jar";
      sha256 = "1czj6pbpj5flvpg2l61z9jqhbhl3r6ll16snpwhcjarjp0r4imfq";
      name = "SimpleCodeReview-1.0.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.bsd3;
      description = ''
        It is convenient  when Development Engineer recording,Cached,viewing And exporting Code Review info.
                1. Right-click Add Code Review to add a bug information record for the reviewer to review a block of code
                    and display it in the following SimpleCode Review list
                2. SimpleCodeReview List supports checking, clearing, and exporting Review information
      '';
    };
  }) {};

  simpleintentions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SimpleIntentions";
    plugname = "SimpleIntentions";
    plugid = "SimpleIntentions";
    version = "1.5.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/59/3456/SimpleIntentions_3456.zip";
      sha256 = "17v8dr49k9fbyr3p4y039yfy35kg3dm7g2648hwwcbfg8r2hmyxp";
      name = "SimpleIntentions-1.5.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jroller.com/ulc/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jroller.com/ulc/";
        free = false;
      };
      description = ''
        Adds some simple but convenient intentions and inspections for IntelliJ IDEA.
     
       Intentions:
       
         unwrap if-statements, synchronized-statements, try-statements, and (do-)while-statements
         copy method Javadoc from overriden/implemented method
         add missing method parameter Javadoc
       
     
     
       Inspections:
       
         detect log statements that are not surrounded by a log level check
         detect fields and method parameters that don't match the naming preferences defined in the current code style settings
         detect fields of configurable types that are erroneously declared as being static
         detect class/method/field modifiers that don't match order suggested by JLS
         detect redundant method/field modifiers
         detect redundant field initialization
      '';
    };
  }) {};

  simplepowerpack = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SimplePowerPack";
    plugname = "SimplePowerPack";
    plugid = "SimplePowerPack";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/34/83/SimplePowerPack_83.jar";
      sha256 = "1r2cr4gkcpwcilcgf5snql5cnarc3485i466w85y7wf8qcydz8p5";
      name = "SimplePowerPack-0.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Collection of simple utilities for IDEA.
      Defines actions: Next True Error (Alt+F2), Previous True Error (Alt+Shift+F2),
        Next Todo (Ctrl+Shift+F2), Previous Todo (Ctrl+Alt+Shift+F2),
        Hide All Bottom Windows (Alt+F12)
      '';
    };
  }) {};

  simplerouter-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SimpleRouter-Helper";
    plugname = "SimpleRouter Helper";
    plugid = "sg.bigo.mobile.android.srouter";
    version = "0.9.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12683/66200/SimpleRouterHelper-0.9.5.zip";
      sha256 = "1s9agzmvkh54ajlzcv1x6l7p73fq0l3ph3dwr8drfbixlsy4xjal";
      name = "SimpleRouter-Helper-0.9.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bigo.sg";
      license = lib.licenses.asl20;
      description = ''
        SimpleRouter Helper. 
     1.Fast jump from routing path to target source
     2.Global quick view, search and location function of Routing Table.
      '';
    };
  }) {};

  simpleweather = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SimpleWeather";
    plugname = "SimpleWeather";
    plugid = "com.github.kojiGit55";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12233/60934/SimpleWeather-1.1.zip";
      sha256 = "02acdm6b4l6xblyh131aci18j78b2hj6vrxhll5ffc0micp91qsk";
      name = "SimpleWeather-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kojiGit55";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.kmonos.net/nysl/";
        free = false;
      };
      description = ''
        This plugin shows current weather from OpenWeatherMap.
    Default keymap is C-w
      '';
    };
  }) {};

  simplifytraditional-chinese-converter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SimplifyTraditional-Chinese-Converter";
    plugname = "Simplify,Traditional Chinese Converter(简繁转换)";
    plugid = "com.dengzii.plugin.converter";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13372/72833/SimTraConverter.jar";
      sha256 = "1156brbw0iph68k2ricggv568ikaq5q9nx33vxm3qnkgjvkyfxw0";
      name = "SimplifyTraditional-Chinese-Converter-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://dengzii.com";
      license = lib.licenses.mit;
      description = ''
        The simplify chinese and traditional chinese converter.
      '';
    };
  }) {};

  single-hotswap = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Single-Hotswap";
    plugname = "Single Hotswap";
    plugid = "net.labymod.intellij.singlehotswap";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14832/108168/singlehotswap.jar";
      sha256 = "13vb37r268yfdg1rnd5bwjmdxlws4azr2msvk7cp4jh67afpi8i3";
      name = "Single-Hotswap-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.labymod.net";
      license = lib.licenses.mit;
      description = ''
        With this plugin you can hotswap a single file that is selected.
      It will provide a blue hammer next to the green "Build Project" hammer.
      
      
      The builtin feature of Intellij "Compile and Reload" always reloads every single file
      that is referenced by the target class.
      '';
    };
  }) {};

  singletongenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SingleTonGenerator";
    plugname = "SingleTonGenerator";
    plugid = "com.laomao.space.id";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10022/38604/SingleTonGenerator.jar";
      sha256 = "0shmy6l9hplkznmnhqwlxw8c61rmcby129f7mx4zf6s1l9nk5kxv";
      name = "SingleTonGenerator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.laomao.space";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.laomao.space";
        free = false;
      };
      description = ''
        A plugin that helps you to create singleTon class
      '';
    };
  }) {};

  singleton-inspection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Singleton-Inspection";
    plugname = "Singleton Inspection";
    plugid = "SingletonInspection";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6015/77497/IdeaSingletonInspection.zip";
      sha256 = "0hraxr8542n87ywh9xnndgxiz68pg539gjzb11z067clajqihvhk";
      name = "Singleton-Inspection-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/stokito/IdeaSingletonInspection";
      license = lib.licenses.asl20;
      description = ''
        This inspection reports about (probably) inappropriate use of the Singleton pattern.
        Just write getInstance() method, and the inspection will check this class like a Singleton.
        A Singleton class should be checked for next errors:
        
        The class should be final.
        The class should have private constructor.
        The getInstance() method must be public and static and return instance of its class.
      '';
    };
  }) {};

  singletontest = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SingletonTest";
    plugname = "SingletonTest";
    plugid = "com.zone.unique.plugin.singleton";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8538/45603/SingletonTest.jar";
      sha256 = "0xynbcn9zafhjl78ffb55y5l7bz557vz4ww96kq5q8wm65v53p5p";
      name = "SingletonTest-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        generate singleton template.
      '';
    };
  }) {};

  sireum-v3 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sireum-v3";
    plugname = "Sireum v3";
    plugid = "org.sireum.intellij";
    version = "3.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8148/48444/sireum-v3-intellij.zip";
      sha256 = "0dsygd8a5jh2bzfj7zjqq27aqf50491c71dacp51hiksz6vypc7w";
      name = "Sireum-v3-3.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://robby.santoslab.org";
      license = lib.licenses.bsd2;
      description = ''
        Sireum is a software analysis platform being
        developed at SAnToS Laboratory, Kansas State University.
        This plugin integrates Sireum tools such as the Logika program verifier and
        natural deduction proof checker for propositional, predicate, and programming logics
        with IntelliJ.
      '';
    };
  }) {};

  sireum-v3-injector = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sireum-v3-Injector";
    plugname = "Sireum v3 Injector";
    plugid = "org.sireum.intellij.injector";
    version = "3.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10357/48443/sireum-injector.jar";
      sha256 = "0gf4q48pkqgq8v288pl9j1rz0k6vw02ghg9nmgjwfqw0zc32f5zx";
      name = "Sireum-v3-Injector-3.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://robby.santoslab.org";
      license = lib.licenses.bsd2;
      description = ''
        Sireum is a software analysis platform being
        developed at SAnToS Laboratory, Kansas State University.
        This plugin provides an IntelliJ Scala language injector for the Sireum language.
      '';
    };
  }) {};

  sketch-it = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sketch-It";
    plugname = "Sketch It!";
    plugid = "org.pmesmeur.sketchit";
    version = "0.07.00";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10387/68269/sketch.it.jar";
      sha256 = "13zd8j90hndg8la34b3q4sdysply4af1lcinndbzsgxgdhzdh6cv";
      name = "Sketch-It-0.07.00.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/pmesmeur/sketch.it";
      license = lib.licenses.gpl3Only;
      description = ''
        SketchIt!
      

      SketchIt@bitbucket.org |
      SketchIt@jetbrains.com |
      Author |
      Donate with PayPal
      
      

      SketchIt! is a reverse-engineering plugin that generates UML diagrams from your code in the PlantUML format. For this reason, it works perfectly with plugin PlantUML integration
      
        (In its current version, it has only been tested with Java code)
      
      
      

      Usage
      
        To generate or refresh diagrams, nothing more simple; let's go to the Tools menu and select "Sketch It! (generate UML diagrams)"
      
      


      Features
      
        Generate a component diagram at the project root
        Generate a light class diagram per module
        Generate a detailed class diagram per package
        Generate methods inside classes
        Generate attributes inside classes
        Generate inheritance relationships between classes
        Generate association relationships between classes
        Generate inner-classes relationships
        Distinguish classes, abstract classes, interfaces, enumerations
        Generate possible values for enumeration
        Generate visibility for methods and attributes
        Distinguish static methods and attributes
      '';
    };
  }) {};

  slf4j-log-format-converter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Slf4j-log-format-converter";
    plugname = "Slf4j log format converter";
    plugid = "com.ldriscoll.slf4jlogformat.intention.plugin";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7764/78016/Slf4jLogFormatIntentions.jar";
      sha256 = "04x93765vxw861a84sp36di6awq37qk7za81f3jclm9jxxa587bv";
      name = "Slf4j-log-format-converter-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ldriscoll/Slf4jLogFormatIntentions";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        Adds an intention to allow the conversion of '+' into Logger.info formats with '{}'.
      '';
    };
  }) {};

  slimenum = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SlimEnum";
    plugname = "SlimEnum";
    plugid = "org.unirail.SlimEnum";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10316/41922/SlimEnum.jar";
      sha256 = "06q2akzkqmr2a3jrnykn7wx4sdwcp9cjmf7zsa0b4qw7hd4vdmy3";
      name = "SlimEnum-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.unirail.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/cheblin/SlimEnum/blob/master/LICENSE";
        free = false;
      };
      description = ''
        SlimEnum - it's the enum as we know it, 
fat-free alternative to the Java enums. It's utilize annotation declaration to provide required enum functionality for any, even primitive(byte,int..etc.), data types. 
 Declare it (can be nested). 


public @interface Font {
    @interface Foreground {
        int     BLACK = 0,
            RED = 1,
            GREEN = 2,
            YELLOW = 3,
            BLUE = 4,
            MAGENTA = 5,
            CYAN = 6,
            WHITE = 7,
            DEFAULT = 8;
    }

    @interface Background {
        int     BLACK = 0,
            RED = 1,
            GREEN = 2,
            YELLOW = 3,
            BLUE = 4,
            MAGENTA = 5,
            CYAN = 6,
            WHITE = 7,
            DEFAULT = 8,
            TRANSPARENT = 0;
    }

    byte    NORMAL = 0,
        BOLD = 1,
        UNDERLINE = 3,
        BLINK = 4,
        INVERSE = 5,
        STRIKE = 6;

    String  Helvetica = "Helvetica",
        Palatino = "Palatino",
        HonMincho = "HonMincho",
        Serif = "Serif",
        Monospaced = "Monospaced",
        Dialog = "Dialog";
}

 apply it to variables, fields, methods return type and method arguments 


class Test {
	@Font String name;
	@Font.Foreground int fg;

	@Font.Background int setBackground(@Font.Background int bg) {
		return bg;
	}
}

static void createFont(@Font String name, @Font byte style, @Font.Background int background, @Font.Foreground int foregraund) {
}

 and use it 


createFont(Font.Monospaced + Font.HonMincho + Font.Serif, Font.BLINK, Font.Background.CYAN, Font.Foreground.BLACK);
@Font String         name = Font.Dialog;
@Font byte           type = Font.NORMAL | Font.BOLD | Font.INVERSE;
@Font.Foreground int fg   = Font.Foreground.BLUE;

Test test = new Test();
test.setBackground(Font.Background.BLUE);
test.fg = Font.Foreground.BLUE | Font.Foreground.CYAN | Font.Foreground.MAGENTA;

test.fg = Font.Foreground.BLUE;

if (type == (Font.NORMAL | Font.BOLD | Font.INVERSE | Font.BLINK) &amp;&amp; test.setBackground(Font.Background.BLUE) == Font.Background.RED)
{
    @Font.Foreground int fgw = 3;
}
assert (test.setBackground(Font.Background.BLUE) == (Font.Background.CYAN | Font.Background.DEFAULT));

if (test.fg == Font.NORMAL &amp;&amp; test.fg != Font.NORMAL) {

}


switch (test.setBackground(Font.Background.BLUE))
{
    case Font.Background.BLUE:
        break;
    case Font.Background.CYAN:
        break;

}

 SlimEnum plugin recognize applied to variables annotation, data type, and provide correct constants set for the code completion. It was created as part of generated by the 
BlackBox java source code. 
BlackBox is a low level binary protocol boilerplate multilanguage ( JAVA, C, C#...SWIFT(upcoming)) code generator. This plugin bring support SlimEnum to the IDE and make using it easy and efficiently. 
Issues, new feature requests...
      '';
    };
  }) {};

  smallestwidth-dimens = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SmallestWidth-Dimens";
    plugname = "SmallestWidth Dimens";
    plugid = "com.wzc.sw.plugin";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12307/94092/SmallestWidthPlugin.zip";
      sha256 = "0f0bq71y5rckbk41c8p0216iwjpgaf2mf2symns2j4fzfcfqzkd4";
      name = "SmallestWidth-Dimens-1.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wuzuchang/SmallestWidthPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wuzuchang/SmallestWidthPlugin";
        free = false;
      };
      description = ''
        SmallestWidth Dimens.
      The plugin can be selected to generate the values-sw&lt;N&gt;dp folder and dimens.xml files by any module.
      一款可以选择再任意module下一键生成values-sw&lt;N&gt;dp文件夹和dimens.xml文件的插件。
      Shortcut key : ALT+P or  Tools Ι SmallestWidth
      '';
    };
  }) {};

  smallestwidthdp = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SmallestWidthDP";
    plugname = "SmallestWidthDP";
    plugid = "me.apon.swdp";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11932/57599/AndroidDP.jar";
      sha256 = "02pjlzyg2lyj26k3xw14c1wwgdb770xhl9yi67q790s391fkpykm";
      name = "SmallestWidthDP-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/apon/swdp";
      license = lib.licenses.asl20;
      description = ''
        a plugin to generate dimen file by designWidth and smallestWidth for Android Studio!.
      '';
    };
  }) {};

  smart-builder-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Smart-Builder-generator";
    plugname = "Smart Builder generator";
    plugid = "pl.pamsoft.smartbuilder";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7586/79471/SmartBuilder-1.7.zip";
      sha256 = "1cyx6997bdq4563zp202fqf42qpwrm19fq0p3wazxglsa2nyarxn";
      name = "Smart-Builder-generator-1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Based on build pattern described: blog.crisp.se
        
        To generate builder just hit Alt+Insert and choose 'Smart Builder generator'.
        
        Plugin allows you to easily create builder for given class. Eg. having class:
public class Person {
    String mandatoryFirstName;
    String mandatoryLastName;
    int mandatoryAge;
    int optionalHeight;
    Color optionalEyeColor;
    Color optionalHairColor;
}
You can generate builder:
public class Person {
    String mandatoryFirstName;
    String mandatoryLastName;
    int mandatoryAge;
    int optionalHeight;
    Color optionalEyeColor;
    Color optionalHairColor;

    private Person() {
    }

    public static IMandatoryLastName mandatoryFirstName(String mandatoryFirstName) {
        return new Person.Builder(mandatoryFirstName);
    }

    public interface IMandatoryLastName {
        IMandatoryAge mandatoryLastName(String mandatoryLastName);
    }

    public interface IMandatoryAge {
        IBuild mandatoryAge(int mandatoryAge);
    }

    public interface IBuild {
        IBuild optionalHeight(int optionalHeight);
        IBuild optionalEyeColor(Color optionalEyeColor);
        IBuild optionalHairColor(Color optionalHairColor);
        Person build();
    }

    private static class Builder implements IMandatoryLastName, IMandatoryAge, IBuild {
        private Person instance = new Person();

        private Builder(String mandatoryFirstName) {
            instance.mandatoryFirstName = mandatoryFirstName;
        }

        @Override
        public IMandatoryAge mandatoryLastName(String mandatoryLastName) {
            instance.mandatoryLastName = mandatoryLastName;
            return this;
        }

        @Override
        public IBuild mandatoryAge(int mandatoryAge) {
            instance.mandatoryAge = mandatoryAge;
            return this;
        }

        @Override
        public IBuild optionalHeight(int optionalHeight) {
            instance.optionalHeight = optionalHeight;
            return this;
        }

        @Override
        public IBuild optionalEyeColor(Color optionalEyeColor) {
            instance.optionalEyeColor = optionalEyeColor;
            return this;
        }

        @Override
        public IBuild optionalHairColor(Color optionalHairColor) {
            instance.optionalHairColor = optionalHairColor;
            return this;
        }

        public Person build() {
            return instance;
        }
    }
}
And use it like:
Person build = Person.mandatoryFirstName("John").mandatoryLastName("Doe").mandatoryAge(18).optionalHeight(180).build();
      '';
    };
  }) {};

  smart-jump = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Smart-Jump";
    plugname = "Smart Jump";
    plugid = "SmartJump";
    version = "2020.10.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14053/99265/smart-jump.jar";
      sha256 = "1lbq0xr5vgy2zmlr98b0z271cikj9r275zbqn3d86skrf4jmy5gb";
      name = "Smart-Jump-2020.10.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Smart Jump is a plugin that navigate to anywhere you want.
    
    
    Code Navigation:
    
      Java Method ➔ MyBatis Xml
      MyBatis Xml ➔ Java Method
      Html ➔ JS/CSS file
      Html ➔ JS function
      Vue event ➔ JS function
      JS file ➔ Java Controller RequestMapping
      Eggjs jump
      Maven pom.xml jump
    
    
    There has three ways to trigger a jump:
    
      Click the gutter icon on the left.
      Right click the popup menu 'Smart Jump'.
      Shortcut: Alt + J
    
    
    More scenarios will be supported in the future.
    Feel free to reach out to me with any scenario you want to be supported.
    
    
      Issues |
      Plugins |
      Email
      '';
    };
  }) {};

  smart-pojo-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Smart-POJO-Converter";
    plugname = "Smart POJO Converter";
    plugid = "com.zitiger.plugin.converter";
    version = "0.16.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12190/61164/SmartConverter-0.16.0.zip";
      sha256 = "1w4nqafrv883flzdchx8nzilvahia7gcdrn6m6f4ymlyyhm65vyc";
      name = "Smart-POJO-Converter-0.16.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zitiger/SmartConverter";
      license = lib.licenses.mit;
      description = ''
        SmartConverter -- POJO Object Converter

Intellij Idea Plugin for generating the converter method to convert one POJO bean to another. It supports single bean and list convert. It also supports the nested POJO convert.

Usage

Four convert methods


Put the caret in the class, not in any method.
Press Alt+Ins/CMD+N and select in menu "Smart Converter" or use shortcut Ctrl+Shit+N.
In the From dialog, select the Class you want to convert From.
In the To dialog, and select the class you want to convert To.
Press "Ok" and four converter methods will be added to your current class as following:



A -&gt; B
B -&gt; A
List&lt;A&gt; -&gt; List&lt;B&gt;
List&lt;B&gt; -&gt; List&lt;A&gt;


Single convert method


Finish the converter method signature without any method body as below
public static UserJO toUserJO(UserDTO userDTO) {

}

Put the caret in the above method.
Press Alt+Ins/CMD+N and select in menu "Smart Converter" or use shortcut Ctrl+Shit+N.
Plugin generates the converter code according to the return type and param type of method.



Note

Plugin also writes in comments list of fields, that were not mapped (appropriate setter or getter is missing or different types).

SmartConverter -- POJO转换代码生成器

项目背景

在分层开发中，我们总是面临着各种POJO（DTO,DO,JO,VO）对象之间的相互转换。当对象比较复杂时，编写转换代码耗时较多，且非常容易出错。以至于可能会出现写一天代码，半天在写各种convert的囧境。

为了实现自动转换，出现了BeanUtil和ModelMapper等解决方案。这些方案，在少量对象转换时，性能损耗可以忽略，但是当转换数量达到一定量级时，这种损耗会对性能产生影响。

本插件可以自动生成POJO之间的转换代码，省去手工转换的麻烦，也不会损失性能。

使用步骤

安装

下载SmartConverter.zip，并在Intellij Idea中安装；

四个转换函数


把光标放到函数中，不能是函数内.
光标移动到函数体内，按下⌘+N，在弹出的Generate菜单中选择Smart Converter;
插件自动生成一下四个转换函数



A -&gt; B
B -&gt; A
List&lt;A&gt; -&gt; List&lt;B&gt;
List&lt;B&gt; -&gt; List&lt;A&gt;


单个转换函数


在编辑器中，确定返回值和参数，完成空转换函数;


    public static List&lt;UserJO&gt; toDTOList(List&lt;UserDTO&gt; userDTOList) {

    }

光标移动到函数体内，按下⌘+N，在弹出的Generate菜单中选择Smart Converter;
插件根据入参和出参推断出需要转换的POJO。



插件特色


插件自动从转换函数的参数和返回值推断出转换POJO；

支持List之间的转换。


如果存在单个转换的函数，则直接使用

如果不存在单个转换的函数，创建单个转换函数


支持嵌套转换




感谢


https://www.jetbrains.com/help/idea/plugin-development-guidelines.html
https://github.com/DudarevDaniel/ConverterGenerator
      '';
    };
  }) {};

  smart-search-1_1 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Smart-Search-1_1";
    plugname = "Smart Search";
    plugid = "com.wannabe.smartsearch";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8222/24367/smart_search.jar";
      sha256 = "1ivcvbp0l9bh81vwbw014lgb3a9kygxs6lwsyv4a6xn4fg27khi6";
      name = "Smart-Search-1_1-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wbars/SmartSearch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wbars/SmartSearch";
        free = false;
      };
      description = ''
        Allows to do quick web search log information without project-specific data, such as: 
 
 Project class names with methods 
 Project file names
      '';
    };
  }) {};

  smart-search-2020_11_1 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Smart-Search-2020_11_1";
    plugname = "Smart Search";
    plugid = "com.obroom.plugin.smartsearch";
    version = "2020.11.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14615/102274/smart-search.jar";
      sha256 = "1n6p0im5vgd8dw539fjqkqgbag5hhc1i1z7nm8234cx8smy9wmg5";
      name = "Smart-Search-2020_11_1-2020.11.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        Search the selected text with custom search engine.
    
      Custom search engine in (File | Settings | Other Settings | Smart Search).
      Default support for Google, Github, stackoverflow, searchcode, Bing and others.
    
    
    
        Manual |
        Issues |
        Plugins |
        Email
      '';
    };
  }) {};

  smart-tomcat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Smart-Tomcat";
    plugname = "Smart Tomcat";
    plugid = "com.poratu.idea.plugins.tomcat";
    version = "3.8.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9492/100490/SmartTomcat-3.8.2.zip";
      sha256 = "0cnza006mjqxklrb1md78b4c0yaqg269kbq2g2rz3h80b4pfdvcs";
      name = "Smart-Tomcat-3.8.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zengkid/SmartTomcat";
      license = lib.licenses.asl20;
      description = ''
        This is for Tomcat Server plugin.
      The SmartTomcat will auto load the Webapp classes and libs from project and module,
      You needn't copy the classes and libs to the WEB-INF/classes and WEB-INF/lib.
      The Smart Tomcat plugin will auto config the classpath for tomcat server.

      The Smart Tomcat support Tomcat 6+
      '';
    };
  }) {};

  smart-align = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Smart-align";
    plugname = "Smart align";
    plugid = "com.github.ttyniwa.intellij.plugin.align";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13903/80119/intellij-smart-align-1.0.0.zip";
      sha256 = "1fcrf61yjmx6hlk1y6zfziirsrvschmqv1cc0w68dgbyfh1rwg5z";
      name = "Smart-align-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ttyniwa/intellij-smart-align";
      license = lib.licenses.asl20;
      description = ''
        Smart Align
A IntelliJ plugin to provide better vertical alignment.
Align your code by assignment(=, +=, -=, *=, /=), colon(:) and comma(,). also support trailing comment.
You don't have to select what to be aligned, this plugin automatically figure it out.
Compatibility
IntelliJ IDEA, Android Studio. (and maybe other JetBrains families.)
How to use
Place your cursor at where you want your code to be aligned, and invoke the Align command via Code -&gt; Smart Align or Press Alt + Shift + -.
Then the code will be automatically aligned.
Screenshots
align around cursor
Detects and aligns lines that use the same symbol group from the line around the cursor.

align selected text

more examples
Unit test code
Tips
Because Reformat Code and Smart Align conflicts, I recommend enabling formatter markers in comments via Settings -&gt; Editor -&gt; Code Style -&gt; Fromatter Control -&gt; Enable formatter markers in comments
// @formatter:off
write code here to be aligned.
// @formatter:on

Contribute

gradle test
gradle runIde
gradle buildPlugin

Acknowledgements
Intellij-smart-align is heavily inspired by Better Align for Visual Studio Code
      '';
    };
  }) {};

  smartfindviewbyid = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SmartFindViewById";
    plugname = "SmartFindViewById";
    plugid = "com.khande.idea.plugin.SmartFindViewById";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9918/39475/SmartFindViewById.jar";
      sha256 = "1n5zspmgb1p41qx589d8pqz1q8ravkkbrqkfa1ww4vb8j9y8wisc";
      name = "SmartFindViewById-1.2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Khande/SmartFindViewById";
      license = lib.licenses.asl20;
      description = ''
        This plugin is used for generating 
findViewById &amp; 
onClick code automatically in Android develop.
 As you need to findViewById, you must provide a target Android layout file name, then this plugin will attempt to find the Android layout file in the following ways by order smartly: 
 
 User select the layout file name for himself, e.g., user select the activity_main in code setContentView（R.layout.activity_main)  
 the line where the caret positioning 
 If the current class file is an Activity subclass, the setContentView(R.layout.) will be checked 
 If the current class file is an Fragment subclass, the inflate(R.layout.) will be checked 
 If the current class file is an RecyclerView.Adapter subclass, the inflate(R.layout.) will be checked 
 popup an edit dialog to ask user to input the layout file name 
 Once the layout file is found, this plugin will show a dialog to display the detail of the view in the layout file name and it can ignore(uncheck) the findViewById code already exist. You can also check or uncheck to decide which view code to generate.
 Besides, this plugin support to detect the include layout file and use a rootView to findViewById.
 （该插件可以依次通过 
 
 选中布局文件名，如选中代码段 setContentView（R.layout.activity_main) 中的 activity_main 
 检测当前光标所在行是否包含布局文件名（通过 R.layout. 前缀判断） 
 Activity setContentView(R.layout.xxx) 方法布局文件参数 
 Fragment(包括 support_v4 fragment) 中 onCreateView 方法中 inflate(R.layout.xxx... 布局参数 
 RecyclerViewAdapter 中 onCreateViewHolder 方法中 inflate(R.layout.xxx... 布局参数 
 弹输入框提示手动输入 
 来逐一尝试获取目标布局文件名，优先级从高到低，一旦有一个方法获取到了有效的布局文件名， 就会展示对应布局文件的所有拥有 id 的 View 控件，然后可以选择生成对应的 findViewById 和 onClick 点击事件代码。
 目前还支持展示和生成 include 布局下的 View 控件和支持 rootView.findViewById.
）
      '';
    };
  }) {};

  smartgs = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SmartGS";
    plugname = "SmartGS";
    plugid = "com.github.nuclearg.smartgs";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9956/105646/smartgs.jar";
      sha256 = "13hl9r2z6pbf1yqh6hsg539bnlz1vnyz7z045q77h7684vw2mkrk";
      name = "SmartGS-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nuclearg";
      license = lib.licenses.asl20;
      description = ''
        Generate Getter/Setters with Javadoc.

      Add a command in "Generate..."[Cmd-N] context menu, which can generate getter/setters with copying javadoc from raw fields.
      '';
    };
  }) {};

  smartim = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SmartIM";
    plugname = "SmartIM";
    plugid = "cn.ieclipse.smartqq.intellij";
    version = "2.7.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9816/67776/SmartIM4IntelliJ.zip";
      sha256 = "160ql5k8fvc8kqs1dmky2snyv66rawgfw1za9inx23vdh96634bq";
      name = "SmartIM-2.7.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Jamling/SmartIM4Intellij";
      license = lib.licenses.asl20;
      description = ''
        An anti-boss plugin for you to chat with your QQ/Wechat friends privately.
     一个防Boss的QQ/微信聊天插件，让老板以为你是在写代码，其实，你是在聊天，不过，作为程序猿，怎么可能有时间聊天，哈哈。
     about more: https://github.com/Jamling/SmartIM4Intellij/
      '';
    };
  }) {};

  smartsemicolon = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SmartSemicolon";
    plugname = "SmartSemicolon";
    plugid = "com.fabio";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10421/64141/SmartSemicolon.jar";
      sha256 = "19w9rd6vrmkkrr50ym5hjxxcv8ji1cqylrabg1injvjynnix24m3";
      name = "SmartSemicolon-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/smartsemicolonidea";
      license = lib.licenses.gpl3Only;
      description = ''
        An extension that makes semicolon smart!
No more boring manually go to the end of the line and type ;
      '';
    };
  }) {};

  smartsort = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SmartSort";
    plugname = "SmartSort";
    plugid = "com.jtschwartz.smartsort";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14407/88029/SmartSort.zip";
      sha256 = "01qbgqr6rn45f1g10gb2ldkxdh2136di1b6yh2afx5fhliliqy39";
      name = "SmartSort-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jtschwartz.com";
      license = lib.licenses.mit;
      description = ''
        SmartSort allows you to sort your code without breaking it's structure.
    		Take for example a CSS or JSON file: if you sort the whole thing in a lexical order alone, it will lose it's entire structure.
    		SmartSort will sort in a hierarchical manner in order to sort everything without breaking your code.

    		SmartSort will sort the code block your cursor is located in (limiting to a selection coming soon), as well as nested code blocks depending on the sorting depth you choose. Out of the box you are given a one click stop to fully recursive sorting, as well as only sorting the single layer your cursor is in, though there is also a "Selective Depth" option that will prompt you for the depth of your choosing.

    		This plugin does not work for XML or languages based off of it, such as HTML and SVG. This is partially caused by the way in which XML is parsed, but also because XML is intended to be ordered in a specific way, context over lexical order.
      '';
    };
  }) {};

  smartereditor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SmarterEditor";
    plugname = "SmarterEditor";
    plugid = "SmarterEditor";
    version = "0.12.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4657/36826/SmarterEditor.jar";
      sha256 = "0vj5m86kl9av67vkj3xk5syj2a8vh7n1zrp6c8xzkg5psmfpvzdj";
      name = "SmarterEditor-0.12.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.plugin-dev.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/jansorg/SmarterEditor/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        Smarten up the editor with new editor actions. 
 This plugin makes you more productive with IntelliJ. It maps frequently used actions to a single shortcut. You can easily select, format and navigate in selections. And it allows to to split literals at the current position without breaking your code! 
 
 
 
 
 
This is an early release of this plugin. Please vote and provide feedback to help! 
Documentation is available at plugin-dev.com.
      '';
    };
  }) {};

  smcplugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SmcPlugin";
    plugname = "SmcPlugin";
    plugid = "com.smcplugin.leonid.menshenin.plugin.id";
    version = "1.0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8275/25515/scmplugin.jar";
      sha256 = "0qkwsv3g43n8s8kjb4fdkcv6fs5mqrrmfdi8pcf09v8arybs4ap1";
      name = "SmcPlugin-1.0.10.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/menshele/smcplugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/menshele/smcplugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Smc(
http://smc.sourceforge.net/
) syntax plugin Makes editing of *.sm files easier
      '';
    };
  }) {};

  smooth-scroller-1_3_0 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Smooth-Scroller-1_3_0";
    plugname = "Smooth Scroller";
    plugid = "com.weebly.opus1269.smoothscroller";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8246/24847/smooth-scroller.jar";
      sha256 = "0bq14zkjyj1c58iwh7igaskl4y4zkgcxi453ngwyisgn2v7vrlrk";
      name = "Smooth-Scroller-1_3_0-1.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/opus1269";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/opus1269/smooth-scroller/blob/master/LICENSE.md";
        free = false;
      };
      description = ''
        This plugin provides smooth and inertial scrolling to all text editors. It provides acceleration effects with easing so you can &quot;fling&quot; like on a cell phone. 
 
 There are several tuning options available under Tools -&gt; Smooth Scroller Options...
 Between these and the touchpad or mouse settings on your hardware, you should be able to get the effect you desire.
      '';
    };
  }) {};

  smooth-scroller-1_3_3 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Smooth-Scroller-1_3_3";
    plugname = "Smooth Scroller";
    plugid = "com.deflatedpickle.smoothscroller";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15357/102807/smooth-scroller-1.3.3.jar";
      sha256 = "1if567mxhkyvzsh0qxkdjz35sngqj6qdg9n6g6d3ljyy22z7dnks";
      name = "Smooth-Scroller-1_3_3-1.3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DeflatedPickle";
      license = lib.licenses.mit;
      description = ''
        This plugin provides smooth and inertial scrolling to all text editors. It provides acceleration effects
    with easing so you can "fling" like on a cell phone. 
    
    There are several tuning options available under Tools -&gt; Smooth Scroller Options...
    Between these and the touchpad or mouse settings on your hardware, you should be able to get the effect you desire.
      '';
    };
  }) {};

  snake = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Snake";
    plugname = "Snake";
    plugid = "com.jetbrains.hackathon2015.S";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7854/47370/intellij-snake-1.0.2.zip";
      sha256 = "0516papfd4kbc4r0xxr494c03p042b92hwxrg2zxm868jv2limjs";
      name = "Snake-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vlasovskikh/intellij-snake";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/vlasovskikh/intellij-snake/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        A snake game inside your code structure in IntelliJ.
   Make your code more Python-like by helping the snake eat all the curly braces and semicolons!
   To start the game type 'snake' in the editor or use "Tools | Run Snake" action.
      '';
    };
  }) {};

  snakeyaml-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SnakeYAML-plugin";
    plugname = "SnakeYAML plugin";
    plugid = "SnakeYAML plugin";
    version = "1.17.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8142/24503/intellij-snakeyaml.zip";
      sha256 = "0vdizfzh0rrwps1cwbzaij4d0zddw1v7ji6plxfbni7n8x4zkwvm";
      name = "SnakeYAML-plugin-1.17.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vermut/intellij-snakeyaml";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/vermut/intellij-snakeyaml";
        free = false;
      };
      description = ''
        YAML parser/highlighter for Intellij IDEA platform IDEs 
Includes complete YAML loading pipeline under the hood. Capable of validating YAML on all levels. 
Meant to serve a base dependency for all YAML-based languages - Ansible, Salt, Cloudify. Note for Professional/Ultimate edition users 
Those editions already include basic YAML support. In case you want to enable this plugin, you'll need to reassign file type mappings: 
Go to `Preferences &gt; Editor &gt; File Types` and move `YAML` registered patterns to `SnakeYAML`.
      '';
    };
  }) {};

  snakeskin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Snakeskin";
    plugname = "Snakeskin";
    plugid = "snake-eater";
    version = "0.1.1-192";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14182/84762/snake-eater-0.1.1-192.zip";
      sha256 = "1lsi4390c1bl9r84qv4zhf1i5srsimds10ynr587m6rrhr03p0l7";
      name = "Snakeskin-0.1.1-192.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://snakeskintpl.github.io/docs/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ExactlyNoSense/snake-eater/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Provides Snakeskin language support for the IntelliJ platform.
      '';
    };
  }) {};

  snip2code-plugin-for-intellij = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Snip2Code-Plugin-for-IntelliJ";
    plugname = "Snip2Code Plugin for IntelliJ";
    plugid = "com.snip2code.intellij.plugin";
    version = "1.8.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7411/24312/S2CIntelliJPlugin.zip";
      sha256 = "0z835p57yh74q7fz6bk36jkypc3rb227vzkvqsr1j7fkrh5kbyca";
      name = "Snip2Code-Plugin-for-IntelliJ-1.8.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.snip2code.com/Static/Downloads#intellij_plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.snip2code.com/static/tos";
        free = false;
      };
      description = ''
        This plugin allows the user to interact with Snip2Code service directly from within IntelliJ IDEA. 
 The user is able to select a piece of code and directly add it to his personal basket in one click. 
 The user has also access to the standard search engine to retrieve his own snippets and the public ones. 
 Snip2Code offers a solution to store and publish software snippets and maintain such snippets always up to date. 
 This solutions appeals to the needs of software companies who want to provide continuous access to the best snippets of code despite personnel changes, as well as software gurus and academics who need a tool to propagate or share with others the best snippets in their communities.
      '';
    };
  }) {};

  snippme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SnippMe";
    plugname = "SnippMe";
    plugid = "org.jetbrains.snippme-plugin";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12403/88281/snippme-plugin-1.3.0.zip";
      sha256 = "089mngjy319a122wqng81h80wxad5c3ka1p8i9pps4075phhfpn9";
      name = "SnippMe-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sunnatec.com";
      license = lib.licenses.mit;
      description = ''
        API for the snippet manager: SnippMe. Visit SnippMe.de.
      '';
    };
  }) {};

  snyk-vulnerability-scanner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Snyk-Vulnerability-Scanner";
    plugname = "Snyk Vulnerability Scanner";
    plugid = "io.snyk.snyk-intellij-plugin";
    version = "2.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10972/107249/snyk-intellij-plugin-2.0.4.zip";
      sha256 = "0q5y89n6z2rvwc3jm58dnw0h9bvgcpm23l86nswm45isjrgssrmh";
      name = "Snyk-Vulnerability-Scanner-2.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "snyk.io";
      license = lib.licenses.asl20;
      description = ''
        The Snyk Vulnerability Scanner plugin for IDEs based on the IntelliJ platform
helps you find and fix security vulnerabilities in your projects, all from
within your favorite IDE.

The plugin integrates seamlessly into your development environment and scans
the open source dependencies included in your projects for security
vulnerabilities. Identified vulnerabilities are displayed with actionable
information, including the full dependency path and remediation advice to help
you fix issues as fast as possible.

Key features

Seamless integrationAccurate results based on Snyk IntelDependency pathRemediation adviceLicense compliance

Useful links

This plugin works with projects written in Java, JavaScript, .NET and many more languages. See the full list of languages and package managers Snyk supportsBug tracker
      '';
    };
  }) {};

  sofy-ai = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sofy.AI";
    plugname = "Sofy.AI";
    plugid = "com.sofy.ai.ideaplugin";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12034/64329/sofy_idea_plugin.zip";
      sha256 = "0qf5swf95c6aysndwndfl1cpih5ps3yb8l9hk1i6hxj80ks913p5";
      name = "Sofy.AI-1.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.sofy.ai";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.sofy.ai/terms-and-conditions";
        free = false;
      };
      description = ''
        Test your apps using Sofy's carefully curated Scenario Recorder right from your IDE
      '';
    };
  }) {};

  sokoban = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sokoban";
    plugname = "Sokoban";
    plugid = "Sokoban";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/117/496/Sokoban_496.jar";
      sha256 = "0xjv5sd10smqm5r094ar6cjpxw11c2qgwgzzkawygnbqrzbm35s2";
      name = "Sokoban-0.3.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Classic game of Sokoban with 50 levels (see Tools Menu)
      '';
    };
  }) {};

  solarized-theme-0_4 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Solarized-Theme-0_4";
    plugname = "Solarized Theme";
    plugid = "solarized";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14920/105005/solarized-jetbrains.jar";
      sha256 = "0mx7ck3qmjwd3shrbvcb33f9c5mk28jc8zjb1dj3b8yfkg4iq7id";
      name = "Solarized-Theme-0_4-0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://subtheme.pro";
      license = lib.licenses.mit;
      description = ''
        The Solarized theme, adapted for JetBrains by Subtheme. Both dark and light themes are included.
      
      Contribute with GitHub: https://github.com/subtheme-pro/solarized
      '';
    };
  }) {};

  solarized-theme-3_0_0 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Solarized-Theme-3_0_0";
    plugname = "Solarized Theme";
    plugid = "com.tylerthrailkill.intellij.solarized";
    version = "3.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12112/68893/solarized_theme.jar";
      sha256 = "1yznvipkziqbb9wxi8yvlbjn4520m1jfzbzjsndi6g03ksrb0k8r";
      name = "Solarized-Theme-3_0_0-3.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://tylerthrailkill.com";
      license = lib.licenses.mit;
      description = ''
        Adds Solarized Dark and Light themes
      '';
    };
  }) {};

  solarized-themes = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Solarized-Themes";
    plugname = "Solarized Themes";
    plugid = "com.4lex4.intellij.solarized";
    version = "2.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12784/94216/solarized.jar";
      sha256 = "07pvvhb0cymxc2g7cl189hyp23xxzx6lhg2risgqjn2868fl3n7w";
      name = "Solarized-Themes-2.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/4lex4/intellij-platform-solarized";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://unlicense.org";
        free = false;
      };
      description = ''
        Adds Solarized Dark and Light color themes.


Notable features:

High quality and consistent both the UI and editor schemes with an adaptation of minor colors
    (for the supported IDE version) avoiding any usage of Default or Darcula colors
Clean editor schemes with regular font styles avoiding bolds
Usage of inheritance mechanism to achieve unified look and feel between various languages
    (so, for example, syntax highlighting for such statically typed languages
    as Java, Kotlin, C#, Go or C++ and so on is as similar as possible and the same
    for the other kinds of languages)



To install:

Go to Settings | Plugins, find the theme plugin and install it
Restart the IDE
Go to Settings | Appearance &amp; Behavior | Appearance and select
    Solarized Dark or Solarized Light in the Theme dropdown

Or to select only an editor scheme go to Settings | Editor | Color Scheme and
    select Solarized Dark (4lex4) or Solarized Light (4lex4) in the Scheme dropdown
      '';
    };
  }) {};

  sonarlint = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SonarLint";
    plugname = "SonarLint";
    plugid = "org.sonarlint.idea";
    version = "4.13.0.24781";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7973/103979/sonarlint-intellij-4.13.0.24781.zip";
      sha256 = "13pqzpwdc2pxwq96zdv5iy1hwg3a5964di06811v9yp68pwxy088";
      name = "SonarLint-4.13.0.24781.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.sonarlint.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/SonarSource/sonarlint-intellij/master/LICENSE";
        free = false;
      };
      description = ''
        SonarLint is a free IDE extension that lets you fix bugs and vulnerabilities as you write code!
                Like a spell checker, SonarLint highlights coding issues on the fly, with clear remediation
                guidance so you can fix them before the code is even committed. Across popular IDEs (Eclipse,
                IntelliJ, Visual Studio, VS Code) and popular programming languages, SonarLint helps all developers
                write better and safer code!
            
            
            
                SonarLint supports all JetBrains IDE, including IntelliJ, WebStorm, PhpStorm, PyCharm and RubyMine.
                It can analyze code written in Java, JavaScript, TypeScript, Python, Kotlin, Ruby, HTML &amp; PHP.
            
            
            
                If your project is analyzed on SonarQube or on SonarCloud, SonarLint can connect to 
                the server to retrieve the appropriate quality profiles and settings for that project. Java 8 
                is required to run SonarLint; analysis of JavaScript and TypeScript requires Node.js &gt;= 8.
      '';
    };
  }) {};

  sonatype-nexus-iq = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sonatype-Nexus-IQ";
    plugname = "Sonatype Nexus IQ";
    plugid = "com.sonatype.nexus-iq";
    version = "3.1.0-01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14692/105864/nexus-iq-idea-plugin-3.1.0-01.zip";
      sha256 = "0m6njj09q428ggjcp6vxdkplcx8xxyj3rn50lm2z681p8iax9clv";
      name = "Sonatype-Nexus-IQ-3.1.0-01.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.sonatype.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.sonatype.com/usage/plugin-license-agreement";
        free = false;
      };
      description = ''
        Select the best open source components for your projects using precise security intelligence directly within IntelliJ.
    
    The Nexus IQ plugin for IntelliJ IDEA scans your open source dependencies for policy violations and security vulnerabilities, and provides actionable insights and remediation advice to help you fix issues in just a few clicks without leaving your favorite tools.
    
    Prerequisites:
    
    To use the plugin you must have a Nexus IQ license. Learn more visit Sonatype.com or click here to view download and installation instructions.
      '';
    };
  }) {};

  sonic-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sonic-Progress-Bar";
    plugname = "Sonic Progress Bar";
    plugid = "manjaro.spb";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14725/92255/SonicProgressBar.jar";
      sha256 = "0hk4m9a67pg9l5xd2d655zs4b3b4dbl06i1rjf6qls7bgzcna5xl";
      name = "Sonic-Progress-Bar-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This is the Sonic Progress Bar for IJ based IDEs based on the Nyan Progress Bar by Dmitry Batkovitch.
      It display Sonic for the basic and indeterminate bar.
      '';
    };
  }) {};

  sonique-awesome-utils = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sonique-Awesome-Utils";
    plugname = "Sonique Awesome Utils";
    plugid = "sonique.intellij.plugin";
    version = "0.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14788/104366/Awesome_Sonique_Utils-0.2.5.zip";
      sha256 = "14yd9rmx488fviwgws5cz01yck7721wm4agbqb8p79vgrma6j3ig";
      name = "Sonique-Awesome-Utils-0.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/team-sonique/intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ Plugin with useful features, for moving between open projects and generating accessor methods and builder injectors.


Open projects - easy switching between open projects, similar to inbuilt Recent Files, essential for teams that work on multiple projects simultaneously. Mapped to 'control alt P' by default.Generate Popup additionsNamed Accessors - generate accessors named after the field without 'get' prefix, i.e. myField() rather than getMyField()Builder Methods - generate 'setter' methods in Builder style: with(field) for tiny typeswithName(field) i.e. withMyField(value)
      '';
    };
  }) {};

  sophia-ternity = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sophia-ternity";
    plugname = "Sophia Æternity";
    plugid = "org.limechain";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12197/61797/CustomSophiaPlugin.jar";
      sha256 = "0lczzjvk5y78nn3kn3rircgknhi9hjm467j7rnj0yzbhwfw531as";
      name = "Sophia-ternity-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://aeternity.com/";
      license = lib.licenses.mit;
      description = ''
        Æternity Sophia language extension. 
        You can support the plugin development by clicking star on GitHub and rating it on the plugin page.
        Contributions are always welcome!
      '';
    };
  }) {};

  sort-each-editor-section = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sort-Each-Editor-Section";
    plugname = "Sort Each Editor Section";
    plugid = "com.cody.banks.sort-by-editor-section";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11922/57531/main.zip";
      sha256 = "0wrm7x91ngr35lcm5x9bn6ndx08hrj8lm50qh9vlp76441k8mznp";
      name = "Sort-Each-Editor-Section-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Sort each line within each editor tag alphabetically. Useful, for example, if you put editor tags in a properties file.
    Nice.
      '';
    };
  }) {};

  source-square-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Source-Square-Plugin";
    plugname = "Source Square Plugin";
    plugid = "Source Square Plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7063/11454/SourceSquarePlugin.zip";
      sha256 = "0mqhknvzpcywfhyq2y7qc4fbsd92qxwsl1y3a8a98hwnk8g7a8p1";
      name = "Source-Square-Plugin-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Source Square plugin to find open source files
      '';
    };
  }) {};

  source-synchronizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Source-Synchronizer";
    plugname = "Source Synchronizer";
    plugid = "org.wavescale.sourcesync";
    version = "1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7374/31035/sourcesync.zip";
      sha256 = "0yngdbxrrxb40dkmf1nda0p785msjqj594kyy5k8bk5w6844pibs";
      name = "Source-Synchronizer-1.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fioan89/sourcesync";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/7374/license.txt";
        free = false;
      };
      description = ''
        GitHub | 
Issues | Donate ( 
PayPal ) 
 
 Source Synchronizer is a powerful plugin for performing one-way file synchronization for your project. 
It synchronizes the remote target so that it will match your local project. It features support for FTP, FTPS, SFTP and SCP protocols. You can filter the uploaded files, or you can simply opt to sync out only selected or changed files.
      '';
    };
  }) {};

  sourcecodeattach = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SourceCodeAttach";
    plugname = "SourceCodeAttach";
    plugid = "com.jcgroup.android.SourceCodeAttach";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10735/46147/SourceCodeAttach.jar";
      sha256 = "0v7s388fnp6199fjlx2w2089gbjszw49idnyaj7w5jxp3y2kkyxr";
      name = "SourceCodeAttach-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jcgroup.com.cn";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jcgroup.com.cn";
        free = false;
      };
      description = ''
        This plugin is used for modular development of the android development team of jincheng group, which can be used to distinguish whether to load the source code or rely on the maven private library.
 
most HTML tags may be used
      '';
    };
  }) {};

  sourcemarker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SourceMarker";
    plugname = "SourceMarker";
    plugid = "com.sourceplusplus.sourcemarker";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15407/104317/SourceMarker-0.1.1.zip";
      sha256 = "1vhnv67075di2cp0i3zc7zwwn6hsypj5hnfwnpfgi0alpnavn04c";
      name = "SourceMarker-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sourceplusplus";
      license = lib.licenses.asl20;
      description = ''
        SourceMarker is a JetBrains-powered plugin which provides continuous feedback capabilities via integration with Apache SkyWalking. SourceMarker increases software development productivity via the Feedback-Driven Development (FDD) approach, a methodology of combining IDE and APM technology to create tighter feedback loops.
      '';
    };
  }) {};

  sourcegraph = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sourcegraph";
    plugname = "Sourcegraph";
    plugid = "com.sourcegraph.jetbrains";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9682/88619/sourcegraph.jar";
      sha256 = "1kmyl80qh8nawy297fbs13xf7dklhl16bh8wx192s5a917f2fpid";
      name = "Sourcegraph-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sourcegraph.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/sourcegraph/sourcegraph-jetbrains/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Sourcegraph for JetBrains IDEs (IntelliJ, PyCharm, GoLand, etc.)
      
        Search snippets of code on Sourcegraph.
        Copy and share a link to code on Sourcegraph.
        Quickly go from files in your editor to Sourcegraph.
      '';
    };
  }) {};

  sourcery = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sourcery";
    plugname = "Sourcery";
    plugid = "sourcery.pycharm-plugin";
    version = "0.8.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12631/108049/sourcery-0.8.7.zip";
      sha256 = "12rznjlwrpiklgk1plddf23y9cjrcgzssc73vjhz67pzalngz7ih";
      name = "Sourcery-0.8.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sourcery.ai";
      license = lib.licenses.asl20;
      description = ''
        Sourcery is an AI-powered coding assistant which helps you write better
  Python code faster. It works by providing refactoring suggestions on the
  fly that you can instantly integrate into your code.


  Immediately improve your code quality with suggestions and fixes.
  Get real time feedback on code quality.
  Fully local, fully secure.


  Sourcery Overview:


  Sourcery scans the Python file that you have open in your editor.
  Refactoring suggestions are underlined and listed in the Problems window.

You can hover over a suggestion to see a diff of the changes.
To implement the suggestion use the Quick Fix from the Problems
window, the Sourcery tool window or the lightbulb in the code editor.

  If you don't like the suggestion there is a quick fix to disable Sourcery
  for the function, or you can add # sourcery skip as a comment on that
  function.


  Get an instant view of your code quality by hovering over a function
  definition.


  Sourcery Pro

You can get even more refactoring power with Sourcery Pro.

  Refactor your whole code base - with Sourcery Pro you can run a batch code
  inspection over any folder to make instant improvements to your whole code
  base.


  Sourcery Pro also finds duplicate code and automatically suggests
  extracting methods.


  Frequently Asked Questions:



  Is my source code secure?
  
    Sourcery makes web requests only for the purposes of validating
    registration tokens and error reporting. Your code never leaves your
    machine.
  




  Can I use Sourcery at work?
  
  Yes! Our license allows unlimited use both at home and at work. We also
  have Team plans that let you integrate Sourcery into GitHub, or into
  your CI pipeline via a Command Line Interface.
      '';
    };
  }) {};

  spacecheck = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SpaceCheck";
    plugname = "SpaceCheck";
    plugid = "com.zone.unique.plugin.space";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8539/35100/SpaceTest2.jar";
      sha256 = "11fmz93vnp59yyzykpfld1ifgr7nf1zp7s55vcvi79gn1ma11svf";
      name = "SpaceCheck-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        String space check.
      '';
    };
  }) {};

  spaceday-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SpaceDay-Theme";
    plugname = "SpaceDay Theme";
    plugid = "com.github.today-.theme.spaceday";
    version = "1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12208/77981/SpaceDay.jar";
      sha256 = "1nc1v5aqxm0fav98pm9nr05l8rll4cdjhjva0m0ri45yjv90i8r3";
      name = "SpaceDay-Theme-1.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/today-/SpaceDay";
      license = lib.licenses.mit;
      description = ''
        Theme for JetBrains products inspired by SpaceGray color scheme
      '';
    };
  }) {};

  spacegray-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spacegray-Theme";
    plugname = "Spacegray Theme";
    plugid = "com.github.mturlo.intellij.theme.spacegray";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12122/66574/intellij-spacegray.jar";
      sha256 = "0nvvb9ls59a0wsmvi0vh9s9yr7mx662qgasyj0bwagsq5saxi800";
      name = "Spacegray-Theme-1.4.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/mturlo/intellij-spacegray";
      license = lib.licenses.mit;
      description = ''
        Spacegray theme for IntelliJ, inspired by one made by Gadzhi Kharkharov for SublimeText
      '';
    };
  }) {};

  spacemacs = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spacemacs";
    plugname = "Spacemacs";
    plugid = "com.adebesin.spacemacs";
    version = "2.03";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12821/93005/spacemacs.jar";
      sha256 = "0ghyx3cddkgy3x53yvkwl1m8cl59r94hvq2bam3d0700skyfph88";
      name = "Spacemacs-2.03.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/adebesin/spacemacs";
      license = lib.licenses.asl20;
      description = ''
        Spacemacs colour theme for IntelliJ IDEA integrated development environment
      '';
    };
  }) {};

  spatialos-schema = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SpatialOS-Schema";
    plugname = "SpatialOS Schema";
    plugid = "com.hrzntsudio.spatialos.intellij";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13172/70534/spatialos-schema-intellij.jar";
      sha256 = "179mx9z3qpn96xcbnqvm9cz6kx5z7nviic8khbbw2rf6ncw29s84";
      name = "SpatialOS-Schema-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://hrznstudio.com";
      license = lib.licenses.mit;
      description = ''
        IntelliJ plugin for the SpatialOS schema language.
      '';
    };
  }) {};

  spawnia-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spawnia-Keymap";
    plugname = "Spawnia Keymap";
    plugid = "spawnia.intellij-keymap";
    version = "3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14127/105110/intellij-keymap-3.0.zip";
      sha256 = "0ldw387rh7ycm5sfsvzkwf90icpi003zxhwrxqw5ffpypqwk0p05";
      name = "Spawnia-Keymap-3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://franke.tech";
      license = lib.licenses.mit;
      description = ''
        The preferred keymap of Benedikt Franke
    
    This allows me to share my preferred keybindings between all Intellij IDE's.
      '';
    };
  }) {};

  spectre-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spectre-Theme";
    plugname = "Spectre Theme";
    plugid = "com.widlofapps.theme.spectre";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14745/92686/SpectreTheme.jar";
      sha256 = "1rgwqdcgp6dq1s2cmcjhmxlbbfi33gllwm37g40281x8zx6pcss4";
      name = "Spectre-Theme-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/WillWidlof/SpectreTheme";
      license = lib.licenses.asl20;
      description = ''
        Spectre theme for IntelliJ IDEs aimed at Android Studio and IntelliJ IDEA.
      UI
      '';
    };
  }) {};

  spek = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spek";
    plugname = "Spek";
    plugid = "org.jetbrains.spek.spek-idea-plugin";
    version = "0.6.0-1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8564/52666/0.6.0-1.zip";
      sha256 = "0vva5zcix8l13yz8ynzdj3v100lk2zfknj0dcx0wghw483yxwdka";
      name = "Spek-0.6.0-1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://polymorphicpanda.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/raniejade/spek-idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Official IntelliJ IDEA plugin for Spek.
      '';
    };
  }) {};

  spek-framework = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spek-Framework";
    plugname = "Spek Framework";
    plugid = "org.spekframework";
    version = "2.0.15-IJ2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10915/105385/2.0.15-IJ2020.3.zip";
      sha256 = "0wbglpynx6h8ryyhkkcwskz3wnwsvdfkj7fplkaa6ldjkiixgzim";
      name = "Spek-Framework-2.0.15-IJ2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://spekframework.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/spekframework/spek/blob/2.x/LICENSE.TXT";
        free = false;
      };
      description = ''
        Plugin for Spek.
      '';
    };
  }) {};

  spek-test-template = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spek-Test-Template";
    plugname = "Spek Test Template";
    plugid = "spek-test-template-plugin";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12438/63270/spek-test-plugin.zip";
      sha256 = "155rslinivh451g3hpmldi0ixz3svqcrkyaqwrvw4488y8kyzyn4";
      name = "Spek-Test-Template-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Generates Spek test for current Kotlin class.
    How to use:
    
        Go to a Kotlin class you want to create a test for
        Move the caret inside the class
        Press alt + insert to trigger 'Generate' menu
        Choose 'Spek Test' inside the menu
      '';
    };
  }) {};

  spell-checker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spell-Checker";
    plugname = "Spell Checker";
    plugid = "SpellChecker";
    version = "0.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1573/4924/SpellChecker_4924.zip";
      sha256 = "1g81rczi2m4yqgkpwp5k5llf6kciddiygfp1kzn64671261mlaz1";
      name = "Spell-Checker-0.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1573/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1573/sourceCode.zip";
        free = false;
      };
      description = ''
        Integrates spell checker jazzy into IDEA as inspection
      '';
    };
  }) {};

  spell-checker-bulgarian-dictionary = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spell-Checker-Bulgarian-Dictionary";
    plugname = "Spell Checker Bulgarian Dictionary";
    plugid = "SpellChecker-Dict-Bulgarian";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7840/20315/SpellChecker-Dict-Bulgarian_1.zip";
      sha256 = "1s49z73s3jxi6dmyfdpix9xbildvdqp9h4j7gk80k2c0px4n6za4";
      name = "Spell-Checker-Bulgarian-Dictionary-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Standard bulgarian dictionary for Spell Checker plugin
      '';
    };
  }) {};

  spell-checker-english-dictionary = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spell-Checker-English-Dictionary";
    plugname = "Spell Checker English Dictionary";
    plugid = "SpellChecker-Dict-English";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1574/4926/SpellChecker-Dict-English_4926.zip";
      sha256 = "02zkz4yknkg8p5am5jxhq99qik87b4w8mcmbwa2y7dgi23jcdl3r";
      name = "Spell-Checker-English-Dictionary-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1574/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1574/sourceCode.zip";
        free = false;
      };
      description = ''
        Standard english dictionary for Spell Checker plugin
      '';
    };
  }) {};

  spell-checker-german-dictionary = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spell-Checker-German-Dictionary";
    plugname = "Spell Checker German Dictionary";
    plugid = "SpellChecker-Dict-German";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1658/4927/SpellChecker-Dict-German_4927.zip";
      sha256 = "1jvld99nyc6s0wf5avkabkzx0zyddhk7kwmjbklgfwkw5mv8qpgv";
      name = "Spell-Checker-German-Dictionary-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1658/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1658/sourceCode.zip";
        free = false;
      };
      description = ''
        Standard german dictionary for Spell Checker plugin
      '';
    };
  }) {};

  spell-checker-java-dictionary = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spell-Checker-Java-Dictionary";
    plugname = "Spell Checker Java Dictionary";
    plugid = "Spell Checker Java Dictionary";
    version = "0.3.20170214";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1825/32519/SpellChecker-Dict-Java.jar";
      sha256 = "0rs2llswkcjda1bgin9dd07id4xw43249s0xkxlnjhzz65cbql8l";
      name = "Spell-Checker-Java-Dictionary-0.3.20170214.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/linux-china/SpellChecker-Dict-Java";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/linux-china/SpellChecker-Dict-Java";
        free = false;
      };
      description = ''
        Standard Java dictionary based on Maven repository
      '';
    };
  }) {};

  spell-checker-russian-dictionary = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spell-Checker-Russian-Dictionary";
    plugname = "Spell Checker Russian Dictionary";
    plugid = "SpellChecker-Dict-Russian";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1784/4928/SpellChecker-Dict-Russian_4928.zip";
      sha256 = "1gm0m2xliyf4aq0ipjbk8zk4ch0qcc4vdidlj56vhppwkbhrl923";
      name = "Spell-Checker-Russian-Dictionary-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1784/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1784/sourceCode.zip";
        free = false;
      };
      description = ''
        Standard russian dictionary for Spell Checker plugin
      '';
    };
  }) {};

  spellcheckplugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SpellCheckPlugin";
    plugname = "SpellCheckPlugin";
    plugid = "SpellCheckPlugin";
    version = "0.7.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/25/61/SpellCheckPlugin_61.zip";
      sha256 = "0h9ffrdn2qm3snxxw8iz32i9kvpab42qz48g7dwl0y8ndnqq1gzr";
      name = "SpellCheckPlugin-0.7.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.osbald.co.uk/java/spellcheckplugin/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.osbald.co.uk/java/spellcheckplugin/";
        free = false;
      };
      description = ''
        Spelling Checker for IntelliJ IDEA based around the open source Jazzy engine (http://jazzy.sourceforge.net/). Includes a smart document checking mode that only checks string literals, comments and Javadoc.
      '';
    };
  }) {};

  spellbook-basic = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spellbook-Basic";
    plugname = "Spellbook Basic";
    plugid = "io.notestash.notestashbasic";
    version = "2020.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14545/105979/Spellbook-Basic-2020.2.0.zip";
      sha256 = "0miv5gqd7k480sx32vhdfayxd6kdyq2528gibcd6vad9cws33k7k";
      name = "Spellbook-Basic-2020.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.getspellbook.dev";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.getspellbook.dev";
        free = false;
      };
      description = ''
        Spellbook Basic is the FREE LIMITED version of the Spellbook plugin that integrates the Evernote
        note taking service into your IDE, allowing you to access your Evernote account from within your
        development environment.
        
        
        Why should I use Spellbook Basic?
        
        With Spellbook Basic, you can access your Evernote notes and notebooks right from your JetBrains IDE. Any of your
        code snippets, implementation notes, or general notes can be viewed from within your development environment. You can even view web pages
        clipped with Evernote's web clipper and screenshot data attached to your notes without ever having to leave your IDE.
        
        
        Spellbook was built to aid your productivity. Spellbook helps to reduce context switching by incorporating an
        excellent note taking service into your IDE, preventing the need to constantly switch back and forth between your
        development environment and the browser or some other app to reference your knowledge repo. You should not have to
        leave your IDE and break focus to find that CSS snippet for centering divs or to find that useful Stack Overflow
        that helped you solve a tricky bug. Save it to your Evernote and find it with Spellbook later when you need it.
        Stay in your IDE and get more work done!
        
        
        What can I do with Spellbook Basic?
        
            Access an Evernote account from your IDE
            
                Spellbook uses OAuth to request access to your Evernote account. Simply generate an
                access token for your account (you can do this from the plugin), provide the token to the plugin,
                and access your Evernote data in the IDE. Check it out!
            
            Search your Evernote account to quickly find your notes when you need them
            
                Spellbook Basic provides a few simple search filters you can use to easily recall your archived
                notes and notebooks in the IDE. With Spellbook Basic, you can search by tag and notebook name to
                quickly find notes in your Evernote account. Check it out!
            
            View web clippings and screenshot data attached to any of your notes
            
                View web pages clipped with Evernote's web clipper as well as image data attached to any of your notes
                using Spellbook's media viewer. Currently Spellbook only supports viewing image attachments (i.e. .gif, .png, .jpeg, etc.).
            
        
        
        Why should I buy Spellbook instead of just using the free Spellbook Basic?
        
            Spellbook Basic only allows you to access a single account at any one time
            
                Spellbook Basic lets you access only ONE Evernote account at any given time. If you use multiple
                Evernote accounts to stay organized, then buy Spellbook.
                When you buy Spellbook you'll be able access ALL of your accounts simultaneously, even from multiple IDE
                instances!
            

            Spellbook Basic only provides a few basic search options
            
                Spellbook Basic only allows you to search your Evernote content by tag and by notebook name. If you have lots of notes
                and want to be able to easily and quickly find the notes you need, then buy
                Spellbook. When you buy Spellbook, you'll be able to use advanced search filters, including use of wildcards and phrases as well as full text
                search on note titles and note content. These advanced filters let you perform more complex searches on your content to narrow the search space
                and find the exact notes you want when you need them.
            

            Spellbook Basic does not allow you add or update content in your Evernote account
            
                Spellbook Basic only allows you to VIEW note content in your Evernote account. You will not be able
                to add new notes or notebooks, tag notes, or update existing content in your account. If you'd like to be able add new notes/notebooks, or
                update existing notes/notebooks in your Evernote account(s) from your IDE, then buy
                Spellbook. When you buy Spellbook you'll be able to add new notebooks, update notebook names, add new notes (using Markdown or the built in Spellbook
                editor), update existing notes (using Markdown), and tag notes right from your IDE.
      '';
    };
  }) {};

  spellbook-notes = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spellbook-Notes";
    plugname = "Spellbook Notes";
    plugid = "io.notestash.notestash";
    version = "2020.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14519/108118/Spellbook_Notes-2020.3.0.zip";
      sha256 = "0bk076r05gw6yh3mvf4saq7l957il9n1ba3jn6szmak4bb7fwagj";
      name = "Spellbook-Notes-2020.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.getspellbook.dev";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.getspellbook.dev/eula";
        free = false;
      };
      description = ''
        Spellbook is a note taking tool that integrates with the Evernote note taking service, allowing you
        to take down notes and access your own personal knowledge repository from your developement environment, using
        Evernote as the backend!
        
        
        *** Spellbook now supports using MARKDOWN to create and update notes!!! ***
        
        *** (NOTE: to create/update notes with Markdown you will need to have the JetBrains Markdown plugin installed and enabled in your IDE.) ***
        
        Why use Spellbook?
        
        With Spellbook, you can create and access your own personal knowledge repository. By integrating with Evernote, Spellbook
        adds a powerful, yet easy to use note taking tool to your IDE. Save and view code snippet notes, implementation notes,
        solutions to tricky issues or errors, Stack Overflow screenshots, and more. You can even view web pages
        clipped with Evernote's web clipper and screenshot data attached to your notes without ever having to leave your
        IDE. Spellbook also supports using Markdown to create and update your note content, making it super easy
        to add rich content like embedded links and images, tables, code blocks, task lists, and more to your notes in your IDE.
        
        
        Spellbook was built to aid your productivity. Spellbook helps to reduce context switching by adding an
        awesome note taking tool to your IDE, preventing the need to constantly switch back and forth between your
        development environment and the browser, or some other app to reference your knowledge store. You should not have to
        leave your IDE and break focus to find that CSS snippet for centering divs or to recall that useful Stack Overflow
        that helped you solve a tricky bug. Jot it down with Spellbook and it'll be available right in your IDE when you need to reference it later.
        Stay in your IDE and get more work done!
        
        
        What can you do with Spellbook?
        
            Access ALL of your Evernote account(s) from your IDE!
            
                Spellbook uses OAuth to request access to Evernote. Simply generate an access token for an account
                you own (you can do this from the plugin), provide the token to Spellbook, and access your Evernote data
                in the IDE. It couldn't be simpler! Check it out!
            
            
            Create notebooks to organize your notes in the IDE!
            
                Create new and update existing notebooks in your Evernote account. Check it out!
            
            
            Create and update notes with rich content using Markdown syntax!
            
                Add new notes with rich content such as embedded links and images, tables, code blocks, task lists, and more to your Evernote
                using Markdown. You can also update existing notes in the Markdown editor as well. Check it out!
            
            
            Create code snippets and plain text notes using Spellbook's built-in text editor!
            
                Spellbook's built-in text editor provides inline URL link support as well as syntax highlighting for 40+ programming languages. Check it out!
            
            
            Add tags to your notes for easier searching!
            
                Add searchable tags to your note content to make your notes easier to recall later. Check it out!
            
            
            Quickly search through your notes using various filters!
            
                Quickly and easily recall any of your notes and notebooks in the IDE using various search filters
                including tag, notebook, and full text search on note content. Check it out!
            
            
            View web page clippings as well as screenshot data attached to any of your notes!
            
                View web pages clipped with Evernote's web clipper as well as image data attached to any of your notes
                using Spellbook's media viewer. Currently Spellbook only supports viewing image attachments (i.e. .gif, .png, .jpeg, etc.).
            
            
            Customize how your notes look in Spellbook!
            
                You can change the font, text size, text color, background colors and more, allowing for complete customization of how your
                notes are displayed in Spellbook's note viewer. Check it out!
            
        
        
        What are the main differences between the full Spellbook (paid) and Spellbook Basic (free)?
        
            Spellbook allows you to access multiple Evernote accounts simultaneously
            
                If you need multiple Evernote accounts to stay organized, the full paid Spellbook is what you want. The full
                version of Spellbook, allows you to access ALL of your accounts simultaneously, even from multiple IDE
                instances! Spellbook Basic only allows you to access ONE Evernote account at any one time.
            
            
            Spellbook provides advanced search filters for searching your Evernote account
            
                Spellbook Basic allows you to search your Evernote account ONLY by tag and by notebook name. The full version
                of Spellbook provides additional search filters, including using wildcards and phrases as well as full text
                search on note titles and note content. These additional filters let you perform more complex searches
                on your accounts to narrow the search space and easily find the exact content you want when you need it.
            
            
            Spellbook allows you to add new content to your Evernote account
            
                The full version of Spellbook allows you create new and update existing content in your Evernote account by adding new notebooks
                and notes. You can also add and remove tags from existing notes. Spellbook Basic essentially just allows for VIEWING content in
                your Evernote account. You will not be able to add new notes or notebooks, tag notes, or update existing content in your account.
            
        
        
        How can you get your Spellbook license?
        
        
        A PERPETUAL license to use Spellbook can now be purchased via Gumroad.
        You now can purchase a license to the full Spellbook plugin for a ONE TIME fee rather than a recurring monthly or annual charge. Once
        purchased, your license is valid FOREVER and will work across all JetBrains IDEs that support Spellbook. You will also be able
        to install all future updates to Spellbook going forward as well. Simply go to Gumroad
        to purchase a perpetual license.
      '';
    };
  }) {};

  spj-language-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spj-Language-Support";
    plugname = "Spj Language Support";
    plugid = "com.ky-proj.spjplugin";
    version = "1.8.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8042/85862/Intellij_SpjPlugin-1.8.0.zip";
      sha256 = "15w0a5pqgzk0v9bhy648h36xkp5g0hv3lvpm21rsygrih2skwsrj";
      name = "Spj-Language-Support-1.8.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fisherman08/IntelliJ_SpjPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/fisherman08/IntelliJ_SpjPlugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A Plugin For IntelliJ Family IDEs to Develop 101NEO SPJ Language

      This plugin is the most sophisticated environment for developing 101NEO framework.
      Functions:
      
        Completion and Annotations depending on Neo version and .prj settings
        Syntax highlights
        Changing highlight color settings
        basic code formatting and indent
        Structure view
      
      
      Get more information at GitHub https://github.com/fisherman08/IntelliJ_SpjPlugin
      
      
      This plugin includes the work that is distributed in the Apache License 2.0
      '';
    };
  }) {};

  split = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Split";
    plugname = "Split";
    plugid = "SplitHistory";
    version = "8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12462/66551/splitHistory.zip";
      sha256 = "01nfdyis1y6aqrgapy5zvm44ggb183giv6ybnm4cylmy6hi2sz8i";
      name = "Split-8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nd/split";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Plugin provides 'back', 'forward', 'go to declaration', 'split', and 'open in new split' actions
        preserving per window split navigation history + actions for increasing/decreasing split size and
        operations on contexts.
        All actions start with 'X' to simplify search in a keymap.
      '';
    };
  }) {};

  spock-adb = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spock-ADB";
    plugname = "Spock ADB";
    plugid = "com.wahdan.com.wahdan.spockAdb";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11591/64883/SpockAdb-1.0.2.zip";
      sha256 = "14b7ipn3c57rwiw63a41z2yqb29jpz909hs3s9j5p430nx4jbx68";
      name = "Spock-ADB-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/WahdanZ";
      license = lib.licenses.asl20;
      description = ''
        Plugin Helps you to have full control of your project and device.
      '';
    };
  }) {};

  spock-framework-enhancements = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spock-Framework-Enhancements";
    plugname = "Spock Framework Enhancements";
    plugid = "Spock Framework Enhancements";
    version = "0.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7114/79642/idea-spock-enhancements-0.12.jar";
      sha256 = "0p3l74j57fn3qa1wrq0f0gbvsz4x6sqz9hl3b57xc5cgxsp9782g";
      name = "Spock-Framework-Enhancements-0.12.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/cholick/idea-spock-enhancements";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/cholick/idea-spock-enhancements/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        This plugin provides support for the Spock specification framework.
            
            
                Adds syntax highlighting to Spock labels
                Provides inspections for label ordering
                A Spock spec template and a collection of live templates for feature methods contributed by @fpape
                Code generation assistance in specs for setup, cleanup, and adding a test method contributed by @fpape
      '';
    };
  }) {};

  spock-data-table-improvements = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spock-data-table-improvements";
    plugname = "Spock data table improvements";
    plugid = "es.spockdatatable.idea";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14351/99245/spock-data-table-1.0.6.jar";
      sha256 = "19pzg33z8vbhg50gy8vprk7wpdwprzay56lkhn8rs49yz2agqiw8";
      name = "Spock-data-table-improvements-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/albertodeavila";
      license = lib.licenses.asl20;
      description = ''
        This plugin allow you to manage beeter your Spock data tables.
      
        Add new column with single case or multiple case.
        Remove one column.
        Generate a Spock data table.
        Replace a column value for a new one.
        Show all case numbers.
        Hide all case numbers.
      

      For more info, visit plugin documentation available on Github
      '';
    };
  }) {};

  spot = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spot";
    plugname = "@Spot";
    plugid = "io.github.oldborn.atspot";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15477/104447/at-spot-gradle-0.2.0.zip";
      sha256 = "0kgq00iqpgl6y5kspwx5jvd2ylxckxhzgsa1w1h3krkafg6y97yz";
      name = "Spot-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://oldborn.github.io";
      license = lib.licenses.mit;
      description = ''
        @Spot: A spotify plugin!
      
        An online spotify plugin that adds following features:
        
            A shortcut pane to control spotify (CTRL + SHIFT + S)
            
            @Spot : prints current spotify track
            
            ''$SPOT$ for the file templates
            @SpotOnce{} same as @Spot but leaves the annotation.
            @SpotRepeat{} adds a spot everytime add a spot action triggered.
        
      
      
      
        Usage: Github README
        Potential Devlog: @Spot Blog
      
      
        Created by oldborn
        This plugin highly inspired by AtSoundtrack project. Unfortunately AtSoundtrack does not work on Windows/Linux,
        and I would love to change my music from my favourite IDE.
      '';
    };
  }) {};

  spot-profiler-for-java-and-kotlin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spot-Profiler-for-Java-and-Kotlin";
    plugname = "Spot Profiler for Java and Kotlin";
    plugid = "SpotProfiler";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13355/94988/spot-profiler.jar";
      sha256 = "1yrdfnz9ha7giblz6mbzw3zpjx8iqw96pba23rzzqf5zmgc549ls";
      name = "Spot-Profiler-for-Java-and-Kotlin-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Plugin for IntelliJ IDEA which simplifies measuring execution time for selected pieces of code.
      
      Usage
      Select target line(s) in a Java or Kotlin (Kotlin plugin version 1.4 or later is required) file,
      invoke 'Profile Code Fragment' from context menu, and run the code.
      If code is already executing in a debug session, an attempt to reload corresponding class will be performed
      automatically (can be disabled in settings).
      
      Details
      The plugin wraps the selected lines with the following code (Java example)
      
      long start = System.nanoTime();
      ...
      long end = System.nanoTime();
      System.out.println("Location: " + (end - start));
      
      Code isn't modified on disk, but just before passing it to the compiler. This will work only if project
      is built using IDEA's own build system (it won't work e.g. if the project is built using Gradle). The plugin
      then collects the printed output and displays it in editor.
      Obviously, this approach is not suitable for micro-benchmarking, please use your own judgment on whether
      it is acceptable for your use case.
      '';
    };
  }) {};

  spotbugs = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SpotBugs";
    plugname = "SpotBugs";
    plugid = "org.jetbrains.plugins.spotbugs";
    version = "1.2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14014/98108/spotbugs-idea-1.2.4.zip";
      sha256 = "1g4idmzninwzwjyf6c2cjfllb8dnwhz7nwgylkj863zhspzq2x1m";
      name = "SpotBugs-1.2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/spotbugs-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html";
        free = false;
      };
      description = ''
        IntelliJ SpotBugs plugin provides static byte code analysis to look for bugs in Java code from within IntelliJ IDEA.
		SpotBugs is a defect detection tool for Java that uses static analysis to look for more than 400 bug patterns,
		such as null pointer dereferences, infinite recursive loops, bad uses of the Java libraries and deadlocks.
		SpotBugs can identify hundreds of serious defects in large applications (typically about 1 defect per 1000-2000
		lines of non-commenting source statements).
		
		The plugin uses SpotBugs under the hood. For more information
		see https://github.com/spotbugs/spotbugs.
		
		
		..."We use IDEA inspections and SpotBugs complementary. SpotBugs is running in our continuous integration process and IDEA inspections are used during coding."
		What about using both during coding from within IntelliJ IDEA?
		
		
		IntelliJ SpotBugs plugin features:
		
            SpotBugs 4 support
            quickfix: annotate, suppress SpotBugs patterns (GutterIcon and document markup (alt+enter))
            IntelliJ IDEA 2019.3+ compatibility
            configure SpotBugs on idea project and module level
            jump to source from results shown in toolwindow including anonymous classes
            bug descriptions, solutions
            run analysis always in background
            run findbugs analysis on all affected files after compile/automake
            min. priority to report
            background scanning
            configurable effort run level
            configurable detectors
            bug categories to report
            file filter (include, exclude, exclude baseline bugs)
            load additional detector plugins like fb-contrib.jar
            group results by: bug category, classname, package, priority, bug rank
            intellij local history support
            quick search within the result tree
            basic Scala, Groovy and AspectJ support
            Analyze actions (all actions are also available in the intellij project tree, toolbar menu, context menu):
                
                    analyze all modified files
                    analyze all files on the active changelist (available from IntelliJ SpotBugs main ToolWindow and the ChangelistToolWindow)
                    analyze class under cursor
                    analyze current editor file
                    analyze all files of an intellij project
                    analyze all files of an intellij module
                    analyze all files of the selected package
                    analyze a bunch of selected files (project tree)
                    analyze a scope
                
            
            export a bug collection to html and/or xml with limited configurable dir based archive support
            import a bug collection from xml
            configurable : open an exported bug collection html page in the intellij configured browser
            configurable : preview found bugs in an editor preview panel
      '';
    };
  }) {};

  spreadsheet-localizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spreadsheet-Localizer";
    plugname = "Spreadsheet Localizer";
    plugid = "cz.ackee.localizer";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11159/98724/SpreadsheetLocalizer-1.0.0.zip";
      sha256 = "1x37ydbfpjfng37gz96nd21hgc41irzg19zqbs9257jx7qrhk5xl";
      name = "Spreadsheet-Localizer-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.ackee.cz";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/AckeeCZ/Spreadsheet-Localizer-Plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for generating string resources for different localizations from Google sheets.
      '';
    };
  }) {};

  spring--java-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spring--Java-Tools";
    plugname = "Spring & Java Tools";
    plugid = "com.xstudio.com.xstudio.plugin.idea";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14239/103753/java___spring_tool-1.0.9.zip";
      sha256 = "17p2qzirc3y4ynfg09fzgvjd4m9ckga3h9f3ysf4aamnpf0xw6mm";
      name = "Spring--Java-Tools-1.0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://beeant0512.github.io";
      license = lib.licenses.mit;
      description = ''
        some spring &amp; java plugin
    
    spring request toolkit
    Generate SerialVersionUID for java class
    Generate getter setter method with field comment
      '';
    };
  }) {};

  spring-assistant = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spring-Assistant";
    plugname = "Spring Assistant";
    plugid = "in.1ton.idea.spring.assistant.plugin";
    version = "0.12.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10229/44968/intellij-spring-assistant-0.12.0.zip";
      sha256 = "1v30bhgn6yh4ii6il4zw1rhfj8z7m26xlnk7k6p3vz4c1hwlnh6f";
      name = "Spring-Assistant-0.12.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/1tontech/intellij-spring-assistant";
      license = lib.licenses.mit;
      description = ''
        Spring Assistant - IntelliJ plugin that assists you in developing spring applications 
 What does the plugin do 
This plugins provides the following features as of now. 
 
 Auto completion of the configuration properties in your yaml files based on the spring boot's auto configuration jars are present in the classpath 
 Auto completion of the configuration properties in your yaml files if you have classes annotated with @ConfigurationProperties, if your build is properly configured 
 Short form search &amp; search for element deep within is also supported. i.e, sp.d will show you spring.data, spring.datasource, also, port would show server.port as a suggestion 
 Quick documentation for groups &amp; properties (not all groups &amp; properties will have documentation, depends on whether the original author specified documentation or not for any given element) 
 Allows you to bootstrap new project &amp; new module using File -&gt; New -&gt; Project -&gt; Spring Assistant &amp; File -&gt; New -&gt; Module -&gt; Spring Assistant wizards. Looks &amp; Feel resembles Intellij Ultimate, but with less bells &amp; whistles 
 Usage 
Assuming that you have Spring boot's auto configuration jars are present in the classpath, this plugin will automatically allows you to autocomplete properties as suggestions in all your yml files 
Suggestions would appear as soon as you type/press CTRL+SPACE. 
Short form suggestions are also supported such as, sp.d will show you spring.data, spring.datasource, e.t.c as suggestions that make your typing faster 
In addition to libraries in the classpath, the plugin also allows you to have your own @ConfigurationProperties available as suggestions in all your yml files. 
For this to work, you need to ensure the following steps are followed for your project/module Setup for showing ConfigurationProperties as suggestions within current module 
 
  Make sure Enable annotation processing is checked under Settings &gt; Build, Execution &amp; Deployment &gt; Compiler &gt; Annotation Processors  
  Make sure you add the following changes to to your project For Maven Add the following dependency &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
    &lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;
 For Gradle Add the following build configuration. You can use the propdeps-plugin for optional scope (as we dont need spring-boot-configuration-processor as a dependency in the generated jar/war) dependencies {
    optional "org.springframework.boot:spring-boot-configuration-processor"
}

compileJava.dependsOn(processResources)
  
  (OPTIONAL) If intellij is generating build artfacts to output directory instead of gradle's default build directory, then you may need to File | Settings | Build, Execution, Deployment | Build Tools | Gradle | Runner =&gt; Delegate IDE build/run actions to gradle &amp; restart the IDE. This will ensure that gradle plugin generates metadata &amp; Intellij is pointing to it  
 
 
 If you want to look at a sample project, look inside samples directory where the above setup is done. These samples allow properties from @ConfigurationProperties to be shown as suggestions 
 
IMPORTANT 
 
 After changing your custom @ConfigurationProperties files, suggestions would be refreshed only after you trigger the build explicitly using keyboard (Ctrl+F9)/UI 
 Known behaviour in ambiguous cases 
 
  
  If two groups from different auto configurations conflict with each other, the documentation for the group picked is random &amp; undefined 
  If a group &amp; property represent the depth, the behaviour of the plugin is undefined. 
  
 Installation (in 3 easy steps) 
To install the plugin open your editor (IntelliJ) and hit: 
 
 File &gt; Settings &gt; Plugins and click on the Browse repositories button. 
 Look for Spring Assistant the right click and select Download plugin. 
 Finally hit the Apply button, agree to restart your IDE and you're all done! 
 
Feel free to let me know what else you want added via the issues 
Suggestions, feedback and other comments welcome via @1tontech on Twitter Changelog 
See here License 
Spring Assistant - IntelliJ Plugin is open-sourced software licensed under the MIT license
      '';
    };
  }) {};

  spring-boot-banner-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spring-Boot-Banner-Generator";
    plugname = "Spring Boot Banner Generator";
    plugid = "com.intellj.plugin.SpringBootBannerPlugin";
    version = "0.2.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15263/101652/SpringBootBannerPlugin-0.2.9.zip";
      sha256 = "1z1k7zqm26p5vgxj8nfbp2k93xssh2rxm0dimgyldyrcn6r6skbw";
      name = "Spring-Boot-Banner-Generator-0.2.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mukeshdev.com.np";
      license = lib.licenses.gpl3Only;
      description = ''
        Github SourceCode


Spring Boot Banner Generator

A Simple plugin use to generate banner for spring boot project.

Just right click folder, goto new and click generate banner.
Enter text and select Font to generate banner with given font.
banner.txt file will be generate in selected folder.



Github SourceCode



Plugin Icon


Ascii art banners generated using jfiglet
      '';
    };
  }) {};

  spring-light-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spring-Light-Color-Scheme";
    plugname = "Spring Light Color Scheme";
    plugid = "color.scheme.Spring Light";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13010/68762/Spring_Light.jar";
      sha256 = "0rdqfn2lqb47k4zkaka8g26jp6h3gj6h5rlzxslrgyhl2ylpa7ap";
      name = "Spring-Light-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://";
      license = lib.licenses.mit;
      description = ''
        Spring Light - a light color scheme for IDEA (Java)
      '';
    };
  }) {};

  spring-mx = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spring-MX";
    plugname = "Spring MX";
    plugid = "com.gilecode.xmx.smx-idea";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12660/64962/smx-idea-1.0.zip";
      sha256 = "0liqa1wp42ah6m1l76r14ga85c9lbzx15gmkgx70zfr39ahsmjql";
      name = "Spring-MX-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/amogilev";
      license = lib.licenses.asl20;
      description = ''
        Allows displaying and management of actual Spring contexts and beans at run time.
    Displays resolved @Value placeholders
      '';
    };
  }) {};

  spring-mybatis-ce = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Spring-Mybatis-CE";
    plugname = "Spring Mybatis CE";
    plugid = "com.github.beansoft.spring.mybatis";
    version = "2020.2.0-EAP";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15182/99186/spring-mybatis-idea.jar";
      sha256 = "0wzpq23vr8yiijs040c1gbjyhvbp4fwb5j6i6fcc5wdzxzgszjxi";
      name = "Spring-Mybatis-CE-2020.2.0-EAP.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/beansoft";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Tools for developing Spring, Mybatis, etc. Main focus on Java developers who use IDEA Community Edition.
      Free during the EAP period.
      To enable the Java folding extensions for Java and Spring, please click File | Settings | Editor | General | Code Folding for Windows and Linux,
      IDEA | Preferences | Editor | General | Code Folding for macOS Ctrl+Alt+S, then switch on checkbox General | Custom folding regions.
      ⚠️ After you editing the JavaDoc or annotation, please place caret in the tag (eg. @param) inside the JavaDoc or annotation,
      then press Command+. to toggle folding.
    Below for Chinese instrunction:
    本插件提供Spring, Mybatis开发的支持工具. 主要关注 IDEA社区版的Java开发人员. 当前的早期开发版免费.
    要默认启用Java和Spring代码的自定义折叠选项, 在Windows 或 Linux 请依次点击 File | Settings | Editor | General | Code Folding,
      在 Mac 上，依次点击 Ctrl+Alt+S IDEA | Preferences | Editor | General | Code Folding , 然后选中复选框 General | Custom folding regions.
      ⚠️ 修改完 JavaDoc 或者 注解后, 请将光标移动到 JavaDoc 内的标签上(例如@param)或者注解上, 然后按下快捷键  Command+. 来切换代码折叠.
    作者: 刘长炯 beansoft@126.com, 现任职于北京某司从事Java架构工作.
      '';
    };
  }) {};

  spring-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spring-Tools";
    plugname = "Spring Tools";
    plugid = "org.gap.ijplugins.spring.idea-spring-tools";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14279/97029/idea-spring-tools-1.1.2.zip";
      sha256 = "03d06pq8ymgvf2ri0vammwnl22m3l4p4figc06plhb3s9lkih90f";
      name = "Spring-Tools-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gayanper/idea-spring-tools";
      license = lib.licenses.asl20;
      description = ''
        Spring support for IntelliJ CE based on the STS4 Language Server
      '';
    };
  }) {};

  spring-and-angularjs-code-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Spring-and-AngularJs-Code-Generator";
    plugname = "Spring and AngularJs Code Generator";
    plugid = "hu.rb.cs.generator";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10757/47695/SnAGenerator.zip";
      sha256 = "187fwsslryqv0qyj8s7cx9287q8a44dzv76wc3i1a7hzs3xnl9dn";
      name = "Spring-and-AngularJs-Code-Generator-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Adds options to generate Spring classes, and AngularJs javascript files.
Features

Generates AngularJs configuration, controller and service file.

The generated configuration file will contain a UI-router configuration.
The generated service file will contain ''$http service methods, generated from the selected Spring controller.

Generates Spring controller, service, and repository file based on an entity.

The generated repository file will use Spring Data Repositories.


Here you can find more information about AngularJS and Spring Framework.
Limitations

AngularJs generator only support UI-router and ''$http service.
Spring generator only support Spring Data Repositories.
      '';
    };
  }) {};

  springbootgen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SpringBootGen";
    plugname = "SpringBootGen";
    plugid = "SpringBootGen";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13525/74582/SpringBootGen.zip";
      sha256 = "0a593wymn3jwabk5cpgwpwdril803mhgimkv5vvqpqp4l3s9sy47";
      name = "SpringBootGen-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://example.com";
      license = lib.licenses.asl20;
      description = ''
        Spring Boot Generate
      
      JavaToSpringBoot
      New SpringBoot Class
      '';
    };
  }) {};

  springirun = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Springirun";
    plugname = "Springirun";
    plugid = "Springirun";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7069/105538/Springirun-0.4.zip";
      sha256 = "07adfkg3x4pjz6zqbvzi80wgn1yhxyppr3459zb99iqmp9hn5p2y";
      name = "Springirun-0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shupakabras/Springirun";
      license = lib.licenses.asl20;
      description = ''
        Intellij IDEA Community Edition support Spring configuration files.
      '';
    };
  }) {};

  sql-fixer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sql-Fixer";
    plugname = "Sql Fixer";
    plugid = "com.tonyma.idea.plugins.id";
    version = "beta1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14618/93424/sql_fixer.zip";
      sha256 = "0169c65whshvs8qibh9xf64gzzna7pig81ldp1k7bdg8nvlxpcy3";
      name = "Sql-Fixer-beta1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.tonyma.com";
      license = lib.licenses.asl20;
      description = ''
        Convenient copy of SQL from console logs.
      
      If you can’t use it, you can tell me by creating a github issue or email (ittony.ma@gmail.com), no matter which way you use, please attach a sample log you can’t use, thank you!
      

      Home Page: https://github.com/ittony-ma/sql-fixer
      '';
    };
  }) {};

  sql-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sql-Generator";
    plugname = "Sql Generator";
    plugid = "org.yseasony.sqlgenerator";
    version = "2.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7440/72649/idea-sql-generator-tool-2.2.1.jar";
      sha256 = "1s8fxrryg5lq23i9fkzw25kfz7c43f1wpyrz33y32rq0m258vmw9";
      name = "Sql-Generator-2.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yseasony";
      license = lib.licenses.bsd3;
      description = ''
        idea Sql Generator plugin
            
                Easy Sql Generator
                How to use, github: https://github.com/yseasony/idea-sql-generator-tool
                issues: issues
                donate: paypal
      '';
    };
  }) {};

  squaretest = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Squaretest";
    plugname = "Squaretest";
    plugid = "com.squaretest.Squaretest";
    version = "1.5.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10405/101156/Squaretest.zip";
      sha256 = "0q8wfq5ygdlsznyz95zwq0in1wrhazaz7v5pw3q3zjrvc9f8lc50";
      name = "Squaretest-1.5.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://squaretest.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://squaretest.com/docs/eula-terms.html";
        free = false;
      };
      description = ''
        Automatically Generate Unit Tests for Java Source Classes. Try Squaretest for free!


    Create a Test Class
    Choose Squaretest | Generate Test from the toolbar menu to create a test class for a Java class.



    Create Test Methods
    Open a test class and choose Squaretest | Generate Test Methods from the toolbar menu; Then, select the test methods you want to create and click OK.


    Features


    Auto generates Java or Groovy test code using either the JUnit4, JUnit5, SpringMVC, AssertJ, TestNG, Robolectric3+ or AndroidJUnit4 test frameworks and the Mockito mocking framework.
    Enables you to confirm which dependencies should be mocked (choose Squaretest | Generate Test - Ask to Confirm Mocks)
    Generates test methods with when(), verify() and assertEquals(..) calls.
    Generates code to initialize data transfer object beans (DTO beans) returned by dependency interactions.
    Creates doAnswer() statements for dependency method calls that take in Callables or Runnables.
    Squaretest also creates test methods for alternate flows by stubbing dependency method calls to throw exceptions.
    All output can be customized by changing the provided Apache Velocity templates.
    See squaretest.com for the full list of features.


    Support
    Please feel free to post feedback, questions and feature requests to the forum.
      '';
    };
  }) {};

  squirrel = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Squirrel";
    plugname = "Squirrel";
    plugid = "com.sqide.test";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8412/37024/squirrel-lang-idea-plugin.jar";
      sha256 = "00ajswip4zf24pn5shd2nmvlw0zjliqjhb8ls9di1hgxbv1zl47r";
      name = "Squirrel-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://shvetsgroup.com";
      license = lib.licenses.mit;
      description = ''
        Squirrel language support.
      '';
    };
  }) {};

  stack-trace-to-uml = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Stack-trace-to-UML";
    plugname = "Stack trace to UML";
    plugid = "ru.leoklo.stackuml";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10749/51123/StackToUML.jar";
      sha256 = "0v0x50g9js0h8qybxxricvb1ck8gr681dxg39jjhzrf9ly8gqycn";
      name = "Stack-trace-to-UML-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://leoklo.github.io/stacktouml/html-eula.html";
        free = false;
      };
      description = ''
        Draws UML sequence and communication diagrams from JVM stacktrace from exceptions
      Works with Java, Kotlin, Scala etc
      To open click on Analyze &gt; Open Stack trace to UML plugin
      + Generate UML diagrams from stacktrace from debug window Ctrl+Alt+S+U
      + Generate UML diagrams from stacktrace text from clipboard Ctrl+Alt+S+C
      + Navigate through source code clicking on the diagram
      + Save diagram as image
      + Hide elements from diagram
      + Change colors and font going to Settings &gt; Other settings &gt; Stack trace to UML
      '';
    };
  }) {};

  stacklane = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Stacklane";
    plugname = "Stacklane";
    plugid = "Stacklane";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10313/77837/stacklane-jetbrains-ide-1.0.7.zip";
      sha256 = "0w8j9yz0sz4d1ym3b8ai3yfnwq0f3w6qzm3rs616dbnks82pd14f";
      name = "Stacklane-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://stacklane.com";
      license = lib.licenses.asl20;
      description = ''
        Stacklane is the automatically
      scalable platform for
      serverless web apps,
      smart data models,
      and rapid results.

      The Stacklane WebStorm plugin syncs project files for online testing.
      '';
    };
  }) {};

  stapler-plugin-for-intellij-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Stapler-plugin-for-IntelliJ-IDEA";
    plugname = "Stapler plugin for IntelliJ IDEA";
    plugid = "Stapler plugin for IntelliJ IDEA";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1885/30801/idea-stapler-plugin.zip";
      sha256 = "1sh3yl65nhiif497m8ffg5hzrm1b9fqjysvii58al3sqkbnllm9g";
      name = "Stapler-plugin-for-IntelliJ-IDEA-1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://kohsuke.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://kohsuke.org/";
        free = false;
      };
      description = ''
        Stapler plugin for IntelliJ IDEA 11
      '';
    };
  }) {};

  startrek-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "StarTrek-Progress-Bar";
    plugname = "StarTrek Progress Bar";
    plugid = "startrek-progressbar";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13341/72502/StarTrekProgressBar.jar";
      sha256 = "0qi1d5zjlnck1d8cvznngdy3ksys1anlkih8w3v6qz29l1vj6fl7";
      name = "StarTrek-Progress-Bar-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/edoardomistretta/JetBrainsProgressBar/tree/star-trek";
      license = lib.licenses.bsd2;
      description = ''
        An elegant USS Enterprise progress bar for IntelliJ IDEA and other JetBrains IDEs.
      
      StarTrek Progress Bar is based on the Nyan Progress Bar by Dmitry Batkovich
      '';
    };
  }) {};

  starcor-code-commit-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Starcor-code-commit-template";
    plugname = "Starcor code commit template";
    plugid = "com.starcor.codecommit.template";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14986/95929/StarcorCodeCommitTemplate_v1.0.jar";
      sha256 = "114892hlmsidmi5mx5zp0kxklbx7cwfxpzb6i9g14xbaj4rwbf6i";
      name = "Starcor-code-commit-template-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.starcor.com";
      license = lib.licenses.asl20;
      description = ''
        Code submission template used by Starcor company
         使用以下模板创建提交消息:
        
        &lt;Title(feat|fix|optimization...):({id}) {summary} &gt;
        &lt;Cause: &gt;
        &lt;Solution：&gt;
        &lt;Effect：&gt;
        &lt;Reviewer：&gt;
      '';
    };
  }) {};

  starlight-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Starlight-Theme";
    plugname = "Starlight Theme";
    plugid = "aishwarya18102000.starlight";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14208/84909/Starlight_1.0.0.jar";
      sha256 = "1yc5mr87smjkn1rsvr0cp0j42ficddkdqianqbb61zj8gm5cxbi7";
      name = "Starlight-Theme-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Inspired from Solarized theme, this theme is called Starlight theme. It is still a work-in-progress.
      '';
    };
  }) {};

  starlightdark = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "StarlightDark";
    plugname = "StarlightDark";
    plugid = "net.starlighthosting.StarlightDark";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13411/88516/Darktheme.jar";
      sha256 = "019wc41vrdvq5c2apc4wcyp7gwq8wcpby0piifvz196ci74a7kcd";
      name = "StarlightDark-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://starlight.hosting";
      license = lib.licenses.gpl3Only;
      description = ''
        Starlight Jetbrains theme, Created by Starlight Hosting
      '';
    };
  }) {};

  startup-navigator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Startup-Navigator";
    plugname = "Startup Navigator";
    plugid = "com.zyhang.startup.core-intellij-plugin";
    version = "1.0.0-beta01";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15338/101851/Startup-Navigator-1.0.0-beta01.zip";
      sha256 = "0j57jwkj9mh7xrb2z0s59q8shg0rds05xvf1blai7f7sdi1n74bs";
      name = "Startup-Navigator-1.0.0-beta01.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://evilmouth.net";
      license = lib.licenses.asl20;
      description = ''
        Plugin for navigate one StartupTask
    to another StartupTask, which is a framework to help android app launch faster.
    Features:
    
        Provide two navigateIcon for each StartupTask, link to their reference and dependencies
      '';
    };
  }) {};

  stash-notifications = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Stash-Notifications";
    plugname = "Stash Notifications";
    plugid = "com.deepspace.stash_notifications_plugin";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14568/89726/stash_notifications_plugin-1.0.0.zip";
      sha256 = "1mlahwpah4y7lc24fj2nb7bn6d8hm6n96bcs1v5mlf8wn59lhaac";
      name = "Stash-Notifications-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DeepSpace2/stash-notifications-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        This plug in will show a small notification when you checkout a branch which has a stash
      '';
    };
  }) {};

  state-art = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "State-Art";
    plugname = "State Art";
    plugid = "dev.vinayshetty.stateart";
    version = "0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12193/60418/State_Arts-0.5.zip";
      sha256 = "1qiifvxy1fqrvxif70q8vwvnk527205af215yy2bp7ky4fjx4wl0";
      name = "State-Art-0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nvinayshetty/StateArts";
      license = lib.licenses.asl20;
      description = ''
        Generates State machine diagram from  State Machine 
      This plugin works based on a command line tool called Graphviz. Make sure you have Graphviz installed in your path
      This is a open source project please raise a feature request or file a bug if any, at  repository  looking forward for your feedBack
      '';
    };
  }) {};

  statistic = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Statistic";
    plugname = "Statistic";
    plugid = "Statistic";
    version = "4.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4509/100589/Statistic-4.1.6.jar";
      sha256 = "0blj0kwwaaldipwwny2a2pcpkd74pnicbg27sw0vb88x6bvayfn5";
      name = "Statistic-4.1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/4509-statistic";
      license = lib.licenses.asl20;
      description = ''
        Shows project statistic. This plugin shows files sorted by their extension along with size, line count
        LOC etc.
        User can select (Project/Module/Package/File) scope using the 'Refresh on selection' button. (This plugin
        requires Java 1.8)
        
        For older versions of IDEs (IDEA, Android Studio, PHP Storm) please use version 3.8.1 !!!
        
        
        Sponsors
        
        Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from inside your IDE while using jump-to-definition, your keybindings, and other IDE favorites. Learn more
      '';
    };
  }) {};

  statistics = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Statistics";
    plugname = "Statistics";
    plugid = "com.zxwl.statistics";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12415/62343/Statistics.zip";
      sha256 = "00zwp73f56qg2mgcz370fdr9ihacn6x2fdlchv2s334ib6c7ddyb";
      name = "Statistics-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://mail.qq.com/cgi-bin/loginpage";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://account.jetbrains.com/licenses";
        free = false;
      };
      description = ''
        The function of this product is to count the number of lines of code,
       the number of lines of comment, the number of blank lines,
        the number and location of each file function,
         the number of file types and the update time.
      '';
    };
  }) {};

  stellar-sdk = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Stellar-SDK";
    plugname = "Stellar SDK";
    plugid = "org.stellar.intellij.plugin";
    version = "0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10432/43351/stellar-xlm-intellij-plugin.zip";
      sha256 = "0hixgd0samj0a8q65gkmvv7hwl2klhqqzvpcsmd1sk6ggi9ql6d7";
      name = "Stellar-SDK-0.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/asebak/stellar-xlm-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/asebak/stellar-xlm-intellij-plugin";
        free = false;
      };
      description = ''
        Intellij Support for Stellar based projects
      '';
    };
  }) {};

  step-builder-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Step-Builder-Generator";
    plugname = "Step Builder Generator";
    plugid = "at.kienmeier.plugins.creational.stepbuilder";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8637/28623/StepBuilderGenerator.jar";
      sha256 = "08506k9advq14pjxxs3n4lymp3d3xvadxw9kc0f9bgagzfldiwiw";
      name = "Step-Builder-Generator-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        What is it? Based on the Builder creational design pattern, this plugin generates an internal Step Builder for a class. A Step Builder guides the users of your class through the creation process without creating objects with inconsistent internal state.  
 
 Where do I find the plugin when it is installed? You can find an additional action in the "Generate..." menu.  
 
 How do I start? Implement the easiest version of your class, e.g.:  public class Person { &nbsp;&nbsp;&nbsp;&nbsp;protected final String firstName; &nbsp;&nbsp;&nbsp;&nbsp;protected final String lastName; &nbsp;&nbsp;&nbsp;&nbsp;protected int age; &nbsp;&nbsp;&nbsp;&nbsp;protected boolean active; }   Even though this class will not compile as is (final fields need to be initialized at once or in constructors), it is a good starting point for the Step Builder. The plugin uses all final fields as mandatory fields, creating explicit Step interfaces for them. All non-final fields are considered optional. A private constructor having parameters for all final fields is created (all other constructors will be removed), as well as getters for all fields. The starting point, a static method called "newInstance", is added to the class.  
 
 What's the benefit for the users of my class? Users of your class will leverage the Step Builder whenever they need to create new instances. Example:  Person p = Person.newInstance() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.firstName("John") &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.lastName("Doe") &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.age(27) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.active(true) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.build();    
 
 Additional resources about the Builder pattern and the Step Builder: Crisp's Blog - Another builder pattern for Java Remove duplications and fix bad names: Step Builder pattern
      '';
    };
  }) {};

  step-builder-pattern-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Step-Builder-Pattern-generator";
    plugname = "Step Builder Pattern generator";
    plugid = "makasprzak.step-builder-generator";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7729/19167/step-builder-generator.jar";
      sha256 = "1j9wqpwa2s3pfmn2p1v3gyc934rxy4fm75r35x2smh2zgys2sksj";
      name = "Step-Builder-Pattern-generator-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/makasprzak";
      license = lib.licenses.mit;
      description = ''
        A handy Step Builder pattern generator (http://rdafbn.blogspot.ie/2012/07/step-builder-pattern_28.html)
      '';
    };
  }) {};

  stepsize = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Stepsize";
    plugname = "Stepsize";
    plugid = "com.stepsize.tech-debt-reporter";
    version = "0.11.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14515/107861/stepsize-0.11.0.zip";
      sha256 = "0vf2zdjqkglprkvh4i2cplpcrf5azclnrrdpx0fhwqczh7infwpa";
      name = "Stepsize-0.11.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://app.stepsize.com/editor-extensions";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.eulatemplate.com/live.php?token=pgsczkrtg8ifvl3ul7e5guk4efmhzzh5";
        free = false;
      };
      description = ''
        Report technical debt directly from your IDE
This is an early release that has some rough edges and is going to change significantly.
It requires access to the Stepsize private beta to work.
Setting up the extension

Visit stepsize.com/editor-extensions
Copy your authentication token
In your IDE, open the main Tools menu, and select Stepsize &gt; Authenticate
Paste in your authentication token and hit enter

Using the extension to report debt
The main purpose of the extension is to make it very easy for you to point to some code and describe what's wrong with it, as it relates to tech debt.
You can report 4 kinds of things:

A description of what's wrong with the code
The amount of time the code made you lose
A suggestion on how to improve the code
The fact that the code caused a quality issue

For a piece of code

Select a piece of code &amp; right click it
Select Report Technical Debt from the menu
Describe what's wrong with the code you selected
Optionally add more detail such as a suggestion or time lost
Optionally link your report directly to a tech debt item by assigning it as the root cause

For a file or directory

In the project view, right click on a file or directory
Select Report Technical Debt from the menu
Describe what's wrong with the file / directory
Optionally add more detail such as a suggestion or time lost
Optionally link your report directly to a tech debt item by assigning it as the root cause

Using the extension to be aware of debt
Software development requires rich context, and part of this context relates to technical debt – what should you know about this code? Is it a dangerous thing to modify? Why is it the way it is, and is there anything you should be aware of modifying it?
The Stepsize extension decorates your code with exactly this kind of context based on the technical debt you and your team has reported.

Get in touch, we need your feedback

  


  

We're keen to hear from you to improve the extension!

Schedule a 15-30min call with us here
Request features or vote on requested features here
Get to know us &amp; have a chat by joining our Spectrum community
Get fast support here by talking to us via the chat in the bottom right corner

License
For now this extension is released as proprietary software and by using it you agree to the following terms and conditions.
      '';
    };
  }) {};

  stickode = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Stickode";
    plugname = "Stickode";
    plugid = "com.teamnova.stickode.plugin";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13439/108561/Stickode-Plugins-0.0.2_obfuscation_.jar";
      sha256 = "1r1hxxw9hr9gfa1h3mkj1xx8h2dcz9knii7mz9dnrpw1fixcbpj0";
      name = "Stickode-0.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.stickode.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        english &amp; 한국어 supported (한국어 설명은 아래)

Stop wasting unnecessary time!


  Stickcode(https://stickode.com) is a tool
  that allows you to auto-complete by uploading frequently used codes. You can
  share your code with other developers. The development speed is much faster.



  


main function

1. Code saving &amp; autocomplete (cloud snippet)

  No more wasting time looking for code you wrote on past projects! Much of
  programming is repetitive. Using a stick cord can minimize repetitive work.
  Reducing repetitive work reduces work time and increases development
  productivity. Now upload and load frequently used codes to use. It can be used
  casually even if the working environment changes. Even if you reset your
  computer, you can use it immediately by logging in.



  



  (If you search and find it, tasks that take 20 to 30 minutes can be completed
  in 10 seconds as above if you register once.)



  


(You can also upload and use my code.)

2. Share &amp; Subscribe to Other Developer Codes

  Wasting a lot of time finding the code you wanted? Stickcode(https://stickode.com) has many developers working and sharing code. Just subscribe to the code
  you need. Subscribe to the source of your choice and use it right in vscode.



  




불필요한 시간낭비는 이제그만!


  스틱코드(https://stickode.com)는 평소 자주
  사용하는 코드를 업로드하면 자동완성 할 수 있게 만들어 주는 도구 입니다.
  다른 개발자에게 코드를 공유 할 수 있습니다. 개발 속도가 훨씬 빨라집니다.



  


주요기능

1. 코드 저장 &amp; 자동완성 (cloud snippet)

  더 이상 과거 프로젝트에서 작성했던 코드를 찾느라시간낭비 하지 마세요!
  프로그래밍의 상당부분은 반복작업 입니다.
  스틱코드를 사용하면 반복작업을 최소화 할 수 있습니다.
  반복 작업만 줄여도 작업시간이 감소하고 개발생산성이 증가합니다.
  이제 자주사용 하는 코드를 업로드하여 불러와 사용 하세요.
  작업환경이 바뀌어도 부담없이 사용 할 수 있습니다.
  컴퓨터를 초기화해도 로그인만하면 바로 사용 할 수 있어요.



  



  (일일히 검색해서 찾으면 20~30분 걸리는 작업도 한번만 등록해놓으면 위처럼
  10초만에 끝날 수 있어요.)



  


(내코드도 업로드해서 사용 할 수 있어요.)


2. 다른 개발자 코드 공유 &amp; 구독

  원하는 코드를 찾느라 시간낭비가 많으셨다구요?
  스틱코드(https://stickode.com )에는 많은
  개발자들이 활동하며 코드를 공유 합니다.
  필요한 코드를 구독 하기만 하시면 됩니다.
  원하는 소스를 구독하고 vscode 에서 바로 사용하세요.
      '';
    };
  }) {};

  sticky-notes = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sticky-Notes";
    plugname = "Sticky Notes";
    plugid = "com.buckstabue.stickynotes";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13745/80807/Sticky_Notes-1.0.zip";
      sha256 = "116wmpwfam5lp6f581k5yynmak28mr5g40bz79997pdniy28yfmm";
      name = "Sticky-Notes-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Buckstabue";
      license = lib.licenses.asl20;
      description = ''
        Sticky Notes
        Do you spend much time on refactoring that is not intended in the current task? Do you forget all the time what you really need to do and what you actually should focus on? Is your commit history messy and you cannot revert breaking changes without reverting needed code?
        Here is the solution: Sticky Notes plugin for IDEA! It always shows you what is your current task. The workflow is like this:
        
        You get a task in a task manager(YouTrack, jira, etc.).
        You decompose the task into micro-tasks(like "implement api for a feature", "add animation effects" and so on).
        With this plugin, you add those micro-tasks as Sticky Notes.
        You sort them in an order you want to execute them(with drag and drop on sticky notes list screen).
        This plugin always shows you what is your current task, so you stay focused on it.
        If you happen to find dirty code that you would like to refactor immediately, don't hurry! Just run the action "Add a Sticky Note" with a cursor-caret under the thing. This plugin saves a description and the position of the bad code and adds a sticky note at the end of a backlog of the current project.
        You continue working on the current desired task.
        When it's done, you commit code and click on "Done" button. The next task from backlog appears. So you start over from the point #5.
        When you get to refactoring tasks, you can decide whether you want to execute them within the current task. If you want to, then the advantage is that you can easily navigate to the dirty code by double clicking on it.
        
        Advantages:
        
        you will be more productive because this plugin helps you stay more focused on the current tasks
        you will get a transparent commit history because each micro-task was committed separately(you don't see "implement *** api" commit message in a change of an animation). More atomic commits - easier to revert breaking code
        you will have easier code reviews, less refactoring involved
        you will easily track dirty code places and fix them whenever you want.
      '';
    };
  }) {};

  sticky-selection = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sticky-Selection";
    plugname = "Sticky Selection";
    plugid = "com.mnw.stickyselection";
    version = "2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7341/40651/StickySelection.jar";
      sha256 = "0fvvdmwnyavipc4hc6bqglfi3yfr2x1i5n35c2b1w66jd0wm0qxv";
      name = "Sticky-Selection-2.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mikinw/StickySelection";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mikinw/StickySelection";
        free = false;
      };
      description = ''
        You can mark a selection to be permanently highlighted, even when your caret moves away. Inspired by "Style token" of Notepad++. 
You can define an arbitrary number of Paint Groups. Selecting the appropriate editor action (keystroke or context menu), the all occurrences of currently selected text will be added to the Paint Group and will be permanently highlighted (until you clear the selection with an other editor action). So you can have different text fragments to be selected with the same Paint Group. The Paint Groups are kept when IntelliJ is closed. 
 
 You can set different colours for each Paint Group 
 You can set a marker to be visible on the right side of the editor 
 You can add multiple selections to the same group 
 You can convert a Paint Group to multi caret selection (and thus edit, copy, delete, etc. it) 
 For convenience you can undo the last addition (until the document is edited) 
 You can cycle through each element in a given Paint Group or in all Paint Groups 
 Keymap actions are added dynamically for paint, clear and convert as you add more Paint Group 
 
Undo works up until the document is changed, or the editor is closed. Navigating in a specific Paint Group works like this: 
 
 If the caret is inside a Paint Group upcoming navigation will move caret among the Paints in that Paint Group. 
 If the caret is not inside a Paint Group the plugin will find the closest selection (in the direction the navigation happens), and will select that Paint Group for upcoming navigation 
 In the setting you can select if you wish the navigation to continue from the beginning of the document when you have reached the end of the document (or from the end if you have reached the beginning, when navigating to the other direction) 
 If caret is moved, decision starts from the beginning. 
 
Default shortcuts (but I highly encourage to define your own or at least check with your current shortcuts)&gt; 
 
 Press Ctrl + Alt + F9 to paint a selection (showing popup for selecting Paint Group). If nothing is selected, then the plugin tries to select automatically the word or block under the caret. 
 Press Ctrl + Alt + F10 than F9 to clear a selection (showing popup for selecting Paint Group). 
 Press Ctrl + Alt + F10 than F10 to clear all selections. 
 Press Ctrl + Alt + F8 to undo last selection. 
 Press Ctrl + Alt + quote to navigate to next Paint in the current Paint Group. 
 Press Ctrl + Alt + semicolon to navigate to previous Paint in the current Paint Group. 
 
Note: control + alt on Mac is (I guess) meta + alt 
If you find this plugin useful, please consider inviting me for a beer. I develop this plugin in my free time and I'm more motivated when I have a beer on desk :-)  http://PayPal.Me/mnwDevelopment/
      '';
    };
  }) {};

  stocker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Stocker";
    plugname = "Stocker";
    plugid = "com.vermouthx.intellij-investor-dashboard";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15443/105270/intellij-investor-dashboard-1.3.2.zip";
      sha256 = "0m69msq3scxgs20ba6g5m7j2smn3han5r4pds9x0yrbvqi6vj2r8";
      name = "Stocker-1.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://vermouthx.com";
      license = lib.licenses.asl20;
      description = ''
        Stocker is a JetBrains IDE extension dashboard for investors to track realtime stock market conditions.  
    
     
  Installation 
  Search Stocker in Plugin Marketplace and click Install. 
   
  Caveat 
  For A-Share stock code, SH or SZ(case-insensitive) prefix is needed. 
  TODO 
   
   Add CN mutual fund dashboard 
   Add stock detail info: high price, low price, candlestick chart etc. 
   Add notification when the price or percentage reach to a specified value 
   ... 
   
  Licence 
  Apache License
      '';
    };
  }) {};

  stop-build = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Stop-Build";
    plugname = "Stop Build";
    plugid = "com.andreibacalu.plugin.stop_build";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9619/34283/StopBuildPlugin.jar";
      sha256 = "15p5db1r2izzmqi2cb0n5vgvqf5hdhbzvbjc3sjx52k6y2avjlk9";
      name = "Stop-Build-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/androuis/StopBuild";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/androuis/StopBuild";
        free = false;
      };
      description = ''
        This plugin does what the stop button should do on android: stop the build aka. runs the gradle stop command.
      '';
    };
  }) {};

  stopcoding = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "StopCoding";
    plugname = "StopCoding";
    plugid = "icu.jogeen.StopCoding.id";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15740/108158/StopCoding.jar";
      sha256 = "0xnb0idpzckyl014g7c7kr38s732nj09mwncav31955bdz89n9vb";
      name = "StopCoding-1.2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jogeen/StopCoding";
      license = lib.licenses.asl20;
      description = ''
        This is a work timer.It can set every working period to remind you that it's time to have a rest, drink some water and exercise your body.
      Only in this way can you really work healthily
     
        In the tools menu bar, open stopcoding.
        Set working hours and rest time, and save them.
        When the set time comes, there will be a pop-up box to remind you to rest, so that you can not operate idea temporarily.
    
    
    如果你也经常沉迷于写代码,忘了起身休息喝水,那么试试这个插件吧
      
        在菜单栏的Tools中,打开StopCoding插件进行设置
        设置工作时间和休息时间,并且保存
        当设置的时间一到,就会有弹框提醒你休息,让你暂时不能操作idea
    
    项目地址:https://github.com/jogeen/StopCoding
      '';
    };
  }) {};

  stormsections = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "StormSections";
    plugname = "StormSections";
    plugid = "com.smartapplications.stormsections";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15851/108585/ss_release_1.0.1.zip";
      sha256 = "0bfnhnvphnscmks2kjq1k05fglsmysgf0n8r8gp1pkvnpkd18mmq";
      name = "StormSections-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.stormsections.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.stormsections.com/license";
        free = false;
      };
      description = ''
        Boost your Productivity with pleasure!
    A Productivity Plugin for JetBrains™ IDEs only! 
    
    Storm Sections Plugin lets you become more productive
    by dividing the source code into sections and gives you the ability to
    navigate through them by using a beautiful GUI Navigation Bar with 3D Buttons
    which represent each section.
    
    After that, it allows you to split sections of your source code
    into separate tabs with a single click!
    
    
    Check out the video in High Definition at the official website!
    
    
    
    
    
    
    Compatible IDEs
    Android StudioIntelliJ IDEA CommunityIntelliJ IDEA UltimatePyCharmWebStormPhpStormRiderCLionRubyMineAppCodeGoLandand so on...
    Supported Languages
    in alphabetical order
    

AppleScript (.applescript)
Arduino (.pde, .ino)
C/C++ (.c,.cp,.cpp,.h)
C# (.cs)
CoffeeScript (.coffee)
Dart (.dart)
Erlang (.erl)
Go (.go)
Groovy (.groovy)
Haxe (.hx)
Java (.java)
JavaScript (.js,.javascript)
JSON (.json, .jso)
Kotlin (.kt, .ktm, .kts)
PHP (.php)
Python (.py)
Ruby (.rb,.rhtml)
Scala (.scala)
Swift (.swift)
TCL (.tcl)
TypeScript (.ts)



More Files


.HTML, .XHTML, .XML, .XSL, .XSLT
.CSS, .SCSS, .SASS, .MD




powered by open-source software

jfiglet  GNU GPLv2


Copyright 2021 Smart Applications P.C.
      '';
    };
  }) {};

  streamline-refactoring = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Streamline-Refactoring";
    plugname = "Streamline Refactoring";
    plugid = "streamline.refactoring.plugin";
    version = "0.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12675/103697/streamline-refactoring-plugin.jar";
      sha256 = "1ighr7dcn9f8c4h0vxjmvw9q0n7bxym2jx0k8vwlig937rwdcc32";
      name = "Streamline-Refactoring-0.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/valery-labuzhsky/myprojects/tree/master/StatRef";
      license = lib.licenses.mit;
      description = ''
        This plugin to allow better experience while refactoring.
      It is experimental yet, so don't expect much on this stage.
      '';
    };
  }) {};

  string-manipulation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "String-Manipulation";
    plugname = "String Manipulation";
    plugid = "String Manipulation";
    version = "8.10.191.000.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2162/107167/StringManipulation.zip";
      sha256 = "0l9jv180ri7j20jb2cwmh4kbjzrpbymgn1xgljl5kmnfbpw90w2j";
      name = "String-Manipulation-8.10.191.000.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/StringManipulation";
      license = lib.licenses.asl20;
      description = ''
        Case switching, sorting, filtering, incrementing, aligning to columns, grepping, escaping, encoding...
      
        
            Case switching:
			
				Switch case (camelCase, kebab-lowercase, KEBAB-UPPERCASE, snake_case, SCREAMING_SNAKE_CASE, dot.case,
					words lowercase, First word capitalized, Words Capitalized, PascalCase)
				
                Toggle: SCREAMING_SNAKE_CASE / camelCase
                Toggle: snake_case / camelCase
                Toggle: kebab-case / snake_case
                Toggle: kebab-case / camelCase
                Toggle: dot.case / camelCase
                Toggle: PascalCase / camelCase
                Toggle: lowercase words / camelCase
                Toggle: First word capitalized / camelCase
                Toggle: Capitalized Words / camelCase
                To camelCase
                To snake_case
                To SCREAMING_SNAKE_CASE
                Capitalize
                To lower case
                To UPPER CASE
                Invert case
			
			-'Switch case' action can be customized, or new ones can be added in settings
            -when nothing is selected, then either nothing or whole line or a particular element is selected (report an issue if you find something to improve, each file type needs its own implementation to work flawlessly)
		
		
            Un/Escape:
			
				Un/Escape selected Java text
				Un/Escape selected JavaScript text
                Un/Escape selected C# text (regular, verbatim, interpolated)
				Un/Escape selected HTML text
				Un/Escape selected JSON text
				Un/Escape selected XML text
				Un/Escape selected SQL text
				Un/Escape selected PHP text
                Convert diacritics (accents) to ASCII
                Convert non-ASCII to escaped Unicode
                Convert escaped Unicode to String
			
		
		
            Encode/Decode:
			
				Encode selected text to MD5 Hex
				Encode selected text to SHA-1 Hex
				Encode selected text to SHA-256 Hex
				Encode selected text to SHA-512 Hex
				Encode selected text to SHA3-256 Hex
				Encode selected text to SHA3-512 Hex
				De/Encode selected text as URL
				De/Encode selected text to Base64 (+ zip/deflate)
				De/Encode selected text to Hex
                ISO Timestamp to Epoch Milliseconds
                Epoch Milliseconds to ISO Timestamp
			
		
		
            Increment/Decrement:
			
				Increment/decrement all numbers found.
				Duplicate line and increment/decrement all numbers found.
				Create sequence - Keep first number, replace all other by incrementing
				Increment duplicate numbers
            
		
		
            Sort with natural order or Collator:
			
				Reversing order of lines
				Shuffle lines
				Sort case-sensitive A-z
				Sort case-sensitive z-A
				Sort case-insensitive A-Z
				Sort case-insensitive Z-A
				Sort line length asc., desc.
				Sort hexadecimally
				Sort lines by subselection - only one selection/caret per line is handled
				Sort tokens (delimited text)
			
		
		
            Align:
			
				Align carets/selections into a vertical line by inserting spaces
				Format selected text to columns/table by a chosen separator/delimiter and sort by columns
				Align text to left/center/right
			
		
		
            Filter/Remove/Trim/Minify...:
			
				Grep selected text, All lines not matching input text wil be removed.
					(Does not work in column mode)
				
				Inverted Grep
				Trim
				Replace whitespaces with a single space char
				Remove all spaces
				Remove duplicate lines
				Keep only duplicate lines
				Remove empty lines
				Remove all newlines
				Minify JSON
				Minify JavaScript
			
		
		
            Other:
			
				Reverse Letters
				Swap Characters/Selections/Lines/Tokens
				Wrap or shift double quotes to single quotes to backticks
				Swap between double quotes and single quotes
				Switch file path separators: Windows&lt;-&gt;UNIX
			
		
		Actions are available under Edit menu, or via the shortcut "alt M" and "alt shift M".
			You can setup your own shortcuts for better usability.
			Popup can be customized in File | Settings | Appearance &amp; Behavior | Menus and Toolbars.
		
         
        Donations are welcomed.
      '';
    };
  }) {};

  string-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "String-Tools";
    plugname = "String Tools";
    plugid = "StringToolsPlugin";
    version = "4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10066/47565/StringToolsPlugin.jar";
      sha256 = "113sg0933jphs1psyi2x32wl7m73vhfjn7kacjgxfkzp9lifmjd2";
      name = "String-Tools-4.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.linkedin.com/in/boris-brinza-5768846/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://creativecommons.org/licenses/by/4.0/";
        free = false;
      };
      description = ''
        Handy string tools
      Handy string tools for converting (hex, binary, oct), encoding/decoding (URL, HTML, Base64) and computing HASH/CRCs.
      '';
    };
  }) {};

  stringcreator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "StringCreator";
    plugname = "StringCreator";
    plugid = "org.hyhe.string_creator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12095/59376/StringCreator.jar";
      sha256 = "0ajibk7dc10ywjqql5v4xrmwp4qmhj8hc14y68phslpqx52391wx";
      name = "StringCreator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hyhe";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/hyhe";
        free = false;
      };
      description = ''
        Android Studio Plugin. A quick way to create an java or xml String to a resource.
      How to Use?
      
      Select content in Java  or Layout
      open generate menu or alt+C
      Input name
      Press enter
      '';
    };
  }) {};

  stringtemplate-v4 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "StringTemplate-v4";
    plugname = "StringTemplate v4";
    plugid = "org.antlr.jetbrains.st4plugin";
    version = "0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8041/89477/jetbrains-plugin-st4-0.8.zip";
      sha256 = "17yl9pfd53x3a6abxxypn4gx6sv24y6mf15s83lnna729yiqwg40";
      name = "StringTemplate-v4-0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/antlr/jetbrains-plugin-st4";
      license = lib.licenses.bsd2;
      description = ''
        This plugin is for StringTemplate v4 .stg files. It works with
        IntelliJ IDEA 15, 2016.1-2020.1. It should work in other IntelliJ-based IDEs.
    

    Github source
      '';
    };
  }) {};

  structure101-workspace = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Structure101-Workspace";
    plugname = "Structure101 Workspace";
    plugid = "com.structure101.intellij.developer.plugin";
    version = "5.0.15419";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10831/97596/structure101-workspace-java-intellij-5.0.15419.zip";
      sha256 = "13qwi64sbnkpflih377vcv2v0xww71kprrbyzrly9wp24m07djlq";
      name = "Structure101-Workspace-5.0.15419.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://structure101.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://structure101.com/downloads/eula";
        free = false;
      };
      description = ''
        Structure101 Workspace lets you chase detailed code dependencies though a visual architecture that you can specify and share with the team. Updates as you edit code. Shows cycles. Kind of like Google Maps for your codebase.
    
    User guide
    
    Features overview
    
    Features video
    
    Product page
      '';
    };
  }) {};

  stubsgenerator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "StubsGenerator";
    plugname = "StubsGenerator";
    plugid = "StubsGenerator";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13399/106749/StubsGenerator.zip";
      sha256 = "0f63wsrgcvbbndir0k4snzl7nfzhi6xhinm3rh2i4q64w8cdw2fv";
      name = "StubsGenerator-1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wirthma/StubsGenerator";
      license = lib.licenses.asl20;
      description = ''
        Generator of stub models from a stubs specification file using a defined stub-to-concept transformation
      '';
    };
  }) {};

  sublime-snippets-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sublime-Snippets-Support";
    plugname = "Sublime Snippets Support";
    plugid = "com.kevinlinxp.sublimeSnippetsSupport";
    version = "1.2.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10446/98709/Sublime_Snippets_Support-1.2.8.zip";
      sha256 = "0g2qgc96lhac14ckjmpk2nvfda0jkil19dbz3vnby6kw1whchxkd";
      name = "Sublime-Snippets-Support-1.2.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.kevinlinxp.com";
      license = lib.licenses.mit;
      description = ''
        This plugin enables you to use your Sublime Text Snippets directly as Live Templates.
GitHub
How to install and use:

  
    In your IDE:
    
      Open Settings &gt; Plugins &gt; Browse Plugins and then type "Sublime Snippets Support" in the search box. You should be able to find this plugin as you typing.
      Install it and restart your IDE, then the snippets under your Sublime Text Packages folder will be ready to use.
    
  
  You can config the directory containing your snippets in Settings &gt; Editor &gt; Live Templates &gt; Sublime Snippets.

How it works:

When your IDE starts up, this plugin will scan the snippets directory, which if not specified, is your Sublime Text Packages folder. All the snippets found will be converted to live templates in the following manner:


  tabTrigger will be used as template abbreviation. Snippets without a tabTrigger will be omitted.
  scope will be mapped to the corresponding contexts supported by your IDE. Snippets without any supported scope will be omitted.
  description will be mapped to the live template description, if any.
  Fields and Mirrored Fields are supported.
  Placeholders are supported, however, fields and mirrored fields inside placeholders are not.
  Substitutions are not supported. They will be treated as Mirrored Fields instead.

Please be noted that:
While you can find the auto-generated live templates grouped as "SublimeSnippets" in Settings &gt; Editor &gt; Live Templates, it is recommended NOT to update them because they will be recreated every time you start your IDE. If you do wish to change them, edit the original sublime snippets instead.
      '';
    };
  }) {};

  sublime-text-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Sublime-Text-Keymap";
    plugname = "Sublime Text Keymap";
    plugid = "com.intellij.plugins.sublimetextkeymap";
    version = "201.6251.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12551/80587/SublimeTextKeymap.zip";
      sha256 = "0njnkhzfshz8izdlrg5lspr8sli67v1wji9wa70ann81y37pzm3x";
      name = "Sublime-Text-Keymap-201.6251.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = lib.licenses.asl20;
      description = ''
        Sublime Text keymap for all IntelliJ-based IDEs.
    Use this plugin if Sublime Text keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  substeps-intellij-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Substeps-IntelliJ-Plugin";
    plugname = "Substeps IntelliJ Plugin";
    plugid = "uk.co.itmoore.intellisubsteps";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9413/39091/intelliSubsteps_1.1.0.zip";
      sha256 = "0gadd0ypc9k9pb32wmhajbjqrmw3v20q9ik0srnxm1ka106m3f0g";
      name = "Substeps-IntelliJ-Plugin-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://substeps.github.io";
      license = lib.licenses.asl20;
      description = ''
        A plugin to help write and execute Substep features and compose substeps Inspired heavily by the 
IntelliJ Junit plugin much of the code here is based on that and adapted for Substeps.
      '';
    };
  }) {};

  subtle-hacker-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Subtle-Hacker-Theme";
    plugname = "Subtle-Hacker-Theme";
    plugid = "cz.vookimedlo.intellij.plugin.subtle-hacker-theme";
    version = "2020.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13580/75293/subtle-hacker-theme-2020.1.1.zip";
      sha256 = "0m9wza60jzn88m600wg5y2pyi3d3ildnh0spwq08nx8jcsi9hk5b";
      name = "Subtle-Hacker-Theme-2020.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vookimedlo/intellij-subtle-hacker-theme";
      license = lib.licenses.mit;
      description = ''
        Theme based on the famous Emacs' subtle-hacker-theme.
      '';
    };
  }) {};

  sudoku-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sudoku-Plugin";
    plugname = "Sudoku Plugin";
    plugid = "Sudoku Plugin";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/637/7814/Sudoku_Plugin_7814.jar";
      sha256 = "0gfijd7sypv8qp3jadgzmg7mmnjpxp7734xbrmpdvr1ia0ws8rgj";
      name = "Sudoku-Plugin-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/637/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/637/sourceCode.zip";
        free = false;
      };
      description = ''
        The Sudoku plugin creates and displays a game of Sudoku in a separate
    tool window.
      '';
    };
  }) {};

  summer-framework = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Summer-Framework";
    plugname = "Summer Framework";
    plugid = "io.adev.summer-plugin";
    version = "0.18.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15616/106062/summer-plugin-0.18.2.zip";
      sha256 = "13camwgih8746rylxi9krdkq4y5hsx34f6m434d2pl2zq2dl96xq";
      name = "Summer-Framework-0.18.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/adevone";
      license = lib.licenses.mit;
      description = ''
        Summer framework plugin
Framework page


Adds convenience intentions to generate viewProxy and platform implementations for events

Instructions
      '';
    };
  }) {};

  super-dark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Super-Dark-Theme";
    plugname = "Super Dark Theme";
    plugid = "com.nassim.theme.superdark";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13975/84236/super-dark-theme.jar";
      sha256 = "1za7d4h9q4i39axmqk2z0h2zr88j5m9gxs4qhmbfj58qa56vvl2g";
      name = "Super-Dark-Theme-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nassimbg/super-dark-theme";
      license = lib.licenses.mit;
      description = ''
        Repository

      To install:
      
          Go to Settings | Plugins, find the theme plugin and install it
          Restart the IDE
          Go to Settings | Appearance &amp; Behavior | Appearance and select Super Dark in the Theme dropdown
      '';
    };
  }) {};

  superdark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SuperDark-Theme";
    plugname = "SuperDark Theme";
    plugid = "com.github.ushiosan23.darktheme";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15187/99514/DarkTheme.jar";
      sha256 = "029rljl914z0d0ap2br0002lmzvmvg3yidi6wz54j7692lvcn4v8";
      name = "SuperDark-Theme-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Ushiosan23";
      license = lib.licenses.mit;
      description = ''
        IntelliJ Dark Theme. 
      Beautiful dark theme compatible with all IntelliJ IDEs. This theme is based on neon themes.
      
      Screenshots
      '';
    };
  }) {};

  surround-scm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Surround-SCM";
    plugname = "Surround SCM";
    plugid = "Surround";
    version = "10.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/61/85519/Surround_SCM_SCCI.jar";
      sha256 = "0fkwa00nh6ymh5knrqys4zip55kwih1mfcy3pr7k76gw07v72g0w";
      name = "Surround-SCM-10.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.perforce.com/products/surround-scm";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.perforce.com/terms-use#eula";
        free = false;
      };
      description = ''
        Surround SCM integration. This plug-in requires installing Surround SCM.
   Visit https://www.perforce.com/downloads/surround-scm to download the latest Surround SCM version.
      '';
    };
  }) {};

  surround-each-line = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Surround-each-line";
    plugname = "Surround each line";
    plugid = "Surround each line";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3359/5889/Surround_each_line_5889.jar";
      sha256 = "1b0pw4xjbyffwhzdn9gn8k0fvlll916xd6q79amcchxlrv2m1pm9";
      name = "Surround-each-line-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/surrounder";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/surrounder";
        free = false;
      };
      description = ''
        Apply a template to each lines selected (instead of the whole selection).

       2 actions are available under the Code menu.
       
        Apply template to each line (default shortcut: shift ctrl alt J)
        Remove the last semicolon of lines (if any) and apply a template (default shortcut:shift alt J)
       

       Example of template to use:
       
       &lt;li&gt;''$SELECTION$&lt;/li&gt;
       

       Remove semicolon is useful for templates like:
       
       LOGGER.info("''$SELECTION$="+$SELECTION$);
       

       Current limitations:
       
        ''$END$ variable is ignored
      '';
    };
  }) {};

  sutr-language-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sutr-Language-Plugin";
    plugname = "Sutr Language Plugin";
    plugid = "com.slalom.idea.aws.avs.sutr";
    version = "0.7.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8158/23613/Sutr.jar";
      sha256 = "1n2g58q5hx1kvfmf3j1hcgqzpkz1061n280v8dgpsfl92pd4g1rs";
      name = "Sutr-Language-Plugin-0.7.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.slalom.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.slalom.com/";
        free = false;
      };
      description = ''
        This plugin provides language support for Sutr, the Slalom implementation of AVS Utterance.
      '';
    };
  }) {};

  swagger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Swagger";
    plugname = "Swagger";
    plugid = "org.zalando.intellij.swagger";
    version = "1.0.28";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8347/70116/intellij-swagger.zip";
      sha256 = "070ji4zlr4lb1zqg5l4hhg9fybpcar5a1qmyniah9jy791bfpxsg";
      name = "Swagger-1.0.28.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://tech.zalando.com/";
      license = lib.licenses.mit;
      description = ''
        A plugin to help you easily edit Swagger and Open API specification files.

     Like this plugin? Give it a star at GitHub and spread the word!
      '';
    };
  }) {};

  swagger-codegen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Swagger-Codegen";
    plugname = "Swagger Codegen";
    plugid = "com.github.elyspio.swaggercodegen";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15611/106942/swagger-codegen-0.1.0.zip";
      sha256 = "1l37gklgmrpq6ky9yaqgwp4w3l1jwh462lh02gvsgdwhnbv9wnra";
      name = "Swagger-Codegen-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        This Fancy IntelliJ Platform Plugin is going to be your implementation of the brilliant ideas that you have.

This specific section is a source for the plugin.xml file which will be
extracted by the Gradle during the build process.

To keep everything working, do not remove &lt;!-- ... --&gt; sections.
      '';
    };
  }) {};

  swagger-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Swagger-Tools";
    plugname = "Swagger Tools";
    plugid = "com.pwhxbdk.plugin.swagger.tool";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14130/107025/swagger-tool.jar";
      sha256 = "0qi2mv2wnzsi9yjqs5idv7zb9r7i8jikg68rl20dm1axlyb3i1nn";
      name = "Swagger-Tools-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ Generate Annotation plugin.
      GitHub
      根据类属性/方法的doc注释生成swagger注解。
      使用说明请前往github查看...
      Generate swagger annotations based on doc comments of class field / methods.
      For instructions, please go to github...
      
      
        如果目标类上有@RestController或@Controller注解,则生成对应controller swagger注解，否则生成model swagger注解。
        可通过选中类名、字段名、方法名生成指定swagger注解。
        以下注释格式可自动填充到注解value中。
      
      
        If there is @RestController or @Controller annotation on the target class, the corresponding controller swagger annotation is generated, otherwise the model swagger annotation is generated.
        You can generate specified swagger annotations by selecting the class name, field name, and method name.
        The following annotation format can be automatically filled in the annotation value.
      
      
    /**
     * test
     * @desc test
     * @describe test
     * @description test
     */
    @ApiModelProperty("test test test test")
    private String test1;

    // test
    @ApiModelProperty("test")
    private String test2;

    @ApiModelProperty("")
    private String test3;
      '';
    };
  }) {};

  swagger-rearranger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Swagger-rearranger";
    plugname = "Swagger rearranger";
    plugid = "org.kelemenistvan.swagger-rearranger";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13259/104500/swagger-rearranger-1.5.zip";
      sha256 = "0603n6a4c0jwg82d2hp64qzr2xw5z8jic4k9micgk65gffz1v62y";
      name = "Swagger-rearranger-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kelemenisti/swagger-rearranger";
      license = lib.licenses.asl20;
      description = ''
        Rearranges paths and schemas alphabetically in a swagger yaml file
      '';
    };
  }) {};

  swaggeropenapi-security-assessment = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SwaggerOpenAPI-Security-Assessment";
    plugname = "Swagger/OpenAPI Security Assessment";
    plugid = "com.qualys.assessment.plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15361/104542/apisec-assessment-intellij-plugin-1.3.jar";
      sha256 = "0q2m7x9gg6mikyvqymrmf49cldrqsi2bhn6c60aqhw7nqfik6yr5";
      name = "SwaggerOpenAPI-Security-Assessment-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.qualys.com/";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin assesses your Swagger or OpenAPI file for security weaknesses.
      
      
      With a free API token from here, the plugin will:
      
        Assign a score from 0 to 100
        Provide recommendations on how to improve the score
        Map specific findings to line numbers in the file
      

      To assess swagger/OpenAPI file, select Run &gt; Swagger Assessment &gt; Assess. Optionally,
      
      Right click on swagger/OpenAPI file and select Swagger Assessment &gt; Assess
      
      Note: The maximum file size that can be assessed is 5 MB.
      '';
    };
  }) {};

  sweep = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Sweep";
    plugname = "Sweep";
    plugid = "Sweep";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9434/49973/sweep.jar";
      sha256 = "1amdkqi0w6amhw3cz5wlwnnl80n069h8jj4lkgz2pzawf3asxvji";
      name = "Sweep-1.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/idea/plugin/9434-sweep";
      license = lib.licenses.asl20;
      description = ''
        The plugin adds a "Sweep files" button to the main toolbar.
    One or more directories of temporary files within the current project can be configured (in the plugin settings) to be emptied when sweeping. The plugin settings allow to delete also hidden files and directories, and to exclude some files/directories from being swept via ignore pattern.
    
    Please note: This plugin is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    
    Icon made by Freepik from www.flaticon.com
      '';
    };
  }) {};

  swift-mock-generator-for-appcode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Swift-Mock-Generator-for-AppCode";
    plugname = "Swift Mock Generator for AppCode";
    plugid = "codes.seanhenry.mockgenerator";
    version = "18";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9601/105616/MockGenerator-18.zip";
      sha256 = "0m8snjbgbm9aay5hz553skr7p3lwxgk493b0qq39vsjgzn7nznhm";
      name = "Swift-Mock-Generator-for-AppCode-18.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/seanhenry/MockGenerator";
      license = lib.licenses.mit;
      description = ''
        Automatically generate your mocks in one action.
      
        Generates spies, stubs, dummies and partial spies.
        Generates test double conforming to one or many protocols.
        Generates test double conforming to a class.
        Captures invocation status of methods.
        Captures invocation status of properties.
        Records multiple invocations of methods.
        Records multiple invocations of properties.
        Captures invoked method parameters.
        Records multiple invocations of method parameters.
        Supports multiple properties in the same declaration.
        Stubs values for your mocks to return.
        Stubs a default value for return values where possible.
        Automatically calls closure parameters with stubbed values.
        Generates convenience initializers requiring no parameters.
        Supports initializers with arguments.
        Supports failable initializers.
        Supports required initializers.
        Stub an error for your mock method to throw.
        Supports throwing initializers.
        Supports throwing closures.
        Generates generic mocks from protocols with associated types.
        Captures invoked generic parameters.
        Captures invoked generic return values.
        Avoids naming clashes from overloaded methods.
        Supports parameter type-annotation attributes and `inout`.
        Respects the mock scope and generates `public` and `open` methods and properties.
        Generate mock inheriting from items in 3rd party frameworks.
      
      Before:
      
class DataStoreSpy: DataStore {

}
      
      After:
      
class DataStoreSpy: DataStore {

    var invokedSave = false
    var invokedSaveCount = 0
    var invokedSaveParameters: (data: Data, file: URL)?
    var invokedSaveParametersList = [(data: Data, file: URL)]()
    var stubbedSaveError: Error?
    var stubbedSaveResult: Bool! = false

    func save(_ data: Data, to file: URL) throws -&gt; Bool {
        invokedSave = true
        invokedSaveCount += 1
        invokedSaveParameters = (data, file)
        invokedSaveParametersList.append((data, file))
        if let error = stubbedSaveError {
            throw error
        }
        return stubbedSaveResult
    }
}
      '';
    };
  }) {};

  swift-test-tear-down-inspection-for-appcode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Swift-Test-Tear-Down-Inspection-for-AppCode";
    plugname = "Swift Test Tear Down Inspection for AppCode";
    plugid = "codes.seanhenry.teardown";
    version = "5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9769/105622/TearDown-5.zip";
      sha256 = "1n49y1w4pbfh5hyrxcjl3vkx2jm4smxssbvb22qnn802lw2apv88";
      name = "Swift-Test-Tear-Down-Inspection-for-AppCode-5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.seanhenry.codes";
      license = lib.licenses.mit;
      description = ''
        Inspects test classes for properties that are not set to nil in the tear down method
  and offers to fix the problem by generating the tear down method.
      
        Shows warning when properties are not set to nil in tear down.
        Generates a tear down method if one does not exist.
        Sets all optional and implicitly unwrapped optional properties to nil in the tear down.
        Does not disturb existing code when modifying tear down method.
        Automatically fix all test files using Code Cleanup.
        Analyses methods called by the tear down for properties that are already set to nil.
      '';
    };
  }) {};

  swing-buttons-fix = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Swing-Buttons-Fix";
    plugname = "Swing Buttons Fix";
    plugid = "RetardedButtonsFix";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6939/38461/SwingButtonsFix.jar";
      sha256 = "112z5wfkk6fbdamlswgm40g82kib9f0fxi1pbmip5ixzbpqazcai";
      name = "Swing-Buttons-Fix-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        By Swing default the Enter always fires default button regardless of selection by arrows or Tab. This plugin fixes it so the focused button is fired with Enter.
      '';
    };
  }) {};

  swingexplorer-integration-v2 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SwingExplorer-Integration-v2";
    plugname = "SwingExplorer Integration v2";
    plugid = "swingexplorer-plugin-v2";
    version = "2020.1-1.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8385/86285/SwingExplorer_Integration_v2-2020.1-1.6.1.zip";
      sha256 = "103vlajrfmjkb5ax139ymq11m5qg50lgijhw6ya1zzsf4ly9dd0p";
      name = "SwingExplorer-Integration-v2-2020.1-1.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wglanzer/swingexplorer-idea";
      license = lib.licenses.gpl3Only;
      description = ''
        SwingExplorer is a tool for Java Swing application debugging.
        This plugin integrates it into IntelliJ IDEA, to use it without external console
      
      
      
        The plug-in was original contributed by Piotr Mlocek.
        Modified by Werner Glanzer (See on GitHub).
      '';
    };
  }) {};

  swingplayground = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SwingPlayground";
    plugname = "SwingPlayground";
    plugid = "com.d0tplist.swingplayground";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11948/57772/SwingPlayground.jar";
      sha256 = "103h7yqqv06zymmbm414dn1z9wihyj9c7zzfjvlsi17g9232zlgd";
      name = "SwingPlayground-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/d0tplist";
      license = lib.licenses.asl20;
      description = ''
        Deploy a custom swing component and see it right in a tool window, it's like instant run for Swing.
      WARNING: doesn't work with components that needs extra dependencies/classes, yet.
      '';
    };
  }) {};

  swiss-as-dev-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Swiss-AS-Dev-Tools";
    plugname = "Swiss-AS Dev-Tools";
    plugid = "com.swissas.tala.swissas";
    version = "1.7.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12831/102368/swissas-1.7.7.zip";
      sha256 = "0bq8z3jrgwcrcvhzr0s53p0xy34mgdgq7060x8hf2fnx6qklnxn2";
      name = "Swiss-AS-Dev-Tools-1.7.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alain57/swissas-dev-tools";
      license = lib.licenses.mit;
      description = ''
        A Personal Plugin built during my free time to make IntelliJ more Swiss-AS compatible (traffic light, sonar critical warnings, Multilangue, etc...)
      '';
    };
  }) {};

  switch-component-files = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Switch-Component-files";
    plugname = "Switch Component files";
    plugid = "andrewbents";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12141/59838/switch-component-files-plugin.zip";
      sha256 = "1pslf7iwl74crym3p2q4wvc4jl5hi4pby8jqwlrpcw0wmr5b2ji5";
      name = "Switch-Component-files-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andrewbents/switch-component-files-plugin";
      license = lib.licenses.mit;
      description = ''
        Switch between component's code, styles and template
      '';
    };
  }) {};

  swords = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Swords";
    plugname = "Swords";
    plugid = "yp.tools.plugin.swords";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9723/35493/Swords.zip";
      sha256 = "0pihfymnm27m0a075b1msy6r69vi0mdfn882ibssqa69rcp5p3sm";
      name = "Swords-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.cnblogs.com/yepei";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.cnblogs.com/yepei";
        free = false;
      };
      description = ''
        Swords, a wonderful mybatis code generator
 
 
 
  swords插件是一个很好用的插件，可以根据配置的mysqlDatasource自动生成dao层代码、bean代码以及mybatis的xml文件。
  
 
  作者：叶佩，如有问题，请联系QQ:519549317@qq.com
   
 
使用方法: 
安装好本插件后，重启IDE然后，在菜单栏中的Tools选项中，选择“Swords”！
      '';
    };
  }) {};

  swungweave = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SwungWeave";
    plugname = "SwungWeave";
    plugid = "SwungWeave";
    version = "1.1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5889/21260/swung-weave-idea-plugin-1.1.7.jar";
      sha256 = "1zswpcfymf517g028clcivvgaqwqp22818jlijcbd17scd5952dk";
      name = "SwungWeave-1.1.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/realityforge/swung_weave";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        SwungWeave: Bytecode weaver to simplify Swing UI code
      '';
    };
  }) {};

  syncedit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SyncEdit";
    plugname = "SyncEdit";
    plugid = "SyncEdit";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/214/1272/SyncEdit_1272.jar";
      sha256 = "1gcplmcf9dby6fbxqkbbbddn9zx7wslq9lv5rw85ikzfz5zwc5x9";
      name = "SyncEdit-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Similar to 'SyncEdit' functionality already in Borland Delphi, and soon to be in Eclipse...
    This plugin allows you to do an inplace synchronized edit of all instances of a string within a defined range.

    A "SyncEdit Mode" menu item is added to the Search and Editor Popup menus.  Simply select a range to be edited,
    enter "SyncEdit Mode" and all words in the marked range become 'live' - any changes to an instance of a word changes
    all matching strings in real-time.

    The decision about the word to SyncEdit is determined by a 'Select Word' operation at the current cursor location
    (respecting any CamelHump settings) when a modification is made. However, you can SyncEdit a custom region of text by
    first selecting it and then invoking the SyncEdit action again, or even just start typing to replace the substring
    completely.

    There is also a "Paste with SyncEdit" action added to the Edit Menu - this will execute a paste and automatically
    enter SyncEdit Mode for the range of the pasted text, great for tweaking pasted code fragments for the context they
    are used in.

    The mode can be exited by pressing either escape or enter - once to exit SyncEdit on a word, and once again to stop
    SyncEditing a range.

    At the moment SyncEdit works purely on a textual basis, but maybe later versions will optionally use code
    members/identifiers if there is interest for this.
      '';
    };
  }) {};

  synergix-awesome = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Synergix-Awesome";
    plugname = "Synergix Awesome";
    plugid = "synergix.plugin.intellj";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11303/67138/synergix-intellij-plugin.jar";
      sha256 = "09a786qimv23yak7dgzm9178i5ggfl0kj0941s157vcvkc635ajx";
      name = "Synergix-Awesome-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/synergix-tech/synergix-intellij-plugin";
      license = lib.licenses.bsd3;
      description = ''
        This plugin provides a bunch of utilities to help developers code faster with Synergix Framework.

      Feature:
        Code completion: SynComponent's attributes such as labelKey, numberType, data-type...
        File Template: XML Entity File.
        Live Templates: auto generating code for common columns in XML Entity File.
        String literal navigator everywhere.
        Sync DB Run Configuration: allow run Sync DB directly from IDE.
        Synergix Screens Tool Window: This tool window makes developers easier to understand the screen structure (Bean + XHTML) and provides a very convenient screen instant search instead of finding the code manually.
      '';
    };
  }) {};

  synonyms = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Synonyms";
    plugname = "Synonyms";
    plugid = "com.github.pbetkier.intellij.synonyms";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7576/17593/intellij-synonyms.zip";
      sha256 = "0r2qkd509n0brqg9asl7sr4b5yn1i6spzd6040faxg9i4qssy9y2";
      name = "Synonyms-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/pbetkier";
      license = lib.licenses.asl20;
      description = ''
        View the synonyms for the current word under cursor.
      Makes your tough naming decisions less painful.
      '';
    };
  }) {};

  synopsys-code-sight = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Synopsys-Code-Sight";
    plugname = "Synopsys Code Sight";
    plugid = "com.synopsys.sig.desktop.idea";
    version = "2020.11.0.212719";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11516/101256/synopsys-code-sight-intellij-2020.11.0.zip";
      sha256 = "1pa6q0fwdsrk08gb43pv7igdx4g0w86hcf40phi9fzy6qxn83da3";
      name = "Synopsys-Code-Sight-2020.11.0.212719.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.synopsys.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.synopsys.com/content/dam/synopsys/sig-assets/legal/eulm/2019-3/eeulm-(all-regions)-v2019-3-final.pdf";
        free = false;
      };
      description = ''
        The Synopsys® Code Sight™ plug-in identifies security bugs and vulnerabilities in your software while you code.
  It scans automatically, and highlights issues in the development environment so that you can fix them immediately.

  
  Additionally, connecting to a Synopsys server improves scan performance and enables your entire development team to
  collaborate on writing better code faster.

  
  Under Limited Availability, Code Sight now expands support for Black Duck Hub - Black
  Duck Quick Tour. This helps you to select OSS libraries that are non-vulnerable and ensure open source security
  compliance.

  
  See what the plug-in looks like in our interactive demo: Code Sight Quick Tour.

  
  A functional Coverity license is required to run Code Sight with Coverity, and a Black Duck Hub license to use it
  with Black Duck Hub. Please check with your local administrator or contact 
  software-integrity-support@synopsys.com to
  get access.

  
  Build# 33

  Commit Info:
    72fb6c0850b7aca2bef5cf5228d8763f5a850645
    2020-10-19T08:38:45 -0700
      '';
    };
  }) {};

  systemproperties = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "SystemProperties";
    plugname = "SystemProperties";
    plugid = "SystemProperties";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15/38/SystemProperties_38.jar";
      sha256 = "04s7gl6w124r8izl7zy6fhrhi1fs1cs174i4lmcb5d2x3qpr6lb0";
      name = "SystemProperties-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This is toolwindow with all system properties of JVM
      '';
    };
  }) {};

  systemverilog = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SystemVerilog";
    plugname = "SystemVerilog";
    plugid = "studio.edaphic.sv";
    version = "2019.1.BETA.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10695/60029/SystemVerilog-2019.1.BETA.12.zip";
      sha256 = "1s4fjiq61p1z0mmnc45ig965xpxfsllkwvrl9nw14p6y8aqy0xiw";
      name = "SystemVerilog-2019.1.BETA.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.edaphic.studio";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.edaphic.studio/eula-beta";
        free = false;
      };
      description = ''
        Full SystemVerilog (and Verilog) support, including resolving macros and checking underlying code as well as
        parsing of the UVM library.
        Features syntax error detection, code completion, navigation, structure view, inspections, variable rename, parameter hinting and more.
      '';
    };
  }) {};

  systemverilog-studio = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "SystemVerilog-Studio";
    plugname = "SystemVerilog Studio";
    plugid = "com.levses";
    version = "1.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14203/94566/studio_plugin-1.15.zip";
      sha256 = "1cl31fr6050j42lc0hhgn9kr47833zvnww3glhxgg9h08qyghijx";
      name = "SystemVerilog-Studio-1.15.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://systemverilogstudio.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://systemverilogstudio.com/dashboard";
        free = false;
      };
      description = ''
        SystemVerilog Studio is Integrated Development Environment (IDE) for SystemVerilog desing and testbench development, based on IntelliJ IDEA.
Every aspect of the tool is specifically designed to maximize developer productivity.
Together, powerful static code analysis and ergonomic design make development not only productive but also an enjoyable experience.
      '';
    };
  }) {};

  tbsp2-0 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TBSP2.0";
    plugname = "TBSP2.0";
    plugid = "com.github.ingTools";
    version = "1.0.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13472/75257/ingTools.zip";
      sha256 = "1kybrnbq3i09bwdgx92nij7bjrb90vcv1wj5wz0pghylrknvfni9";
      name = "TBSP2.0-1.0.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BlueDriver";
      license = lib.licenses.mit;
      description = ''
        TBSP2.0 development plugin for IntelliJ IDEA.
    Guideline：Click me
    Download：Click me
    Feedback：wucp26649@hundsun.com
      '';
    };
  }) {};

  tdd-assistant = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TDD-Assistant";
    plugname = "TDD Assistant";
    plugid = "com.evil.inc";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14370/87062/tdd-assistant.jar";
      sha256 = "0zahfw3x7m9yk7jiydz0djz78w5xdpyx82h3863f0khbdm260xl3";
      name = "TDD-Assistant-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Simple plugin to assist with Red-Green-Refactor cycle during TDD.
      '';
    };
  }) {};

  tkcg = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TKCG";
    plugname = "TKCG";
    plugid = "com.sgota.tools.tkcg.idea";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11330/53504/tkcg-idea.zip";
      sha256 = "0zsw4bw5sl96k87xn33wabrqm4xvc8vfg5xdbwmv70h4ck33q4hz";
      name = "TKCG-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/freedommedal/tkcg";
      license = lib.licenses.asl20;
      description = ''
        English description
        tkcg is a code generator,you can generate the project structure.
        business code can be generated according to the database reverse
        the document can be accessed https://freedommedal.github.io/tkcg-doc reading
        
        中文描述
        tkcg 是一个代码生成器,你可以生成项目结构.
        可以根据数据库逆向生成业务代码.
        文档可以访问 https://freedommedal.github.io/tkcg-doc 阅读
      '';
    };
  }) {};

  tl-schema-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TL-Schema-support";
    plugname = "TL Schema support";
    plugid = "net.pavelk.tlschema.colorer";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7947/91343/TL-Schema-idea-plugin.jar";
      sha256 = "0i3qlq45a5avaw09j77rcbz8wgrdn4dg26sddsprfz43sf5lda1l";
      name = "TL-Schema-support-1.3.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kunyavskiy/TL-Schema-idea-plugin";
      license = lib.licenses.gpl3Only;
      description = ''
        Supports TL schema files coloring and several inspections
      '';
    };
  }) {};

  tmc-plugin-for-intellij = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TMC-Plugin-for-Intellij";
    plugname = "TMC Plugin for Intellij";
    plugid = "fi.helsinki.cs.tmc";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8551/46189/tmc-plugin-intellij_7_.zip";
      sha256 = "0z64bllvbdyjyy4aj3094n2cnhrm56frsppaya9ciz7241bfxsbx";
      name = "TMC-Plugin-for-Intellij-2.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/testmycode/tmc-intellij";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/testmycode/tmc-intellij";
        free = false;
      };
      description = ''
        TMC-IntelliJ is the IntelliJ IDEA plugin for University of Helsinki's TestMyCode framework. TestMyCode is used by various online programming courses for exercise testing and submitting. 
 Set your TMC settings in the TMC menu and you're ready to go!  
 If you run into any bugs, please submit an issue of it at the Github repository.
      '';
    };
  }) {};

  tmf-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TMF-Plugin";
    plugname = "TMF Plugin";
    plugid = "com.taobao.tmf.plugin.id";
    version = "1.4.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7368/15821/tmf-plugin-idea.zip";
      sha256 = "078bilnvrcnwhc7pa9prrfrf77a4xm61yxrwa21547ifqyg89xs9";
      name = "TMF-Plugin-1.4.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        辅助开发基于 
tradespi 的程序。可以创建 provider、SPI，在 provider/SPI/namespace 之间跳转。
      '';
    };
  }) {};

  tribot-tools-by-laniax = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TRiBot-Tools-by-Laniax";
    plugname = "TRiBot Tools by Laniax";
    plugid = "com.laniax.intellijtribotplugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15366/102490/tribot.jar";
      sha256 = "19bfqka38zpcz4r6wnbda774b3vvmm8mlrrsqcglkdlzzbacgg5m";
      name = "TRiBot-Tools-by-Laniax-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://community.tribot.org/profile/68918-laniax/";
      license = lib.licenses.gpl3Only;
      description = ''
        Useful tools for TRiBot script writers.
      Most notably it allows you to pack all your script's source files into a zip file that you can then upload to the TRiBot Repository.

      Usage:
      After installing the plugin, a 'TRiBot' menu will appear in the top of your IDE. Click 'Pack script', select the script you want to pack, and the destination you want to save the zip file at.
      It's smart enough to only pack the files that your script actually uses. There is no project setup required, all settings are read from your IDE.
      '';
    };
  }) {};

  tsreact = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TSReact";
    plugname = "TSReact";
    plugid = "com.bluewaitor.tsReact";
    version = "1.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12410/69261/TSReact.jar";
      sha256 = "0fanr02xrkzlq80gx3lyq4lxv3cifkddjldq5mi5zrsswasfwvg2";
      name = "TSReact-1.4.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bluewaitor";
      license = lib.licenses.mit;
      description = ''
        Typescript React Snippets. Save your time.
      '';
    };
  }) {};

  tss-editor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TSS-editor";
    plugname = "TSS editor";
    plugid = "be.programaths.idea.plugins.editors.tss";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10252/41324/tss_editor.jar";
      sha256 = "1r3gm8yh2xn8r8f28c2123l2jg19iak3fsqa1d1qsadg16hr89ma";
      name = "TSS-editor-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.programaths.be";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.programaths.be";
        free = false;
      };
      description = ''
        A simple TSS editor
      '';
    };
  }) {};

  ttnotnull = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TTNotNull";
    plugname = "TTNotNull";
    plugid = "com.tp7309.TTNotNull";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11934/57609/ttnotnull-1.0.0.jar";
      sha256 = "0rn71ill2r2h5gbal2r5ha53pcf9kbnap99w62ympci5vgfmia2z";
      name = "TTNotNull-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/tp7309";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/tp7309/TTNotNull/blob/master/LICENSE";
        free = false;
      };
      description = ''
        auto generate null check code.
    
        Alt+9 generate not null check code.
        Ctrl+Alt+9 generate null check code.
    
     github
      '';
    };
  }) {};

  typo3-typoscript---enterprise = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TYPO3-TypoScript---Enterprise";
    plugname = "TYPO3 TypoScript - Enterprise";
    plugid = "de.sgalinski.typoscript.enterprise.plugin.id";
    version = "2.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11243/107876/Typo3FrameworkPlugin.zip";
      sha256 = "0kpc2mpw51vkc8yfl1qscprf44yi3p7kv1hmxdh0yzm49a925npx";
      name = "TYPO3-TypoScript---Enterprise-2.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.sgalinski.de";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.sgalinski.de/licenses/spl/";
        free = false;
      };
      description = ''
        Support for the TYPO3 TypoScript language.
	  	

        
            
        

        

        
            Please uninstall the TypoScript plugin from Intellij before you install this one, because this
            combination can lead to crashes and unforeseeable problems.
        

        

        
            This plugin provides support for the TypoScript configuration language of the TYPO3 CMS and for Neos Fusion of Neos.
        

        

        Neos Fusion Feature Highlights:
        
            Code Highlighting
            Code Folding
            Code Formatting
            Error Detection
            Breadcrumb
        

        

        TypoScript Feature Highlights:
        
            Code Highlighting
            Code Folding
            Code Formatting
            Code Auto Completion with multi file support
            Code Type Annotation
            Code Documentation (Ctrl+Q on Windows/Unix, Ctrl-J on Mac)
            File auto completion for INCLUDE_TYPOSCRIPT values
            Go to file support for INCLUDE_TYPOSCRIPT values
            Error Detection
            Structure Tree
            Breadcrumb, can be disabled in the TypoScript settings (File -&gt; Settings -&gt; IDE Settings -&gt; TypoScript)
        

        TypoScript Commercial Feature Highlights:
        
            No ads.
            File auto completion for EXT: values.
            Go to file support for EXT: values.
            More in developement...
        

        
            The TypoScript code value annotation is an additional feature for the code auto completion.
            You can assign a specified data value for any keyword to let PhpStorm know, how to handle keywords that are
            not defined inside the project or the included tsref.xml.
        

        
            You can easy advance the tsref.xml by creating a new file called "tsref_additionals_[1,2,...].xml" in the
            folder "de/sgalinski/typocript/resources/". Then you can add your special values.
        
        

        Syntax:
        
    // @var [Key] [Type]
        

        Example:
        
    // @var plugin.tx_ext.someProperty stdWrap
    plugin.tx_ext.someProperty {
        ...
    }
        

        Example2:
        
    plugin {
        /** My description
         * to this specific
         * variable
         *
         * @var .tx_ext TEXT
         */
        tx_ext.someProperty {
            ...
        }
    }
        

        
            We will deliver bugfixes in the future. Please check for updates regularly.
            If you find bugs or have feature requests, please open a ticket in our
            public issue tracker.
        

		License
		
            Details about the license can be found on the site behind the following link:
            https://www.sgalinski.de/licenses/spl/
      '';
    };
  }) {};

  typo3-xliff-utility = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TYPO3-XLIFF-Utility";
    plugname = "TYPO3 XLIFF Utility";
    plugid = "de.onigunn.intellij.xliff";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8098/53852/intellij.xliff-0.2.0.jar";
      sha256 = "18lnw0zln55xi6kshn211m1mwxkjdwbyrjx8q4fdmp4awxiymf0n";
      name = "TYPO3-XLIFF-Utility-0.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://guengoeren.eu";
      license = lib.licenses.mit;
      description = ''
        Eases the creation/updating of XLIFF translations. Select target text and invoke the "Create/Update XLIFF translation" action.
      Define your Unit ID and destination file. The given text is automatically replaced by the fluid translate view helper.
      '';
    };
  }) {};

  tab-number = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tab-Number";
    plugname = "Tab Number";
    plugid = "com.dinhhuy258.tabnumber.tab-number";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14927/95540/tab-number-1.0.0.zip";
      sha256 = "0mqbwn0ikn6y0wynmlcxmbr30iybqgnwhmn7ma3l5zy7vmkl8s9l";
      name = "Tab-Number-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dinhhuy258/tab-number";
      license = lib.licenses.mit;
      description = ''
        A Intellij plugin for displaying tab number
      '';
    };
  }) {};

  tab-session = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tab-Session";
    plugname = "Tab Session";
    plugid = "idea.plugin.tabsession";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7209/13043/idea-plugin-tabsession.jar";
      sha256 = "18fr3iz1b3gnjgvi9h2nl4lf1z2saz0jwcbkvlxl5fbvp951ym9p";
      name = "Tab-Session-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://alp82.github.io/idea-tabsession/";
      license = lib.licenses.mit;
      description = ''
        Save groups of tabs and switch between different sessions.
 Comparable to numerous browser plugins like Session Manager (Firefox) or Session Buddy (Chrome).
      '';
    };
  }) {};

  tab-shifter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tab-Shifter";
    plugname = "Tab Shifter";
    plugid = "socrates.tabshifter";
    version = "0.30";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7475/107923/tab-shifter.zip";
      sha256 = "1alywdm8nr8jym0yqqr9an2yjn392mc6vqxh7jva03fa5b8j8n2j";
      name = "Tab-Shifter-0.30.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dkandalov/tab-shifter";
      license = lib.licenses.asl20;
      description = ''
        This is a plugin with a bunch of actions to move tabs between editor splitters and resize splitters.
        Actions are added to "Main Menu -&gt; Window -&gt; Tab Shifter".
        
        OSX shortcuts:
        
            ctrl+alt+] - shift tab right
            ctrl+alt+[ - shift tab left
            ctrl+alt+P - shift tab up
            ctrl+alt+; - shift tab down
            alt+ctrl+[ - stretch splitter left
            alt+ctrl+] - stretch splitter right
            alt+ctrl+= - equal size splitter
            alt+shift+M - maximize/restore splitter
        
        
        Other OS shortcuts:
        
            alt+shift+] - shift tab right
            alt+shift+[ - shift tab left
            alt+shift+P - shift tab up
            alt+shift+; - shift tab down
            ctrl+alt+[ - stretch splitter left
            ctrl+alt+] - stretch splitter right
            ctrl+alt+= - equal size splitter
            alt+shift+M - maximize/restore splitter
        
        
        To move focus between splitters:
        
            ctrl+alt+shift+] - right
            ctrl+alt+shift+[ - left
            ctrl+alt+shift+P - up
            ctrl+alt+shift+; - down
            ctrl+alt+. - recommended binding for built-in Goto Next Splitter action
        
        
        These actions are similar to built-in "Move Right/Down" tab actions and essentially fix usability issues.
        If you like the idea, please vote for this issue on youtrack.
        For more details see GitHub page.
        
        Plugin idea by Sandro Mancuso at
        SoCraTes UK 2013.
        Created using LivePlugin.
      '';
    };
  }) {};

  tabformat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TabFormat";
    plugname = "TabFormat";
    plugid = "com.jetbrains.TabFormat";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10462/44887/tabformat-plugin-0.3-beta.zip";
      sha256 = "0471sz5vr60a5hvp12dm9vahjbk8biqhjrfpcfn1c47lp1f50s71";
      name = "TabFormat-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.asl20;
      description = ''
        Enforces formatting with Tabs even in places where spaces are normally used such as alignments. 
 Beta Version Limitations: 
 
 Tabs are added only if there is already a space or spaces, this may break some alignments. 
 Autoindeting lines still may use spaces for alignment. Tabs are enforced only on reformat.
      '';
    };
  }) {};

  tabmover = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TabMover";
    plugname = "TabMover";
    plugid = "com.mnw.tabmover";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10131/39980/TabMover.jar";
      sha256 = "1c7mf400zrh4mcjqazxm0lil8fgw372m744smyngzd6phfv59686";
      name = "TabMover-1.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mikinw/TabMover";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mikinw/TabMover";
        free = false;
      };
      description = ''
        TabReorder plugin allows to reorder and move editor tabs using keyboard shortcuts. 
Default shortcuts, but I recommend checking them with your current keymap: 
- 
Control+Alt+Shift+Left to move tab left; 
- 
Control+Alt+Shift+Right to move tab right; 
- 
Control+Alt+Shift+Up to make tab first; 
- 
Control+Alt+Shift+Down to make tab last; 
- 
no default keystroke to move tab to previous splitter (tabgroup) within the same window; 
- 
no default keystroke to make tab to next splitter (tabgroup) within the same window; 
- 
Control+Alt+Shift+PageUp to move tab to previous splitter or window (depending on which comes first); 
- 
Control+Alt+Shift+PageDown to make tab to next splitter or window (depending on which comes first); 
- 
Control+Alt+Shift+OpenBracket to focus previous splitter or window (depending on which comes first); 
- 
Control+Alt+Shift+CloseBracket to focus next splitter or window (depending on which comes first); 
- 
Control+Alt+Shift+D to open a new window with the current tab; 
- 
Control+Alt+Shift+P,P to move all pinned tabs to the beginning of the tablist; 
- 
Control+Alt+Shift+P,T to pin all tabs that are not pinned. Or if all tabs are pinned, unpin all; 
- 
Alt+Shift+T show action popup with possible actions; 
The plugin is open source (LGPL). 1.3
      '';
    };
  }) {};

  tabnumberindicator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TabNumberIndicator";
    plugname = "TabNumberIndicator";
    plugid = "com.khande.idea.plugin.TabNumberIndicator";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9962/38055/TabNumberIndicator.jar";
      sha256 = "0w7fccvzlwaad8lyca42sv0pjg662s5rx9m48gq4ay1ryg8xh528";
      name = "TabNumberIndicator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Khande/TabNumberIndicator";
      license = lib.licenses.asl20;
      description = ''
        Display the tab number indicator before the opened file name int editor tabs.
 Switch To Tab 1-10 by default keyboard shortcut alt+[1-9, 0] in Win/Linux or Option+[1-9, 0] in macOS. and you can find the menus in Tools menu.
      '';
    };
  }) {};

  tabstack = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TabStack";
    plugname = "TabStack";
    plugid = "TabStack";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/204/4164/TabStack_4164.zip";
      sha256 = "05vn7rmzq62bwvh77ng4n45f8603zxlmxigwvv28hv9vg71yvm44";
      name = "TabStack-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/204/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/204/sourceCode.zip";
        free = false;
      };
      description = ''
        Plugin for catching editor tabs spilling and puting ejected files into stack. Files from stack will be
        opened as soon as free place available in editor tabs.
      '';
    };
  }) {};

  tabswitch = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TabSwitch";
    plugname = "TabSwitch";
    plugid = "TabSwitch";
    version = "3.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/179/18071/TabSwitch.jar";
      sha256 = "1bwl3hkdrk2v6wq09lksm738slawnz2193v5x6ka6sh1jiaq1j94";
      name = "TabSwitch-3.0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mustah/TabSwitch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mustah/TabSwitch";
        free = false;
      };
      description = ''
        Open files/tabs switcher to quickly switch between tabs with less keystrokes than Recent Files. Open files are selected from a list in most recently used order, similarly to Alt+Tab in Windows or Ctrl-Tab in Opera. By default the action is mapped to Alt+A, but another popular assignment is CMD+E.

 Thanks to Timur Zambalayev for the original plugin, Martin Fuhrer for a major contribution in the form of a rewrite and Mark Scott for patching a bug. Follow further development of 
this plugin on GitHub or follow 
me on twitter for announcements and other things.
      '';
    };
  }) {};

  tabswitch2 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TabSwitch2";
    plugname = "TabSwitch2";
    plugid = "TabSwitch2";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11127/52516/TabSwitch2-0.1.4.zip";
      sha256 = "1854q6wj359n00adlv8a26sq5b2kw98xbnz62qhpxqsckis126p5";
      name = "TabSwitch2-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/stepan/tab-switch";
      license = lib.licenses.mit;
      description = ''
        Fixed issues with the original Tabswitch as it
        was not working correctly with the latest version of Jetbrain editors.
    
    
    

    Open files/tabs switcher to quickly switch between tabs with less keystrokes than
    Recent Files. Open files are selected from a list in most recently used order, similarly
    to Alt+Tab in Windows or Ctrl-Tab in Opera. By default the action is mapped to
    Alt+A, but another popular assignment is CMD+E.

    Thanks to Timur Zambalayev for the original plugin, Martin Fuhrer for a major contribution
    in the form of a rewrite and Mark Scott for patching a bug.
      '';
    };
  }) {};

  tabswitcherextreme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TabSwitcherExtreme";
    plugname = "TabSwitcherExtreme";
    plugid = "TabSwitcherExtreme";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7146/20340/tabswitcher_fix.zip";
      sha256 = "08b0342rxmki6fki2nncsvpk8z99gpblssw1gyi03bkpza5zgjsj";
      name = "TabSwitcherExtreme-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.codestare.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.codestare.com";
        free = false;
      };
      description = ''
        Open files quickly by organizing them in seperate lists. The lists are defined by going to [Settings|TabSwitcher Extreme] and specifying regex patters for their (full) filenames, e.g. 

 .*xml for files ending with .xml
 .*Activity_.* for files with &quot;Activity_&quot; in their name

 (One list per line)

 If any file is not matched by any of the regex patterns, a new list named &quot;Other&quot; is created, where it is then placed.
 
Initially the plugin binds under alt-A, but one might bind it under ctrl-tab as this is where the standard switcher is. 
 Usage: Hold alt, press A to activate the plugin. Keep holding alt while moving the selection around using arrow keys and pageup and pagedown.
 
Obviously, the plugin needs work, but it's functional. 
Plugin on github 
 
Thanks to Bas Leijdekkers for 
the original plugin (github) this one is based off of.
      '';
    };
  }) {};

  tabdir = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tabdir";
    plugname = "Tabdir";
    plugid = "ru.crazycoder.plugins.tabdir";
    version = "1.6.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5045/12395/tabdir.jar";
      sha256 = "0pmsqjr3m1isx37sqwfc2xxzxxyzri6x74f47ppx664s9qdnkkvw";
      name = "Tabdir-1.6.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/crazyproger/Tabdir";
      license = lib.licenses.asl20;
      description = ''
        Awesome replacement for IDEA's 'Show directory in editor tabs for non-unique filenames'. If you have same named files in different directories this plugin will allow you to have directory names added to tab labels. It only shows path differences so if you have &quot;blog/controllers/index&quot; and &quot;news/controllers/index&quot; it will add either [blog] or [news]. In setting tab 'Tabdir' you can control how prefixes will be formatted. 
Per-project configuration allow specify different formatting rules for each directory in project. To enable per-project configuration enable &quot;Use per project configuration&quot; checkbox(see screenshot №3) and reopen settings window(need close with Ok or Apply buttons). After this you will find 'Tabdir' configuration in project section(screenshot №4) in which different configurations can be specified.  Note: that you should turn off IDE Settings → Editor tabs → Show directory in editor tabs for non-unique filenames.
      '';
    };
  }) {};

  tabifier = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tabifier";
    plugname = "Tabifier";
    plugid = "Tabifier";
    version = "5.9.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/178/19569/tabifier-5.9.1.jar";
      sha256 = "0yg428bh6fj44c1yjqck8q3h3ap9hh1dlrj1fsav9q5bq13q9gnl";
      name = "Tabifier-5.9.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/DaveKriewall/Tabifier";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/DaveKriewall/Tabifier";
        free = false;
      };
      description = ''
        The tabifier plugin retabs Java code so that syntactic elements are aligned vertically. Extensive, configurable control over alignment is provided. [Note: the following examples are aligned correctly when viewed within IDEA's plugin manager, but are misaligned when viewed on the JetBrains plugin repository page due to the use of a non-fixed font.] 
 For example, I like to align variable declarations and assignment statements like this: 

               int          v1;                  // loop variable
               String       s2;                  // second string
public  static PrintWriter  p;
private static boolean      debugging    = true; // initialize
private static OutputStream outputstream = null;

outputstream = new FileOutputStream(f, true);
p            = new DebuggingPrintWriter(outputstream, true);
         IDEA likes to format them with single spaces separating the syntactic elements, like this: 

int v1; // loop variable
String s2; // second string
public static PrintWriter p;
private static boolean debugging = true; // initialize
private static OutputStream outputstream = null;

outputstream = new FileOutputStream(f, true);
p = new DebuggingPrintWriter(outputstream, true);
         The tabifier plugin automatically reformats the text into the first version, or any variation of it you choose. 
 The Tabifier is able to right justify integer literals, e.g. 

public static final int ONE    =  1;
public static final int TWO    =  2;
public static final int TEN    = 10;
public static final int ELEVEN = 11;
         It can align method declaration and method call parameters, even with multiple parameters per line: 

public ExpressionListParser(TokenColumn       openParend,
                            ColumnChoice      params,
                            TokenColumn       closeParend,
                            CodeStyleSettings codeStyleSettings, TabifierSettings settings,
                            NestedParser      parser,            int              nestingLevel)
         And its expression alignment is recursive, e.g. 

if ((psiExpressionList.getExpressions().length               &gt;  expressionListIndex &amp;&amp;
     psiExpressionList.getExpressions()[expressionListIndex] == child                 ) ||
    (sawNoParameters                                         == false               &amp;&amp;
     expressionListIndex                                     &gt;                    0   )   )
         It is capable of reformatting &quot;if&quot; statements as follows: 

if (param1 == p3 &amp;&amp;
    j      &gt;  5     ) p3 = 7;
....
if      (param1 == p3) p3     = 6;
else if (param1 == 2 ) method1(param1, true, 3);
else                   param1 = 7;
         Method calls can be reformatted to align parentheses, commas, or parameters: 

align_params                    = (ColumnSetting ) find(ALIGN_PARAMS              );
align_semicolon                 = (ColumnSetting ) find(ALIGN_SEMICOLON           );
align_semicolon_with_comma      = (BooleanSetting) find(ALIGN_SEMICOLON_WITH_COMMA);
         Typecast parentheses and types as well as many other expression components can also be aligned.
      '';
    };
  }) {};

  tabnine-ai-autocomplete-javascript-c-python-ruby-rust-go-php--- = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tabnine-AI-Autocomplete-JavaScript-C-Python-Ruby-Rust-Go-PHP...";
    plugname = "Tabnine AI Autocomplete: JavaScript C Python Ruby Rust Go PHP...";
    plugid = "com.tabnine.TabNine";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12798/108156/TabNine-0.3.1.zip";
      sha256 = "0yv1wxk3j94h19bwmqzmw9y0c3h2y89ijz85df9fwji3sbls14kc";
      name = "Tabnine-AI-Autocomplete-JavaScript-C-Python-Ruby-Rust-Go-PHP...-0.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://tabnine.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://tabnine.com/eula";
        free = false;
      };
      description = ''
        &nbsp;
    &nbsp;
    &nbsp;


    Tabnine is the world's leading Artificial Intelligence assistant designed to help you code faster, reduce mistakes, and discover best coding practices - without ever leaving the comfort of IntelliJ.




    


    




    Tabnine's Machine Learning Artificial Intelligence studies publicly shared code and use deep learning algorithms that provide us with the ability to predict your next coding needs and suggest one-click code completion.


    Tabnine works with all major programming languages including JavaScript, Python, TypeScript, PHP, C/C++, HTML/CSS, Go, Java, Ruby, C#, Rust, SQL, Bash, Kotlin, Julia, Lua, OCaml, Perl, Haskell, and React.


    We believe that coding is like Lego: Imagination is your only limit.
    We’re here to help provide you with the perfect code building blocks at the right time


    No more memorizing coding syntax, no more worrying about typos, no more neglecting to add that crucial comma, or even search for coding solutions online. Reduce your development costs, deliver reliable code faster, and explore best coding practices.


    Tabnine is trusted by more than a million developers worldwide. Join us Now and enjoy the coding future, today. It’s Free!


Privacy

    Concerned about privacy and security? So are we!


    Your code’s privacy is our highest priority. Tabnine keeps your code completely private


    Tabnine offers code completion suggestions based on a model trained on millions of open-source code lines, which are then derived from the code you are currently working on. Tabnine only sends minimal contextual information from your currently edited file that allows us to make predictions based on your current local scope


    We do not use your code to train our models and the information sent to our servers is only used to compute your prediction and is not being saved on our end


    Find out more about how we keep your code private here


Recommended by developers everywhere:

    


    


    


    


Installation Instructions

    Open the Settings/Preferences dialog
    Search for Tabnine in the Marketplace tab and press Install
    Press the Restart IDE button


    Trouble installing? contact support@tabnine.com


Tabnine Pro

    Looking for an even greater productivity boost?


    Tabnine Pro plan enables a larger index size, premium support, and optional use of GPU-accelerated cloud servers for Deep completions, providing even better predictions



Technical information

    Tabnine Indexes your entire project by reading your .gitignore or others and determines which files to index.

    Add long variable names using minimal keystrokes
    Zero configuration. Tabnine works out of the box
    Highly responsive: Produces a list of suggestions in less than 10 milliseconds on average


Usage

    After Tabnine’s installation, navigate to the Tabnine's plugin section (go to -&gt; file -&gt; settings -&gt; plugins) and verify that Tabnine local model is successfully loaded.


    Tabnine is a textual autocomplete extension. When you type a specific string in your editor, you will view Tabnine completion dialog, with Tabnine suggestions according to the text you type


Deep Completion

    Deep Tabnine is trained on millions of files from GitHub. During training, Tabnine’s code completion goal is to predict the next token given the tokens that came before. To achieve this goal, Tabnine learns complex behavior, such as type inference in dynamically typed languages


    Deep Tabnine can use subtle clues that are difficult for traditional tools to access. For example,
    the return type of app.get_user() is assumed to be an object with setter methods, while the return type of app.get_users() is assumed to be a list


    Deep Tabnine is based on GPT-2, which uses the Transformers Network Architecture. This architecture was first developed to solve problems in natural language processing. Although modeling code and modeling natural language might appear to be unrelated tasks, modeling code requires understanding English in some unexpected ways
    


Check out our Podcast: Eran and Getify chat about AI

    Episode 1
    Episode 2
    Episode 3




    More resources: Tabnine blog, Questions? Check out our FAQ, Learn more about our premium plans.
      '';
    };
  }) {};

  tagmycode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TagMyCode";
    plugname = "TagMyCode";
    plugid = "com.tagmycode.intellij";
    version = "2.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7540/99025/tagmycode-intellij.zip";
      sha256 = "0g1v2hsphlj9zh94nmdk9v26hwgkjk2669qgxwn1mx2sdahnq024";
      name = "TagMyCode-2.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://tagmycode.com";
      license = lib.licenses.asl20;
      description = ''
        Provides the support for TagMyCode.
    This plugin allows you to manage your own snippets.
    
    Features:
    * Add snippets: you can save your code snippets including description, language, and tags
    * Snippets management (CRUD): snippets are stored locally and you can filter, sort, create, modify, edit or delete them directly from the IDE
    * Quick search: you can search your snippets and insert them directly into the document
      '';
    };
  }) {};

  tailwindcss-autocomplete = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TailwindCSS-Autocomplete";
    plugname = "TailwindCSS Autocomplete";
    plugid = "com.bum.intellij.tailwindcss";
    version = "2.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13365/104709/idea-2020.3-2.0.2.jar";
      sha256 = "0n003gknng5cjdmw18h7zry4pfy9p76708cwizkpkdg95zr6r293";
      name = "TailwindCSS-Autocomplete-2.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        TailwindCSS Autocomplete support "Vue", "CSS", "HTML", "PHP", "DART", "TypeScript", "ECMAScript 6", "Handlebars"
      '';
    };
  }) {};

  talend-component-kit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Talend-Component-Kit";
    plugname = "Talend Component Kit";
    plugid = "org.talend.sdk.component.intellij.plugin";
    version = "1.29.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10558/107622/talend-component-kit-intellij-plugin-1.29.0-plugin.zip";
      sha256 = "14qjzq7p257s1s68j067737y6mmqsyjrswjhyq165l2ak3bwy1hq";
      name = "Talend-Component-Kit-1.29.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://talend.github.io/component-runtime/";
      license = lib.licenses.asl20;
      description = ''
        This plugin allows to create new Talend components based on the Talend Component Kit framework. It also enables i18n completion
    for the components.
      '';
    };
  }) {};

  talkingdata-jira-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TalkingData-Jira-Integration";
    plugname = "TalkingData Jira Integration";
    plugid = "com.talkingdata.jira.integration";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9908/37607/talkingdata-jira-integration.zip";
      sha256 = "0f0spzv9inslnjlnhjam8grqvca9933s0q0fkj0hl52a1br5pzni";
      name = "TalkingData-Jira-Integration-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.talkingdata.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.talkingdata.com/";
        free = false;
      };
      description = ''
        TalkingData Jira Integration工具方便开发者更好的使用Jira进行敏捷开发的工作，该插件提供了以下功能： 
 1. 获取用户所有可见的Board 
 2. 获取Board下正在进行的Sprint 
 3. 获取Sprint下所有的Issue 
 4. 记录Issue的工作时间，改变Issue的状态 
 
 The TalkingData Jira Integration tool makes it easier for developers to use Jira for agile development, which provides the following features: 
 1. Get all the visible boards for the user 
 2. Get active sprint of board selected 
 3. Get all issues of active sprint 
 4. Record the working time of Issue and change the status of Issue 
 
 Developer： 冰心 
 Email： bingxin.li@tendcloud.com 
 Blog： http://happyshome.cn 
 Company： https://www.talkingdata.com/
      '';
    };
  }) {};

  talkingdata-orm-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TalkingData-ORM-Tool";
    plugname = "TalkingData ORM Tool";
    plugid = "com.talkingdata.orm.tool";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9543/37612/talkingdata-orm-tool.zip";
      sha256 = "1vqpfps8r6si8zw6wlrm16hx7659hpac556294ncyqy8fwjxsivc";
      name = "TalkingData-ORM-Tool-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.talkingdata.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.talkingdata.com/";
        free = false;
      };
      description = ''
        根据选择的数据库，匹配数据库中的所有表，自动生成domain类、dao接口和mapping文件。 
 
 According to the selected database, matching all the tables of the database, automatically generate domain class, dao interface and mapping files. 
 作者： 冰心 
 邮箱： bingxin.li@tendcloud.com 
 Blog： http://happyshome.cn 
 主页： https://www.talkingdata.com/
      '';
    };
  }) {};

  talkingdata-smart-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TalkingData-Smart-Tool";
    plugname = "TalkingData Smart Tool";
    plugid = "com.talkingdata.smart.tool";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9977/38184/talkingdata-smart-tool.jar";
      sha256 = "1wvp22mjfnrdis55si10wbkkjn17rab7dx0d6ih0s811r9d26m7w";
      name = "TalkingData-Smart-Tool-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.talkingdata.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.talkingdata.com";
        free = false;
      };
      description = ''
        TalkingData Smart Tool是一个方便程序员使用的工具箱，里面有一些小工具： 
 1. 通用唯一识别码uuid生成器 
 2. URL加密与解密 
 3. Unicode的编码和解码 
 4. 密码生成器 
 
 TalkingData Smart Tool is a toolkit for programmers to use, there are some small tools: 
 1. UUID(Universally Unique Identifier) generator 
 2. URL encryption and decryption 
 3. Unicode encoding and decoding 
 4. Password generator 
 
 Developer： 冰心 
 Email： bingxin.li@tendcloud.com 
 Blog： http://happyshome.cn 
 Company： https://www.talkingdata.com/
      '';
    };
  }) {};

  tapestry-4-1 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tapestry-4.1";
    plugname = "Tapestry 4.1";
    plugid = "pl.holowko.tapestry.4";
    version = "0.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7471/16334/intellij-tapestry4-v.0.6.1.zip";
      sha256 = "0mp3pmf4b7hm267r36vldshfpyb4jnjd5c1i6kvvqwny0vd05wkw";
      name = "Tapestry-4.1-0.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aholowko/intellij-tapestry4";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Tapestry 4.1 Basic tapestry 4.1 support.
      '';
    };
  }) {};

  tasklist = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TaskList";
    plugname = "TaskList";
    plugid = "TaskList";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/670/2403/TaskList_2403.zip";
      sha256 = "1c6jiiayjhpn0rsxr2yzk1mmh0yzz8dnb6lqg5wwrb1cnb2y8zrn";
      name = "TaskList-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        'TaskList' plugin fetchs issue from your favorte issue tracker
        it has an abstract web service layer which can be extended for any issue
        tracking software.
        Currently "Mantis" (php based issue tracker) is only implemented.
        you can introduce this web service module under "webservice" directory.
        for more information and support
        http://hasan.we4tech.com
      '';
    };
  }) {};

  taskmanager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TaskManager";
    plugname = "TaskManager";
    plugid = "TaskManagerPlugin.TaskManagerAction";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10923/47633/TaskManagerPlugin.zip";
      sha256 = "10w5w2lafvf2dvnajcvazvzbn3295vvi6q10qhfs0dsa5r9m8xg2";
      name = "TaskManager-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "www.fudan.cn";
      license = lib.licenses.asl20;
      description = ''
        This plugin can be used to recode programming process of users.
      most HTML tags may be used
      '';
    };
  }) {};

  tasks = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tasks";
    plugname = "Tasks";
    plugid = "Tasks";
    version = "1.8.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1124/34037/Tasks.jar";
      sha256 = "03l5fqrcarjx8f0fnczjixs2jk73rqnx7m8hyansyrshbq7zgy0n";
      name = "Tasks-1.8.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://plugins.jetbrains.com/plugin/1124";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://plugins.jetbrains.com/plugin/1124";
        free = false;
      };
      description = ''
        I am considering rewriting this plugin from scratch. If you like to contribute some ideas, let me know on Github. 
 
A plugin for keeping a list of tasks. A todo-list if you like. 
This plugin is a fork of the original plugin with permission of Sergiy Dubovik 
To contact me directly: nlsurfman@hotmail.com 
Bugs can be reported here: https://github.com/NLSurfMan/tasks/issues
      '';
    };
  }) {};

  tasks-navigation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tasks-Navigation";
    plugname = "Tasks Navigation";
    plugid = "org.intellij.tasks.navigation";
    version = "0.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7241/70172/org.intellij.tasks.navigation-0.5.0.zip";
      sha256 = "1qx1jjmhyk5f6p7wri3zmnp3zwf5zayp02h4m6ljv6rpm01bzqkb";
      name = "Tasks-Navigation-0.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/VladRassokhin/intellij-tasks-navigate";
      license = lib.licenses.asl20;
      description = ''
        Provides navigation to tasks from comments. Quite simple feature, just searches for issue IDs.
    
      Provides support for task id injection (using IntelliLang plugin) into any string, etc. 
      Injection allows to navigate to web (open task/issue in browser)
      Also code completion for such injection elements provided.
      For more information about injections, see related documentation
    
    Dependency on IntelliLang is optional, but highly recommended to install, since it provides nice features.
      '';
    };
  }) {};

  texify-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TeXiFy-IDEA";
    plugname = "TeXiFy IDEA";
    plugid = "nl.rubensten.texifyidea";
    version = "0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9473/95932/TeXiFy-IDEA-0.7.zip";
      sha256 = "17xkss1pq2s0xyy0vgahxbn9l2ch58likpqqn577vjdrkdwk190z";
      name = "TeXiFy-IDEA-0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Hannah-Sten/TeXiFy-IDEA";
      license = lib.licenses.mit;
      description = ''
        Plugin for LaTeX and BibTeX support in IntelliJ.
        
        
            Syntax highlighting
            Autocompletion of labels, (custom defined) commands and environments
            Writer ergonomics - writing LaTeX made less cumbersome
            Compiler support for pdfLaTeX, LuaTeX, Latexmk, texliveonfly, XeLaTeX, bibtex, and biber
            Inspections. Intentions. And heaps more inspections
            Full BibTeX support
            Formatter for LaTeX and BibTeX
            Structure view for LaTeX and BibTeX with filters
            Code folding for imports, sections, and environments
            SumatraPDF (Windows), Evince (Linux), Okular (Linux) and Skim (MacOS) support with forward and backward search
            Smart quotes
            Unicode math preview
            Equation and TikZ picture preview
            Gutter icons for quick compilation and file includes
            Fancy icons that fit in with the IntelliJ style
            Brace matching
            Word counting tool
            File templates for .tex, .sty, .cls, .bib, and .tikz files
            Automagically import packages of common commands
            Go to declaration of labels
            Shortcuts for styling text
            Line commenter
            Support for user-created document classes and packages
            Toggle star action
            Words of encouragement
            A complete feature list can be found at our wiki (work in progress).
        
        
            All critique, questions, suggestions, requests, bug reports, kudos, and (non-)creative ideas are
            welcome on the plugin's GitHub page.
            If you want to directly chat with us, take a peek at the project's
            gitter.
      '';
    };
  }) {};

  teacode-intellij-platform-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TeaCode-IntelliJ-Platform-Helper";
    plugname = "TeaCode IntelliJ Platform Helper";
    plugid = "com.apptorium.TeaCode-IJP-Helper";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10597/72013/TeaCode-IJP-Helper.zip";
      sha256 = "1i1adddsmd7kwizirw08zxcpgkv8yjpva8rr2b7mx3bld64h0y7d";
      name = "TeaCode-IntelliJ-Platform-Helper-1.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.apptorium.com";
      license = lib.licenses.mit;
      description = ''
        TeaCode IntelliJ Helper
      
      
          Provides integration with TeaCode www.apptorium.com/teacode
      
      
      
          TeaCode is a powerful app, created to write code super fast by expanding short, dynamic code templates into the real code. It comes with a simple variable-based language that supports subexpressions, optional patterns and filters. Creating new expanders is extremely easy.  TeaCode supports native editors (Xcode, TextMate, Coda, etc.) as well as Atom, Sublime Text, VSC and JetBrains IDEs (PHPStorm, AppCode, etc.)
      
      
      
      How to use it
      
          
              Install TeaCode from www.apptorium.com/teacode.
          
          
              Open TeaCode
          
          
              Write an expression (for example -f helloWorld) and press ctrl+cmd+e
              (notice that shortcut is different than the shortcut for native macOS
              apps)
      '';
    };
  }) {};

  teavm-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TeaVM-IDEA-plugin";
    plugname = "TeaVM IDEA plugin";
    plugid = "org.teavm.idea";
    version = "0.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9779/70058/teavm-idea-0.6.1.zip";
      sha256 = "14cx4psicrbn1wsxqw17j7mswxwsd5z1kp1kadxmzjxkryzgqdfc";
      name = "TeaVM-IDEA-plugin-0.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://teavm.org";
      license = lib.licenses.asl20;
      description = ''
        Plugin that allows to run TeaVM compiler and debug applications generated by TeaVM.
      '';
    };
  }) {};

  team-tracker---developer-activity-tracker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Team-Tracker---developer-activity-tracker";
    plugname = "Team Tracker - developer activity tracker";
    plugid = "com.teamtrackerhq";
    version = "0.19.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14172/91625/Team_Tracker-0.19.1.zip";
      sha256 = "032aq2f9cxq6qdzfxp383d03gmbsn1laniylqs9w768z1jgzn27b";
      name = "Team-Tracker---developer-activity-tracker-0.19.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://teamtrackerhq.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://teamtrackerhq.com/license";
        free = false;
      };
      description = ''
        Plugin is for tracking time spent during coding by your team
      '';
    };
  }) {};

  teamcity = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TeamCity";
    plugname = "TeamCity";
    plugid = "Jetbrains TeamCity Plugin";
    version = "2020.2.85695";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1820/106223/TeamCity-IDEAplugin.zip";
      sha256 = "0552dgaxpgmpjmp6slxg5zfwngg22c9cc3mi69i579kmr4qxh0y6";
      name = "TeamCity-2020.2.85695.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com/teamcity/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.jetbrains.com/teamcity/buy/license.html";
        free = false;
      };
      description = ''
        Provides integration with JetBrains TeamCity.
      '';
    };
  }) {};

  teamscale-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Teamscale-Integration";
    plugname = "Teamscale Integration";
    plugid = "com.teamscale.ide.intellij";
    version = "6.5.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9431/108153/com.teamscale.ide.intellij-6.5.2.zip";
      sha256 = "1kb2hgil8n1rpb5vp17pklnzzxd12srzzsrkj21fdx6wkgza7rz8";
      name = "Teamscale-Integration-6.5.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.cqse.eu/";
      license = lib.licenses.asl20;
      description = ''
        Allows for seamless browsing of quality defects found by the Teamscale software-quality analysis server.
            Teamscale analyzes source code incrementally with every commit, which means, it can provide feedback to your IDE in a matter of seconds. (Note: A running Teamscale server is necessary to use this plugin.)
        This plugin has the following features:
        
            Auto‐detect which branch is being used (Git &amp; Subclipse/Subversive) and display all data accordingly
            Show code anomalies in the Findings View
            Display findings next to your code
            Flag findings as tolerated or false-positive
        
        To get started, just follow the installation guide and use Teamscale in your IntelliJ IDE.
      '';
    };
  }) {};

  tekton-pipelines-by-red-hat = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tekton-Pipelines-by-Red-Hat";
    plugname = "Tekton Pipelines by Red Hat";
    plugid = "com.redhat.devtools.intellij.tekton";
    version = "0.5.0.95";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14096/107187/com.redhat.devtools.intellij.tekton-0.5.0.95.zip";
      sha256 = "0lvp0m16j5j1gxvq5z0qjdr7342ibqdy6z34cjpini9sbd9qcq28";
      name = "Tekton-Pipelines-by-Red-Hat-0.5.0.95.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.redhat.com";
      license = lib.licenses.epl20;
      description = ''
        Overview
      A plugin for interacting with Tekton Pipelines using a local or remote instance of Kubernetes or OpenShift clusters providing a streamlined developer experience. This extension is currently in Preview Mode.
      To run the instance of a Kubernetes cluster locally, developers can use Minikube.
      To run the instance of an OpenShift cluster locally, developers can use CRC / CDK / minishift. Currently all clusters are supported, but with some limitations for OpenShift Online Pro where additional storage might be required to create more than two components.
      '';
    };
  }) {};

  teletubbies-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Teletubbies-Progress-Bar";
    plugname = "Teletubbies Progress Bar";
    plugid = "TeletubbiesProgressBar";
    version = "0.666";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15513/104705/TeletubbiesProgressBar.jar";
      sha256 = "0x27jvw0bl90j43h78q62wg8i8abch88sp6yjfv7mbf11r6zb4s6";
      name = "Teletubbies-Progress-Bar-0.666.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/khipis/FluffyProgressBar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        Beautiful progress bar with awesome character from your favorite movie.
      Plugin makes your time, wasted on project sync wait or indexing more fun
      and hypnotized by the virtual world you ever dreamt of!
      '';
    };
  }) {};

  tempconfig-cleaner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TempConfig-Cleaner";
    plugname = "TempConfig Cleaner";
    plugid = "de.achimonline.tempconfigcleaner";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9234/105913/tempconfigcleaner-1.5.zip";
      sha256 = "079667bpxl84jakg3jk3pc9s26k5m5nijlvf0fhy1ya7481mgmzb";
      name = "TempConfig-Cleaner-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/space/index?pr=idea&lg=4ch1m";
      license = lib.licenses.gpl3Only;
      description = ''
        Automatically removes all temporary run/debug configurations when reopening the project.
      '';
    };
  }) {};

  template = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Template";
    plugname = "Template";
    plugid = "org.jetbrains.plugins.template";
    version = "0.8.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14642/107566/IntelliJ_Platform_Plugin_Template-0.8.1.zip";
      sha256 = "1j6anx99hxdbspvsm4ip0i4yb34b5ayg157kfn6v4b5xm4c8hkl4";
      name = "Template-0.8.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        IntelliJ Platform Plugin Template is a repository that provides a pure boilerplate template to make it easier to create a new plugin project (check the Creating a repository from a template article).

The main goal of this template is to speed up the setup phase of plugin development for both new and experienced developers by preconfiguring the project scaffold and CI, linking to the proper documentation pages, and keeping everything organized.
      '';
    };
  }) {};

  template-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Template-Generator";
    plugname = "Template Generator";
    plugid = "ru.aic.template_generator";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13431/73913/template-generator-1.0.2.zip";
      sha256 = "05jckp0pxz1nf8w96jj9da3nmgpzlkqxvhfmy1cm64m8qwk4q7v8";
      name = "Template-Generator-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://aic.ru/";
      license = lib.licenses.mit;
      description = ''
        Create files structure for React components
      '';
    };
  }) {};

  templatebuilder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TemplateBuilder";
    plugname = "TemplateBuilder";
    plugid = "TemplateBuilder";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9464/48362/TemplateBuilder.zip";
      sha256 = "1h3j0kdhnlg3k9mzcngg0bv03b3ch6a1crjj9nydfswy44rrjq7r";
      name = "TemplateBuilder-2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://puke3615.github.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "afl-3.0";
        free = false;
      };
      description = ''
        Click Here For User Guide
      
      Quick Start
      1. Select .java or .xml(layout resource) files
      2. Key down ALT + T
      3. Configure template info
      4. Restart your IDE and try it
      
      Don't repeat yourself and enjoy your time.
      '';
    };
  }) {};

  templatefile = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TemplateFile";
    plugname = "TemplateFile";
    plugid = "com.alfredxl.templatefile";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11047/89403/TemplateFile.zip";
      sha256 = "1x4c3mfkq3jcx711wdw0vi30vfx86k4lgy82c1mjf937jzl9py8p";
      name = "TemplateFile-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alfredxl/TemplateFile";
      license = lib.licenses.mit;
      description = ''
        Template code generation plug-in.
      1, by setting up the dynamic parameters of the template file.
      2, by setting up static template for configuring template files;
      3, template files are generated by combining dynamic parameters and dynamic templates.
      4, clear Gradle cache function.
      '';
    };
  }) {};

  tempore-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tempore-Plugin";
    plugname = "Tempore Plugin";
    plugid = "TemposID";
    version = "0.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8025/22735/Tempore.zip";
      sha256 = "0rgi5ghfrz0bps1rk7s8c75ns5vf667cz3nh2w6s62vmbb6bs2yr";
      name = "Tempore-Plugin-0.6.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Absolutely awesome plugin which you can't code without. Don't hesitate, download perfect multifunctional Tempore Plugin with plenty of exiting features.
 
 
 
 
 Helps you to check how much time you spend on your projects.
  
 Reminds you to take a rest if you code for a long time.
  
  Automatically stops if you are out of work for more than  five minutes and resumes when you are back. 
  
 You can also stops or resume it manually, just as you want.
  
 Draws charts to show how much time you spend per day. 
  
  It's   Red  , if it's less than 4 hours.  
    Yellow  , if it's between 4 and 8 hours. 
    Green  , if it's more than 8 hours. 
  
 
Just install the plugin and let it track the time. 
 
 
To open Statistics Dialog click the clock-widget on the Status Bar (look at the picture). 
 
 I'm trying to create some helpful stuff for this IDE, so
 for me it's more than important to get some feedback from you,
 Please text me, if you want something to be improved or changed. 
 Hope you like it. 
 
  Code with pleasure.
      '';
    };
  }) {};

  tencent-cloud-toolkit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tencent-Cloud-Toolkit";
    plugname = "Tencent Cloud Toolkit";
    plugid = "com.tsf.plugin.tsf-idea-plugin";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15653/107791/tsf-idea-plugin-1.4.zip";
      sha256 = "1jlpfba5rdkv067l937zm4xgxdkqs9zf2ljrn5xxrd40r6a1m502";
      name = "Tencent-Cloud-Toolkit-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://cloud.tencent.com/";
      license = lib.licenses.asl20;
      description = ''
        Tencent Cloud Toolkit is a plugin for JetBrains which makes it easier and more efficiently for
            developers to develop, build, configure, test, and deploy application on Tencent Cloud. More importantly,
            the plugin greatly improves the convenience of cloud application debugging.
        

        Features：
        
            (1) Authentication - Connect to Tencent Cloud using SecretId and SecretKey.

            (2) Deploy to TSF -
                Tencent Service Framework (TSF) is a PaaS platform focus on
                applications and microservices, embracing Spring Cloud and Service Mesh microservice frameworks.
                TSF helps enterprise customers overcome the difficulties of traditional centralized architecture transformation,
                build a large-scale and highly available distributed system architecture,
                and realize the rapid implementation of services and products.
                TSF developers can deploy applications through graphical interface provided by the plugin,
                without switching between multiple tools and platforms.
            

            
                (3) Deploy to TKE (Coming soon) -
                Tencent Kubernetes Engine (TKE) provides
                highly scalable and high-performance container management services based on native kubernetes.
      '';
    };
  }) {};

  tensorflow-developer-certificate = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TensorFlow-Developer-Certificate";
    plugname = "TensorFlow Developer Certificate";
    plugid = "com.google.developers.certification.tensorflow";
    version = "0.1.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13812/107514/tensorflow-certificate-0.1.10.zip";
      sha256 = "1jj9yyql2kpjl4fgdz86l32sbhzvsm8ba3picfk6hsdmshw7y20i";
      name = "TensorFlow-Developer-Certificate-0.1.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://developers.google.com/certification/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://policies.google.com/";
        free = false;
      };
      description = ''
        Integration for TensorFlow Developer Certificate.
      '';
    };
  }) {};

  terminalcolors = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TerminalColors";
    plugname = "TerminalColors";
    plugid = "nsu.Kirsanov.Nikita";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10032/85378/TerminalColors.jar";
      sha256 = "1kv19wj2z64k3jmr4g662kv307f3jm9nnbdv25mmq3s95gpspmg8";
      name = "TerminalColors-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kirsanium/TerminalColors";
      license = lib.licenses.mit;
      description = ''
        Import your favourite terminal color schemes from PuTTY, Konsole, Terminator, Terminal and iTerm2.
      Supported extensions: .reg, .colorscheme, .config, .terminal, .itermcolors.
      '';
    };
  }) {};

  terrier = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Terrier";
    plugname = "Terrier";
    plugid = "com.mxn.terrier";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15707/108030/Terrier-1.1.0.zip";
      sha256 = "0r95xz3c18gsrq05q7z5krp5xs9gzkvs55jvgacas1xkczg14zy0";
      name = "Terrier-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mxn21/Terrier";
      license = lib.licenses.asl20;
      description = ''
        View the stack of the Android Activity and jump to the code,you can also send text to EditText.
      '';
    };
  }) {};

  test-automation-gears = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Test-Automation-Gears";
    plugname = "Test Automation Gears";
    plugid = "tag-editor";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13227/71250/tag-editor-1.0.0.zip";
      sha256 = "0nwx7isjbav4zcgrx8rqqdak8q9vjzc53c26hzrzcikl71g8lc96";
      name = "Test-Automation-Gears-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sbtqa/tag-editor/";
      license = lib.licenses.asl20;
      description = ''
        Provides support of Gherkin language for Test Automation Gears Framework
      '';
    };
  }) {};

  test-data-supplier = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Test-Data-Supplier";
    plugname = "Test Data Supplier";
    plugid = "io.github.sskorol";
    version = "0.2.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9868/108508/Test_Data_Supplier-0.2.9.zip";
      sha256 = "1vvd533l1lh6lsycmjr8anb1sldngq7r54sh9zbyr5q8pcca5rr5";
      name = "Test-Data-Supplier-0.2.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sskorol";
      license = lib.licenses.asl20;
      description = ''
        Test Data Supplier Plugin adds basic IDE integration for the test-data-supplier library.
      It was implemented as a replacement for a common TestNG DataProvider. So you should disable corresponding TestNG inspections after plugin's installation.
      '';
    };
  }) {};

  test-gui-framework = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Test-GUI-Framework";
    plugname = "Test GUI Framework";
    plugid = "com.intellij.testGuiFramework";
    version = "183.6156.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11114/59937/testGuiFramework-183.6156.11.zip";
      sha256 = "1ci686q24pjygkhyz8awqfn68ilmmlrbzzxx4w0q1yf36704468w";
      name = "Test-GUI-Framework-183.6156.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This plugin helps testing IDEA and other plugins via GUI.
      '';
    };
  }) {};

  test-navigator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Test-navigator";
    plugname = "Test navigator";
    plugid = "com.staszkox.test.navigator";
    version = "3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11037/71622/test-navigator.jar";
      sha256 = "0yifdvdg86barqpww3p0hiycapd01vqmygpigqnm915b7hmaly7j";
      name = "Test-navigator-3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/stacherzakp";
      license = lib.licenses.asl20;
      description = ''
        The plugin simply adds new gutter icons for currently opened class in code editor.
      They specify the relationship between a source class and its test class.
      Icons:
      
        Green (T) - there is a test class for given source class
        Red (T) - test class does not exist or it is not recognized
        Yellow (T) - there is a test class, however it does not have test cases implemented
        Green (S) - there is a source class for given test class
        Red (S) - source class does not exist or it is not recognized
      
      Classes are recognized by:
      
        name - suffix is configurable via "Settings -&gt; Tools -&gt; Test navigator plugin" panel
        location - test class has to be located in the same package as source class
      
      The plugin supports Java / Groovy based classes.
      '';
    };
  }) {};

  testaxis = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TestAxis";
    plugname = "TestAxis";
    plugid = "io.testaxis.intellijplugin";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15842/108133/testaxis-intellij-plugin-0.0.2.zip";
      sha256 = "06xa88mjiri8cw8jkbm5ki7dmbiphcxvfqgwpl283h39xhiyq0si";
      name = "TestAxis-0.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        The IDE plugin of TestAxis shows details and context of tests executed during CI runs.

Please note:
This is a research project.
The plugin is currently not ready for use in production.
Use the plugin at your own risk.



What is TestAxis?

Commonly used CI platforms such as GitHub Actions or Travis CI let developers dive through hundreds of lines of logs to find the issue of a failing build.
It turns out that the most important reason for a failing build is failing tests.
Developers can be helped by showing a detailed overview of the tests that failed after a CI run that does not require looking at log files.
The names and error messages of the failing tests are shown in this overview to obviate the need to look at log files.

However, even when the failing test is found, it is sometimes hard to identify the exact reason for the failure based on the test name/error message without additional context.
This could be because the reason for failure is not necessarily related to the concept under test which is reflected in the test name, which could especially be the case since during local development a developer might only run tests that are obviously related to the code change, whereas during a CI build a test with a less obvious connection might fail.
The error message might be too imprecise to judge what is going wrong.
For example, a failure message like “Failed asserting that 24 is equal to 15” may not be informative enough for the developer to come up with the fix.

Thus, additional context is needed to find the issue causing the test to fail.
Therefore, developers could be helped by providing “test context” in the detailed overview of failed tests.
The test context may include additional information such as the commit that made the test fail, the test code, and the changed code under test.
The goal is to give developers insights into failing tests after CI builds and to provide them with information that helps to resolve the issues causing the failing tests faster.
The insights are provided directly in the IDE, right there where the developer needs to fix the failing tests.
The information presented to the user is based on historical test executions with the goal to shift the axis from builds to tests.
      '';
    };
  }) {};

  testdox = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TestDox";
    plugname = "TestDox";
    plugid = "TestDox";
    version = "1.1.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/96/16110/testdox-plugin-1.1.15.zip";
      sha256 = "1m10arv99v5ysv8c47zxl9h9sqwnlrbqj09h8hncvqcymm2nckn8";
      name = "TestDox-1.1.15.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Provides enhanced navigation and live documentation for unit tested code. Never write a badly named test again!
      '';
    };
  }) {};

  testfairy-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TestFairy-Integration";
    plugname = "TestFairy Integration";
    plugid = "com.testfairy.plugin";
    version = "3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7845/63541/testfairy-intellij-3.0-bin.zip";
      sha256 = "0z19b11gpdcvwv4sllr1b11jmyqqqp62v5k07amcp5ibi7v5b0mr";
      name = "TestFairy-Integration-3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.testfairy.com";
      license = lib.licenses.asl20;
      description = ''
        TestFairy Integration plugin.
      upload your app to TestFairy with a single click
      '';
    };
  }) {};

  testinsanity = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TestInsanity";
    plugname = "TestInsanity";
    plugid = "org.bitstrings.idea.plugins.TestInsanity";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13860/103681/testinsanity-1.0.5.jar";
      sha256 = "0prd7h3hs8ak9bs9ps0v2rwprmr1r66caikhhwz0pb4pbvnk3nm9";
      name = "TestInsanity-1.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bitstrings/testinsanity";
      license = lib.licenses.asl20;
      description = ''
        Automatic renaming of tests methods and classes.
      
      
        Pattern based renaming
        Test frameworks annotations aware
        Gutter annotation icon
        Navigation Go To -&gt; Jump to Sibling (default shortcut: CTRL+ALT+`)
        Menu/Toolbar refactoring support toggle
        Per Project settings
        Kotlin Support
      
      
      Please report issues:
      https://github.com/bitstrings/testinsanity/issues
      
      Pino Silvaggio
      '';
    };
  }) {};

  testme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TestMe";
    plugname = "TestMe";
    plugid = "com.weirddev.testme";
    version = "4.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9471/98608/testme-intellij-4.0.0.zip";
      sha256 = "15svi01477v2q92h4ym869f20m7jkfw1zxbq0s6whrd40wzg7gf4";
      name = "TestMe-4.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://weirddev.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Auto Generate Unit Tests in Java, Groovy or Scala.
   No more boilerplate!
   Features:
   
     Auto generate Java, Scala or Groovy test code with JUnit 4/5, TestNG, Spock or Specs2 frameworks
     Auto generate Mockito mocks
     Generate test params and assertion statements
     Generate relevant mocked return statements
     Integrates with IDEA menus: Code-&gt;TestMe, Code-&gt;Generate
   
   You're welcome to report issues and raise feature requests at TestMe project forum
      '';
    };
  }) {};

  testproduction-class-and-method-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TestProduction-Class-and-Method-Generator";
    plugname = "Test/Production Class and Method Generator";
    plugid = "marekbruchaty.TPCMG";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8423/26507/UTDDPlugin.jar";
      sha256 = "1ncpl8dylxdkcabknndvinmwbdkh51l41h8kn5vsa7d4acy0ijlv";
      name = "TestProduction-Class-and-Method-Generator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/marekbruchaty/UTDDPlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/marekbruchaty/UTDDPlugin";
        free = false;
      };
      description = ''
        This plugin is used to generate test and production classes, as well as test and production methods from a single action. It is primarily intended for use in Test Driven Development, to speed up the implementation of test cases.
      '';
    };
  }) {};

  text-assistant = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Text-Assistant";
    plugname = "Text Assistant";
    plugid = "itbuddy.ta";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12045/58989/TextAssistant.zip";
      sha256 = "0r7c78cp0mb9am0af7382fbvx7lfmw6a53nv5pmzpjqa0g6al9s0";
      name = "Text-Assistant-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/smoothwind/TextAssistant";
      license = lib.licenses.mit;
      description = ''
        A Code Assistant integrated some common feature for text process. 
   convert selected text to upper case
   convert selected text to lower case
      '';
    };
  }) {};

  textgengen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TextGenGen";
    plugname = "TextGenGen";
    plugid = "TextGenGen";
    version = "2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11061/106748/TextGenGen.zip";
      sha256 = "054g67cp53d4583473v6c7m5344i527akzimvc0yw297zdrynviw";
      name = "TextGenGen-2020.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Kripner/textGenGen";
      license = lib.licenses.asl20;
      description = ''
        Editor to TextGen convertor
      '';
    };
  }) {};

  textile-markup-language-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Textile-Markup-Language-Support";
    plugname = "Textile Markup Language Support";
    plugid = "com.potniype4kin.intellij-textile";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14204/84963/idea-textile-plugin.jar";
      sha256 = "04snb4hk7h2kh8jgdp39s08c8viapi4xha3m69ijfgvlgp18fw56";
      name = "Textile-Markup-Language-Support-0.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/stasmihailov/intellij-textile";
      license = lib.licenses.mit;
      description = ''
        Adds support for Textile markup language: basic highlighting and
    syntax checking, as well as generating html files from textile documents via "Generate HTML from this file" intention
      '';
    };
  }) {};

  textmapper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Textmapper";
    plugname = "Textmapper";
    plugid = "org.textmapper.idea";
    version = "0.9.30";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7291/101187/tm-idea-0.9.30.zip";
      sha256 = "07s0gnsdv9z5fxadyv04i6mn81s01qjji1hq926n1m5ks5dn7mb1";
      name = "Textmapper-0.9.30.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/7291-textmapper";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/inspirer/textmapper/blob/master/tm-idea/LICENSE.txt";
        free = false;
      };
      description = ''
        Textmapper support
		
		Features:
		
		Customizable syntax highlighting
		Navigation (go to declaration)
		Find usages, Rename, File structure
		On-the-fly validation, compiler
      '';
    };
  }) {};

  the-current-time = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "The-Current-Time";
    plugname = "The Current Time";
    plugid = "io.github.whimthen.websocket";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14358/87107/TheCurrentTime.jar";
      sha256 = "0piy9d2imflpch8allmx7dswza26qpi6a71l4a03iywwdsld5a1f";
      name = "The-Current-Time-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/whimthen/TheCurrentTime---IntelliJ-Plugin.git";
      license = lib.licenses.asl20;
      description = ''
        A plug-in that can easily insert various formatted time when editing code.
      '';
    };
  }) {};

  the-dark-pheonix = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "The-Dark-Pheonix";
    plugname = "The Dark Pheonix";
    plugid = "com.flipkart.dsp.dark.pheonix";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12658/64949/haha.zip";
      sha256 = "139mx4azd77ldbszrx6bnx5s2mgzskmmll63l9z3zh5kbk0mnc1d";
      name = "The-Dark-Pheonix-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.flipkart.com";
      license = lib.licenses.asl20;
      description = ''
        This plugin can be used to run workflows in DSP Platform through sandbox CLI
      '';
    };
  }) {};

  the-doki-theme = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "The-Doki-Theme";
    plugname = "The Doki Theme";
    plugid = "io.acari.DDLCTheme";
    version = "12.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10804/108198/doki-theme.12.4.1.zip";
      sha256 = "0fs0w4lcmx21qj93i6fr5n9dbnz78gk5bmmqg36xccwnm1ks1qjy";
      name = "The-Doki-Theme-12.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Unthrottled";
      license = lib.licenses.mit;
      description = ''
        Code with your waifu! Here are a bunch of themes for your JetBrains IDEs. Choose a girl from various anime series, manga, and visual novels such as: Re:Zero, KillLaKill and Doki-Doki Literature Club.
    
    
      Theme Sample!
    
    
    
    
      This plugin is for serious Otaku programmers.
      With over 30 themes,
      I think you will find best girl.
    
    
          You can choose themes from various, Anime, Manga, or Visual Novels such as:
    
    DanganRonpa
    Doki-Doki Literature Club
    Fate
    Gate
    High School DxD
    Kill La Kill
    KonoSuba
    Live Live!
    Lucky Star
    Miss Kobayashi's Dragon Maid
    Neon Genesis Evangelion
    OreGairu
    Re:Zero
    Steins Gate
    Sword Art Online
    
    
    
      Sticker in the way? No worries! You can configure them to be on or off at your leisure.
      '';
    };
  }) {};

  the-lone-coder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "The-Lone-Coder";
    plugname = "The Lone Coder";
    plugid = "com.lgzarturo.the.lone.unique.coder.dark.theme";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14906/105448/the-lone-coder-1.0.3.zip";
      sha256 = "03j2k6g41wbcvljlg88cyzkwv5lj0ja8kjdl2dmwnrmch5s2zlrs";
      name = "The-Lone-Coder-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://arthurolg.com";
      license = lib.licenses.mit;
      description = ''
        Beautiful and Vibrant Dark Theme
      This theme is for a night programmer
      '';
    };
  }) {};

  theme-collection = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Theme-Collection";
    plugname = "Theme Collection";
    plugid = "com.jooas.themes";
    version = "0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12152/60362/theme-collection.jar";
      sha256 = "07hp84hjfmjh9khlrhr69nvyf3yavjmrj1h20i0f8mmcr541r2fb";
      name = "Theme-Collection-0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jooas.com";
      license = lib.licenses.mit;
      description = ''
        Theme Collection for JetBrains IDEs (IntelliJ, WebStorm, CLion, ...)
      '';
    };
  }) {};

  theme-plaid = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Theme-Plaid";
    plugname = "Theme-Plaid";
    plugid = "io.github.leeeory.theme.plaid";
    version = "0.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12301/63762/theme-plaid.jar";
      sha256 = "0ljqc7ppldz1gzhz2409rfxv6j8nr05ajfafz8h175adm0x34zh4";
      name = "Theme-Plaid-0.0.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/leeeory";
      license = lib.licenses.asl20;
      description = ''
        A color scheme based on GoodGithub, inspired by an old version Plaid's API Doc Pages.
      '';
    };
  }) {};

  themed-components = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Themed-Components";
    plugname = "Themed Components";
    plugid = "io.unthrottled.themed-components";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14322/104678/themed-components.1.2.0.zip";
      sha256 = "0y136qggvf8anc1majii5qnzilrf6p5x5z0bl02bvv17lim1h23q";
      name = "Themed-Components-1.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Unthrottled";
      license = lib.licenses.mit;
      description = ''
        A various collection of configurable UI components that give your IDE that little extra something.
      '';
    };
  }) {};

  thesaurus = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Thesaurus";
    plugname = "Thesaurus";
    plugid = "net.tweakers.intellij.thesaurus";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7199/21875/intellij-thesaurus.zip";
      sha256 = "045797bcgrpmyjrs7zcm9i964ydpca2603k2srgbxpp4f7fibzhx";
      name = "Thesaurus-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pascaldevink";
      license = lib.licenses.mit;
      description = ''
        Thesaurus 
 Lookup a synonym for the word under the cursor for easier naming of your variable, parameters, methods and classes. Can be used to replace text in a variable, or during renaming.  
 To use it, do either of these: 
 
 select a piece of text and go to the Refactor menu. You'll find the Thesaurus option there now. 
 rename anything (such as a variable or class). The dropdown on the rename modal window will now list synonyms. 
  To learn more, take a look at the repository: https://github.com/pascaldevink/intellij-thesaurus
      '';
    };
  }) {};

  thincaret = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ThinCaret";
    plugname = "ThinCaret";
    plugid = "com.lostintimedev.java.idea.ThinCaret";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8044/24491/ThinCaret.jar";
      sha256 = "1wjv85h8m1gq2l7gla7axkshlrlb8lnsd4847m3bya912vjnwq3b";
      name = "ThinCaret-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://lostintimedev.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://lostintimedev.com/";
        free = false;
      };
      description = ''
        Makes your editor caret 1 pixel thin (for retina users).
      '';
    };
  }) {};

  thisinserter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ThisInserter";
    plugname = "ThisInserter";
    plugid = "ThisInserter";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4053/11974/this-inserter.jar";
      sha256 = "1vfav866fmw545xck5pijaplq5s6q1vj75i8a0lxajj30mv6ccxb";
      name = "ThisInserter-1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/this-inserter";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/this-inserter";
        free = false;
      };
      description = ''
        Add explicit this. to the front of member variables and method calls
      '';
    };
  }) {};

  threadmon-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ThreadMon-Plugin";
    plugname = "ThreadMon Plugin";
    plugid = "ThreadMon Plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1189/3530/ThreadMon_Plugin_3530.jar";
      sha256 = "1wzx800yvjd34i32n1hg464hcmxqpz0lxmadrvp2vgym8302524f";
      name = "ThreadMon-Plugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1189/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1189/sourceCode.zip";
        free = false;
      };
      description = ''
        Analyzes states of various thread running in a remote managed JVM
      '';
    };
  }) {};

  thundercats-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Thundercats-Progress-Bar";
    plugname = "Thundercats Progress Bar";
    plugid = "ThundercatsProgressBar";
    version = "0.666";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15512/104704/ThundercatsProgressBar.jar";
      sha256 = "0cy2qzimfhybw5gb5raccj649h4x8ax2n6767fq25zin5p7ngfyw";
      name = "Thundercats-Progress-Bar-0.666.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/khipis/FluffyProgressBar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        Beautiful progress bar with awesome character from your favorite movie.
      Plugin makes your time, wasted on project sync wait or indexing more fun
      and hypnotized by the virtual world you ever dreamt of!
      '';
    };
  }) {};

  thursday = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Thursday";
    plugname = "Thursday";
    plugid = "Thursday";
    version = "0.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12343/92230/thursday.jar";
      sha256 = "0gmnk9zzw6bnjg8qxv96qi616lxhr4c7nq4860s5r2l8aigyh5b6";
      name = "Thursday-0.1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        Custom ui theme with light high contrast colours.
      '';
    };
  }) {};

  tibau2-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tibau2-Color-Scheme";
    plugname = "Tibau2 Color Scheme";
    plugid = "color.scheme.Tibau2";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12324/61645/Tibau2.jar";
      sha256 = "0kmdjibgr9vcxv8cik3icp6275ps3mqkmcs8f2ywb9jlgriqqhrl";
      name = "Tibau2-Color-Scheme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mingcheng/tibau2-theme";
      license = lib.licenses.asl20;
      description = ''
        This theme is inspired from Google Developer Tibau Theme, with small modified.
      '';
    };
  }) {};

  tickscript-language-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TickScript-language-support";
    plugname = "TickScript language support";
    plugid = "org.intellij.plugins.tickscript";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9859/37121/external1";
      sha256 = "1h6yxnnil4jv2wilzgfmxxfpmzv831w2224wgx7l1hn13hw7zayf";
      name = "TickScript-language-support-0.1.0";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/VladRassokhin";
      license = lib.licenses.asl20;
      description = ''
        This plugin adds support for 
TICKScript Language which is used in 
Kapacitor framework for processing, monitoring, and alerting on time series data.
 Features: For file with TICKScript (.tick): 
 
 Syntax highlighting 
 Structure outline in 'Structure' tool window 
 Comment/Uncomment action 
 Find Usages / Go to definition for variables
      '';
    };
  }) {};

  time-tracker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Time-Tracker";
    plugname = "Time Tracker";
    plugid = "Time Tracker";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3806/6296/Time_Tracker_6296.zip";
      sha256 = "1bz316ra1ipq3nxfp0rqydsjrvrvjbymlrx6bfvjsa552arn02b7";
      name = "Time-Tracker-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/3806/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/3806/sourceCode.zip";
        free = false;
      };
      description = ''
        Time Tracker lets you create tasks and track the progress and the time you spent
  on each individual task. It also provides an advanced history view where you can look and filter all tasks,
  active or finished, and generate HTML reports.
      '';
    };
  }) {};

  time-transfer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Time-Transfer";
    plugname = "Time Transfer";
    plugid = "com.liangxiaoqiao.plugin.timetransfer";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10289/41786/time-transfer.jar";
      sha256 = "0jpsf7321sfp6bi1s75mpb8cnc350zjwfybiqn2dgn4nm95cnvmr";
      name = "Time-Transfer-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.liangxiaoqiao.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.liangxiaoqiao.com";
        free = false;
      };
      description = ''
        It is just a little tool used to change time to millisecond, or change millisecond to time.
 The shortcut is Ctrl+Alt+Q.
      '';
    };
  }) {};

  timestamp-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Timestamp-Generator";
    plugname = "Timestamp Generator";
    plugid = "io.ajab.timestamp-generator-plugin";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13012/100488/timestamp-generator-plugin-0.1.4.zip";
      sha256 = "0zhsv17dpnv3988fjq5ld3mcraaxr4y2b9h5zm036bdqbc1yqml9";
      name = "Timestamp-Generator-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AlexBroadbent";
      license = lib.licenses.asl20;
      description = ''
        A timestamp generator.
      
      For example: 2019-03-18T11:30:00.000Z.
      
      Available actions:
      
        Generate Timestamp
        Generate Timestamp to clipboard
      
      
      Available formats:
      
        ISO 8601
        ISO Local Date
        ISO Local Time
        ISO Local Date Time
        ISO Instant
        RFC 11123 Date Time
        ISO Zoned Date Time
      '';
    };
  }) {};

  tinycompress = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TinyCompress";
    plugname = "TinyCompress";
    plugid = "com.noober.plugin.tiny";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11050/64160/TinyCompress.zip";
      sha256 = "1p7k7ymjigjyhxn3x0h97rcz013sn43y3irj03gsw84f32ilsj6a";
      name = "TinyCompress-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JavaNoober";
      license = lib.licenses.asl20;
      description = ''
        Just right-click on the drawable folder or right-click on the image to select Tiny Compress to automatically use tinyPng to compress the image.
      Before compression, enter key (which can be registered in https://tinypng.com/dashboard/api).
      If not, the default key will be used (it may be used up by the public)
      '';
    };
  }) {};

  tinypng-2_3 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TinyPNG-2_3";
    plugname = "TinyPNG";
    plugid = "cn.deemons.tinypng.plugin";
    version = "2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10865/63131/TinyPngPlugin.zip";
      sha256 = "12ghr96syklkp83xqraxzy61q1v8vccn29823cis6320qbcghnf4";
      name = "TinyPNG-2_3-2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://deemons.cn";
      license = lib.licenses.asl20;
      description = ''
        TinyPNG
      
      
      GitHub
      
      
      https://github.com/Deemonser/TinyPngPlugin
      
      
      A plugin for compression picture by TinyPNG API.
      
      No API Key now, no free use
      
      利用 TinyPNG 的 API ，开发的图片压缩工具。
      现在无需 API Key，免费无限制使用
      如果有问题，欢迎大家到 GitHub 上留言。
      
      Use： Tools --&gt; TinyPNG 
      
      
      更多详细信息，请查看 GitHub https://github.com/Deemonser/TinyPngPlugin
      '';
    };
  }) {};

  tinypng-1_0_6 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TinyPNG-1_0_6";
    plugname = "TinyPNG";
    plugid = "com.coxier.TinyPNG";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12497/74530/TinyPNG-1.0.6.zip";
      sha256 = "02rzxmsbfpd6gac1vx7yz9hyqb9p41kvd1iv9q2vx793fwkv2d6p";
      name = "TinyPNG-1_0_6-1.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/CoXier/TinyPNG";
      license = lib.licenses.asl20;
      description = ''
        IDEA plugin for TinyPNG for https://tinypng.com/
      '';
    };
  }) {};

  tinypng-image-optimizer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TinyPNG-Image-Optimizer";
    plugname = "TinyPNG Image Optimizer";
    plugid = "com.nvlad.tinypng-optimizer";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11573/54303/tinypng-optimizer-1.0.8.zip";
      sha256 = "1ff5ilpmrdmkiklg3pni7h5k51nc4jw0l45azkpzz93wq5x45ra1";
      name = "TinyPNG-Image-Optimizer-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://nvlad.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Smart PNG and JPEG compression using TinyPNG service.
      '';
    };
  }) {};

  tinypng = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TinyPng";
    plugname = "TinyPng";
    plugid = "com.ke.link";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13002/69506/KeTinyPicPlugin.zip";
      sha256 = "0ygdnsa24knr362jj0zj81przkv6vr1mfh0j6armwxfs8b6jby7p";
      name = "TinyPng-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Fredlxy/KeTinyPlugin/wiki";
      license = lib.licenses.asl20;
      description = ''
        provide compress image service with TinyPNG  in intellij idea
      '';
    };
  }) {};

  tmarplugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TmarPlugin";
    plugname = "TmarPlugin";
    plugid = "org.jspresso.plugin.tmar";
    version = "2.12.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9925/73307/ITmar.jar";
      sha256 = "1cy49hs5kfdbji9nir2zzbzf1l9f13zjkdfbmihp0hsi08fxzxy8";
      name = "TmarPlugin-2.12.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.tmar-test.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.jspresso.com";
        free = false;
      };
      description = ''
        Tmar plugin for IntelliJ IDEA
      Supports of Tmar tests framework
      @author Maxime HAMM
      '';
    };
  }) {};

  tmux = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tmux";
    plugname = "Tmux";
    plugid = "Tmux";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7103/12029/tmux-plugin.jar";
      sha256 = "08m38n8afhsfjl2bgzb4wqn2sih9pw6g2c01k657hgxcqg82116n";
      name = "Tmux-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.compoundtheory.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.compoundtheory.com";
        free = false;
      };
      description = ''
        Plugin that provides Tmux integration with IntelliJ. First pass will be the ability to send data to a specific Tmux panel, which can allow for REPL integration with IntelliJ. Further details can be found at: https://github.com/markmandel/tmux-intellij
      '';
    };
  }) {};

  todo-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ToDo-Helper";
    plugname = "ToDo Helper";
    plugid = "yaoxuanzhi.todoList";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12992/68388/ToDoHelper.jar";
      sha256 = "14amc5lzyw7xvmjvk8bxcw2y625vs34v2xm4py0xwi0cdigh6ypk";
      name = "ToDo-Helper-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/YaoXuanZhi/TodoTaskPlugin";
      license = lib.licenses.mit;
      description = ''
        This is a simple plugin for the todo-workflow.
    
    Feel free to file new feature requests as an issue on GitHub, just like a bug.
      '';
    };
  }) {};

  todog---todo-filter-extension = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Todog---Todo-filter-extension";
    plugname = "Todog - Todo filter extension";
    plugid = "com.newsenselab.todogfilter";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11603/54635/todogfilter-1.1.1.zip";
      sha256 = "0r8vlazmjakic6zwb2kml03hdlbc1dns534y59lhk7zjc1g0hs20";
      name = "Todog---Todo-filter-extension-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.newsenselab.com";
      license = lib.licenses.mit;
      description = ''
        Watches the current branch and sets patterns based on the current branch
      '';
    };
  }) {};

  togglecharactercase = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ToggleCharacterCase";
    plugname = "ToggleCharacterCase";
    plugid = "ToggleCharacterCase";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/181/832/ToggleCharacterCase_832.jar";
      sha256 = "0b1c56vf8ij0ww19zjq2k2gwdvhmv3dcd9lrgixjaddjf9s5qpll";
      name = "ToggleCharacterCase-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.chrisbartley.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.chrisbartley.com/";
        free = false;
      };
      description = ''
        If there is no selection in the editor, this action toggles the case of the character
      immediately following the caret (if any) and moves the caret to the position immediately after
      the changed character.  If the caret is at the end of a line, but not the end of the document,
      then the caret is simply moved to the beginning of the next line. If the caret is at the end
      of the document, nothing happens.

      If there is a selection in the editor, the case of each selected character is toggled (thus
      "This Is A Test" becomes "tHIS iS a tEST") and the caret position is left unchanged.
      '';
    };
  }) {};

  tokyo-night-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tokyo-Night-Color-Scheme";
    plugname = "Tokyo Night Color Scheme";
    plugid = "color.scheme.Tokyo Night";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15662/106158/Tokyo_Night.jar";
      sha256 = "12gf25bbkbj6jj10wc85svbg0bc11s3lj6w071g1wvl39jgby5vm";
      name = "Tokyo-Night-Color-Scheme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://grafikart.fr";
      license = lib.licenses.mit;
      description = ''
        A port of Tokyo Night for VSCode color scheme for jetbrains IDE (adapted for Material Theme UI Night Owl theme).
      '';
    };
  }) {};

  tomcat-runner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tomcat-runner";
    plugname = "Tomcat runner";
    plugid = "camtwoTomcatRunner";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8266/26081/tomcat.zip";
      sha256 = "19y23hp7scrcq3iick1ih2mrzcyp5lpriggcvq5x62ws4py4bzwc";
      name = "Tomcat-runner-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://vitorzachi.wordpress.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        A simple tomcat runner for maven web projects. Allow deploy your maven web applications in a Tomcat integrated in
       IntelliJ IDEA.

       Inspired on Jetty Runner

      If you require full support please consider buying the IntelliJ IDEA Enterprise Edition. 
      This plugin should be Win / Mac / Linux compatible.

      Minimum requirement: JVM / JDK / JRE v7 
      tags: container, webapp, runner, tomcat, tomcat integration
      '';
    };
  }) {};

  toml = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Toml";
    plugname = "Toml";
    plugid = "org.toml.lang";
    version = "0.2.131.3366-202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8195/97389/intellij-toml-0.2.131.3366-202.zip";
      sha256 = "06bayc15gk1llsf1lrzi11a03k3fj3j2n0i8a57rggsddbihl3cv";
      name = "Toml-0.2.131.3366-202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/intellij-rust/intellij-toml/";
      license = lib.licenses.mit;
      description = ''
        TOML language support
      '';
    };
  }) {};

  tomorrow-dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tomorrow-Dark-Color-Scheme";
    plugname = "Tomorrow Dark Color Scheme";
    plugid = "color.scheme.Tomorrow Dark";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12848/66926/Tomorrow_Dark.jar";
      sha256 = "18s11w6bwr8gz4aansp3mv7k8acfqkxgjj0rxhi18vhxgj0964gh";
      name = "Tomorrow-Dark-Color-Scheme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nzer0nz/jetbrains-tomorrow-dark";
      license = lib.licenses.mit;
      description = ''
        Tomorrow Dark Colorscheme (Modified from Material Monokai Pro)
      '';
    };
  }) {};

  tool-windows-actions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Tool-Windows-Actions";
    plugname = "Tool Windows Actions";
    plugid = "ToolWindowsActions";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13232/73417/tool-windows-actions-1.0.2.zip";
      sha256 = "0vszdd2085964rllppp162ij1abvzy1faiazb4phpfsddkfmfp09";
      name = "Tool-Windows-Actions-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dmoebius/intellij-tool-windows-actions";
      license = lib.licenses.mit;
      description = ''
        Adds one action to IntelliJ IDEA: 'Hide all bottom tool windows' (Ctrl+Esc)
    
    This is a fork of the SimpleActions plugin by Etienne Studer, which is no longer maintained.
      '';
    };
  }) {};

  toolwindow-colorful-icons = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ToolWindow-Colorful-Icons";
    plugname = "ToolWindow Colorful Icons";
    plugid = "com.jetbrains.colorful.toolwindow.icons";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10863/47197/ToolWIndowIcons.jar";
      sha256 = "1slnmzg44n8233s8k6hlclb3hgy520j62ispl8pq0g0h7r1lmakf";
      name = "ToolWindow-Colorful-Icons-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = lib.licenses.asl20;
      description = ''
        Makes tool window icons colorful.
      '';
    };
  }) {};

  toolwindow-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ToolWindow-Manager";
    plugname = "ToolWindow Manager";
    plugid = "ToolWindow Manager";
    version = "1.0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1489/4049/ToolWindow_Manager_4049.zip";
      sha256 = "1nbj9cix6mh3ql884h1srqvqvfc4i64ph03cdp1c89irm986yjjj";
      name = "ToolWindow-Manager-1.0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1489/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1489/sourceCode.zip";
        free = false;
      };
      description = ''
        Allows availability of IDEA ToolWindow buttons to be controlled on a per-project basis.
      '';
    };
  }) {};

  toolbarmanager = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ToolbarManager";
    plugname = "ToolbarManager";
    plugid = "ToolbarManager";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/75/269/ToolbarManager_269.jar";
      sha256 = "0ys4mhlalkggspbckq11n52shv63avidd5nxpxh0mv55qxbb71zy";
      name = "ToolbarManager-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.chrisbartley.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.chrisbartley.com/";
        free = false;
      };
      description = ''
        This plugin allows you to manage the actions that appear in IDEA's main toolbar.
      '';
    };
  }) {};

  toolkit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Toolkit";
    plugname = "Toolkit";
    plugid = "com.liuzhihang.toolkit.toolkit";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12384/100525/Toolkit-1.1.0.zip";
      sha256 = "104s89y64vm5q902nrrpz4i716k19wzkn3577c1aqyz1jssrdq2k";
      name = "Toolkit-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://liuzhihang.com";
      license = lib.licenses.mit;
      description = ''
        A toolkit that can support MyBatis, Json, Xml, Base64 and other operations.

GitHub |
Issues |
Website |
LICENSE



Toolkit plugin for IntelliJ IDEA



English introduction


    MyBatis
        
            Jump between Mapper and Xml files through the icon in the sidebar
            mapper file id simple check
        
    
    JSON
        
            Copy JavaBean as Json string
            Json String formatting
            Json String to JavaBean
            Json compressed into one line
        
    
    Xml
        
            Xml format
        
    
    Base64
        
            Support Base64 decode and encode
        
    
    Url Encode/Decode
        
            Support Url decode and encode
        
    


中文介绍


    MyBatis
        
            通过侧栏的icon实现 Mapper 和 Xml 文件之间跳转
            mapper文件id简单检查
        
    
    JSON
        
            将JavaBean复制为Json字符串
            Json字符串格式化
            Json字符串转换为JavaBean
            将json压缩为一行
        
    
    Xml
        
            Xml格式化
        
    
    Base64
        
            支持 Base64 decode and encode
        
    
    Url Encode/Decode
        
            支持 Url decode and encode
        
    


Other


    个人公众号: 『 刘志航 』
    
    小伙伴们如果有遇到问题或者有使用建议，可以关注公众号并留言。
      '';
    };
  }) {};

  toolset = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Toolset";
    plugname = "Toolset";
    plugid = "com.obroom.plugin.toolset";
    version = "2021.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14384/107454/toolset.jar";
      sha256 = "1qi8c0s272zhjg3ab37s355578p5hfvqblpmhal7bg71mb0b64r8";
      name = "Toolset-2021.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/organization/abc";
      license = lib.licenses.gpl3Only;
      description = ''
        Toolset is a plugin that contains a collection of commonly used tools.

    
        Convert
        
            Common: Base64, Hex, Html, Unicode, URI, URIComponent
            Decimal: Hex conversion, JavaScript execute
            Json: Format, Quote Parse, Slash Parse, Key:Value, XML, Excel
            Sort: Sort Lines, Reverse Lines, Remove Duplicate Lines, Sort and Remove Duplicate, Remove Line Number
            Sql: Format, Remove ``
            Time: Timestamp, Calculate Difference
            Color: Conversion, Picker
            ImageBase64: image ⇄ base64
        
    
    Cron: Cron Expression Generator &amp; Explainer
    
        Encrypt
        
            Digest: MD5,SHA1,SHA256,SHA384,SHA512,HmacMD5,HmacSHA1,HmacSHA256,HmacSHA384,HmacSHA512
            Asymmetric: RSA
        
    
    
        Generate
        
            Password
            UUID
            Variable Name
            File Verification: MD5,SHA1,CRC32
        
    
    HttpServer: Simple Http Server
    Note: Temporary notebook
    Pomodoro: Stay focused, be productive, track everything.
    
        Regex
        
            Tester: Regexp Tester
            Extract
            Replace: Right-Click Menu
            Help: Summary of regular-expression constructs
        
    
    
        Symbols
        
            Ascii: ASCII, Html Escape
            KeyCode
            Symbols: Arrows, Alphabet, Currency, Geometric, Miscellaneous Symbols...
        
    
    SwitchHosts: Switch and Manager hosts
    
        Terminal
        
            common
            cat
            curl
            file
            apt
            rpt
            yum
            mysqldump
        
    


Right Click Menu String Manipulation

    
        Convert
        
            '.*' ⇄ `.*`
            '.*' ⇄ ".*"
        
    
    
        Encode/Decode
        
            Base64 Encode
            Base64 Decode
            Hex Encode
            Hex Decode
            Html Encode
            Html Decode
            Unicode Encode
            Unicode Encode
            URI Encode
            URI Decode
        
    
    
        Lines
        
            Sort Lines
            Remove Duplicate Lines
            Sort And Remove Duplicate Lines
            Copy Cursor Line
        
    
    
        Switch To
        
            foo_bar
            fooBar
            FooBar
            FOO_BAR
        
    
    
        Trim
        
            Trim
            Trim Start
            Trim End
        
    
    Regex Replace

Toolset,Toolbox,Toolkit,CodeHelper,CamelCase,RegexTool
Will gradually add other tools in the future.


    ★Plugins★ |
    Manual |
    Issues |
    Email
      '';
    };
  }) {};

  topias = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Topias";
    plugname = "Topias";
    plugid = "io.github.likeanowl.topias";
    version = "1.0.4b";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12564/65134/topias-1.0.4b.jar";
      sha256 = "05725jd6ikzahasv9pb1d6d74vbx6lbyv4rjanyrjvkf9jx3c2m0";
      name = "Topias-1.0.4b.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ml-in-programming/topias";
      license = lib.licenses.mit;
      description = ''
        Topias is a plugin that helps to visualize frequency of methods changes in  Java projects based on their Git histories. This way it can help developers to find methods that are changed suspiciously often, which could be caused by technical (some hardcoded parameters should be moved to a configuration file), architectural (this piece of code performs more than one task and should be split into several entities), or even external (a particular business rule changing too often) issues.
      '';
    };
  }) {};

  torchie-flow-metrics = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Torchie-Flow-Metrics";
    plugname = "Torchie Flow Metrics";
    plugid = "org.dreamscale.flow";
    version = "0.27";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11258/98746/intellij-plugin.zip";
      sha256 = "1cjrp0gvmzlkwf1rnhkks7mnvvww7haja6y75cmjhrananlz1fyk";
      name = "Torchie-Flow-Metrics-0.27.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Capture automated flow metrics from your developer experience as you navigate around the code,
		modify code, and execute tests.  This plugin is designed to work with Torchie Shell.
		For more information, see dreamscale.io
      '';
    };
  }) {};

  tornadofx = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TornadoFX";
    plugname = "TornadoFX";
    plugid = "no.tornado.tornadofx.idea";
    version = "1.7.17.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8339/50526/tornadofx-idea-plugin-1.7.17.2.zip";
      sha256 = "0ll81ph8d3z1zdwjny1g6gvrg87q4dwpvgn2x2617wvhgfigm808";
      name = "TornadoFX-1.7.17.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.syse.no";
      license = lib.licenses.asl20;
      description = ''
        Support for TornadoFX - the JavaFX framework for Kotlin
      '';
    };
  }) {};

  touch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Touch";
    plugname = "Touch";
    plugid = "Touch";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4948/8215/Touch_8215.zip";
      sha256 = "0z65iy56z96f71m1n8splr076y8rxrkzrmhx00fairp1mcarrzld";
      name = "Touch-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/4948/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/4948/sourceCode.zip";
        free = false;
      };
      description = ''
        Touches files in the IDEA project (like the commun 'touch' UNIX utility).
        This is especially useful when IntelliJ IDEA loses track of the source-controlled status of files
           and shows them as "Files to be added" while they already are source-controlled. Touching these
           files on disk makes IntelliJ IDEA restore their correct source-control status.
      '';
    };
  }) {};

  touch-fish = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Touch-Fish";
    plugname = "Touch Fish";
    plugid = "cn.luojunhui.touchfish";
    version = "2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12745/75764/touch-fish.jar";
      sha256 = "1s79jsmyfcrf21w04injx3zxjqw43cc7w5v2ba6x1n8ldpbgvz7s";
      name = "Touch-Fish-2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/luojunhui";
      license = lib.licenses.mit;
      description = ''
        If you have nothing to do, why don't you try reading with this plugin?
     
    Find the "Touch Fish" settings interface under ide settings.
    Choose the text file.
    Enter page number and number of rows per page.
    Shortcut key ↑ read content up
    Shortcut ↓ read content down
    In keymap, you can set shortcut keys for text windows, which can quickly exhale and hide.

    
    如果你无事可作,为何不试试用此插件看书呢?
      
    在ide设置下找到“Touch Fish”设置界面。
    选择你想要阅读的txt文件
    输入页码和每次阅读多少行
    快捷键↑向上读取内容
    快捷键↓向下读取内容
    在keymap里可以给本插件设置快捷键,可以快速呼出与隐藏

项目地址:https://github.com/luojunhui/touch-fish
      '';
    };
  }) {};

  touch-typists-completion-caddy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Touch-Typists-Completion-Caddy";
    plugname = "Touch Typist's Completion Caddy";
    plugid = "com.vladsch.plugins.touchTypistsCompletionCaddy";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12043/69718/TouchTypistsCompletionCaddy.1.5.zip";
      sha256 = "1kg9xinbi4k6my9biy303dmq4j4250d1r2iky3c0lz3ymnlhsz9f";
      name = "Touch-Typists-Completion-Caddy-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.vladsch.com";
      license = lib.licenses.asl20;
      description = ''
        Adds option to disable auto-popup completions on a space to leave your already typed text as you
                intended.
            Configure it in Editor &gt; General &gt; Code Completion settings (Preferences on OS X). Disable for
                all languages or only for languages in a configurable list.
            If you want to insert a suggestion for space disabled auto-pop then either use TAB or ENTER or
                manually change the selected suggestion before using SPACE to insert it.
            Prompted by delayed auto-popup completions in Kotlin after typing var, val or null
                followed by a space, inserting some random function, triggering a severe bout of Tourette’s as a
                result.
      '';
    };
  }) {};

  toy-box-colors-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Toy-Box-Colors-Color-Scheme";
    plugname = "Toy Box Colors Color Scheme";
    plugid = "color.scheme.Toy Box Colors";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14956/95577/Toy_Box_Colors.jar";
      sha256 = "078lz7mwc4jw5rp6w9sgp1f1ajci9grp6v7sazfvvivqha1h4ard";
      name = "Toy-Box-Colors-Color-Scheme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JamesHarrys";
      license = lib.licenses.mit;
      description = ''
        ToyBox is a new colorful for people who like Light Themes but can't find something exciting.
      '';
    };
  }) {};

  trace-metrics = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Trace-Metrics";
    plugname = "Trace Metrics";
    plugid = "TraceMetrics";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11430/101378/trace-metrics-1.3.0.zip";
      sha256 = "18qriyrg782jild01wqivvncn2wfladhnsi9sajmq43i4jm84yjw";
      name = "Trace-Metrics-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/disney/trace-metrics-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This plugin brings those real-world usage metrics into view of the developers as they work in source code.
        Functionality:
        
            Loads New Relic transaction counts from a server into a table in the IDE
            Creates two-way links between named New Relic trace annotations in source and the table
            Opens a pre-formed New Relic Insights query in a browser window.
        
        Context menu in source code
        
            
        
        Metrics table with context menu for opening New Relic Insights
      '';
    };
  }) {};

  trackcode = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TrackCode";
    plugname = "TrackCode";
    plugid = "com.karlpu.trackingcode";
    version = "3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10833/47183/TrackingCode.jar";
      sha256 = "0n7pfqjqygqvchzddyagvw41mv2d9fkglm1hpwvsprwggh3zajzw";
      name = "TrackCode-3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.puwenhui.com";
      license = lib.licenses.asl20;
      description = ''
        TrackCode是一款帮助你记录跟踪代码的插件
      
      它能记录代码执行流程，生成时序图
      
      它会按照markdown格式记录代码的流程
      
      通过markdown软件转换成流程图
      
      能方便的帮助你梳理代码逻辑
      
      使用说明参考
      '';
    };
  }) {};

  trans-pride-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Trans-Pride-Progress-Bar";
    plugname = "Trans Pride Progress Bar";
    plugid = "com.cobular.transprideprogressbar";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15523/105992/TransProgressBar.jar";
      sha256 = "0bqfm9nr9jmgchk5fr46jkp869yfday6xprizngk8d5dg46vfkax";
      name = "Trans-Pride-Progress-Bar-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "0bsd";
        free = false;
      };
      description = ''
        A plugin to make intellij progress bars trans. 
      Forked from the oh-so-popular nyan cat progress bars plugin 
      (https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar / https://github.com/batya239/NyanProgressBar) 
      I'll add color customization for other pride flags soon™
      '';
    };
  }) {};

  translate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Translate";
    plugname = "Translate";
    plugid = "com.huangmb.idea";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9334/31274/plugin.jar";
      sha256 = "10swxn7w5pap7iaqlqjxk6mvn5xfbwi2wzvyd2ya1h6sylgacazk";
      name = "Translate-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        This is a Chinese-English translate plugin for IDEA and Android Studio. It supports translate the words that you selected or automatically identified word around caret in editor. It also provides a translate panel that you can input any word or phrase want to translate just like a dictionary app.  Usage:
 
 Move the caret int the word you want to translate or pick it,and then use one of the method following, the translate result will be shown in a balloon nearby caret for a moment.  
 
 (Recommended)Press the translate keyboard-shortcut,default shortcut is Ctrl+Command+T(Mac) or Alt+T(Windows),please change shortcut if conflict.You can specify shortcut by yourself. 
 Click Translate button in Toolbar,it may located in the last of Toolbar usually. 
 Choose Translate pop menu by mouse right click  
 (Not Recommended)Choose Menu in Translate -&gt; Translate to translate. It's not recommended because it may lose the focus of editor in Windows and unable to pick the words 
 
The translate panel is in View -&gt; Tool Window -&gt; Translate,the panel is simple but useful. Tips:
 
 
 You don't need to specified the language because it can identify the language automatically. 
 It supports translate phrase if you pick them in editor or input phrase in translate panel. 
 It supports CamelHump code style,such as "HelloWorld" can be separated as "hello world" automatically,but word like "JSON" will no be separated. 
 It is on line translate service,so It will does not work if there has no network 
 screenshot:
 
 
 
 
 Power by YouDao translate engine.
      '';
    };
  }) {};

  translate-word = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Translate-Word";
    plugname = "Translate Word";
    plugid = "com.jin.translate";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9691/34973/TranslateWords.jar";
      sha256 = "0d6l72hxlw035s0jqm843bjnxnrnfbyk54hbfr7ng08g2c22p5yz";
      name = "Translate-Word-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/jinbolx";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.github.com/jinbolx";
        free = false;
      };
      description = ''
        a translate plugin
      '';
    };
  }) {};

  translateme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TranslateMe";
    plugname = "TranslateMe";
    plugid = "com.lid.intellij.translateme";
    version = "1.0.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7935/46805/TranslateMe.jar";
      sha256 = "1n02791wv72bzyvr9kxfs498rd38yxnx8q70al1grf729x1gkb3m";
      name = "TranslateMe-1.0.0.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vlivanov";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        This plugin eases working with the code and comments written not in English.
 If you deal with the code with variables and error messages in spanish, german
 or whatever language just use Alt + Y to get the needed translation.
 Plugin employs Yandex Translator.
 The language pair can be adjusted in settings or you can choose auto-detection.
      '';
    };
  }) {};

  translation = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Translation";
    plugname = "Translation";
    plugid = "cn.yiiguxing.plugin.translate";
    version = "3.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8579/106763/TranslationPlugin-3.0.1.zip";
      sha256 = "119ik7q0bq9b9yy2fn4rvsh3a8hfqdh119lh8n7lzha1y0c6mil6";
      name = "Translation-3.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://yiiguxing.github.io/TranslationPlugin";
      license = lib.licenses.mit;
      description = ''
        Translation plugin for IntelliJ based IDEs.
      
      
      
      Website |
      GitHub |
      Issues |
      Doc |
      Donate
      
      
      
      Features:
      
        Multiple translation engines.
          
            Google translate.
            Youdao translate.
            Baidu translate.
          
        
        Multiple languages inter-translation.
        Document translation.
        Text to speech.
        Automatic word selection.
        Automatic word division.
        Word book.
      
      
      
      
      Sponsors
      
      Eliminate context switching and costly distractions. Create and merge PRs and perform code reviews from inside your IDE while using jump-to-definition, your keybindings, and other IDE favorites. Learn more.
      
      
      Send feedback
      '';
    };
  }) {};

  translator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Translator";
    plugname = "Translator";
    plugid = "org.intellij.plugin.jojoldu.translator";
    version = "0.0.15";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9690/48242/Translator-0.0.15.zip";
      sha256 = "0nz6lxfs8lb8d7j2i8rbrybh6a0cdjnyf90rq5jazgd45f4w7j0q";
      name = "Translator-0.0.15.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jojoldu";
      license = lib.licenses.mit;
      description = ''
        Translator
      
      
      GitHub
      
      
      
      Translation plugin For Korean User
      
      
        Translate : option+1
        Translate &amp; Replace : option+2
        Open Translate Dialog : option+3
      
      
      
      Compiled with Java 1.8
      '';
    };
  }) {};

  transliterate-umlauts = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Transliterate-Umlauts";
    plugname = "Transliterate Umlauts";
    plugid = "jhunovis.idea.plugin.umlauts";
    version = "0.9.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9253/30523/umlaut-search-0.9.1.zip";
      sha256 = "0invgi7h1b2l87idij08r1iq4xry9xk6mmpgvccxnlplyrr222r5";
      name = "Transliterate-Umlauts-0.9.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jhunovis/umlaut-search-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        This plugin is for projects which use German for naming their classes, symbols, and files but restrict the character set used for naming to ASCII. E.g. they would have classes like "Aenderungsauftrag" instead of "Änderungsauftrag". Finding something in such an environment becomes a hassle once the use of native characters is allowed, because now you may encounter both spellings and never know, if you just missed a class when searching by one spelling or the other. 
 This is where this plugin steps in. It will produce hits for both spellings, i.e. if the users entered "Änd" in the "navigate to class" field (CTRL+N), IDEA will produce both "Aenderungsauftrag" and "Änderungsauftrag". It also works vice versa with the restriction that this way around the translation is not unique, e.g. searching for "Kaesefondue" would not see the actual class "Käsefondue" because the plugin overdid its job.
      '';
    };
  }) {};

  transmitter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Transmitter";
    plugname = "Transmitter";
    plugid = "com.piekill.transmitter";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13708/95332/transmitter-1.5.jar";
      sha256 = "064xlfq2yq5xnmmjgfvk3j0jajk8qh5bcdvqkmx4bhqiddbwn45y";
      name = "Transmitter-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/piekill";
      license = lib.licenses.gpl3Only;
      description = ''
        A simple transmission tool based on rsync for sending your project to remote locations.
    
        Supported systems: Mac and Linux.
        Using a passwordless ssh key is recommended.
        To use password, sshpass needs to be installed.
        Exclude accepts a comma separated list of files/dirs.
    
    Github
      '';
    };
  }) {};

  trash-panda-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Trash-Panda-Theme";
    plugname = "Trash Panda Theme";
    plugid = "com.villains.intelij.plugin.trashpandatheme";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12995/73854/TrashPandaTheme.jar";
      sha256 = "06mxfi91350qvy15i3h5q5nq8dbflsx7bg0anc0d8lxsmm07spwl";
      name = "Trash-Panda-Theme-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/jasonhulbert";
      license = lib.licenses.mit;
      description = ''
        A theme for raccoons and other creatures of the night.
      '';
    };
  }) {};

  tree-shape-component = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Tree-Shape-Component";
    plugname = "Tree Shape Component";
    plugid = "com.treenear.treeshape";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10012/38546/treeshage.jar";
      sha256 = "111nw3gn6f1vwis7bqgp26bx5xagsdd1jp7kfk8fgwxzm27q0v4d";
      name = "Tree-Shape-Component-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.treenear.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.treenear.com";
        free = false;
      };
      description = ''
        Create Shape XML For Component
 
How To Use??Simple Just Choose In Directory res click Right new-&gt;Tree Shape  1.Circle  2.Rectangle  3.Elipze  4.Triangle
      '';
    };
  }) {};

  treeinfotip = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TreeInfotip";
    plugname = "TreeInfotip";
    plugid = "com.linkkou.plugin.intellij.assistant";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12994/98957/plugin.intellij.assistant-1.0.3.jar";
      sha256 = "11kywmdy7rj7isd268fl1q1zwpjcbcp5wayhsnd8y8040d61z2pn";
      name = "TreeInfotip-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Link-Kou/intellij-treeInfotip";
      license = lib.licenses.mit;
      description = ''
        English:
        Add comment information to the project directory tree
        中文：
        项目目录树添加备注信息
      '';
    };
  }) {};

  trema = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Trema";
    plugname = "Trema";
    plugid = "com.netcetera.trema.trema-intellij";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11212/50765/Trema_Intellij-0.0.3.zip";
      sha256 = "16nm2pm5fhdnzk8b32950wfszbmw1g1iza4v3whk5mp0bnvfc0sj";
      name = "Trema-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://netcetera.com";
      license = lib.licenses.mit;
      description = ''
        Trema is an IntelliJ plugin that allows you to manage your text resources and translations. It allows you to keep all
    text resources and translations in a single place but still giving you the possibility to let those translations be
    composed by other people without access or knowledge of development environments.

    You can store all your Text resources that you use within your application in a single database (*.trm xml file).
    From this unified text resource database you can export the text resources that remain to be translated as Excel or
    CSV File to the people that do the translations. They can do the translations of the text resources in Excel and
    send you back the file, which can then be merged with your existing text resource database.

    Together with trema-maven you can also generate your java properties files to be used within your application from
    the text resource database.
      '';
    };
  }) {};

  truth-postfix-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Truth-Postfix-Plugin";
    plugname = "Truth Postfix Plugin";
    plugid = "com.github.droibit.plugin.truth.postfix";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8249/24599/truth-postfix-plugin-0.1.1.zip";
      sha256 = "1ipsc3xsg83s51wdrx18mlidag6qlvxv4nh0knir9y9b5dp51bpi";
      name = "Truth-Postfix-Plugin-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/droibit";
      license = lib.licenses.asl20;
      description = ''
        This Plugin for Google truth to use Postfix Completion in IntelliJ Idea/Android Studio.
 Available in Java and Kotlin (limited support).
 
 
 Available templates: 
 Java 
 
  .assertThat Creates assertion from actual. assertThat(actual)  
 
 
  .assertWithMessage Creates assertion using custom message. assertWithMessage(message)  
 
 
  .assertAbout Creates assertion from custom subject. assertAbout(subjectFactory).that(actual)  
 
 
 Kotlin 
 
  .assertThat Creates assertion from actual. Truth.assertThat(actual)  
 If you want to use assertThat, manually run method import.
      '';
    };
  }) {};

  tuandaibi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TuandaiBI";
    plugname = "TuandaiBI";
    plugid = "com.alfredxl.tuandai";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11046/50103/TuandaiBiPlugin.zip";
      sha256 = "0lrvxakgfz0dbnpphn07fixa0mpw0nfdcb8lx0j9knr7gl9wwzwm";
      name = "TuandaiBI-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alfredxl/TuandaiBiPlugin";
      license = lib.licenses.mit;
      description = ''
        Automatic Aspectj code generation: 
    1, according to the user selected method, generate the corresponding annotation class and Aspectj class; 
    2, automatically add response notes on the user selected method;
      '';
    };
  }) {};

  tunnellij = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TunnelliJ";
    plugname = "TunnelliJ";
    plugid = "TunnelliJ";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/155/8534/TunnelliJ_8534.jar";
      sha256 = "0dlkg0wacixna55g7hccihwr641fbgi3bsxipzrvriy1vp1nhc4d";
      name = "TunnelliJ-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://blog.boruvka.net/";
      license = lib.licenses.asl20;
      description = ''
        TunnelliJ plugin works as a TCP tunnel and it useful for any network development. It allows you to monitor, sniff TCP connections and display the content in a very effective way inside your IDE.
      '';
    };
  }) {};

  tweetcode = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TweetCode";
    plugname = "TweetCode";
    plugid = "com.github.denofevil.TweetCode";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7085/16135/TweetCode.zip";
      sha256 = "16075qsa4hrxgkg1kzk0nm7ywzd496ymhx9lhrrzdg09cb0ipcqf";
      name = "TweetCode-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/denofevil/TweetCode";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/denofevil/TweetCode";
        free = false;
      };
      description = ''
        Tweets selected code
      '';
    };
  }) {};

  twitch-dark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Twitch-Dark-Theme";
    plugname = "Twitch Dark Theme";
    plugid = "Twitch Dark Theme";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15391/104588/TwitchDarkTheme.jar";
      sha256 = "0n6bhinvl7pbh9507zbiixh32iym4a5cqg58ris4zpn3sxhf9gnp";
      name = "Twitch-Dark-Theme-1.2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/send0xx";
      license = lib.licenses.mit;
      description = ''
        Twitch brand colors inspired theme for your favorite IntelliJ IDE
      '';
    };
  }) {};

  twitter-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Twitter-Integration";
    plugname = "Twitter Integration";
    plugid = "com.sashashpota.twitter-plugin";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12729/66065/twitter-plugin-1.0.2.jar";
      sha256 = "1mrwhnzrkm6crg2ws49qq8myf4pb6dyd14h5d967x26yrcdp3jfz";
      name = "Twitter-Integration-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sashashpota.com";
      license = lib.licenses.asl20;
      description = ''
        Select a piece of code and tweet instantly via right mouse click.
      '';
    };
  }) {};

  type-refactoring = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Type-Refactoring";
    plugname = "Type Refactoring";
    plugid = "Type Refactoring";
    version = "0.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/99/4291/Type_Refactoring_4291.jar";
      sha256 = "05h49zq2kbyi5ckhha9arnjj1gmvx7g67g4x9xm9b28rrk5yjxza";
      name = "Type-Refactoring-0.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Adds an menu item to the Refactor menu, which allows you to change the type of a variable without breaking code.
      '';
    };
  }) {};

  typeless = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TypeLess";
    plugname = "TypeLess";
    plugid = "org.dan.idea.charremap.plugin";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8562/28008/type-less.jar";
      sha256 = "0srlv664jm6qwrqs52vgbphyamlia67pm5j08bcngqyvchxf19c3";
      name = "TypeLess-0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yaitskov";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/yaitskov";
        free = false;
      };
      description = ''
        The goal of this plugin is to relief the burden of Java programmer of pressing extra keys while typing and making coding more ergonomic.  
 In two words it could be described as T9 plus auto-replace for the structured language with a context free grammar.  
So where is the burden? Character frequencies in Java differ from English. So even if you just inverse Shift key for a half dozen keys (like 9 0 - ,.) you will gain 4% less key to be pressed to write an average program in Java, but why do you need to think about Shift in a formal language?!  
 IDE can figure out what did you want to input when you have pressed key "2" ("@" or "2"). There are tons of information such as AST, Java types, and class hierarchies to accomplish this.  
 At the current stage just key "2" has smart mapping. Rest subset of special characters have inverted Shift behavior plus auto-replace rules. See the table below.  
 E.g. when you type 9 as usual ( will be inserted and vice versa (( =&gt; 9)   -_ 9( 0) [{ ]} '" `~ \|  Auto replace rules 
Letter after @ is upper cased. 
Lambda delimiter of arguments and the body is recognized. 
Replace "{" with "[" right after letter or digit, and "}" after "[" (Variable with array type like "String[]"). 
Replace "_" with "-" right after space or closing brace. 
Replace "," with "&lt;" right after letter. 
Replace "." with "&gt;" right after letter if the line has "&lt;" before. 
Replace "1=" with "!= ". 
Replace "LETTER&lt;SPACE" with "LETTER,SPACE".
      '';
    };
  }) {};

  typengo = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "TypeNGo";
    plugname = "TypeNGo";
    plugid = "codeflections.typengo";
    version = "0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7846/94817/typengo-plugin-0.7.zip";
      sha256 = "1fiha7s83b5rqfir1zq4m47giczlcjhdm741a6b4j8cd9ql6bpak";
      name = "TypeNGo-0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.dyadix.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html";
        free = false;
      };
      description = ''
        Replaces shortcuts with mnemonics. The only shortcut to remember is TypeNGo dialog invocation: Ctrl+\.
      The default shortcut can be changed in Settings|Keymap|Invoke TypeNGo. Abbreviations can be assigned in
      Settings|Keymap.
      '';
    };
  }) {};

  typescript-spec-file-generator--navigator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TypeScript-spec-file-generator--navigator";
    plugname = "TypeScript spec file generator / navigator";
    plugid = "eu.ydp.idea.tsSpecGenerator";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9237/30075/ts-spec-generator-0.2.jar";
      sha256 = "1ki6fgxm884w88g3fvw681249039v73apijki5qvrq30dz0c5ig6";
      name = "TypeScript-spec-file-generator--navigator-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.ydp.eu";
      license = lib.licenses.mit;
      description = ''
        TypeScript test file generator / navigator.
      '';
    };
  }) {};

  typeformation = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Typeformation";
    plugname = "Typeformation";
    plugid = "co.jeshan.code.typeformation";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10653/45249/typeformation.jar";
      sha256 = "1i3wfc3gll6fjxf50s9mwfpsgqh20f85phc8yb7nkh74328xqvnz";
      name = "Typeformation-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jeshan";
      license = lib.licenses.bsd2;
      description = ''
        Type Cloudformation templates with pleasure!
      '';
    };
  }) {};

  typoscript---old-version = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "TypoScript---Old-Version";
    plugname = "TypoScript - Old Version";
    plugid = "de.sgalinski.typoscript.plugin.id";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7463/88589/TypoScriptPlugin_Free.jar";
      sha256 = "0g45nkav8svsl3ldxij8s6j826gjk6zn5m9lgn679ckbxhgpyj9p";
      name = "TypoScript---Old-Version-2.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "(https://www.sgalinski.de)";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.sgalinski.de/licenses/spl/";
        free = false;
      };
      description = ''
        Don't use this plugin anymore. Use the following: https://plugins.jetbrains.com/plugin/11243-typoscript-plugin
      '';
    };
  }) {};

  udc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "UDC";
    plugname = "UDC";
    plugid = "UDC";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8368/63117/UDC.zip";
      sha256 = "0sfkravdxhgynyihshssqpjkigc2shh74wjbzpim9wxm4sp16pmy";
      name = "UDC-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://docs.microfocus.com/UCMDB/UDCplugin/Content/Udc_plugin.htm";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://docs.microfocus.com/ucmdb/udcplugin/content/udc_plugin.htm";
        free = false;
      };
      description = ''
        UDC is a plugin for UCMDB UD (Universal Discovery) Content development. UDC dramatically simplifies development and deployment of UCMDB. The following features are available:

    
     Download resource from the remote UCMDB
     Create package by the format of UDC template
     Diff a local file with the one in server
     Push resource to server
     Pack a folder when it is in accord with UDC format
     Deploy package in a zip format to server

    
    UDC supports branch number 139 (IntelliJ IDEA 14, PyCharm 4) and later product.
      '';
    };
  }) {};

  uf-header = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UF-Header";
    plugname = "UF Header";
    plugid = "ua.dkovalch.header";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10518/45594/UF_Header.jar";
      sha256 = "0qql7bdnzv9gp7ax5ggz8cis16v1i0vqs1ir4lyprnn9c1igadj7";
      name = "UF-Header-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/Mitriksicilian/ufheader/src/master/";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin generates and updates UNIT Factory header.
 It's capable of: 
 
 Generating valid UNIT Factory header and inserting it into the file. 
 Updating the header on save automatically. 
 Use 
Tools -&gt; Enter UF Login... to enter your login(and email).
 Use 
Tools -&gt; Insert UF Header(or ⌥H) to insert or update the header.

 It can be used with any language, but was tested with C/C++, Makefiles, and python files.
 All JetBrains IDEs built in 2017 and later are supported.
      '';
    };
  }) {};

  ui5-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "UI5-Helper";
    plugname = "UI5 Helper";
    plugid = "de.uniorg.ui5helper";
    version = "0.2.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9427/34672/ui5-helper-0.2.5.zip";
      sha256 = "0yxfxbgl2bx9dpxnslv5zszfvm5ffzyhpzc30qs1mfri7mgcpqyk";
      name = "UI5-Helper-0.2.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.uniorg.de";
      license = lib.licenses.mit;
      description = ''
        This plugins adds some codeInsight and framework knowledge for Open- and SAPUI5 to IDEA IDEs.
            Beware: This is still experimental and might crash or eat your homework
        

        Things it may be able to do now (experimental):
        
            XMLView: Go To Controller
            Controller: Go To (XML)View
            Collapse the controller name in the XMLView
            complete target names in manifest.json
            go to views from manifest.json
            Provide API Docs in XMLView
            Provide some basic context sensitive auto completion in XMLViews
            References &amp; auto completion of event handler implementation in XMLViews
            Basic understanding of the binding syntax for XMLViews
        

        Version 0.3
        This version focuses more on consolidating existing features and improving consistency and usability of existing features.
      '';
    };
  }) {};

  uibuilder-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "UIBuilder-Support";
    plugname = "UIBuilder Support";
    plugid = "io.devbench.uibuilder.idea";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13864/104371/uibuilder-idea-plugin-1.0.2.zip";
      sha256 = "1y27biwp0004ks5yckfhrpr47r6np3r9b7p877bcnadhjr1nbbyp";
      name = "UIBuilder-Support-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/devbench/uibuilder-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Adds support for DevBench's UIBuilder framework
      '';
    };
  }) {};

  uikit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UIkit";
    plugname = "UIkit";
    plugid = "nl.bixie.intellij.uikit";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7791/22521/UIkit.jar";
      sha256 = "1ch2y073d18157gd2x1zakba14i8xnxxgib07p24rmybkzcr0qnh";
      name = "UIkit-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Bixie/intellij-uikit";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Bixie/intellij-uikit";
        free = false;
      };
      description = ''
        UIkit live templates / snippets 
 
Check Github repository for list of snippets and for contributing
      '';
    };
  }) {};

  uml-design-tool-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UML-Design-Tool-Plugin";
    plugname = "UML Design Tool Plugin";
    plugid = "com.jakutenshi.projects.umlplugin";
    version = "0.1a";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8394/26281/UMLDesignToolPluginProj.jar";
      sha256 = "1ndpakgvr9gd4yj9dzy47pkk25srnjd50vqrm0rfznz546i9zzz9";
      name = "UML-Design-Tool-Plugin-0.1a.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JAkutenshi/UMLDesignToolPluginProj";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin for IntelliJ IDEA CE 2016.1.1 for UML designing and code generation. 
 Starts as my Bachelor's grade works.
 GitHub: https://github.com/JAkutenshi/UMLDesignToolPluginProj
 
 by JAkutenshi
      '';
    };
  }) {};

  uml-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UML-Generator";
    plugname = "UML Generator";
    plugid = "com.caldonazzi.alessandro.uml";
    version = "0.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15124/106884/UMLDesignTool.jar";
      sha256 = "0w3rfmmv0licavx7ryjh9i8dvawwydakvi0i45gizmsa9a2gj1bl";
      name = "UML-Generator-0.1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alessandro-caldonazzi/UMLDesignTool";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.mozilla.org/en-us/mpl/2.0/";
        free = false;
      };
      description = ''
        Plugin for IntelliJ IDEA CE 2020.2 for UML generation. 
        Forked from @JAkutenshi.
        GitHub: https://github.com/alessandro-caldonazzi/UMLDesignTool
        
        by Alessandro Caldonazzi
        USAGE:
        Click the "UML Generator" button for the rigth side of IDE
        Click on the first icon to generate the UML
        EXPORT:
        To export click the second icon, select a destination path and confirm
      '';
    };
  }) {};

  uuid-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "UUID-Generator";
    plugname = "UUID Generator";
    plugid = "com.github.leomillon.uuidgenerator";
    version = "4.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8320/97007/UUID_Generator-4.1.0.zip";
      sha256 = "0m76di6m9zs1nwmh6nwgi3qg7s9rv6mi6sr2l80wyfs3ii2prb1c";
      name = "UUID-Generator-4.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/leomillon";
      license = lib.licenses.mit;
      description = ''
        UUID (Universally Unique Identifier) and ULID (Universally Unique Lexicographically Sortable Identifier) generator.
    
    
    For example : 123e4567-e89b-12d3-a456-426655440000.
    
    
    You will find it in the Generate popup -&gt; Random UUID.
    

Available actions :

    Random UUID / ULID (also as quick fix)
    Generate UUID / ULID to clipboard
    Generate UUID / ULID Popup
    Toggle UUID dashes (also as quick fix)
    Reformat UUID with settings (also as quick fix)


    UUID/ULID highlight in any language with context info (Timestamp extraction for ULID) and quick fix suggestions
      '';
    };
  }) {};

  uuid-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UUID-Plugin";
    plugname = "UUID Plugin";
    plugid = "UUID Plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1188/2961/UUID_Plugin_2961.jar";
      sha256 = "1scahm29sf717vnl61l8cl13rvzrk6klwc4z7331pmlh0zp65lch";
      name = "UUID-Plugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Inserts UUID or Unique Keys at the caret location
      '';
    };
  }) {};

  uxcore = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UXCore";
    plugname = "UXCore";
    plugid = "com.alibaba.uxcore";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9832/36741/uxcore-plugin-for-webstorm.jar";
      sha256 = "1si430n4vz0cvr350c2agykva8k00bjaal8n458apvb0qpsv3dda";
      name = "UXCore-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/recore/uxcore-plugin-for-webstorm";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/recore/uxcore-plugin-for-webstorm";
        free = false;
      };
      description = ''
        UXCore templates / snippets. 

 
GitHub Homepage 
Issues
      '';
    };
  }) {};

  uxg-live-templates = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UXG-Live-Templates";
    plugname = "UXG Live Templates";
    plugid = "etp.gpb.marketplace.uxg.plugin.id";
    version = "1.0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13578/75365/UXG_Live_Templates.jar";
      sha256 = "00v7dhaxrlcaj5wj9rdjms76di5zb6zz943drgbx2xdzshi3hgch";
      name = "UXG-Live-Templates-1.0.11.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://etpgpb.ru";
      license = lib.licenses.mit;
      description = ''
        Angular Live Templates for UXG CSS Framework plugin. Press CTRL+J and type uxg to use it. Enjoy :)
      '';
    };
  }) {};

  ubuntu-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Ubuntu-Theme";
    plugname = "Ubuntu Theme";
    plugid = "com.github.kropp.intellij.theme.ubuntu";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12105/59520/intellij-theme-ubuntu-0.1.jar";
      sha256 = "01z16hxyvzhx6i92wmkfh41w2mxly0j7d2cllr1s94jgkyw51i45";
      name = "Ubuntu-Theme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://victor.kropp.name/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://creativecommons.org/licenses/by-nc-sa/4.0";
        free = false;
      };
      description = ''
        IntelliJ Theme in Ubuntu Yaru colors.
      '';
    };
  }) {};

  ucharmyapiupload = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UcharmYapiUpload";
    plugname = "UcharmYapiUpload";
    plugid = "com.ucharm.YapiUpload";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13455/73890/YapiIdeaUploadPlugin.jar";
      sha256 = "1dhmkan1s0b4w2ll9z1k9fdj7dlnbil2z1nia5smwiai4j7d0qby";
      name = "UcharmYapiUpload-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/guomw/YapiIdeaUploadPlugin";
      license = lib.licenses.mit;
      description = ''
        upload api to yapi
      support dubbo api and api upload
      基于YapiIdeaUploadPlugin 插件基础上，进行二次开发扩展，支持swagger 注解
      支持右键项目一键同步Controller文件接口
      支持dto mock配置，
      注解使用方式：
      字段mock配置：@ApiModelProperty(example="@string")
      接口名称：在controller的方法上添加 @ApiOperation("接口名称") or @ApiOperation(value="接口名称")
      分组(菜单)名称配置:在controller头上添加 @Api(tags="groupName")
      使用方式：
      '';
    };
  }) {};

  ultimate-pastebin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Ultimate-PasteBin";
    plugname = "Ultimate PasteBin";
    plugid = "com.github.kennedyoliveira.ultimatepastebin";
    version = "1.5.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8105/42208/ultimate-pastebin.zip";
      sha256 = "1h61899p25m21jihi6cz9f2y7dgjfx8g1bz5b4ghw4a0vjlambdl";
      name = "Ultimate-PasteBin-1.5.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kennedyoliveira";
      license = lib.licenses.mit;
      description = ''
        Best plugin ever for PasteBin in IntelliJ IDEA. 
You'll love this plugin! 
With this plugin you can easily see all your pastes, get links for them, create new pastes, download pastes, open pastes in editor, see trending pastes and more! 
Check the project page Ultimate PasteBin IntelliJ IDEA to see some pictures, and informatino! 
If you like this plugin, make us happy by donating! Donate
      '';
    };
  }) {};

  unclutter-java = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Unclutter-Java";
    plugname = "Unclutter Java";
    plugid = "org.dmfs.intellij.unclutter";
    version = "0.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15558/105624/org.dmfs.intellij.unclutter-0.3.0.jar";
      sha256 = "0370mj364xs2yif9shfg5nvgnncl2bls227j2ssz0jhmmxvpj8kw";
      name = "Unclutter-Java-0.3.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://dmfs.org";
      license = lib.licenses.asl20;
      description = ''
        Reduce cognitive load when parsing Java code by folding some of the verbose syntax.
        
        Functional Interfaces
        
            Reduces usages of functional interfaces to what you would expect when you come from a language like Python.
            Examples
            
Function&lt;Baz, Buzz&gt; f = foo::bar;
f.apply(baz);  // unfolded
f(baz);        // folded

Predicate&lt;String&gt; isBlank = String::isBlank;
if (isBlank.test("not blank")) { … } // unfolded
if (isBlank("not blank")) { … }      // folded

            Note, currently this is applied to all interfaces which have only a single method and sometimes might yield
            unexpected results (e.g. when using Comparables).
        
        Creating instances
        
            Removes visual noise from constructor calls.
            Examples
            
new Foo(bar, baz); // unfolded
Foo(bar, baz);     // folded

new Foo&lt;&gt;(bar, baz); // unfolded
Foo⋄(bar, baz);            // folded

new com.example.Foo&lt;String&gt;(bar, baz); // unfolded
…Foo⋄(bar, baz);                             // folded

        

            express-json
        
            Folds (simple) express-json compositions into something that
            looks like JSON.
            Examples
            
new Object(
   new Member("a", "b"),
   new Member("c", new Array(1, 2, 3))
); // unfolded

{
   "a": "b",
   "c": [1, 2, 3]
};  // folded

        
        Source Code
        
        Sources available at https://github.com/dmfs/unclutter-java
      '';
    };
  }) {};

  underline-camel-toggle-case = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Underline-Camel-Toggle-Case";
    plugname = "Underline Camel Toggle Case";
    plugid = "tk.miemie.underlinecameltogglecase";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11121/49733/Underline-Camel-Toggle-Case.jar";
      sha256 = "1f2ka3vhyqcmw3af7rm1k4gdj28877vxha5dnjfhr0dbzv5hqi7z";
      name = "Underline-Camel-Toggle-Case-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.miemie.tk";
      license = lib.licenses.asl20;
      description = ''
        Underline Camel Toggle Case
      HotKey: Ctrl+Shift+C / mouse right click -&gt;Underline Camel Changer
      Coordinate with 'Toggle case' (Ctrl+Shift+U) could be helpful when you declare a final field or constant
      e.g:
      
        light_dialog_type --&gt; lightDialogType
        anApplePie --&gt; an_apple_pie
        homeActivityTimer --&gt;home_activity_timer --&gt; HOME_ACTIVITY_TIMER
      '';
    };
  }) {};

  underscore-case-toggle-to-camel-case = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Underscore-Case-Toggle-To-Camel-Case";
    plugname = "Underscore Case Toggle To Camel Case";
    plugid = "com.wangbailin.plugin.underscore_case_toggle_to_camel_case";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11968/58166/UnderScoreCaseToCamelCase.jar";
      sha256 = "1n9nzd9bm0acs3apkfi450ma3jwjgcgbpgfpgc4rrpdzjdjzfwbw";
      name = "Underscore-Case-Toggle-To-Camel-Case-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        You can use this plugin to convert underscore case between camel case.
      Select your target words, and press shift + alt + U.
      e.g. anExampleWord -&gt; an_example_word, an_example_word -&gt; anExampleWord.
      '';
    };
  }) {};

  undo-scroll = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Undo-Scroll";
    plugname = "Undo Scroll";
    plugid = "be.waines.idea.undo-scroll";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9534/33148/intellij-undo-scroll.jar";
      sha256 = "1kmv5rgyircq4rd9iypxya7kcs5bmgg1af3knl8s9hj196kyxmny";
      name = "Undo-Scroll-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wannessels";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wannessels";
        free = false;
      };
      description = ''
        Press CTRL-Z or CTRL-Shift-Z, hold down CTRL, and scroll to stream through undo and redo events.
      '';
    };
  }) {};

  unicode-browser = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Unicode-Browser";
    plugname = "Unicode Browser";
    plugid = "Unicode Browser";
    version = "0.8.1-15.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6186/25392/UnicodeBrowser.zip";
      sha256 = "0h4scbjg6l9mrpy0cpxfqcr1kzdh6gkrygk3ak40ybmcw5680kxb";
      name = "Unicode-Browser-0.8.1-15.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/6186/license.txt";
        free = false;
      };
      description = ''
        This plugin allows you to browse and search characters and parts of the Unicode™ character set. Insert characters into an editor in one of 10 forms. Decodes coded characters at the cursor position.
      '';
    };
  }) {};

  unicode-escaper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Unicode-Escaper";
    plugname = "Unicode Escaper";
    plugid = "com.materkey.codepoints";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13268/71693/codepoints-1.0.2.jar";
      sha256 = "0h697gzyfn79dm9ffzv5gvxgvxjaf9i91m44aykvydlg9vq8xjnj";
      name = "Unicode-Escaper-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/materkey/unicode-escaper";
      license = lib.licenses.mit;
      description = ''
        Transform non ASCII subset (00-7F do not change) of Unicode characters to escaped UTF-16 and vice versa.
      '';
    };
  }) {};

  unicoder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Unicoder";
    plugname = "Unicoder";
    plugid = "com.antkorwin.unicoder";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13193/70848/unicoder.zip";
      sha256 = "09bpab3ipgb6a8cx9sq5m8xkgfpcx0cpg3ni45frdyp6pyp4vvvp";
      name = "Unicoder-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://antkorwin.com";
      license = lib.licenses.asl20;
      description = ''
        This plugin converts a selected string in the IDEA editor to a valid(Java) UTF-8 value.
      Escapes all special characters and converts native UTF-8 symbols to a code sequence.
      '';
    };
  }) {};

  uniondrug-smart-doc-for-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Uniondrug-Smart-Doc-For-IDEA";
    plugname = "Uniondrug Smart Doc For IDEA";
    plugid = "cn.uniondrug.jx-doc";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14861/106579/jx-doc-1.1.3.zip";
      sha256 = "1inm7w15n74g4lazfixjiv00kbh017wnls2ivim44yzrnpp63438";
      name = "Uniondrug-Smart-Doc-For-IDEA-1.1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.uniondrug.cn/";
      license = lib.licenses.asl20;
      description = ''
        Uniondrug Rest Api Document Generation Tool, Document Generator Based on Smart Doc.
      '';
    };
  }) {};

  unit-file-support-systemd = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Unit-File-Support-systemd";
    plugname = "Unit File Support (systemd)";
    plugid = "net.sjrx.intellij.plugins.systemdunitfiles";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11070/104400/systemdUnitFilePlugin-0.3.1.zip";
      sha256 = "00yp61cziwnrz3fkmsmqcw164n317c627a404rpd866x2z7rywi6";
      name = "Unit-File-Support-systemd-0.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SJrX/systemdUnitFilePlugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "gpl-2.0";
        free = false;
      };
      description = ''
        Adds support for systemd unit files, including the following features:
      
       Syntax highlighting for unit files
        Auto-completion for:
          
            Option names in a section
            Boolean options
            Octal options
            Some other common options (KillMode=, Type=, Restart=)
          
        
        Inspections:
          
            Invalid values for boolean options
            Unknown option in section (ignoring those starting with X-)
            Deprecated options
      '';
    };
  }) {};

  unit-test-coverage-history-runner = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Unit-Test-Coverage-History-Runner";
    plugname = "Unit Test Coverage History Runner";
    plugid = "Unit-Test-Coverage-Viewer";
    version = "1.18";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15063/97214/unit-test-history-plugin.zip";
      sha256 = "04c7s7ykyhsc9q2hmdnjxik9fyv4fyh9fv23qkyjqlzki52q6jsz";
      name = "Unit-Test-Coverage-History-Runner-1.18.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csabagabor";
      license = lib.licenses.gpl3Only;
      description = ''
        Important: it only works with JDK 8 or higher, supports JUnit 3,4,5 and TestNG

This plugin lets you click on a method in your project and automatically run all the unit tests which cover that method.


Manual (Help):
There are two steps to use the plugin:

1. First you have to run as many unit tests as you can with the new Unit Test Runner(its icon has 1 red + 1 green triangle and a yellow arrow on top of the triangles).
 The more tests you run with it, the more coverage information you will have.
 2. To run all the unit tests which cover a particular method in your project, just right click on a method
and then choose -&gt; Run Unit Tests Which Cover This Method...(this is not shown for methods without coverage info) Unit tests which cover that method will be automatically started.


RESET
Also to reset coverage information (in case unexpected tests are run), you can go to Tools -&gt; Reset Coverage Info...


IMPORTANT UPDATE (version 1.18)

Starting from version 1.18, the plugin can find tests using static code analysis if tests are not found in its database.
So when you click on a method, if no tests are found, a new action titled "Run Static Code Analysis to Find Tests" will appear.
The recommended approach is still to use the included runner to run unit tests because static code analysis can only find direct usages(no coverage for private methods etc.)


Limitations:
When you encounter any test for which coverage information is not included, contact me.
For example the plugin doesn't work when using empty test methods with the Scenario annotation like @Scenario("integration_tests")


Credits:
IntelliJ IDEA Code Coverage Agent: https://github.com/JetBrains/intellij-coverage
      '';
    };
  }) {};

  unitvisualizer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UnitVisualizer";
    plugname = "UnitVisualizer";
    plugid = "mw.unitv";
    version = "1.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10493/104356/UnitVisualizer-1.6.1.jar";
      sha256 = "0ja4mjjblw71v35qqzbjw1lzsxbqpy0s7jb3n7fg59l66kcivraz";
      name = "UnitVisualizer-1.6.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MatWein/UnitVisualizer";
      license = lib.licenses.mit;
      description = ''
        Simple Intellij IDEA plugin to provide layered class icons for unit tested classes, similar to MoreUnit in Eclipse.
 
It also provides functionality to automatically move test classes when moving tested classes.
      '';
    };
  }) {};

  unitize = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Unitize";
    plugname = "Unitize";
    plugid = "de.yannik_sc.java.intelli_j.plugins.unitize";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10138/54025/Unitize.jar";
      sha256 = "19sli1rdc4507v96n69p47n5v8c181xcvasaj760n417409gnf4q";
      name = "Unitize-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitlab.com/Yannik_Sc/IntelliJ_Unitize";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitlab.com/yannik_sc/intellij_unitize/blob/master/license";
        free = false;
      };
      description = ''
        This plugin wraps CSS properties in the unitize mixin from Shopware in less files by pressing Ctrl + U e.g.
margin: 10px 0 10px;
/* Becomes */
.unitize-margin(10px, 0);
With the @nounitize CSS annotation (© Yannik_Sc) you can disable the unitizer for a single line.

By pressing Ctrl + Shift + Alt + U, you can unitize a whole file.

The source code can be found on: https://gitlab.com/Yannik_Sc/IntelliJ_Unitize
      '';
    };
  }) {};

  up-to-date = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Up-To-Date";
    plugname = "Up To Date";
    plugid = "uptodate";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11366/52429/UpToDate.jar";
      sha256 = "1n4cvg84k05pkscn990bmx6rqbc1pkc7l1qdf9vg6a4va0h6z83p";
      name = "Up-To-Date-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Vassiliy-Kudryashov/KotlinPYPL/blob/master/resources/META-INF/license.txt";
        free = false;
      };
      description = ''
        Periodically updates and builds project while you are away.
      Every N minutes Update Project or Build Project is called if you're away for M minutes.
      By default N is 30 and M is 15.
      You can tune the plugin in Help -&gt; Edit Custom VM Options and add -Duptodate.period=N or -Duptodate.away.limit=M
      '';
    };
  }) {};

  upperlowercapitalize = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "UpperLowerCapitalize";
    plugname = "UpperLowerCapitalize";
    plugid = "UpperLowerCapitalize";
    version = "0.1.1q";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/183/853/UpperLowerCapitalize_853.jar";
      sha256 = "142w8h7d6pysdf99159sddzb8rhfimzbf3jhm1zxdxjs3xvsyq52";
      name = "UpperLowerCapitalize-0.1.1q.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Editor actions to UpperCase, LowerCase, Capitalize or invert the case of
        characters in a word or selection with a behavior similar to Emacs'
        upcase-region-or-word, downcase-region-or-word and capitalize-region-or-word.

        If the cursor is not on a word, the next word following the cursor is
        considered (even on another line). If the cursor is in the middle of a
        word, only the part following the cursor is transformed. In any case,
        the cursor is moved after the transformed word.

        Actions can be found under Editor Actions and are by default bound to
        Alt-C (Capitalize), Alt-L (Lowercase), Alt-P (Uppercase). The ToggleCase
        action is unbound.
      '';
    };
  }) {};

  upsource-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Upsource-Integration";
    plugname = "Upsource Integration";
    plugid = "com.jetbrains.upsource";
    version = "2020.1.1865.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7431/106383/upsource-idea-plugin-trunk.zip";
      sha256 = "13gj8ixbb61mb91138fv4dy1lvvq6pkicj6lc5xj3q5dl1rz536l";
      name = "Upsource-Integration-2020.1.1865.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Integration with JetBrains Upsource
    Note: If you want to have access to the most recent bug fixes and features of the plugin, you can install it from the alpha channel.
    To do so please add the following custom plugin repository:
    https://plugins.jetbrains.com/plugins/alpha/7431
      '';
    };
  }) {};

  useful-actions = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Useful-actions";
    plugname = "Useful actions";
    plugid = "UsefulActions";
    version = "2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6844/98932/UsefulActions.jar";
      sha256 = "155zpf3352sxfkni96lkyscxc0wwfmbi2gdyma7cnlyc0xdyxilh";
      name = "Useful-actions-2.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/UsefulActions";
      license = lib.licenses.asl20;
      description = ''
        Contains following actions: 
         - Quick switch for turning on/off proxy
         - Tools | Add dependant bundled plugins to IntelliJ Platform Plugin SDK
         - Tools | Add all bundled plugins to IntelliJ Platform Plugin SDK
      '';
    };
  }) {};

  utils = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Utils";
    plugname = "Utils";
    plugid = "com.wkp.utils";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9898/41992/Utils.jar";
      sha256 = "0j6nhf9vnjsdp0wyzdy3wzxnkfch8ihkbvhfr8ysnzd6f2asy86h";
      name = "Utils-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wkp111";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wkp111";
        free = false;
      };
      description = ''
        Plugin to general some utils class.
      '';
    };
  }) {};

  v-desk = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "V.Desk";
    plugname = "V.Desk!";
    plugid = "org.pmesmeur.vdesk";
    version = "0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11143/50686/vdesk.jar";
      sha256 = "1rqrkpn9l0gndsc4adgif62yagj77gy8lqqwiy2bwslbp7fppxr7";
      name = "V.Desk-0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/pmesmeur/vdesk";
      license = lib.licenses.gpl3Only;
      description = ''
        V.Desk!
      

      V.Desk@bitbucket.org |
      V.Desk@jetbrains.com |
      Author |
      Donate with PayPal
      
      

      V.Desk! enables its user to sort and organize opened files on virtual-desks (such as most of the window managers do with virtual desktops)
      
      
      Using V.Desk! your workspace is now not only organized by tabs but also by virtual-desks: as a consequence, your worksspace is cleaner and files are easier to find
      
      
      By allowing you to better organize your workspace, V.Desk! increases your efficiency and thus your productivity
      
      

      Usage
      
        Once V.Desk! is installed is restarted, nothing special happens... but now, it's possible to switch virtual desktop using shortcuts "crtl+alt+shift+left",  "crtl+alt+shift+right", "crtl+alt+shift+top", "crtl+alt+shift+bottom" or via the V.Desk! sub-menu of the View menu.
      
      


      Features
      
        Open files in virtual desk
        Switch virtual desk via keyboard shortcuts and menu
        When changing virtual desk, do not reopen file if it was deleted
        After switching, display above the status-bar a message indicating the id of the new desktop
        Add shortcuts to go directly to particular desk
        Save and restore tab organization while switching desk
      


      Limitation / Forcasted Features
      
        Dynamically change the number of virtual desk
        Move an editor for a virtual desk to another
        After changing, restore the "order" in which windows where openned last time this virtual desk was active
      '';
    };
  }) {};

  vclvarnish-language = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "VCLVarnish-language";
    plugname = "VCL/Varnish language";
    plugid = "rocks.blackcat.vcl";
    version = "0.7.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10135/52832/varnish_jetbrains_plugin.zip";
      sha256 = "1izll9zc301wy163aijq3xr62a0nx61pp5fm3masp1sa9dv3v26c";
      name = "VCLVarnish-language-0.7.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blackcat.rocks";
      license = lib.licenses.asl20;
      description = ''
        Support for the Varnish Configuration Language
      '';
    };
  }) {};

  vcs-annotations-preloader = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "VCS-Annotations-Preloader";
    plugname = "VCS Annotations Preloader";
    plugid = "com.jetbrains.annotations.preloader";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8514/27458/preloader.jar";
      sha256 = "1fa27jnm685lzlp9wcsz82kj3vlg9c8qimmfia0w7ydfzpg17vw0";
      name = "VCS-Annotations-Preloader-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jetbrains.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.jetbrains.com";
        free = false;
      };
      description = ''
        Git, SVN, Mercurial, and other VCS plugins provide the 
Annotate action that displays the last revision and user id for every line of the currently edited file, so you can easily see where this or that code came from. Sometimes this action takes a significant amount of time to run because the IDE has to load and process a lot of data from VCS. This plugin speeds this process up by preloading and caching the data required to run the Annotate action when you open a file. So if you're using the Annotate action often, the plugin is surely worth checking out.
      '';
    };
  }) {};

  vcs-kotlin-converter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "VCS-Kotlin-Converter";
    plugname = "VCS Kotlin Converter";
    plugid = "fr.dco.kotlin.vcs-kotlin-converter";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10862/60655/vcs-kotlin-converter-1.2.zip";
      sha256 = "10zq0zvfqrpvdkk4ag5gwhpzmqi20k9xvl9a67f8di75q4zf01cj";
      name = "VCS-Kotlin-Converter-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://denis-colliot.github.io";
      license = lib.licenses.asl20;
      description = ''
        This IntelliJ IDEA plugin runs the native Convert Java File To Kotlin File action and preserves files
    VCS history by committing the rename step in VCS (most likely git).

    If you use IntelliJ IDEA builtin git support, recent versions of the IDE now provide this feature natively in the
    commit dialog. Unfortunately, this native feature is not present in Android Studio.
      '';
    };
  }) {};

  vcs-watch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "VCS-watch";
    plugname = "VCS watch";
    plugid = "mobi.hsz.idea.vcswatch";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7790/19821/idea-vcswatch.zip";
      sha256 = "15jbmmb39jkmafy4vjdgrqxmcqp0k2z5kcayhqh78q2zkmp8sr7f";
      name = "VCS-watch-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hsz/idea-vcswatch";
      license = lib.licenses.mit;
      description = ''
        VCS watch 
 
GitHub | 
Issues | Donate ( 
PayPal or 
BTC ) 
 
 
VCS watch is a plugin that periodically checks for any changes in the current project's repositories. 
 
Features 
 
 Support GIT repositories 
 Support SVN repositories 
 Support Mercurial repositories 
 
 
 
Feature requests 
 
 Exclude project repositories from watching 
 Specify watch interval 
 
 
 
Compiled with Java 1.6
      '';
    };
  }) {};

  vdoc-intellij-tools = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "VDoc-intellij-tools";
    plugname = "VDoc intellij tools";
    plugid = "com.vdoc.intellij";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9726/39372/intellij-vdoc-plugin.jar";
      sha256 = "02l92073vy2vvrhnmavr99fkhw53hfgjk8gq7srb81hn5py80kzd";
      name = "VDoc-intellij-tools-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.visiativ.com/";
      license = lib.licenses.gpl3Only;
      description = ''
        Provides a run configuration for moovapps-process
      Provides postfix templates for moovapps-process development
      '';
    };
  }) {};

  vipenor-boilerplate-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "VIPEnoR-Boilerplate-Generator";
    plugname = "VIPEnoR Boilerplate Generator";
    plugid = "com.plugin101.demo.vipergenerator";
    version = "1.0805.1000";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11001/48564/plugin-101-viper-generator_1.0805.1000.jar";
      sha256 = "0lrkc80dyqy2vxsks8408m37yxd1a16qcgsacagm68mm0zvra675";
      name = "VIPEnoR-Boilerplate-Generator-1.0805.1000.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.whatever.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        Generate boilerplate code for gang of 4 and unittest classes following VIPEnoR pattern.
    P.S: VIPEnoR makes life easier, but it takes time.
    P.P.S: Don't be worried, we have nothing but time :))
    Warning: For Internal Use Only! We can't afford an account for publishing plugin.
      '';
    };
  }) {};

  vitrum = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "VITRuM";
    plugname = "VITRuM";
    plugid = "it.unisa.vitrum";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14160/84157/TestFactorsPlugin.zip";
      sha256 = "16pi9777v5g4i87q88yl5mqhg8ww2fk08xmb2jmldbd80j3j79wl";
      name = "VITRuM-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.sesa.unisa.it/";
      license = lib.licenses.mit;
      description = ''
        Plugin that calculates and visualize certain Test-Related Factors of a Java project.
      '';
    };
  }) {};

  vred-py = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "VRED-Py";
    plugname = "VRED-Py";
    plugid = "de.chr33z.pycharm-vred-py";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14352/87296/pycharm-vred-py-0.1.1.zip";
      sha256 = "11gvlxqlxj4nrl36c11b491nrjf73kv00j48z9d7ns4k1vcazgiq";
      name = "VRED-Py-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chr33z";
      license = lib.licenses.mit;
      description = ''
        PyCharm Tools for Autodesk VRED
      Adds autocomplete, documentation and type hinting support for the Autodesk VRED API 2021
      Features
      
        Autocomplete for VRED API v1 and v2
        Documentation for VRED API v1 and v2
        Type hints for VRED API v2
      
      
      This plugin is still under development and marked as 'alpha'. If you have any issues please let the developer know! Email me under: chr33z@gmail.com
      '';
    };
  }) {};

  vscode-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "VSCode-Keymap";
    plugname = "VSCode Keymap";
    plugid = "com.intellij.plugins.vscodekeymap";
    version = "202.5428.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12062/88705/VSCodeKeymap.zip";
      sha256 = "05vicgxnylhvg53rhkphr0w3mhqa2n5qavhal0s5csjn64y1bmi9";
      name = "VSCode-Keymap-202.5428.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bulenkov/VSCodeKeymap4IntelliJ";
      license = lib.licenses.asl20;
      description = ''
        VSCode keymap for all IntelliJ-based IDEs.
    Use this plugin if VSCode keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  vaadin-designer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Vaadin-Designer";
    plugname = "Vaadin Designer";
    plugid = "com.vaadin.designer2.intellij";
    version = "4.6.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9519/107929/vaadin-designer2-intellij-4.6.2.zip";
      sha256 = "0zbxl8iymxfpah2fqavhdn91wlhi1qan49bpzk27rfybycxrn4pr";
      name = "Vaadin-Designer-4.6.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://vaadin.com/designer";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://vaadin.com/license/cval-3";
        free = false;
      };
      description = ''
        Vaadin Designer allows you to visually design user interfaces for your Vaadin applications.
        It creates a file with your design and helps with the integration to your Vaadin UI.
        Vaadin Designer enables fast collaboration between designers and developers.

        This version of Vaadin Designer supports designing for the Vaadin platform.
        In addition, Vaadin Framework 8 is also supported.

        Vaadin Designer is a commercial tool and requires a subscription to be used.
        A free trial is available.

        Documentation and tutorials can be found on our site:
        
          Vaadin platform
          Vaadin 8
      '';
    };
  }) {};

  vaadin-designer-for-framework-7 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Vaadin-Designer-for-Framework-7";
    plugname = "Vaadin Designer for Framework 7";
    plugid = "com.vaadin.designer.intellij";
    version = "1.4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8621/39158/vaadin-designer-intellij-1.4.4.zip";
      sha256 = "0lnpwxdcbs92i4w4m9kfb8fa21kj0334a7vm932rncxp6y05rp3q";
      name = "Vaadin-Designer-for-Framework-7-1.4.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://vaadin.com/designer";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://vaadin.com/license/cval-3";
        free = false;
      };
      description = ''
        Vaadin Designer allows you to visually design user interfaces for your Vaadin applications using direct manipulation (WYSIWYG). It creates a declarative file with your UI design, and the Java needed to easily integrate it into your application. Vaadin Designer will speed up your layouting work, leaving more time to work on the logic.
      '';
    };
  }) {};

  validation-file-comparison = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Validation-File-Comparison";
    plugname = "Validation-File Comparison";
    plugid = "de.cronn.validation-files-diff";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12931/74054/validation-files-diff-1.2.jar";
      sha256 = "0ba8bg6mrfs77s181hxjpslf8yf0sdxhyziqqlq4f5a5z4xmzp1a";
      name = "Validation-File-Comparison-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.cronn.de";
      license = lib.licenses.asl20;
      description = ''
        Plugin on GitHub |
        Cronn GmbH Website
        
        
        This plugin enables you to open the built-in Intellij-IDEA diff-viewer to compare validation- and output-files in the current project or module using a configurable keyboard shortcut.
      '';
    };
  }) {};

  vant-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Vant-Plugin";
    plugname = "Vant Plugin";
    plugid = "com.rickykurt.plugin.vant";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11148/67202/VantPlugin.zip";
      sha256 = "1z1v08qljczn36g1p6g6kjb1f4710qi4l8qkr1h182nazvmwc6dy";
      name = "Vant-Plugin-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Rickykurt/VantPlugin";
      license = lib.licenses.asl20;
      description = ''
        support for vant ui framework, before use this plugin, you must install plugin vuejs
      '';
    };
  }) {};

  variable-history-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Variable-History-Viewer";
    plugname = "Variable History Viewer";
    plugid = "Variable-History-Viewer";
    version = "1.78";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15012/96601/variable-history-plugin.zip";
      sha256 = "038kbyjrvv1fmjvm30xik8vkjl4yysbsk6wg8v99jbvvnxhny1n2";
      name = "Variable-History-Viewer-1.78.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/csabagabor";
      license = lib.licenses.gpl3Only;
      description = ''
        Important: it only works with JDK 8 or higher

This plugin lets you view previous values of variables and the complete stack traces when they were set

Manual (Help):

Just use the new RED debug runner which has a yellow arrow around it. When a breakpoint is hit, right click on the field of a class you want to inspect
and then choose -&gt; See Variable History.... If no variable history has been saved for that field, an error message will pop up, else several tabs(max 3) will open up
showing the history of the variable. On the left hand side you can navigate the stack trace.

Notes:

History is only included for fields and not local variables (the purpose of the plugin is to know where fields have been set - local variables have a narrow scope
so it makes no sense to track them).
For performance and memory usage reasons, variable history is only included for primitive fields(int, long, char etc.) and their boxed types(Integer, Long, Character etc.)
and for String. For other types, stack traces are still included so you know where the variable has been set the last time.



Why to use it:



    Makes debugging a lot easier. Have you ever wondered what was the last value of a certain field before it was set?
    
    Have you ever wondered where the value of a field came from (who set that value)?
    


Limitations:
Execution overhead is very small (2-3%), but memory consumption can be +40-50%.


Credits:
IntelliJ IDEA Code Coverage Agent: https://github.com/JetBrains/intellij-coverage

Guava: https://github.com/google/guava
      '';
    };
  }) {};

  vcs-auto-updategit-auto-pull = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Vcs-Auto-UpdateGit-Auto-Pull";
    plugname = "Vcs Auto Update(Git Auto Pull)";
    plugid = "com.wang.vcs";
    version = "1.5.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15132/108026/VcsAutoUpdate.jar";
      sha256 = "1hz1f17l7dxn0v05ikljla16lskwgld0khbby52viqd6yvrx5fkz";
      name = "Vcs-Auto-UpdateGit-Auto-Pull-1.5.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/weimingjue";
      license = lib.licenses.asl20;
      description = ''
        English | 中文文档
    
    Automatically invoke the "Update Project" (equivalent to "git pull") plugin
    
    Pain points of multi-person git development:
    
    &nbsp;&nbsp;&nbsp;&nbsp;1. Need to pull frequently;
    
    &nbsp;&nbsp;&nbsp;&nbsp;2. Commit before pulling;
    
    &nbsp;&nbsp;&nbsp;&nbsp;3. Every time there is a change, a "merge" record will be generated (multiple "merge" will generate a tedious "merge" of "merge");
    
    &nbsp;&nbsp;&nbsp;&nbsp;
    
    &nbsp;&nbsp;&nbsp;&nbsp;4. After operating the same file, you need to resolve the conflict (maybe you just added a space).
    
    
    First of all: "Vcs&gt; Update Project" powerful not say any more, so we just need to:
    
    &nbsp;&nbsp;&nbsp;&nbsp;1. Every time you commit (ctrl+k), commit push (ctrl+alt+k), "update project" will be called first;
    
    &nbsp;&nbsp;&nbsp;&nbsp;2. "Update project" will be called every 5 minutes.
    
    &nbsp;&nbsp;&nbsp;&nbsp;(Update will not be repeated within 30 seconds)
    
    Thus was born this plugin,so the standard operation for submitting using git is: first ctrl+k&gt; then ctrl+alt+k&gt; finally alt+p
    
    
    Currently, it can only be adapted to 2019.3 and later versions (Android Studio is 3.6).
    
    
    
    自动调用“Update Project”（相当于“git pull”）的插件
    
    多人git开发的痛点：
    
    &nbsp;&nbsp;&nbsp;&nbsp;1.需要频繁pull；
    
    &nbsp;&nbsp;&nbsp;&nbsp;2.pull之前必须commit；
    
    &nbsp;&nbsp;&nbsp;&nbsp;3.每次有变动都会产生“merge”记录（多次“merge”会产生繁琐的“merge”的“merge”）；
    
    &nbsp;&nbsp;&nbsp;&nbsp;
    
    &nbsp;&nbsp;&nbsp;&nbsp;4.操作了同一文件还需要解决冲突（也许你仅仅是加了个空格而已）。
    
    
    首先：“Vcs&gt;Update Project”的强大就不再多说了，所以我们只需要：
    
    &nbsp;&nbsp;&nbsp;&nbsp;1.每次在commit(ctrl+k)、commit push(ctrl+alt+k)时会先调用“update project”一下；
    
    &nbsp;&nbsp;&nbsp;&nbsp;2.每隔5分钟会调用“update project”一下。
    
    &nbsp;&nbsp;&nbsp;&nbsp;（30秒内不会重复update）
    
    至此本插件诞生了，所以使用git提交的标准姿势为（提交三连）：首先ctrl+k&gt;然后ctrl+alt+k&gt;最后alt+p
    
    
    目前只能适配到2019.3及以后的版本（Android Studio为3.6）。
    
    关键词：project git svn subversion commit pull push merge smart refresh code
      '';
    };
  }) {};

  vector-drawable-thumbnails = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Vector-Drawable-Thumbnails";
    plugname = "Vector Drawable Thumbnails";
    plugid = "ignaciotcrespo.github.com.vector-drawable-thumbnails";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10741/45957/Vector_Drawable_Thumbnails.zip";
      sha256 = "1wbqcn3ry56lkvnd4x7zcsgsjpbr7bii3nmlycxwh5lisp3590md";
      name = "Vector-Drawable-Thumbnails-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ignaciotcrespo";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ignaciotcrespo";
        free = false;
      };
      description = ''
        Display all android vector drawables in the entire project 
Click on the thumbnail to open the xml file
      '';
    };
  }) {};

  vector-icon-pack = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Vector-Icon-Pack";
    plugname = "Vector Icon Pack";
    plugid = "cn.robin.vectorIconPack";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7747/47714/VectorIconsPack.zip";
      sha256 = "1im08yc6rwy9xazxkki1nfyi28mff66hx194r0v1m6rygw7v8ddy";
      name = "Vector-Icon-Pack-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/OuYuBin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "epl-2.0";
        free = false;
      };
      description = ''
        IDE using vector icons,such as Awesome etc.Provided extension point for custom icons.
      '';
    };
  }) {};

  vectorpathtweaker = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "VectorPathTweaker";
    plugname = "VectorPathTweaker";
    plugid = "com.knziha.vectorpathtweaker";
    version = "1.9.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13942/99126/VectorPathTweaker.jar";
      sha256 = "1gly83dcx9i5jaxgkimjga4a0h3y33f90h775w8nfixc9r31pylz";
      name = "VectorPathTweaker-1.9.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/KnIfER/AndroidVectorPathTweaker";
      license = lib.licenses.asl20;
      description = ''
        Too lazy to become an artist who needs to paint? Let's make combinations of android's default vector assets! 
      Flip, translate, and transpose the icons, you will never find it so easy! 
      1. Open one xml vector drawable.
      2. Select the part of pathData that you want to modify.
      3. Right click. In the context menu choose 'Tweak Vector Path'.
      4. Make sure you have 'standard' path data. (every two coordinates must be paired by ',').
      5. Open AndroidStudio's Preview Panel and adjust the vector to your need！.
      '';
    };
  }) {};

  veracode-greenlight = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Veracode-Greenlight";
    plugname = "Veracode Greenlight";
    plugid = "com.veracode.greenlight.intellij.plugin.id";
    version = "1.5.5.202012030448-RELEASE";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10026/104496/com.veracode.greenlight.intellij-idea-ide-1.5.5.202012030448-RELEASE.zip";
      sha256 = "1ib6zi2ys0qry7ncmzf2qv91v394hbhss4r06jp5j8ss3razj0v6";
      name = "Veracode-Greenlight-1.5.5.202012030448-RELEASE.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.veracode.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.veracode.com/terms-use-veracode-integrations-and-plug-ins";
        free = false;
      };
      description = ''
        Veracode Greenlight finds security defects in your code and provides contextual remediation advice to help you
      fix issues in seconds, right in your IntelliJ IDEA or Android Studio IDE. With Veracode Greenlight, find issues early, reduce development
      and remediation costs, and deploy quality code on your timeline.
      Using the Veracode Greenlight Plugin
      Go to the Veracode Help Center for more information.
      If you have any questions or need assistance at any time, please contact your Veracode Program Manager or support@veracode.com
      
      License Information
      FOR TERMS OF USE OF VERACODE INTEGRATIONS AND PLUGINS, REFER TO 
      http://www.veracode.com/terms-use-veracode-integrations-and-plug-ins
      '';
    };
  }) {};

  verilog-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Verilog-support";
    plugname = "Verilog support";
    plugid = "com.verilang";
    version = "0.1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10612/52643/verilog-plugin-v0.1.8.zip";
      sha256 = "1p1in2bpl3j0n6kxsb497gl0l4v54vf5sxbg421h0yqgghr53w3a";
      name = "Verilog-support-0.1.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/MrTsepa/jetbrains-verilog-plugin";
      license = lib.licenses.mit;
      description = ''
        The Verilog plugin provide support of Verilog language
        in your project. It currently supports Verilog2001
        syntax highlighting, "Go to definition", code completion.

        At the moment this plugin DOES NOT support building
        or visualizing verilog programs, it will be done in future
        using some open-source verilog compilator, e.g. iVerilog.

        This plugin is build using ANTLR grammar and is based on
        antlr-jetbrains adapter https://github.com/antlr/jetbrains.
      '';
    };
  }) {};

  versionone-task-provider = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "VersionOne-task-provider";
    plugname = "VersionOne task provider";
    plugid = "VersionOne";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7963/21552/VersionOne.zip";
      sha256 = "1rai8r9fr5d8lazdajxfnxdnhqyhw9y14hlj070id7kn5psdglcj";
      name = "VersionOne-task-provider-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/psafarov/intellij-version-one-task-provider";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/psafarov/intellij-version-one-task-provider";
        free = false;
      };
      description = ''
        Task provider for Version One platform
      '';
    };
  }) {};

  vertical-align = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Vertical-Align";
    plugname = "Vertical Align";
    plugid = "com.xobotun.idea.VerticalAlign";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13382/76195/VerticalAlign-1.0.2.jar";
      sha256 = "05mia583626yp079a1k8zl0x6mvd4m8dz8hqvzdca0xa3frsdx2r";
      name = "Vertical-Align-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://xobotun.com";
      license = lib.licenses.mit;
      description = ''
        Allows you to indent multiplie cursors with spaces.
    Create a multicursor, press `Alt+Shift+T` and cursors will be aligned with the rightmost one.
      '';
    };
  }) {};

  vet = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Vet";
    plugname = "Vet";
    plugid = "com.cosium.vet.vet-intellij-plugin";
    version = "2.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10748/66063/Vet-2.9.zip";
      sha256 = "0qzzn9dqw58nd234rw42b7l0z5a3759xh6bq9wgj4n0z3rbjbnfl";
      name = "Vet-2.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Cosium/vet-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        Vet is a Gerrit client using pull request workflow.
      '';
    };
  }) {};

  view-package-versions = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "View-Package-Versions";
    plugname = "View Package Versions";
    plugid = "cn.alanhe.plugin.viewPackageVersions";
    version = "1.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13748/80821/view-package-versions.jar";
      sha256 = "0q15jw2aa87shdag2bqqs1bv7hywi4qnvf1rwg62w9602y6q70hz";
      name = "View-Package-Versions-1.2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alanhg/view-package-versions";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/alanhg/view-package-versions";
        free = false;
      };
      description = ''
        View all the versons of a node module.
      '';
    };
  }) {};

  viewer-for-idea-log-files = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Viewer-for-idea.log-files";
    plugname = "Viewer for idea.log files";
    plugid = "IdeaLogViewer";
    version = "1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11526/53877/IdeaLogViewer.jar";
      sha256 = "0jqxiw4k3872lz7i2hp3a6j6nlxcqprql1si8qgdrlrn8i5liqcj";
      name = "Viewer-for-idea.log-files-1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Highlighting and Structure View for idea.log files.
        Short key alt + shift + L to open idea.log file
      '';
    };
  }) {};

  virtual-folder-folding = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Virtual-Folder-Folding";
    plugname = "Virtual Folder Folding";
    plugid = "uk.org.oliveira.virtual_folder_folding";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14998/108111/virtual_folder_folding-1.0.2.zip";
      sha256 = "0vabgxzfy1kfi3hfd01k0hyc9daxnyqj90wknfbcrcsncavghi4l";
      name = "Virtual-Folder-Folding-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.oliveira.org.uk";
      license = lib.licenses.mit;
      description = ''
        A virtual folder folding plugin for any application!
    Simple setup the path on the settings page.

    This is an extensions to original Angular Component Folding
      '';
    };
  }) {};

  visiblefortesting = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "VisibleForTesting";
    plugname = "VisibleForTesting";
    plugid = "VisibleForTesting";
    version = "1.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9952/64905/idea-visiblefortesting-1.4.0.zip";
      sha256 = "1wwk4lck1lq2h2wrwijyav6zwna5k0qhsnfxcwrggv4bakpc428d";
      name = "VisibleForTesting-1.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/trubitsyn/idea-visiblefortesting";
      license = lib.licenses.asl20;
      description = ''
        @VisibleForTesting annotation support for the IntelliJ platform.
        Motivation
        It’s time-consuming to annotate existing non-public methods: you have to remove modifiers and type the annotation manually.
        Now you don’t have to: plugin will do that for you.
        Supported annotation types
        
            android.support.annotation.VisibleForTesting
            com.google.common.annotations.VisibleForTesting
            org.apache.flink.annotation.VisibleForTesting
            org.assertj.core.util.VisibleForTesting
            org.fest.util.VisibleForTesting
        
        Prerequisites
        The desired annotation type must be accessible in order for intention actions to be shown.
        android.support.annotation
        Annotation elements are available since Support Library 25.0.0 and won’t be generated by the plugin when using older versions.
        Features
        Supported programming languages: Java, Kotlin. Please note: Java methods cannot be annotated from Kotlin and vice-versa yet.
        Choose from multiple annotation types to import
        
        Annotate method (or Kotlin function in a class, object or file)
        android.support.annotation
        
        com.google.common.annotations
        
        Annotate Kotlin or Java class methods
        android.support.annotation
        
        com.google.common.annotations
        
        Annotate Java method or Kotlin function from test
        android.support.annotation
        
        com.google.common.annotations
      '';
    };
  }) {};

  visual-assist-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Visual-Assist-Keymap";
    plugname = "Visual Assist Keymap";
    plugid = "com.intellij.plugins.visualassistkeymap";
    version = "202.5428.22";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14054/88704/VisualAssistKeymap.zip";
      sha256 = "0br8jdad3d9dihjnanbh9jxilxrd6qf9jvh460zlljgwpvwv6jp4";
      name = "Visual-Assist-Keymap-202.5428.22.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Visual Assist keymap for all IntelliJ-based IDEs.
    Use this plugin if Visual Assist keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  visual-paradigm-sde-for-intellij-idea-community-edition = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Visual-Paradigm-SDE-for-IntelliJ-IDEA-Community-Edition";
    plugname = "Visual Paradigm SDE for IntelliJ IDEA (Community Edition)";
    plugid = "Visual Paradigm SDE for IntelliJ IDEA (Community Edition)";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/245/1149/Visual_Paradigm_SDE_for_IntelliJ_IDEA_(Community_Edition)_1149.jar";
      sha256 = "1a4fh0p078r00i1wddjqvv2jjbis8z2qdhxhnhgczn8f7r3jynkj";
      name = "Visual-Paradigm-SDE-for-IntelliJ-IDEA-Community-Edition-2.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.visual-paradigm.com/features/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.visual-paradigm.com/product/licenseagreement.jsp?product=vp&edition=ce";
        free = false;
      };
      description = ''
        The latest release from Visual Paradigm, the Smart Development Environment (SDE) 2.0 for IntelliJ IDEA, is now available and well-tested in platforms including Linux, Windows and Java Desktop. SDE 2.0 for IntelliJ is a plug-in of IntelliJ IDEA for model-driven development with Unified Model Language (UML). Visual Paradigm embeds itself to IntelliJ IDEA to provide a unified modeling and development environment, dramatically increase the speed of requirement capturing, analysis, design, development, testing and deployment for software architects, analyst, designer and developers using IntelliJ IDEA.
		Here are the main features:
		
			Full Unified Modeling Language (UML) 2.0 diagrams and notations support
			Reverse Engineering UML Diagram from source code
			Code generation from Class Diagram
		
		Free evaluation is available from http://www.visual-paradigm.com/sdeij.php
      '';
    };
  }) {};

  visual-sourcesafe-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Visual-SourceSafe-Integration";
    plugname = "Visual SourceSafe Integration";
    plugid = "SourceSafe";
    version = "182.2258";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7707/45708/VSSIntegration.jar";
      sha256 = "0si6x0z618zasbrx9bj2qah24rqxxbsiicflj6bkk6dzszxz67s3";
      name = "Visual-SourceSafe-Integration-182.2258.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/vss";
      license = lib.licenses.asl20;
      description = ''
        Visual SourceSafe is a file-level version control system. This integration allows using Visual SourceSafe from within the product, making even refactoring consequences transparent for the user. The following features are available: 
 
 Dedicated page under the Version Control node in the Settings/Preferences dialog. 
 Implementing the most frequently needed commands (Open Source Safe Explorer, Check In/Out, Add, Undo Checkout, Get Latest Version); Next, Previous, Rollback, Old text actions are available from the dedicated gutter bar in changed locations.
      '';
    };
  }) {};

  visual-studio-2019-dark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Visual-Studio-2019-Dark-Theme";
    plugname = "Visual Studio 2019 Dark Theme";
    plugid = "com.gmike.visual-studio-2019-dark";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14965/96817/Visual-Studio-2019-Dark-Theme.jar";
      sha256 = "1jhki8c5aava2amvzx6smhssm866gjjx8xnr1c1373qcms5fmryv";
      name = "Visual-Studio-2019-Dark-Theme-1.3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/RomanSoloweow";
      license = lib.licenses.mit;
      description = ''
        A dark theme for JetBrains IDEs inspired by default Visual Studio  2019 "Dark" theme.
    It's may be useful for those who are just starting to use JetBrains products and are used to Visual Studio.
      '';
    };
  }) {};

  visual-studio-code-dark-plus-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Visual-Studio-Code-Dark-Plus-Theme";
    plugname = "Visual Studio Code Dark Plus Theme";
    plugid = "com.samdark.intellij-visual-studio-code-dark-plus";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12255/97410/intellij-visual-studio-code-dark-plus.jar";
      sha256 = "1prgynqgww0hk0d3mhqhfa0j4w8lry5kda9vj94y4q3d1zv5b6q9";
      name = "Visual-Studio-Code-Dark-Plus-Theme-2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://rmcreative.ru";
      license = lib.licenses.bsd3;
      description = ''
        A dark theme for JetBrains IDEs inspired by default Visual Studio Code "Dark Plus" theme
      '';
    };
  }) {};

  visual-studio-code-monokai-hc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Visual-Studio-Code-Monokai-HC";
    plugname = "Visual Studio Code Monokai HC";
    plugid = "com.dt.theme.vs";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14953/95638/VsCodeMonkaiHC.jar";
      sha256 = "1d3c1aaq9swsv7mhavs2mc61h2b1vlzxg9n24c866l7aff1pb478";
      name = "Visual-Studio-Code-Monokai-HC-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/izdt";
      license = lib.licenses.mit;
      description = ''
        A dark theme for JetBrains IDEs inspired by Visual Studio Code "Monokai Theme in High Contrast themes"
      '';
    };
  }) {};

  visual-studio-dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Visual-Studio-Dark-Color-Scheme";
    plugname = "Visual Studio Dark Color Scheme";
    plugid = "color.scheme.Visual Studio Dark";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15725/106800/Visual_Studio_Dark.jar";
      sha256 = "0mqiaqsgs9hdia8qvi02s4qsil8xvhgny6c6cnaysd23db6vxqzw";
      name = "Visual-Studio-Dark-Color-Scheme-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ali-sardari";
      license = lib.licenses.asl20;
      description = ''
        Visual Studio Dark Theme
      '';
    };
  }) {};

  visual-studio-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Visual-Studio-Keymap";
    plugname = "Visual Studio Keymap";
    plugid = "com.intellij.plugins.visualstudiokeymap";
    version = "202.5103.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13017/87920/VisualStudioKeymap.zip";
      sha256 = "10jvybrv9c7iaq4arhdf8sqkqsv5zyxlhrl8pwrx4147jk1ccc2g";
      name = "Visual-Studio-Keymap-202.5103.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = lib.licenses.asl20;
      description = ''
        Visual Studio keymap for all IntelliJ-based IDEs.
    Use this plugin if Visual Studio keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  visual-studio-light-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Visual-Studio-Light-Color-Scheme";
    plugname = "Visual Studio Light Color Scheme";
    plugid = "color.scheme.Visual Studio Light";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15724/106849/Visual_Studio_Light.jar";
      sha256 = "00rqdn9rzg6ngnh797xlzjqmn7ynv004xhnmxn3lvmzicwyr13sa";
      name = "Visual-Studio-Light-Color-Scheme-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ali-sardari";
      license = lib.licenses.asl20;
      description = ''
        Visual Studio Light Theme
      '';
    };
  }) {};

  visualgc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "VisualGC";
    plugname = "VisualGC";
    plugid = "com.github.beansoftapp.visualgc.plugin";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14557/93335/visualgc_idea.jar";
      sha256 = "0n56j9cpwdc054bk1r9hgiv268haipidbk0z7kcv6jpv9qqrjnmp";
      name = "VisualGC-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/beansoftapp/visualgc_java8";
      license = lib.licenses.asl20;
      description = ''
        VisualGC for Hotspot JVM
      This plugin displayed a Visual GC tool window in your IDE, only supports HotSpot JVM(JDK 1.5 to OpenJDK 14).
      Usage: 1. From main interface bottom;
      2. From menu Tools &gt; New VisualGC Window.


Chinese Instructions Below:
     在IDEA中显示 VisualGC 工具窗口或打开新窗口, 便于一边运行代码一边观察GC情况. 进支持HotSpot JVM(JDK 1.5 到 OpenJDK 14).
用法:
1) 点击停靠窗口下方的 VisualGC;
2) 打开新的独立运行窗口使用菜单 Tools &gt; New VisualGC Window.
      ISSUES

Submit Suggestions or Bugs
visualgc documents on Oracle.com
      '';
    };
  }) {};

  visualstudio2019dark-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "VisualStudio2019Dark-Color-Scheme";
    plugname = "VisualStudio2019Dark Color Scheme";
    plugid = "color.scheme.VisualStudio2019Dark";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15293/101135/VisualStudio2019Dark.jar";
      sha256 = "0rr4zphdr4b0a87xf1arrqlqpgkw9sv4vjk51w45rn2cqfph92ab";
      name = "VisualStudio2019Dark-Color-Scheme-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Alantoo";
      license = lib.licenses.mit;
      description = ''
        Visual Studio 2019 Dark Theme for Rider and other JetBrains IDE's which looks EXACTLY (as possible) like in Visual Studio.
      '';
    };
  }) {};

  visualvm-launcher = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "VisualVM-Launcher";
    plugname = "VisualVM Launcher";
    plugid = "VisualVMLauncher";
    version = "1.18.201.000.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7115/99783/VisualVMLauncher.jar";
      sha256 = "1x0picdps5s62xqs5n9blrw8xxkrr92i2kjmnlsjbmzvv5hglcma";
      name = "VisualVM-Launcher-1.18.201.000.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/krasa/VisualVMLauncher";
      license = lib.licenses.asl20;
      description = ''
        VisualVM integration.
     Use buttons from the main toolbar to start VisualVM along with executed application,
     or button next to the console window of already started application.
      '';
    };
  }) {};

  viva-bloc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Viva-BLoC";
    plugname = "Viva BLoC";
    plugid = "com.sheepapps.vivabloc.vivabloc";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13901/80097/vivabloc-1.0.zip";
      sha256 = "00iinrgy113gwb7qcxhdczsy4h2bqp409plf33f3gp62kr3szjdx";
      name = "Viva-BLoC-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sheep-apps.com/";
      license = lib.licenses.asl20;
      description = ''
        Android Studio plugin to make Flutter mobile development easier
        
        Simplify Flutter BLoC pattern development

        Features

        Generate BLoC
        To generate files with BLoC classes just choose the "Flutter BLoC" option in selected directory "New..." menu, enter the class name and component type.
        

        Specify project-level settings
        Go to "Settings" -&gt; "Viva BLoC Plugin" to specify default project-level plugin settings (e.g., component type, injector file path).
      '';
    };
  }) {};

  vivo-configure-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Vivo-Configure-Plugin";
    plugname = "Vivo Configure Plugin";
    plugid = "com.vivo.internet_soft_1_2.plugin_base";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10840/47027/PluginBase.jar";
      sha256 = "00x6q9nbqdpvajpj52h7p2xp9jchg7mp3p5m48r27n43dn0p45a0";
      name = "Vivo-Configure-Plugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.vivo.com.cn/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.vivo.com.cn/";
        free = false;
      };
      description = ''
        Vivo Configure Plugin
      '';
    };
  }) {};

  voice-code-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Voice-Code-Idea";
    plugname = "Voice Code Idea";
    plugid = "com.github.anonfunc.vcidea";
    version = "0.0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10504/82792/Voice_Code_IDEA-0.0.11.zip";
      sha256 = "0c4np659rqbcpnzly156l50i9cwvnlqaw9r33z7smqpmzfckxdh9";
      name = "Voice-Code-Idea-0.0.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/anonfunc/intellij-voicecode";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://creativecommons.org/licenses/by/4.0/";
        free = false;
      };
      description = ''
        This plugin adds a small web server which supports a Talon module, but can be used generically as an
    HTTP based RPC driven by any system on the same machine.

    For an example integration, see the author's Talon files.

    Support, if any, provided in the #jetbrains channel of the Talon slack. See the Talon homepage for
    more information about Talon.
      '';
    };
  }) {};

  vue-component-creator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Vue-Component-Creator";
    plugname = "Vue Component Creator";
    plugid = "com.faebeee.vuecomponentcreator";
    version = "2.7.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11443/106680/vue-component-creator-plugin.zip";
      sha256 = "0s0yja2cjj4cgchm0kyh7ipc00yckshmfsfqlhg8k1vla1mwxfv1";
      name = "Vue-Component-Creator-2.7.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://fabs.io";
      license = lib.licenses.mit;
      description = ''
        vue-component-creator
        An Brainstorm Plugin to create single file vue.js components with a Sass file along them and complete vuex modules.
        This plugins does a couple of things in order to simplify your dev experience.
        
        
        Install
        Search for Vue Component Creator in the plugins settings. Or download the plugin from the release site
        
        Customize Templates
        In the settings you can define custom templates to use.
        Read here to learn what the default templates look like
        and what variables are available for your custom templates
        Vue single file component
        Right click in the project tree view where you want to place the new module. Then New File -&gt; Vue Module.
        This will open a dialog to define the module's name. This name is used later
        to name the directory, vue- and sass-file as well as the sass root name, and a root node in the vue file
        with the given name.
        
        Structure
        
          my-module
            
              my-module.vue
              _my-module.scss
            
          
        
        Vuex module
        
        By creating a new Vuex module, a couple of files will be generated.
        Structure
        
          name
            
              actions.js
              index.js
              mutations.js
              state.js
              mutation-types.js (depending whether you set the Mutationstypes File
              getters.js (depending wether you checked Getters File
            
          
        
        Icons
        Icons provided by https://www.iconfinder.com/justicon via https://www.iconfinder.com
      '';
    };
  }) {};

  vue-page = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Vue-Page";
    plugname = "Vue Page";
    plugid = "com.fxiaoke.lizc8407";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14999/96135/webstrom-vue-page-plugin.zip";
      sha256 = "0q073zf8db8vaywdm9v4sncj700b1ncs051005ap8dxixhz0g265";
      name = "Vue-Page-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Create separate VUE component, includes TS and JS versions.
        How to use
        
          right-click on the project folder, select `vue page` or `vue ts page` item in the menu.
          fill in the component name. for example: `hello-world`, then press `enter` key.
        
        
        this will create a folder named `hello-world`, and three files in it :
        for JS version
        
          _hello-world.js
          _hello-world.less
          hello-world.vue
        
        for TS version
        
          hello-world.html
          hello-world.less
          hello-world.vue
      '';
    };
  }) {};

  vuesion-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Vuesion-Theme";
    plugname = "Vuesion Theme";
    plugid = "com.herokuapp.vuesion";
    version = "1.9.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12226/108413/vuesion-theme.jar";
      sha256 = "1bwjhss1irxpvdlys182yx4rxk5b8yb99zzgzqg7na568l3qcc0p";
      name = "Vuesion-Theme-1.9.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://vuesion.herokuapp.com";
      license = lib.licenses.mit;
      description = ''
        Vuesion theme and color scheme for IntelliJ®, Webstorm® and other Jetbrains® IDEs.
    
    Theme and color scheme based on the vuesion project.
      '';
    };
  }) {};

  wdk-view = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WDK-View";
    plugname = "WDK View";
    plugid = "WDK View";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1186/3090/WDK_View_3090.jar";
      sha256 = "17nndl4v6fhysrx38mdlmyrsfqh93j1l0yixpv8j74gc6s28finb";
      name = "WDK-View-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shilohmorris.com/plugin.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.shilohmorris.com/plugin.html";
        free = false;
      };
      description = ''
        Provides the user with a simplified view of WDK components.  Displays all
  the custom WDK components in a tree format, with all related files readily accessible regardless
  of thier physical location.
      '';
    };
  }) {};

  wdl-devtools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "WDL-DevTools";
    plugname = "WDL DevTools";
    plugid = "org.broadinstitute.wdl.devtools";
    version = "0.0.72";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12674/70827/wdl-devtools-0.0.72.zip";
      sha256 = "1dyfh4maiymvx8r09y8z6d0iykv8asrsm4hlxn5rmmad4a7bhc4i";
      name = "WDL-DevTools-0.0.72.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/broadinstitute/wdl-ide";
      license = lib.licenses.bsd3;
      description = ''
        Advanced development tools for Workflow Description Language
      '';
    };
  }) {};

  wsanything = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WSAnything";
    plugname = "WSAnything";
    plugid = "com.mario.WSAnything.plugin";
    version = "2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10818/62222/WSAnything.jar";
      sha256 = "11m2vjanzfsdg7fzd68qgqxf5rk4x199nrygqlkmliw6jim9hjaj";
      name = "WSAnything-2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mario206/WSAnything";
      license = lib.licenses.mit;
      description = ''
        Multi-KeyWord Search Plugin For IntelliJ IDEA
      '';
    };
  }) {};

  waifu-motivator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Waifu-Motivator";
    plugname = "Waifu Motivator";
    plugid = "zd.zero.waifu-motivator-plugin";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13381/101783/waifu-motivator-plugin-1.4.zip";
      sha256 = "0sbmk49avdl4r7h2qq1sdbqymdwmjwg4n6kq8byrnizs4c4j4nrz";
      name = "Waifu-Motivator-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/waifu-motivator/waifu-motivator-plugin";
      license = lib.licenses.mit;
      description = ''
        Waifu Motivator plugin
Simple and open-sourced Jetbrains IDE plugin that your waifu motivates you and helps you work on your coding  challenges.
      '';
    };
  }) {};

  wakatime = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WakaTime";
    plugname = "WakaTime";
    plugid = "com.wakatime.intellij.plugin";
    version = "11.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7425/80067/WakaTime.jar";
      sha256 = "0xls40cxqmll1w503xiaq5jga81qk7jfm4ym0q3ihgwgzy4jk5x0";
      name = "WakaTime-11.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://wakatime.com";
      license = lib.licenses.bsd3;
      description = ''
        Metrics, insights, and time tracking automatically generated from your programming activity.
      
      Installation
      
      1. Inside your IDE, select Preferences -&gt; Plugins -&gt; Browse Repositories....
      
      2. Search for wakatime.
      
      3. Click the green Install Plugin button and confirm the installation.
      
      4. Re-launch your IDE.
      
      5. Enter your api key, then click Save.
      
      6. Use your IDE like you normally do and your time will be tracked for you automatically.
      
      7. Visit https://wakatime.com to see your logged time.
      
      Source Code:  https://github.com/wakatime/jetbrains-wakatime
      '';
    };
  }) {};

  wallaby = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Wallaby";
    plugname = "Wallaby";
    plugid = "wallaby.js";
    version = "1.0.209";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15742/108462/wallaby-intellij-v1.0.209.zip";
      sha256 = "0klpgw4fxkwaqbm7aak5xdxxxmy6g3jl5svdrqy95cpbfvg948mb";
      name = "Wallaby-1.0.209.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://wallabyjs.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/wallabyjs/public/blob/master/EULA.md";
        free = false;
      };
      description = ''
        Wallaby.js is an intelligent test runner for JavaScript that continuously runs your tests. It
        reports code coverage and other results to your code editor immediately as you change your code.
        Wallaby.js uses various tricks to run your tests as fast as possible, such as runtime analysis to only execute tests
         affected by code changes and parallel test execution.
      '';
    };
  }) {};

  wasaby-developer-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Wasaby-Developer-Tools";
    plugname = "Wasaby Developer Tools";
    plugid = "ten.branch_creator";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13326/93098/branch_creator-1.1.2.zip";
      sha256 = "1lzckni1kfv65jpx81xmcl4vv6y0b8qhm47scxkrnhgybqnbxci1";
      name = "Wasaby-Developer-Tools-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://online.sbis.ru/person/aa838224-33cd-46ef-ae12-daacb0dc7041";
      license = lib.licenses.mit;
      description = ''
        Added Added new action. Now you can create Wasaby component + library from context menu.
     Added buttons to fast Create and Checkout branchs by tensorflow notation
    &lt;version&gt;/&lt;bugfix/feature&gt;/&lt;your_text&gt;_&lt;task_id&gt;
    
    version - from "rc-..." branch
    task_id - from clipboard
      '';
    };
  }) {};

  wasptool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "WaspTool";
    plugname = "WaspTool";
    plugid = "WaspTool";
    version = "3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4990/8314/WaspTool_8314.zip";
      sha256 = "0z8ckfz11pz234d0l4pycz3n3kv6fjn40m28ibybrcz88aynklhv";
      name = "WaspTool-3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.codegen.it/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.codegen.it/";
        free = false;
      };
      description = ''
        Wasp Plugin for wasp 5.0
      '';
    };
  }) {};

  wavefront-obj = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Wavefront-OBJ";
    plugname = "Wavefront OBJ";
    plugid = "it.czerwinski.intellij.wavefront";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14843/104399/Wavefront_OBJ-0.1.4.zip";
      sha256 = "0p1wg90hq11b3ik3hyhsh71xhp8p7x7svl5gzrvr59hy97zia9m1";
      name = "Wavefront-OBJ-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sczerwinski/wavefront-obj-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        Adds support for Wavefront OBJ files.

OBJ file format syntax3D preview of OBJ files
      '';
    };
  }) {};

  webassembly-text-format-parser = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WebAssembly-Text-Format-Parser";
    plugname = "WebAssembly Text Format Parser";
    plugid = "com.dherre3.wasm-text-parser";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11409/53004/wasm-text-format-parser-plugin.jar";
      sha256 = "0pbf5jy1vh9ap28k1k1jzc9ga8q1p9z88vqh8i0a0h533aj6ydqn";
      name = "WebAssembly-Text-Format-Parser-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://cs.mcgill.ca/~dherre3";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "isc";
        free = false;
      };
      description = ''
        WebAssembly Text Format IntelliJ Plugin
Plugin to syntax highlight the WebAssembly text format in IntelliJ.
This plugin supports the v1.0.0 of the WebAssembly specification.





 Future Plan

Provide a way to jump between function calls and function definitions.
Provide a syntax highlighting for variables not defined and incorrectly defined modules.
Provide static type checking for the module.

Contributing
Contributions are welcomed via pull-requests.
Licence
      '';
    };
  }) {};

  webmaster = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Webmaster";
    plugname = "Webmaster";
    plugid = "com.strintec.intellij.webmaster";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6983/14988/webmaster.zip";
      sha256 = "1wvppx6j5r7akplk501bg54fnp1dmg707ymvzm67f62zkql8cprb";
      name = "Webmaster-0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Provides some extra features for web-developers (see 'Webmaster' item in 'Tools', Editor popup and Project View popup)
      '';
    };
  }) {};

  webx-link = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Webx-Link";
    plugname = "Webx Link";
    plugid = "com.fishy.plugin.idea.webxlink";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7562/26791/webxlink-1.0.2.jar";
      sha256 = "1bjwq1hw9zzgm6ny2j0kxw1mi2zyry3jp8dqk5x6vflrrjkpl3dm";
      name = "Webx-Link-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://weibo.com/dxkkk";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://weibo.com/dxkkk";
        free = false;
      };
      description = ''
        It's a tool for switch file in IDEA Editor between vm and java files which is called "Screen" or "Control" in Webx Framework. With this plugin, you will find 3 ways to switch files:(shortcut key: ctrl+\) 
1. "WebxLink" action in the "Tools" menu 
2. "WebxLink" action in the sub menu named "Go TO" in the right-click menu 
3. gutter bar icon at the left side of the editor area, if the file is vm/java of "Screen"/"Control". 
And if the file is not "Screen" or "Control", the action will do nothing. 
What's Webx? It's a web framework. see 
http://openwebx.org/ 
 
这个插件的主要目的是提高webx框架的开发效率,将webx的vm和screen/control进行快速切换. 项目启动后, 如果插件已经激活,则将在三个地方出现改变vm和java文件的操作(快捷键为Ctrl+\). 
1. Tools 菜单出现 "WebxLink" 
2. 文本编辑器的右键菜单"Go To"子菜单将出现"WebxLink" 
3. 编辑区的左侧断点显示条上, Screen或者Control的java文件的类名行和vm模板的第一行将有一个可以点击的图标 

什么是Webx框架? 详情请见
http://openwebx.org/
      '';
    };
  }) {};

  weex = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Weex";
    plugname = "Weex";
    plugid = "com.weex.darin";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8460/34640/Weex.zip";
      sha256 = "01dzflzvaf4m0ji0x418pn45m24gs0qr2bdfbvwb9g03pfyj6xjr";
      name = "Weex-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/weexteam/weex-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/weexteam/weex-intellij-plugin";
        free = false;
      };
      description = ''
        Will transform weex file to js automatically 
 Render weex file automatically 
 Support display rendering result on playground or taobao App 
 Support Webstorm, Intellij Idea, Android Studio and so on 
 JavaScript syntax support
      '';
    };
  }) {};

  wei-studio-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Wei-Studio-Tools";
    plugname = "Wei Studio Tools";
    plugid = "name.gudong.plugin.wb-build-config";
    version = "1.7.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10055/108539/WeiStudioTools.zip";
      sha256 = "1kkisp1365lqa16807vql8vpq7pmpsm1g48pncy04ic1845w963k";
      name = "Wei-Studio-Tools-1.7.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.gudong.name";
      license = lib.licenses.mit;
      description = ''
        A collection of tools for AndroidStudio and make some actions simple for Weibo Project.
      Tools list:
      
            gradle.properties file edit tool 
            Upload apk tool
            adb tool 
       
       shot
      '';
    };
  }) {};

  wemi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Wemi";
    plugname = "Wemi";
    plugid = "com.darkyen.wemi.intellij";
    version = "0.16";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12716/106035/WemiForIntelliJ.zip";
      sha256 = "0cfvrb294465xsli9gfx82yiapms5rriillsp6dpmj0flczvidil";
      name = "Wemi-0.16.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Darkyenus";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "mpl-2.0";
        free = false;
      };
      description = ''
        Allows to use Wemi build system from the IDE.

      Features:
      
        Import the project structure to the IDE
        Compile and run using Wemi
        Code completion and syntax highlighting inside build files
        Clickable paths in Wemi's output in Terminal
      '';
    };
  }) {};

  what-the-commit = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "What-The-Commit";
    plugname = "What The Commit";
    plugid = "com.eclectide.intellij.whatthecommit";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7536/97212/what-the-commit.jar";
      sha256 = "12kj1k6m65894kd2bysciji3wwnazqnp2g6dc5s93glppkhhy7ha";
      name = "What-The-Commit-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://darekkay.com";
      license = lib.licenses.mit;
      description = ''
        Integration for whatthecommit.com
    Adds a button to the commit dialog (right above the commit message field), that loads a random commit message.
      '';
    };
  }) {};

  whichactivity-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WhichActivity-Plugin";
    plugname = "WhichActivity Plugin";
    plugid = "com.mikyou.plugin.which_activity";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10084/39398/WhichActivity.jar";
      sha256 = "0hc5np6xbwy1azqyr1qj7f1ckjiyf6dszqh3zng3gkvxmfyl1b6m";
      name = "WhichActivity-Plugin-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shanbay.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.shanbay.com";
        free = false;
      };
      description = ''
        An AndroidStudio plugin of getting an activity name from current app page when adb is active
      '';
    };
  }) {};

  whichname = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "WhichName";
    plugname = "WhichName";
    plugid = "io.github.onlyeat3.which-name";
    version = "1.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15279/104658/which-name-1.1.6.zip";
      sha256 = "16x1bi50hbhmwzzjbyilpfr1j2x6m8ypxnwwmrz46a1avf8xjpqj";
      name = "WhichName-1.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/onlyeat3";
      license = lib.licenses.asl20;
      description = ''
        A code tool to help you generate variable names. 
    Just support Chinese to English
    变量命名工具，快速转换中文为变量名。
    翻译数据来源于互联网大厂对外公开的开发文档，未知词汇使用谷歌翻译
    使用方法:
    
    在线使用
    WhichName
    发现单词未收录怎么办
    卸载插件 ×
    或者发邮件到onlyeat3@gmail.com反馈 √
    恰饭码
      '';
    };
  }) {};

  whitesource-advise-for-intellij-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "WhiteSource-Advise-for-IntelliJ-IDEA";
    plugname = "WhiteSource Advise for IntelliJ IDEA";
    plugid = "org.whitesource.wss-intellij-plugin";
    version = "20.12.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13805/107979/wss-intellij-plugin-20.12.3.zip";
      sha256 = "1ip1d7glgxmd3g95wxyr4vjrzqjnn1v4bk2lp4cjddb2w69886gk";
      name = "WhiteSource-Advise-for-IntelliJ-IDEA-20.12.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.whitesourcesoftware.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.whitesourcesoftware.com/terms-of-service/";
        free = false;
      };
      description = ''
        WhiteSource Advise
        Get the insights you need, when you need them most. The extension provides full visibility over your open source components, real-time security alerts, and actionable remediation insights. The WhiteSource plugin integrates seamlessly into your coding environment without interrupting or delaying your workflow.
        
        You will need to purchase WhiteSource to activate the plugin. If you do not have a WhiteSource account, you can request a free trial here.
        
        Key Benefits
        
        Save time and resources: Detect vulnerabilities early when coding, run security tests before committing your code, and speed-up your development process.
        Get detailed alerts: Each alert provides you with all of the information you need, within your IDE, like the component name, CVE ID, severity score, and more.
        Speed-up remediation: Alerts contain proactive remediation guidance to help developers fix the issues.
        Non-intrusive integration: You control when to scan and receive alerts. The plugin will mark vulnerable packages inside your dependency file, as well as in the Problems or Inspection Results Tool Window.
        
        Getting Started
        After installing the extension, please check out our documentation for more details.
        Supported Languages
        WhiteSource Advise provides support for Java, Kotlin and Scala projects using Maven, and Java projects using Gradle.
        Useful Links
        
        IDE integrations
        Full list of WhiteSource supported integrations
      '';
    };
  }) {};

  whitesource-advise-for-pycharm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "WhiteSource-Advise-for-PyCharm";
    plugname = "WhiteSource Advise for PyCharm";
    plugid = "org.whitesource.wss-pycharm-plugin";
    version = "20.12.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15731/107981/wss-pyCharm-plugin-20.12.3.zip";
      sha256 = "0mnif3xld8igflw0vw4qyyxn6bl56prpz31448fq27l557kzrx94";
      name = "WhiteSource-Advise-for-PyCharm-20.12.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.whitesourcesoftware.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.whitesourcesoftware.com/terms-of-service/";
        free = false;
      };
      description = ''
        WhiteSource Advise
        Get the insights you need, when you need them most. The extension provides full visibility over your open source components, real-time security alerts, and actionable remediation insights. The WhiteSource plugin integrates seamlessly into your coding environment without interrupting or delaying your workflow.
        
        You will need to purchase WhiteSource to activate the plugin. If you do not have a WhiteSource account, you can request a free trial here.
        
        Key Benefits
        
        Save time and resources: Detect vulnerabilities early when coding, run security tests before committing your code, and speed-up your development process.
        Get detailed alerts: Each alert provides you with all of the information you need, within your IDE, like the component name, CVE ID, severity score, and more.
        Speed-up remediation: Alerts contain proactive remediation guidance to help developers fix the issues.
        Non-intrusive integration: You control when to scan and receive alerts. The plugin will mark vulnerable packages inside your dependency file, as well as in the Problems or Inspection Results Tool Window.
        
        Getting Started
        After installing the extension, please check out our documentation for more details.
        Supported Languages
        WhiteSource Advise provides support for Python projects using Pip, Pipenv, or Poetry.
        Useful Links
        
        IDE integrations
        Full list of WhiteSource supported integrations
      '';
    };
  }) {};

  wicketforge = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WicketForge";
    plugname = "WicketForge";
    plugid = "WicketForge";
    version = "5.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1545/24191/wicketforge.jar";
      sha256 = "0smqhllwh6wlih1h43qavkimfganm2pzhf8jzclpy6xcdqiws7rs";
      name = "WicketForge-5.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/minman/wicketforge";
      license = lib.licenses.asl20;
      description = ''
        WicketForge assists developers creating Wicket applications. 
 
See Wiki for features and usage instructions.
      '';
    };
  }) {};

  wicketlambdafold = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "WicketLambdaFold";
    plugname = "WicketLambdaFold";
    plugid = "pro.kondratev.wicketlambdafold";
    version = "0.4.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9444/52614/WicketLambdaModelFold.zip";
      sha256 = "1dsl4p3z2fi766b6afdbwy9gw1hxpcc5nsyqfp9yl9z3zmpac87f";
      name = "WicketLambdaFold-0.4.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/andruhon/WicketLambdaFold";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Folds/Shortens wicket lambda model's getter and setter references.
        So LambdaModel.of(model, Entity::getSomething, Entity::setSomething)
        becomes LambdaModel.of(model, Entity::get/setSomething).

        Usages of PropertyModel highlighted as warnings. Suggests quick fix to replace PropertyModel with LambdaModel (only works with simple properties, chained props coming soon).

        Also adds intentions to create HTML and .properties files for Wicket panels and pages.
        (Subclasses of org.apache.wicket.markup.html.panel.Panel or org.apache.wicket.Page)
      '';
    };
  }) {};

  wide-task-browser = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Wide-Task-Browser";
    plugname = "Wide Task Browser";
    plugid = "wide-task-browser";
    version = "0.1.18";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6803/94620/idea-task-browser-0.1.18.jar";
      sha256 = "0yvfwanmb128zdpayh2q71316a8bk0a717pdhqv5gyciqb1xpwbj";
      name = "Wide-Task-Browser-0.1.18.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ol-loginov/idea-task-browser";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/copyleft/gpl.html";
        free = false;
      };
      description = ''
        Displays complete task list from configured task sources
      '';
    };
  }) {};

  widgetgenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WidgetGenerator";
    plugname = "WidgetGenerator";
    plugid = "com.chenenyu.intellij.widgetgenerator";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12244/66837/WidgetGenerator-intellij.jar";
      sha256 = "1bzzr0ylw35jabss99cqd1gylg3ghm6n9ql1fh0xdwql98kbq15s";
      name = "WidgetGenerator-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Quickly to generate flutter widget.
      Supports both StatefulWidget and StatelessWidget.
      '';
    };
  }) {};

  wills-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Wills-Support";
    plugname = "Wills Support";
    plugid = "com.android.wills.wills";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12088/59834/ASPlugin.jar";
      sha256 = "0xijpq9wq7sbyw412d18k2vx0bdldc8jb9is57dwbhjbbdn9ws11";
      name = "Wills-Support-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Wi1ls";
      license = lib.licenses.asl20;
      description = ''
        supporting to search the string-value int string-file
      '';
    };
  }) {};

  window-decorate-mode-switcher = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Window-Decorate-Mode-Switcher";
    plugname = "Window Decorate Mode Switcher";
    plugid = "by.vkatz.decorate_mode_switcher";
    version = "2.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7698/43512/Window_Decorate_Mode_Switcher.jar";
      sha256 = "02qjxnm39ci3fchbhwvzq0c2isc2ww84lja02b1nfmsyd7kmv60p";
      name = "Window-Decorate-Mode-Switcher-2.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Hide title menu for windows
 Possible issues with fullscreen mode after switching.
      '';
    };
  }) {};

  window-layout-manager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Window-Layout-Manager";
    plugname = "Window Layout Manager";
    plugid = "com.layoutmanager";
    version = "1.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13005/85809/window-layout-manager-1.4.0.zip";
      sha256 = "0k9qz69011khvckq9bp8fnxniw3j4gdcb8wavxbzwycya9gi14ca";
      name = "Window-Layout-Manager-1.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.estermann.family";
      license = lib.licenses.mit;
      description = ''
        This plugin provides multi layout support for the IntelliJ based IDE of your choice.
    You can store up to four layouts with a meaningful name.
    
    Plugin is accessible via Window Menu:
    
        Store Layout: Stores the current window layout
        Restore Layout: Restores the selected layout immediately
    
    Feel free to contribute at GitHub.
      '';
    };
  }) {};

  window-sizer = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Window-Sizer";
    plugname = "Window Sizer";
    plugid = "fr.gwallet.intellij.windowsizer";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8306/25385/intellij-windowsizer-1.0.1.jar";
      sha256 = "1pcr2d0ija7v5gvgfn38385yjs3k74xbqv2p0l1s1qxhvygfdabp";
      name = "Window-Sizer-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gwallet/intellij-windowsizer";
      license = lib.licenses.asl20;
      description = ''
        Center and resize the project window to predefined dimensions, or ask for a custom one if needed. 
Available for IntelliJ platform ≥ 135, /!\ Requires Java 8 Runtime /!\ 
Licensed under the Apache License, Version 2.0
      '';
    };
  }) {};

  windows-context-menu = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Windows-Context-Menu";
    plugname = "Windows Context Menu";
    plugid = "Windows Context Menu";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1348/4162/Windows_Context_Menu_4162.zip";
      sha256 = "1sfq9d7a83fp42ds5vv0yryinqkfh5gdixfggqfgvdzvw68rvxsg";
      name = "Windows-Context-Menu-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/files/1348/sourceCode.zip";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/1348/sourceCode.zip";
        free = false;
      };
      description = ''
        Windows Explorer context menu for files and folders within IDEA project. This plugin idea is came from
        known FAR Manager plugin EMenu.
      '';
    };
  }) {};

  winning-tfs-integration = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Winning-TFS-Integration";
    plugname = "Winning TFS Integration";
    plugid = "com.winning.pub";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13313/72125/custom-check-in-policy.jar";
      sha256 = "0jm97k3bc673073zkqmkrmdlbw28pzm897qbjzrd95zavqirz60g";
      name = "Winning-TFS-Integration-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.winning.com.cn";
      license = lib.licenses.asl20;
      description = ''
        Team Foundation Server provides
       source code management (either via Team Foundation Version Control or Git), reporting, requirements management, project management
      (for both agile software development and waterfall teams), automated builds, lab management, testing and release management capabilities.
      This plugin provides checkin policy integration with the Team Foundation Server.
      The following policies are available:
      
      Checkin comment policy
      Work items policy
      Ignore Winning Health Copyright policy
      '';
    };
  }) {};

  winstanley-wdl = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Winstanley-WDL";
    plugname = "Winstanley WDL";
    plugid = "org.broadinstitute.winstanley";
    version = "0.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8154/93765/winstanley.zip";
      sha256 = "1c5jlmfwq0zjd0k3rclk7dvnbrjrsbr2hi5r1zz2b17wqbil4pif";
      name = "Winstanley-WDL-0.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/broadinstitute/winstanley";
      license = lib.licenses.bsd3;
      description = ''
        Winstanley provides WDL language support to the IntelliJ IDEA IDE.
      For the WDL language specification, see https://github.com/openwdl/wdl.
      For a workflow engine runner which supports WDL, see https://github.com/broadinstitute/cromwell.
      '';
    };
  }) {};

  wiser-format-class = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Wiser-Format-Class";
    plugname = "Wiser Format Class";
    plugid = "com.wiser.plugin.format";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14492/88818/WISERFormatPlugin.jar";
      sha256 = "0yj1g4njpyzc0f2j8yrkg8c525wjc1scglyfn9lqd38alw5cbsgf";
      name = "Wiser-Format-Class-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Wiser-Wong/Frame.git";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Wiser-Wong/Frame";
        free = false;
      };
      description = ''
        Packaged with the Wiser Frame schema, it is used to quickly generate the required view classes as well as the associated XML and business classes
      '';
    };
  }) {};

  wow-toc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WoW-TOC";
    plugname = "WoW TOC";
    plugid = "com.github.czy211.wowtoc";
    version = "1.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13375/91748/wow-toc-1.1.3.jar";
      sha256 = "1ygz6mcg6gail067kz6rpbbnz2bchggnnnsh0i72w1x0s2qiwhxb";
      name = "WoW-TOC-1.1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/czy211";
      license = lib.licenses.mit;
      description = ''
        Support for World of Warcraft addon's .toc file.
            Features:
            
                Create a new toc file
                Toc file template
                Syntax highlighting
                Color settings page
                Annotator
                Quick fix
                Official tag name completion
                Reference file name completion
                Go to reference file
                Rename reference file
                Find usages
                Code formatter
                Code style settings
                Comment
      '';
    };
  }) {};

  wombat-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Wombat-Color-Scheme";
    plugname = "Wombat Color Scheme";
    plugid = "color.scheme.Wombat";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11176/50286/EasyEyes.jar";
      sha256 = "1svx3j2q3kzpsab651a8j0apybi6a4bna1k842mfg4zx1aj9q0y9";
      name = "Wombat-Color-Scheme-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://";
      license = lib.licenses.asl20;
      description = ''
        Gentle Theme. Easy on the eyes with agressive colours save only for errors. Inhereted from Wombat
      '';
    };
  }) {};

  wombatish-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Wombatish-Color-Scheme";
    plugname = "Wombatish Color Scheme";
    plugid = "color.scheme.Wombatish";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11928/60527/Wombatish.jar";
      sha256 = "03zgydhy1lga1qrmcw7qqx88204j5l06i25m1k46ijnbl34hbb7z";
      name = "Wombatish-Color-Scheme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vlad-saling/wombatish-webstorm";
      license = lib.licenses.mit;
      description = ''
        Wombtish color scheme
      '';
    };
  }) {};

  wordcount = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WordCount";
    plugname = "WordCount";
    plugid = "kaboyi.ideaplugins.wordcount";
    version = "1.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12950/72501/WordCount.jar";
      sha256 = "0cc8daxlgzkmix4i1vaiszqhcwz6vc70pbb27g4h2wipkarzp2vy";
      name = "WordCount-1.2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jjj2585032l/WordCount";
      license = lib.licenses.asl20;
      description = ''
        show current editor wordcount in the status bar
      '';
    };
  }) {};

  workers-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Workers-integration";
    plugname = "Workers integration";
    plugid = "ru.softmg.workers";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12181/61140/workers.zip";
      sha256 = "03dw719fv1379ng4dxandvnfkx2gjashmxlmvcjqni2rd91s4ypq";
      name = "Workers-integration-1.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.softmg.ru";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin provides you integration with Workers API
      '';
    };
  }) {};

  workspaces = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Workspaces";
    plugname = "Workspaces";
    plugid = "Workspaces";
    version = "0.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/83/293/Workspaces_293.jar";
      sha256 = "0m597pnrmbbb9nsy01bcxyvhp70zmbl7ybvamdglckqbd1pzlgqa";
      name = "Workspaces-0.13.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.chrisbartley.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.chrisbartley.com/";
        free = false;
      };
      description = ''
        This plugin enables you to create and manage named groups of files, or "workspaces", within a
      project. You can bind a name to a set of one or more files and then open/close that set of
      files as a group. You can create as many workspaces as you want and arrange them in the
      Workspaces tool window in any order you like.
      '';
    };
  }) {};

  world-clock = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "World-Clock";
    plugname = "World Clock";
    plugid = "fctorial.worldClock";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14679/93015/plgn-1.0.jar";
      sha256 = "1q6qrnkcvy62ly8isl7zshi0x6r6f5xhz3a9anh0ywkdrghk9l41";
      name = "World-Clock-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fctorial/world_clock_intellij";
      license = lib.licenses.mit;
      description = ''
        Displays a clock widget in the bottom status bar. 

clicking it opens a popup for choosing timezone 

click on a timezone to select it 

right click on a timezone to pin it 

right click on a pinned zone to unpin it 

times in pinned zones are displayed in the tooltip of this widget
      '';
    };
  }) {};

  world-of-warcraft-addon-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "World-of-Warcraft-Addon-Support";
    plugname = "World of Warcraft Addon Support";
    plugid = "org.squarecell.wow.addon_support";
    version = "0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10042/38828/WorldOfWarcraft_AddOn_Support.jar";
      sha256 = "1n5hlf6xvb6qlgjgpkdgvyprs973ak5mphhfrrbwcsf44igpp635";
      name = "World-of-Warcraft-Addon-Support-0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Naliwe/IntelliJ_WowAddOnSupport";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Naliwe/IntelliJ_WowAddOnSupport";
        free = false;
      };
      description = ''
        Adds World of Warcraft Addon Project creation
      '';
    };
  }) {};

  worstmybatisgenerator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "WorstMybatisGenerator";
    plugname = "WorstMybatisGenerator";
    plugid = "com.envy.plugin";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12566/67093/WorstMybatisGenerator.zip";
      sha256 = "1yrsa86bnam156b5yhb9lnqai8nil49qv97ibg70xiq7qkhzfnqc";
      name = "WorstMybatisGenerator-1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.shadowcompany.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.shadowcompany.com";
        free = false;
      };
      description = ''
        May be the worst mybatis generator.
      Mybatis Generator
      Entrance: Code &gt; MybatisGenerator
      1. You can use your own ftl template to generate custom code
      Temp select button choose your own ftl
      2. Contains 3 Default ftl
      (1) DO
      (2) Mapper
      (3) Mapper.xml
      '';
    };
  }) {};

  wrap-to-column = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Wrap-to-Column";
    plugname = "Wrap to Column";
    plugid = "com.andrewbrookins.wrap_to_column";
    version = "1.4.0";
    src = fetchurl {
      url = "https://github.com/abrookins/WrapToColumn/releases/download/1.4.0/WrapToColumn.zip";
      sha256 = "0gdsmdaamkymwzzz5qpmsvxvikx4lc003xva6sz6kgh77l7jk4ax";
      name = "Wrap-to-Column-1.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://andrewbrookins.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://andrewbrookins.com/";
        free = false;
      };
      description = ''
        Wraps text to the specified column width. Similar to the Emacs command 'Fill Paragraph' and Vim's `gq` (format lines) command. This is a replacement for the native Intellij Fill Paragraph command, which doesn't work quite how I need it to.  
 This plugin provies two IDE actions: 
 
  Wrap Line to Column: Wraps selected text or the current line if no text is selected. This is useful for IdeaVim users who wish to pair the command with motions like `vip` (select current paragraph).  
  Wrap Paragraph to Column: Wraps the paragraph (multiple lines) in which the cursor appears. No selection is needed, and will be ignored.  
 
 
 Note: As of version 1.0, this plugin supports only IDEA 14.1.x-based products and later (e.g., PyCharm 4.1, WebStorm 10, Android Studio 1.3).
      '';
    };
  }) {};

  wrike-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Wrike-plugin";
    plugname = "Wrike plugin";
    plugid = "com.wrike.plugin.intellij";
    version = "0.14.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8060/76183/Wrike_Intellij_Plugin.zip";
      sha256 = "1f6blgl5qc82nkx0ivla0dh2mbklmgq4bmlwnz4psmypsgqs3n0p";
      name = "Wrike-plugin-0.14.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.wrike.com/security/terms/";
        free = false;
      };
      description = ''
        Integrate your development workflow with Wrike, link commits with corresponding Wrike tasks
      '';
    };
  }) {};

  wxbyapiupload = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "WxbYapiUpload";
    plugname = "WxbYapiUpload";
    plugid = "WxbYapiUpload";
    version = "2.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13109/89043/WxbYapiUpload2.0.7.jar";
      sha256 = "1gp2d2k0z9ygk99l1vi8f8pvjg1pdlj7czd0cd32135wdpnah398";
      name = "WxbYapiUpload-2.0.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.qbb6.com";
      license = lib.licenses.asl20;
      description = ''
        upload api to yapi
      support dubbo api and api upload
      '';
    };
  }) {};

  x8l = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "X8l";
    plugname = "X8l";
    plugid = "com.xenoamess.x8l_idea_plugin";
    version = "0.0.26";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13915/95744/x8l_idea_plugin-0.0.26.zip";
      sha256 = "05zjl8z2w1797mvyb16y5jqrgjgsjaj7lpn2cfjbny65riimf4i2";
      name = "X8l-0.0.26.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/XenoAmess";
      license = lib.licenses.mit;
      description = ''
        Plugin to deal with X8l data format.


  
      X8l format is a type of data format, it is designed to be replace of xml/json in most cases when you need the data be shorter(while remains readability).
  



  
      See plugin on Jetbrains plugin storage
      See plugin on github
      See X8l Grammar/SDK
  




Send Feedback
      '';
    };
  }) {};

  xgimi-git-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "XGimi-Git-Template";
    plugname = "XGimi Git Template";
    plugid = "com.xgimi.commit.template";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11472/53728/XGimiGitTemplate.jar";
      sha256 = "1c8bv3nb3iy9vg5pzsqywxk6x90w0px717k1kk9fmpyygas3wvia";
      name = "XGimi-Git-Template-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Provide a git submission template to facilitate project management and version management,
    I hope it can help you.
    if you have any suggestions or opinions, please contact me in time.
    thanks.
        使用以下模板创建提交消息:

        
        &lt;类型&gt;(禅道或TAPD ID): &lt;简要描述&gt;
        &lt;影响范围：&gt;
        &lt;影响平台：&gt;
        &lt;版本号：&gt;
        &lt;影响细节&amp;测试建议：&gt;
      '';
    };
  }) {};

  xml-hard-code-optimize = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "XML-Hard-code-Optimize";
    plugname = "XML Hard-code Optimize";
    plugid = "com.bauerbao.srchardcodeutil";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13378/105483/SrcHardCodeOptimizeUtil.jar";
      sha256 = "0zhwzz7dlj5jaa06cgsaxdzh32lw83npjsvh65mjn4fjyw4xf072";
      name = "XML-Hard-code-Optimize-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bauer-bao/SrcHardCodeOptimizeUtil";
      license = lib.licenses.asl20;
      description = ''
        After optimizing the hard codes of strings and colors in res folder, this plugin can generate the resource codes in strings.xml and colors.xml automatically.
    Recommendation: backup your code before use.
    对老项目中的string和color等硬编码快捷的添加到strings.xml和colors.xml文件中.
    建议：使用前先备份代码.

    More:
    1.Support res/drawableXXX/layoutXXX folder to execute this plugin.
    2.Support XXX.xml file to execute this plugin.
    3.For string option, only the android:text and android:hint attributes can be recognized.
    4.For color option, the value like #xxx/#xxxxxx/#xxxxxxxx can be recognized.
    更多：
    1.支持对res/drawableXXX/layoutXXX文件夹执行插件
    2.支持对XXX.xml文件执行插件
    3.如果执行string选项的话，只有android:text和android:hint两个属性可以被识别
    4.如果执行color选项的话，类似于#xxx/#xxxxxx/#xxxxxxxx的值都可以被识别
      '';
    };
  }) {};

  xml-layout-extractor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "XML-Layout-Extractor";
    plugname = "XML Layout Extractor";
    plugid = "org.eightnineplugins.XMLExtractor";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14230/85277/XMLExtractor1_0_1.jar";
      sha256 = "1krxw50aamv50s5gz8rbhkva3dyy5l96q9albq7dnljzgardj6xr";
      name = "XML-Layout-Extractor-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/EdwardL89/XMLExtractor";
      license = lib.licenses.asl20;
      description = ''
        Extracts and instantiates all UI elements of an XML layout file with one command for Android projects. Features:
        
        
          Works with Android projects written in Kotlin or Java
          Generated extraction will be in a block comment for you to safely grab-n-go with just the items you need at a time
          Includes split and single line declaration &amp; instantiation
          Anko user? The generated extraction will contain a list of just the IDs of all UI elements for direct access
          Compatible with Intellij IDEA and Android Studio IDEs
      '';
    };
  }) {};

  xml-tp = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XML-TP";
    plugname = "XML-TP";
    plugid = "com.tp.xml";
    version = "9.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11385/53022/ExcelToXml.zip";
      sha256 = "0dndrjdc98n285aivbl0slq9ldqkv4414bcdy6s3gn6gdxwfdl32";
      name = "XML-TP-9.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/httpping/android-xml-i18n";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/httpping/exceltoxml";
        free = false;
      };
      description = ''
        Android excel to XML i18n
      '';
    };
  }) {};

  xmpp = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XMPP";
    plugname = "XMPP";
    plugid = "at.dotti.intellij.plugins.xmpp";
    version = "1.2.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8540/73532/intellij-xmpp-plugin.zip";
      sha256 = "03szvpq22qnml1lkmk0gf8z99iji5iml2hvn5pgp07yan9zar02w";
      name = "XMPP-1.2.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.dotti.at";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/stefandotti/intellij-xmpp-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This is a simple XMPP Client to integrate with IntelliJ IDEA.
      '';
    };
  }) {};

  xmodule = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XModule";
    plugname = "XModule";
    plugid = "com.pqixing.modularization.idea";
    version = "2.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12121/88037/Modularization.zip";
      sha256 = "0i4vg38b7dgzb1mijvhs85mb490dc8rql51q410why3xym5ckw4m";
      name = "XModule-2.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pqixing/XModule";
      license = lib.licenses.asl20;
      description = ''
        Help to run XModule gradle plugin , provide ui operator for task!!
      '';
    };
  }) {};

  xpages-sdk = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XPages-SDK";
    plugname = "XPages SDK";
    plugid = "org.openntf.xsp.xpagessdk-intellij";
    version = "1.4.0-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11353/52271/XPages_SDK-1.4.0-SNAPSHOT.zip";
      sha256 = "1fm8a912jcxk6c459p5pbpphc9hg3wry4z8axdpfcah48rj9mrf7";
      name = "XPages-SDK-1.4.0-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://openntf.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://stash.openntf.org/projects/xspsdk/repos/xpagessdk/browse/license";
        free = false;
      };
      description = ''
        The XPages SDK allows for creating an OSGi framework configuration to run IBM Domino's
    HTTP stack using OSGi plugins from your IntelliJ workspace.
      '';
    };
  }) {};

  xquery-intellij-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XQuery-IntelliJ-Plugin";
    plugname = "XQuery IntelliJ Plugin";
    plugid = "uk.co.reecedunn.intellij.plugin.xquery";
    version = "1.8.1-203";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8612/105245/xquery-intellij-plugin-1.8.1-203.zip";
      sha256 = "1bfl61ra8g5h64racb7ji34h385xgxc7qqlcp4df9hndy615xsrv";
      name = "XQuery-IntelliJ-Plugin-1.8.1-203.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://reecedunn.co.uk";
      license = lib.licenses.asl20;
      description = ''
        XQuery 1.0-3.1, XPath 2.0-3.1, and XSLT 3.0 language support with BaseX,
      MarkLogic, Saxon, and W3C extensions; run, debug, and profile queries;
      log viewer; and more.
    
    &nbsp;
    Query processor integration:
    
      Run BaseX, eXist-db, FusionDB, MarkLogic, and Saxon queries.
      Profile BaseX, MarkLogic, and Saxon XQuery and XSLT files.
      Debug MarkLogic XQuery files, with expression breakpoint support.
      Log viewer for BaseX and MarkLogic.
      Built-in namespace and function support for BaseX, eXist-db, MarkLogic, and Saxon.
      Support for MarkLogic rewriter XML files and EXQuery RESTXQ endpoints.
    
    Library and Framework integration:
    
      MarkLogic Roxy – source root detection.
      MarkLogic ml-gradle – source root detection.
    
    XPath and XSLT:
    
      XSLT 3.0 XMLSchema support.
      Experimental XPath support when the IntelliJ XPathView plugin is disabled.
      Support parsing XSLT 1.0, 2.0, and 3.0 schema types.
      Support XSLT 3.0 text value templates.
    
    IntelliJ integration:
    
      Robust syntax highlighting and error reporting.
      Inspections for several XPath/XQuery static errors.
      Navigate to file, namespace, variable, and function.
      Find usages and semantic usage highlighting.
      Rename refactoring for variables.
      Function, variable, and QName prefix signature tooltips via Ctrl.
      Code folding.
      Code completion.
      Parameter information tooltips and inlay hints.
      Structure view, including on the navigation bar in IntelliJ 2020.1+.
      Breadcrumb navigation, including highlighting XML tags in the editor like the IntelliJ XML plugin.
      Paired brace matching.
      Commenting code.
      Integrated function documentation ("Quick Documentation", Ctrl+Q).
      Context information (Alt+Q) for XQuery function declarations.
      Spellchecking support with bundle dictionaries with XPath, XQuery, and XSLT terms.
      Language injection support on various elements, including string literals.
    
    IntelliJ Ultimate integration:
    
      Support displaying MarkLogic rewriter files in the Endpoints tool window.
      Support displaying EXQuery RESTXQ endpoints in the Endpoints tool window.
      '';
    };
  }) {};

  xquery-support--marklogic-debugger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XQuery-Support-+-MarkLogic-Debugger";
    plugname = "XQuery Support + MarkLogic Debugger";
    plugid = "org.intellij.xquery.marklogic";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9757/78715/marklogic-intellij-plugin.zip";
      sha256 = "1zglzd7q4mmfw78p4b8hqacx2k204n1q56iyqrb7rpjn8imv1f67";
      name = "XQuery-Support-+-MarkLogic-Debugger-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/overstory/marklogic-intellij-plugin";
      license = lib.licenses.asl20;
      description = ''
        XQuery 3.0/3.1 and MarkLogic 1.0-ml Language Support, with MarkLogic Debugger
            
            Forked from XQuery Language Support plugin by Grzegorz Ligas.
            MarkLogic extensions added by Ron Hitchens of OverStory Ltd.
            
            
            See the Wiki at https://github.com/overstory/marklogic-intellij-plugin/wiki
      '';
    };
  }) {};

  xsl-fo-support-for-intellij-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XSL-FO-Support-for-IntelliJ-IDEA";
    plugname = "XSL-FO Support for IntelliJ IDEA";
    plugid = "XslFoSupport";
    version = "1.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7736/79265/intellij-xslfo-support-1.3.1.zip";
      sha256 = "0cjshhqwzsw4m0xb052gz84k2psn5rn768y5fkwqqxpq1p78n5d9";
      name = "XSL-FO-Support-for-IntelliJ-IDEA-1.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dmitry-cherkas/intellij-xslfo-support";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/dmitry-cherkas/intellij-xslfo-support/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        This plugin provides run configuration that allows execution of XSL-FO transformations with Apache FOP.
      '';
    };
  }) {};

  xslt-debugger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XSLT-Debugger";
    plugname = "XSLT Debugger";
    plugid = "XSLT-Debugger";
    version = "191.4212.27";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1818/54492/xslt-debugger-191.4212.27.zip";
      sha256 = "1d73avfi5wxv03mp7qsdr7xwa4h3k4f00lc6gvkwr4pxy1g8j9nz";
      name = "XSLT-Debugger-191.4212.27.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://confluence.jetbrains.com/display/CONTEST/XSLT-Debugger";
      license = lib.licenses.asl20;
      description = ''
        Allows interactive debugging of XSLT stylesheets.
      '';
    };
  }) {};

  xtools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XTools";
    plugname = "XTools";
    plugid = "com.xdl";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14400/106377/XHttp.zip";
      sha256 = "1p8hg3s31s87a1mni8l877lf1vlj15m12air35rmhk9712k11rh7";
      name = "XTools-1.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/819536266/XhttpPlugin/tree/master/XHttp";
      license = lib.licenses.asl20;
      description = ''
        English
      
         Run tests based on SpringBoot and SpringMvc developed interfaces.
         Integration port closed, quickly generate Markdown file small function.
         Post requests are not supported using the split JSON object receive method.
         If you have any Suggestions or bugs during continuous optimization, please email to 819536266@qq.com.
         thank you.
          view on https://gitee.com/BeALaity/Xhttp
      
     中文
     
         运行基于SpringBoot和SpringMvc开发的接口的测试.
         集成端口关闭，快速生成Markdown文件小功能.
         暂不支持Post请求使用非JSON对象接收方法的测试.
         在持续优化过程中,如有任何建议或bug，请发邮件至819536266@qq.com,谢谢.
         Git地址 https://gitee.com/BeALaity/Xhttp
      '';
    };
  }) {};

  xwin-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "XWin-Keymap";
    plugname = "XWin Keymap";
    plugid = "com.intellij.plugins.xwinkeymap";
    version = "201.6487.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13094/81025/XWinKeymap.zip";
      sha256 = "0kc5bahn8cb5y6xmkxk4sap0nma6l93wzjmwhgsdmi15imqxa307";
      name = "XWin-Keymap-201.6487.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        XWin keymap for all IntelliJ-based IDEs.
    Use this plugin if XWin keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  xanathar-language = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Xanathar-Language";
    plugname = "Xanathar Language";
    plugid = "net.supachat.xanathar";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11579/54317/XanatharPluginAntlr.zip";
      sha256 = "0rlg6kn0avyn90nlhp608rqi1ijm2vbhxh6wlfrahchx222rmrjn";
      name = "Xanathar-Language-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.supachat.net";
      license = lib.licenses.gpl3Only;
      description = ''
        The Xanathar Language plugin. Implements the Xanathar programming language.
      '';
    };
  }) {};

  xcode-dark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Xcode-Dark-Theme";
    plugname = "Xcode-Dark Theme";
    plugid = "net.antelle.intellij-xcode-dark-theme";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13106/96218/intellij-xcode-dark-theme.jar";
      sha256 = "0bdj9zq94ni1qxghxsv5r0wxk1im5n4nf9kjz6m1ppmmxd5fy7dw";
      name = "Xcode-Dark-Theme-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://antelle.net";
      license = lib.licenses.mit;
      description = ''
        This theme brings colors from the Xcode Dark theme to IntelliJ.

  
  To install:
  
  Go to Settings (Preferences) | Plugins, find the theme plugin, and install it
  Restart the IDE
  Go to Settings (Preferences) | Appearance &amp; Behavior | Appearance and select Xcode-Dark in the Theme dropdown
  
  

  GitHub: source code and issues
      '';
    };
  }) {};

  xcode-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Xcode-Keymap";
    plugname = "Xcode Keymap";
    plugid = "com.intellij.plugins.xcodekeymap";
    version = "202.6250.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13093/91199/XcodeKeymap.zip";
      sha256 = "0baz2dy2a96zdnd6xr0f20gs1q7i29cfpkzgcxky2wll4c9vfhh4";
      name = "Xcode-Keymap-202.6250.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Xcode keymap for all IntelliJ-based IDEs.
    Use this plugin if Xcode keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  xcordion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Xcordion";
    plugname = "Xcordion";
    plugid = "Xcordion";
    version = "0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4250/6989/Xcordion_6989.zip";
      sha256 = "06aab79l6c3mmm4jplic65j09yk8y6xvcrk2zrz0sx5fr3hg1saf";
      name = "Xcordion-0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pobrelkey/xcordion";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/pobrelkey/xcordion";
        free = false;
      };
      description = ''
        This plugin does basic code completions for xcordion/concordion (html) specification files.

              
              You can switch between or create a backing class for a valid test specification file by using the shortcut alt + shift + X.
              There are project and module level configuration panels to allow you to specify an abstract class to use for the test.
              

              For more information on Xcordion/Concordion see:
              
                http://code.google.com/p/xcordion/
                http://www.concordion.org/
      '';
    };
  }) {};

  xgimi-git-commit-template = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Xgimi-Git-Commit-Template";
    plugname = "Xgimi Git Commit Template";
    plugid = "xgimi-commit-template-idea-plugin";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13488/74210/commit-template-idea-plugin.zip";
      sha256 = "0b6f84zf5q8lf104fd3lrjhv74vjycjlbwqkgdkka5lsxb9iifiy";
      name = "Xgimi-Git-Commit-Template-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Create a Xgimi commit message with the following template:

        
        &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
        &lt;BLANK LINE&gt;
        &lt;body&gt;
        &lt;BLANK LINE&gt;
        &lt;footer&gt;
      '';
    };
  }) {};

  xpath-validator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Xpath-Validator";
    plugname = "Xpath Validator";
    plugid = "com.garage.works.xpathValidator";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10627/50975/XpathValidator.zip";
      sha256 = "020b5kpj7ihal5jxi9bki28kma8hcpfdxixlxmps37by6x3hv901";
      name = "Xpath-Validator-0.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mib2k/xpathValidatorPlugin";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin for search an xpath expression in code and check if for particular expression at least one element is present on specified web page.
    Please note: plugin is using HtmlUnit for opening pages so if you experience SSLExceptions you need to try set specific System Properties.
      '';
    };
  }) {};

  y-script-support-ias = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Y-Script-support-IAS";
    plugname = "Y Script support (IAS)";
    plugid = "xyz.morecraft.dev.jetbrains.intellij.plugin.lang.yscript";
    version = "0.5.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11250/78409/intelij-y-script-language-plugin.jar";
      sha256 = "1bg79sk26gp2ngmwdhwwjnj38mih6kk6chwavnynrqf49abyimh0";
      name = "Y-Script-support-IAS-0.5.13.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://mateuszstefaniak.me/";
      license = lib.licenses.asl20;
      description = ''
        Y Script File Extension
      This plugin is used to make work on IAS QSystem platform easier.
      GitHub Repository
      IAS QSystem
      '';
    };
  }) {};

  yag-suite-connector = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "YAG-Suite-Connector";
    plugname = "YAG-Suite Connector";
    plugid = "com.yagaan.yagaan-intellij-plugin";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12911/80793/yagaan-intellij-plugin-1.1.2.zip";
      sha256 = "1571fx5s9win2vp5jqyb28nvx86my1vbbr3v2wsv7v3aamxx5ki2";
      name = "YAG-Suite-Connector-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.yagaan.com?src=jetbrains";
      license = lib.licenses.mit;
      description = ''
        Allow to downloads the vulnerabilities found by Yagaan Scan Server and to report them on your files.
      '';
    };
  }) {};

  yamlansible-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "YAMLAnsible-support";
    plugname = "YAML/Ansible support";
    plugid = "YAML/Ansible support";
    version = "0.11.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7792/100135/intellij-ansible-0.11.2.zip";
      sha256 = "1ls40vsl4wi9l8kx71y77i14yxacyh69py5i01dlzdknx2m5ajz6";
      name = "YAMLAnsible-support-0.11.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vermut/intellij-ansible";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        YAML/Ansible support with Jinja2 tags
        Based on NEON by juzna.cz
        
        Provides:
        
            Index of all roles in Goto Class...
            Index of all properties in Goto Symbol...
            Reference Jinja2 variable declaration
            Reference to role declaration
            Various completions
            Documentation lookup
      '';
    };
  }) {};

  ymt-android-business-rules = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "YMT-Android-Business-rules";
    plugname = "YMT Android Business rules";
    plugid = "com.ymt360.tool.check";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13190/87485/p3c-idea-1.1.0.zip";
      sha256 = "123x5ban3pqsnshxl8rg3nnmajqrz6bgv99bkizxm716z8jyg4s1";
      name = "YMT-Android-Business-rules-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        YMT FORK P3C AND CREATE BUSINESS RULES BY CHECK
      '';
    };
  }) {};

  yaml-config-autocomplete = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yaml-Config-Autocomplete";
    plugname = "Yaml-Config Autocomplete";
    plugid = "org.liamjwang.yamlconfig-idea.yamlconfig-idea";
    version = "0.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12016/58663/yamlconfig-idea-0.0.3.zip";
      sha256 = "048d7j449kv77rpwmxs1iq5c0ypgd0856fygsld0iz8w9z59zvak";
      name = "Yaml-Config-Autocomplete-0.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liamjwang/yamlconfig-idea";
      license = lib.licenses.mit;
      description = ''
        Auto-completes yaml configuration keys for the yaml configuration system.
      '';
    };
  }) {};

  yamllint = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yamllint";
    plugname = "Yamllint";
    plugid = "io.aesy.yamllint";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15349/104672/yamllint-intellij-0.1.zip";
      sha256 = "06n3qc94qsbyc6azw4g68mzr8x90npcxapvw463p8bxxwv7vrzm4";
      name = "Yamllint-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aesy/yamllint-intellij";
      license = lib.licenses.mit;
      description = ''
        Provides static code analysis of Yaml files through integration with
            Yamllint
      '';
    };
  }) {};

  yanxuan-hardcode-opt = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "YanXuan-HardCode-Opt";
    plugname = "YanXuan HardCode Opt";
    plugid = "com.netease.yanxuan.hardcodeopt";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13535/74988/HardCodeOpt.jar";
      sha256 = "13rnpwygvb1mwjjv2vb63k94pp20pn7nh7zkwv66gbg5xf8k2krh";
      name = "YanXuan-HardCode-Opt-1.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        After optimizing the hard codes of strings/colors/dimens in res folder, this plugin can generate the resource codes in strings.xml/color.xml/dimens.xml automatically.
    Recommendation: backup your code before use.

    More:
    1.Support res/drawableXXX/layoutXXX folder to execute this plugin.
    2.Support xxx.xml file to execute this plugin.
    3.For string option, only the android:text and android:hint attributes can be recognized.
    4.For color option, the value like #xxx/#xxxxxx/#xxxxxxxx can be recognized, the  already defined will be reused without regenerating a new one.
    5.For dimen option, the value like xxdp/xx.5dp can be recognized, the  already defined will be reused without regenerating a new one.
      '';
    };
  }) {};

  yandex-translate = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yandex-Translate";
    plugname = "Yandex Translate";
    plugid = "ru.limydesign.plugins.yandex.translate";
    version = "0.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9250/30252/YandexTranslate.zip";
      sha256 = "1ym68va4ah9014hj5yfhhghn0pm2hcp9b9n3qhs8f9abqrahiv7n";
      name = "Yandex-Translate-0.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LimyDesign/YandexTranslate";
      license = lib.licenses.mit;
      description = ''
        This plugin is intended for quick translation of selected text.
      '';
    };
  }) {};

  yandex-tracker-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yandex.Tracker-integration";
    plugname = "Yandex.Tracker integration";
    plugid = "ru.yandex.tracker";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10549/62266/YandexTracker-Prod-1.4.1.zip";
      sha256 = "1pfbhn8x4zzh41nz7iz5lsmnpna7047swic88ssqxl34a761285p";
      name = "Yandex.Tracker-integration-1.4.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://yandex.ru/tracker";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://yandex.ru/legal/connect_tracker_agreement/";
        free = false;
      };
      description = ''
        Integration with Yandex.Tracker.
      '';
    };
  }) {};

  yaoqiang-bpmn-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yaoqiang-BPMN-Editor";
    plugname = "Yaoqiang BPMN Editor";
    plugid = "org.yaoqiang.bpmn.editor.plugin";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9739/95739/intellij-bpmn-editor.zip";
      sha256 = "0631pl9fwi7a7vbfmrcr5xjp6d5mg70xv26wdvh5r6ravp6fsn35";
      name = "Yaoqiang-BPMN-Editor-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://bpmn.sourceforge.net/";
      license = lib.licenses.gpl3Only;
      description = ''
        an Open Source BPMN 2.0 Modeler

      GitHub |
      Issues |
      Donate ( PayPal )
      '';
    };
  }) {};

  yapiupload = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "YapiUpload";
    plugname = "YapiUpload";
    plugid = "YapiUpload";
    version = "1.8.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12276/100095/YapiUpload.jar";
      sha256 = "1cwfy0v7xrk10kdq69k7rscyr42dk2rpnx2kwly2laj0k8wjninb";
      name = "YapiUpload-1.8.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.qbb6.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.qbb6.com";
        free = false;
      };
      description = ''
        upload api to yapi
      support dubbo api and api upload
      '';
    };
  }) {};

  yaru-dark-theme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Yaru-Dark-theme";
    plugname = "Yaru Dark theme";
    plugid = "com.malvery.yaruDarkTheme";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14439/88299/intellij-yaru-dark.jar";
      sha256 = "1vkn5f9jg9bgb0bf5g7ypl3m3343zh9xc5blcv4d8vg4zr0jv5n0";
      name = "Yaru-Dark-theme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/malvery/intellij-yaru-dark-theme";
      license = lib.licenses.mit;
      description = ''
        Yaru Dark theme
      '';
    };
  }) {};

  yeepay-devtools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yeepay-DevTools";
    plugname = "Yeepay DevTools";
    plugid = "com.yeepay.yop.devtools.idea";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14011/86300/yop-intellij-plugin-1.1.0.zip";
      sha256 = "07z7iy27507cq8a1w02w5x002izqcj6hyl80zd6ffqa316nnf762";
      name = "Yeepay-DevTools-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://open.yeepay.com";
      license = lib.licenses.asl20;
      description = ''
        Yeepay DevTools is a plugin for IntelliJ platform helping developers work with Yeepay Open Platform
      易宝开发者一站式服务化套件 - Yeepay DevTools
      为 IDEA 开发者提供一个可以快速对接 Yop APIs 的能力.
      更多信息，请访问 易宝开放平台
      '';
    };
  }) {};

  yet-another-emoji-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yet-another-emoji-support";
    plugname = "Yet another emoji support";
    plugid = "com.github.shiraji.yaemoji";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12512/82779/yet-another-emoji-support-1.0.7.zip";
      sha256 = "1wf7av3d24c34dad1ja46178a4hffwpwy04b5f5jvivmkkfrm6cm";
      name = "Yet-another-emoji-support-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/12512-yet-another-emoji-support";
      license = lib.licenses.asl20;
      description = ''
        This plugin inserts emoji in editors using content assist 💐
    
    Type ":" and emoji name
    Open code completion
    
    
    
    This plugin supports Go, Groovy, Java, JavaScript, Kotlin, Markdown, PHP, Python, Ruby, Rust, Scala, TypeScript, XML, YAML. You can insert emoji in the commit dialog 😎
    
    Source |
    Issues
      '';
    };
  }) {};

  yicru-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Yicru-Color-Scheme";
    plugname = "Yicru Color Scheme";
    plugid = "color.scheme.Yicru";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13354/72820/Yicru.jar";
      sha256 = "1dabjzr7yxqvv1jq5nisf7lj1ph2db9h3dl6r8fzxfv95zlhrxry";
      name = "Yicru-Color-Scheme-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Yicru/MyJetbrainsTheme";
      license = lib.licenses.mit;
      description = ''
        My color scheme, based on Spacegray, Dracura
      '';
    };
  }) {};

  yinhaistudio-ta3 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "YinHaiStudio-Ta3";
    plugname = "YinHaiStudio-Ta3";
    plugid = "com.yinhai.ta3.plugin.id";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10971/48190/YinHaiStudio.zip";
      sha256 = "0sh0vbj5vriqzr3hk9aax8rnp6jfaihkzri9fab8rvhj92fxdnms";
      name = "YinHaiStudio-Ta3-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.yinhai.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.tldrlegal.com/l/freebsd";
        free = false;
      };
      description = ''
        Help complete the creation of Action class, Domain class, Service class and its implementation class. Help complete the Jsp page, tab page.
      '';
    };
  }) {};

  ymprestful = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "YmpRestful";
    plugname = "YmpRestful";
    plugid = "plugin.ymp.restful";
    version = "1.0.52";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14562/107502/ympRestfulPlug-1.0.52.jar";
      sha256 = "1h2jb2h42qpn15s0d5k1hfnir37q974a7xajzlyfkj0fcq9khra7";
      name = "YmpRestful-1.0.52.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/xjpVips/ympRestfulPlug";
      license = lib.licenses.asl20;
      description = ''
        一套 Restful 服务开发辅助工具集。
            1.提供了一个 Services tree 的显示窗口;
            2.点击 URL 直接跳转到对应的方法定义;
            3.一个简单的 http 请求工具;
            4.支持 ymp 框架
            5.支持 JAX-RS;
            6.支持 `Navigate -&gt; 搜索控制器接口` 搜索 Mapping (Ctrl + Alt + /)
            7.支持package-info取值
      '';
    };
  }) {};

  yoda-live-data-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yoda-live-data-plugin";
    plugname = "Yoda live data plugin";
    plugid = "com.farawaytech.yoda.intellij";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7339/14457/yoda-ii-plugin.zip";
      sha256 = "0m20simrbrygz8nqp5a2jqcq72yy3py0rwahck7yfn7smdgz0m5v";
      name = "Yoda-live-data-plugin-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.yourcompany.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.yourcompany.com";
        free = false;
      };
      description = ''
        Enter short description for your plugin here.
 
most HTML tags may be used
      '';
    };
  }) {};

  yona-language = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Yona-Language";
    plugname = "Yona Language";
    plugid = "org.yona.intellij.plugin";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14917/94986/yona-intellij-plugin-0.0.1.zip";
      sha256 = "0qfxb0a1xbbjqvkv3qval8an9ng3z9rbg9vagn7m2zn0l7zym4p5";
      name = "Yona-Language-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://yona-lang.org";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin provides syntax highlighting for Yona Language.
      '';
    };
  }) {};

  youtrack-integration = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "YouTrack-Integration";
    plugname = "YouTrack Integration";
    plugid = "com.github.jk1.ytplugin";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8215/106943/ytplugin-1.1.2.zip";
      sha256 = "09yw85slmkkmjkk785y1f35vpgvb5pblxlkc1qyf9xvmxd0d99lc";
      name = "YouTrack-Integration-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jk1/youtrack-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.apache.org/licenses/";
        free = false;
      };
      description = ''
        Extends bundled task management plugin to provide deeper integration with YouTrack bug tracker:
        
             Adds command window to execute YouTrack commands from IDE 
             Supports code navigation when clicking on Java stack traces in issue tracker 
             Provides issue browser 
             Renders YouTrack wiki markup 
             Recognizes YouTrack issue ids in Java code comments and VCS history 
             Displays issue tracker notifications in IDE 
             Creates work log time entries based on user activity 
        
        Compatibility: YouTrack 2018.1+
        Four minute plugin demo on YouTube
      '';
    };
  }) {};

  youzan-cloud-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Youzan-Cloud-Tools";
    plugname = "Youzan Cloud Tools";
    plugid = "com.youzan.cloud";
    version = "1.0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12872/107094/Youzan_Cloud_Tools-1.0.10.zip";
      sha256 = "1hya4hhjvb5lf1ig9hapx8xxv1xwk40x05mabvz9x5bllvm24w49";
      name = "Youzan-Cloud-Tools-1.0.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.youzanyun.com";
      license = lib.licenses.gpl3Only;
      description = ''
        Tools for working with Youzan Cloud Platform. Integrated with Youzan Cloud products to simplify your developing.

        Youzan Cloud Tools extends your IDE so that you can debug just like you were working with local code.

        Feature Overview:
        
        Local Server
        Request Forward
        Cloud Remote Debugger
        
        
        Refer to Youzan Cloud Documentation for more information.
      '';
    };
  }) {};

  yundongtools-capsules = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "YunDongTools-Capsules";
    plugname = "YunDongTools-Capsules";
    plugid = "net.isyundong.YunDongTools-Capsules";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15782/107261/Capsules-Tool.jar";
      sha256 = "1vm76mcalxvpn6dg3nrlcsr05n2v332sv10mrykx17k3ymkps402";
      name = "YunDongTools-Capsules-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.github.com/yundongzhang";
      license = lib.licenses.mit;
      description = ''
        string processing tools, such as: all caps, all lower case...
     right click to select the string to operate.
      '';
    };
  }) {};

  zio-for-intellij = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ZIO-for-IntelliJ";
    plugname = "ZIO for IntelliJ";
    plugid = "zio.intellij.zio-intellij";
    version = "2020.3.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13820/108054/zio-intellij-2020.3.4.0.zip";
      sha256 = "1q2c1aci0p7whmdncl4dhj4n6ws9gh9mrjjpam5wdq3yvbqaxy8q";
      name = "ZIO-for-IntelliJ-2020.3.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zio/zio-intellij";
      license = lib.licenses.asl20;
      description = ''
        Suggestions, refactorings, and other enhancements for Scala's ZIO ecosystem.
        The plugin enhances the ZIO library with features, such as:
        
        Refactorings and suggestions
        Support for zio-macros (e.g. @accessible)
        Integrated test runner
        And much more!
        
        
        Contribute to the plugin at https://github.com/zio/zio-intellij
      '';
    };
  }) {};

  zk = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ZK";
    plugname = "ZK";
    plugid = "org.zkoss.zkidea";
    version = "0.1.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7855/83766/zkidea-0.1.11.zip";
      sha256 = "0c66vcpzjfhb6s9qrwqnzxpavn40yvjx8x1lmnhq45hawr3713j3";
      name = "ZK-0.1.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.zkoss.org";
      license = lib.licenses.asl20;
      description = ''
        A ZK framework plugin for IntelliJ that helps developer to work with ZK Java Web Framework.
       The ZUL editor is exceptionally powerful providing content assistance for both the MVC and MVVM patterns.
        This plugin can be installed on IntelliJ platform 141.1532 or greater.
      '';
    };
  }) {};

  zpd-assistant = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ZPD-Assistant";
    plugname = "ZPD Assistant";
    plugid = "com.zhaopin.platform.zpd-assistant";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13008/71475/zpd-assistant.zip";
      sha256 = "1982g6j3ji9106ni4pg4inf3wkf47625xwmzn2ifcm9ixdkf3zi3";
      name = "ZPD-Assistant-0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.zhaopin.com";
      license = lib.licenses.gpl3Only;
      description = ''
        An assistant plugin for zhaopin developer.
      '';
    };
  }) {};

  zalgofy = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Zalgofy";
    plugname = "Zalgofy";
    plugid = "eu.sim642.idea.zalgofy";
    version = "1.3";
    src = fetchurl {
      url = "https://github.com/sim642/intellij-zalgofy/releases/download/v1.3/intellj-zalgofy-1.3.jar";
      sha256 = "18ydia3lifr0dhrmkq6a2gg5v3y0jnraiz2rkkq8d7ziaf2r5qs8";
      name = "Zalgofy-1.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/sim642/intellij-zalgofy";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/sim642/intellij-zalgofy";
        free = false;
      };
      description = ''
        Zalgofy your code with ease! 
 
 Zalgofy refactoring to apply zalgo to single identifier 
 Zalgofy inspection and fix to apply zalgo to identifiers in bulk
      '';
    };
  }) {};

  zato-hot-deployment = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Zato-hot-deployment";
    plugname = "Zato hot-deployment";
    plugid = "zato";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10375/78512/zato-1.1.0.zip";
      sha256 = "0ynvnyvvzg9l7ysazr37s3jhnxsnx9cj3clpkzabdpvd5b4l2m3h";
      name = "Zato-hot-deployment-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://zato.io/docs/?pycharm-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zatosource/zato/blob/main/LICENSE.txt";
        free = false;
      };
      description = ''
        Adds hot-deployment of API services to Zato clusters.
      '';
    };
  }) {};

  zebra-programming-language-zpl = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Zebra-programming-language-ZPL";
    plugname = "Zebra programming language (ZPL)";
    plugid = "com.furstenheim.zpl-plugin";
    version = "1.0.4-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13958/85844/zpl-plugin-1.0.4-SNAPSHOT.zip";
      sha256 = "1diika59n5d6r0hdyxkcf9dxzgrvbvcmjzw5h88km2zqym2scbpn";
      name = "Zebra-programming-language-ZPL-1.0.4-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        ZPL (Zebra programming language) support. Used for printing labels
      '';
    };
  }) {};

  zelda-progress-bar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Zelda-Progress-Bar";
    plugname = "Zelda Progress Bar";
    plugid = "manjaro.zpb";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14726/92254/ZeldaProgressBar.jar";
      sha256 = "0gv76sydp11gmqrq7x2w4z342rx0xwdvyfq5jp2ngr7ypnw2s3li";
      name = "Zelda-Progress-Bar-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        This is the Zelda Progress Bar for IJ based IDEs based on the Nyan Progress Bar by Dmitry Batkovitch.
      It display Link for the basic bar and chicken for the indeterminate one.
      '';
    };
  }) {};

  zenuml-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ZenUML-support";
    plugname = "ZenUML support";
    plugid = "com.zenuml.jetbrains";
    version = "2020.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12437/94767/zenuml-2020.2-ga.zip";
      sha256 = "01n3yrdwmrilai0j1qp3jcigmhn3lr36hi9inpdmr4cjy9vdgqc5";
      name = "ZenUML-support-2020.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.zenuml.com";
      license = lib.licenses.asl20;
      description = ''
        Provides the capability to generate sequence diagram from text within the IDE and see the rendered HTML in a live preview.


Includes the following features:

Generate diagrams from Java via context menu.
Instant rendering - nothing needs to be sent to the backend.
Developer friendly syntax - e.g. Service.getBook(id).
Syntax highlighting - coming soon.
Ability to use custom stylesheets for a live preview.
      '';
    };
  }) {};

  zephir = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Zephir";
    plugname = "Zephir";
    plugid = "com.zephir";
    version = "0.4.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7558/86927/Zephir-0.4.0.zip";
      sha256 = "1fijpfxn9dj9sxg7dw9psa38qbg2mj331ympbmglmp2zff8gxjd5";
      name = "Zephir-0.4.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zephir-lang/idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zephir-lang/idea-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Provides Zephir language support for IntelliJ IDEs.

    GitHub |
    Issues |
    Donate

    
        Zephir is a high level language that eases the creation and maintainability
        of extensions for PHP. Zephir extensions are exported to C code that can be compiled
        and optimized by major C compilers such as gcc/clang/vc++. Functionality is exposed
        to the PHP language.
    

    Highlighted Features
    
      Syntax highlighting
      Basic syntax definition
      Basic autocompletion support
      Basic syntax check support
      '';
    };
  }) {};

  zero-width-characters-locator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Zero-Width-Characters-locator";
    plugname = "Zero Width Characters locator";
    plugid = "com.ultrahob.zerolength.plugin";
    version = "0.93";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7448/25855/ZeroLengthRadar.jar";
      sha256 = "0imiqidzni50xaig55qxz9w3nx55cijb0xn87c6hjv58d4fi3wzy";
      name = "Zero-Width-Characters-locator-0.93.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/harley84/ZeroLengthRadar";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://choosealicense.com/licenses/lgpl-v2.1/";
        free = false;
      };
      description = ''
        Inspired by 
this question on Stack Overflow - this plugin adds an inspection that prevents some hard to find bugs related to invisible zero width characters in source code and resources.
      '';
    };
  }) {};

  zero-width-characters-locator-2 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Zero-Width-Characters-locator-2";
    plugname = "Zero Width Characters locator 2";
    plugid = "com.ultrahob.zerolength.plugin2";
    version = "0.93";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12735/65613/ZeroLengthRadar.jar";
      sha256 = "1g7126k5v398v1prwsl3i2l2mi3k168v9mhvdzlcv3jjr7fd1i82";
      name = "Zero-Width-Characters-locator-2-0.93.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bluelovers/ZeroLengthRadar";
      license = lib.licenses.asl20;
      description = ''
        Inspired by this question on Stack Overflow - this plugin adds an inspection that prevents
        some hard to find bugs related to invisible zero width characters in source code and resources.

        Preferences &gt;&gt; Editor &gt;&gt; Inspections &gt;&gt; Potentially confusing code constructs &gt;&gt; Zero Width Unicode Character
      '';
    };
  }) {};

  zerocode-scenario-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Zerocode-Scenario-Helper";
    plugname = "Zerocode Scenario Helper";
    plugid = "ge.odvali";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15773/107185/zerocode-scenario-helper-0.0.1.zip";
      sha256 = "0xvrhvklvix53lmv54z02jmxj7jsbkb7jpckl33awsmljzf9w2r2";
      name = "Zerocode-Scenario-Helper-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.github.com/sparrowV";
      license = lib.licenses.asl20;
      description = ''
        Adds support for writing Zerocode  scenarios.
        The plugin has the following features:
        
            keyword completion suggestions
            scenario files are validated against json/yaml schema as you type
      '';
    };
  }) {};

  zeus-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Zeus-Plugin";
    plugname = "Zeus Plugin";
    plugid = "com.sunsharing.idea.plugin.zeus";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10367/48212/zeus-plugin1.0.8.zip";
      sha256 = "1psb707v0kwz3xxp6s6fpm8hs75j71zlm7qh6d0pm4xxxwdy01il";
      name = "Zeus-Plugin-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://192.168.0.62:7878/gitbook/document/idea_plugin/1.0.7/_book/index.html";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://192.168.0.62:7878/gitbook/document/idea_plugin/1.0.7/_book/index.html";
        free = false;
      };
      description = ''
        This is a idea one - key package plugin
      '';
    };
  }) {};

  zh-translate-en = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Zh-Translate-En";
    plugname = "Zh-Translate-En";
    plugid = "zh-translate-en";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9507/33224/Zh-Translate.jar";
      sha256 = "1h0nipfr9dl14dl8cjhjjw5f8x3srhp9dbdjcc8kvxv70mk8z9jh";
      name = "Zh-Translate-En-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hyhe";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/hyhe";
        free = false;
      };
      description = ''
        Android Studio Plugin. Translate chinese to english.
 How to Use? 
 
 Open Tools Menu or (alt+T) 
 Input Chinese 
 Press enter 
 Enter again will disappear panel
      '';
    };
  }) {};

  zhenai-android-coding-guidelines = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Zhenai-Android-Coding-Guidelines";
    plugname = "Zhenai Android Coding Guidelines";
    plugid = "com.zhenai.lib.ZhenaiLintPlugin";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12711/67351/Zhenai_Android_Coding_Guidelines-1.0.9.zip";
      sha256 = "1adsym11n7gfy454rd5qhdk32mwsckdniygli10glg1a6gsa7zgh";
      name = "Zhenai-Android-Coding-Guidelines-1.0.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dengqu/ZhenaiLintPlugin.git";
      license = lib.licenses.asl20;
      description = ''
        This is a can help developers to quickly find code problem
      What's the problem can be feedback on my email
      '';
    };
  }) {};

  zig = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Zig";
    plugname = "Zig";
    plugid = "org.ziglang";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10560/61483/intellij-zig-0.1.2.zip";
      sha256 = "1pgj4pszq9dzmdkspak2v1n6x99w01k4945p838abcc2xq70d64w";
      name = "Zig-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://ziglang.org/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ice1000/zig-intellij/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Zig language support.
Functions provided:

	Syntax highlight (customizable)
	Sdk management
	Convert C files to Zig files via Ctrl+Alt+Shift+K
	Live templates
	Keywords based completions
	Code execution
	Console output linkenizer
	Run configuration management
	Commenter
	Find usages
	Reference resolving
	Renaming
	Brace matcher
	Spell checker
	Inspections
	Quick fixes
	Bread crumbs
	Code folding
	Structure view
      '';
    };
  }) {};

  zipchanges = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ZipChanges";
    plugname = "ZipChanges";
    plugid = "ZipChanges";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1674/14543/zip-changes-plugin.jar";
      sha256 = "117kcx812c1c62rwc10drl64bq3m39zpdws4acq430l0sk60jwj2";
      name = "ZipChanges-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://intelli-plugins.sourceforge.net/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/BartCr/intelli-plugins/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin adds an extra action to the ChangeList popup menu. It allows for creating a zip file
    containing specific changes.
    
    The plugin searches for a common ancestor to create a meaningfull folder structure inside the zip
    file.
      '';
    };
  }) {};

  zipper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "Zipper";
    plugname = "Zipper";
    plugid = "com.renemaas.intellij.zipper";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7687/20520/Zipper_IDEA_Plugin.jar";
      sha256 = "0mn47h3z8pbxwq3gpq1r6nnv6ym40pcb2czl8xwjy0drfbmdnvim";
      name = "Zipper-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.renemaas.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.renemaas.com/";
        free = false;
      };
      description = ''
        Zipper adds the ability to pack the whole project into a single ZIP file. 
 Ideal for creating backups really quickly. 
 
 Just choose 
Menu &gt; Tools &gt; Pack the whole Project or press 
CTRL + SHIFT + P
      '';
    };
  }) {};

  znavi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Znavi";
    plugname = "Znavi";
    plugid = "com.github.volkov.znavi";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15771/107303/znavi-0.0.5.zip";
      sha256 = "07rv9v7v2nllniyp70lcz0wz4hlc0bvz4znwlf24lgx2zfhfr37c";
      name = "Znavi-0.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/volkov/znavi";
      license = lib.licenses.asl20;
      description = ''
        Show usages of containing method (alt H)Navigate to next(alt U)/previous(alt I) usage of element under cursor

"Find usages" intellij action with call hierarchy is very powerful, but it always opens in tool window. 
Current plugin allows to make one step of call hierarchy with popup menu ("Show usages of containing method").

Also plugin adds navigation to next/previous usage of element under cursor. 
It's interation over "Show usages" popup without opening popup.

Most of code copy pasted from origina intellij actions.
      '';
    };
  }) {};

  zookeeper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ZooKeeper";
    plugname = "ZooKeeper";
    plugid = "zookeeper";
    version = "0.0.14";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7364/44869/zookeeper-intellij.zip";
      sha256 = "1f2gdrhzzhk0dy7f3h1an65xy1mxklm185igsqd5gf7rivfjas4k";
      name = "ZooKeeper-0.0.14.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://twitter.com/linux_china";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://twitter.com/linux_china";
        free = false;
      };
      description = ''
        Manage ZooKeeper in IntelliJ IDEA. 
 After install ZooKeeper plugin, please open "Preferences" to set connection information in "ZooKeeper" item, then you will find a "ZooKeeper" tool windown, click "ZooKeeper" tool window to visit ZK file system. 
 
 
 Double click the leaf to edit node value 
 Right click editor to update node value into ZooKeeper 
 Right click ZK tree to execute "edit", "add" and "delete" operation 
 Recursive support for add and delete operation 
 Node filter support 
 Click "Refresh" button on "ZooKeeper" tool window to refress ZK tree or node 
 Icon for different type, and transparent icon for ephemeral node 
 Stat tooltip, Copy node path
      '';
    };
  }) {};

  zoolytic---zookeeper-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "Zoolytic---Zookeeper-tool";
    plugname = "Zoolytic - Zookeeper tool";
    plugid = "org.zoolytic";
    version = "0.5.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11939/84953/Zoolytic-0.5.2.zip";
      sha256 = "1505h3267sf5czyhff7mikqc870ghallazgi3qhwk1lb0mvmg2i0";
      name = "Zoolytic---Zookeeper-tool-0.5.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ermadan/zoolytic";
      license = lib.licenses.asl20;
      description = ''
        Zookeeper analysis tool.
        To open - go to View-&gt;Tool windows-&gt;Zoolytic
        
            Multiple clusters support
            ZkNodes node management - add/remove
            Edit zkNodes data
            Gathers size information for all nodes in the tree
            Regex search by node names
      '';
    };
  }) {};

  adoctor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "aDoctor";
    plugname = "aDoctor";
    plugid = "it.unisa.plugin.adoctor";
    version = "0.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13443/79587/aDoctor.zip";
      sha256 = "07fvz1yvnnp5l28v4l5rjgn38i2q3zpimk2s6cnl5975fhjngjl2";
      name = "aDoctor-0.4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/emaiannone/aDoctor";
      license = lib.licenses.mit;
      description = ''
        Android Studio plugin for Android-specific energy smell detection and refactoring.
      '';
    };
  }) {};

  activate-power-mode = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "activate-power-mode";
    plugname = "activate-power-mode";
    plugid = "com.jiyuanime.ActivatePowerModeApplicationPlugin";
    version = "0.1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8330/42076/activate-power-mode_v0.1.8.jar";
      sha256 = "022ijwl9iwv24fkj3206sr1xrn82f17gc8bq6gx8ws1mg6mg6njj";
      name = "activate-power-mode-0.1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ViceFantasyPlace/activate-power-mode";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ViceFantasyPlace/activate-power-mode";
        free = false;
      };
      description = ''
        activate-power-mode for IDEA. 
 
 根据Atom的插件activate-power-mode的效果移植到IDEA上
      '';
    };
  }) {};

  activate-power-mode-x = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "activate-power-mode-x";
    plugname = "activate-power-mode-x";
    plugid = "com.sinar.ActivatePowerModeXApplicationPlugin";
    version = "0.2.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14000/94321/activate-power-mode.jar";
      sha256 = "1m8pbi616dpalvx4ry9jg5skbqp9v4hsbvq7gvd42crlvqrahd13";
      name = "activate-power-mode-x-0.2.4.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/SinarPandora/activate-power-mode";
      license = lib.licenses.mit;
      description = ''
        activate-power-mode for Jetbrains IDEs.
          
			根据Atom的插件 activate-power-mode 的效果移植到 Jetbrains IDE 上
			activate-power-mode 插件的修复版本
			Forked from https://github.com/ViceFantasyPlace/activate-power-mode, 感谢原作者的付出
			截图中的进度条为 Nyan Progress Bar 插件
		  
          
			activate-power-mode plugin like atom
			Fix defects and update api
			Forked from https://github.com/ViceFantasyPlace/activate-power-mode, Thanks to the original author!!
			Progress bar in the screenshot is Nyan Progress Bar
      '';
    };
  }) {};

  align-carets = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "align-carets";
    plugname = "align-carets";
    plugid = "align-carets";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10743/45955/align-carets-1.0.0.zip";
      sha256 = "00yw3z7lp185gz3k4n5g6mh3lc5lkl0wcbwjclbi6f9fbbb0cm8b";
      name = "align-carets-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        this plugin can align carets in a column for you~
      '';
    };
  }) {};

  android-dependencies-completion = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "android-dependencies-completion";
    plugname = "android-dependencies-completion";
    plugid = "me.hiten.completion";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12479/63221/android-dependencies-completion-0.2.jar";
      sha256 = "0rpg6f86jl5w8d8ylkab8s398cb69jfbc93psrznzljq9w8qdv85";
      name = "android-dependencies-completion-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/HitenDev/android-dependencies-completion";
      license = lib.licenses.mit;
      description = ''
        Gradle Dependencies Code Completion , Searched by Maven'repo and Google'repo, for Android Developer
      '';
    };
  }) {};

  angular-switch-extension = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "angular-switch-extension";
    plugname = "angular-switch-extension";
    plugid = "live.angular.switch.extension";
    version = "0.3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11402/68258/angular-switch-extension.zip";
      sha256 = "1mskrxyyd9iikv308yn88sg16wzqr8w4k4j4a1cynv3r7iivjmkl";
      name = "angular-switch-extension-0.3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://angular.cn";
      license = lib.licenses.mit;
      description = ''
        Switch between files with the same file path and base name but different extensions. Typical is the Angular-style project structure.
    After installation, the "Locate Angular files" submenu will be created under the navigate menu, including options for switching to various related files.
    
    在文件路径和基本名相同, 但扩展名不同的文件之间切换。典型的就是 Angular 风格的项目结构。
    安装后会在 navigate 菜单下创建 "Locate Angular files" 子菜单，其中包括切换到各个相关文件的选项。
    
    Default shortcuts:
    
    Press CTRL(CMD)+L,H to open html file
    Press CTRL(CMD)+L,C to open css file
    Press CTRL(CMD)+L,T to open the ts file
    Press CTRL(CMD)+L,S to open the spec.ts file
    
    Shortcuts for Mac OS X 10.5+ :
    Use CTRL(CMD)+I instead of CTRL(CMD)+L.
    
    Source code: https://github.com/asnowwolf/angular-switch-extension.
      '';
    };
  }) {};

  any-rule = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "any-rule";
    plugname = "any-rule";
    plugid = "cn.olange.rule";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14162/105753/idea-rule.jar";
      sha256 = "1i9vpi9zwak0c6d4cn5r0vlib20ylr9a7hqbr0jw1j6rb302a98b";
      name = "any-rule-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zhoriya/idea-rule";
      license = lib.licenses.mit;
      description = ''
        General RegEx Tool
      
        1.Quick to search
        2.Easy to use
        3.This tool is free for personal and commercial usage
      
    常用正则大全
      
        1.快速检索
        2.方便使用
        3.免费使用
      '';
    };
  }) {};

  apidoc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "apiDoc";
    plugname = "apiDoc";
    plugid = "com.suiyiwen.plugin.idea.apidoc";
    version = "3.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11580/106736/apiDoc-3.0.5.zip";
      sha256 = "1gj3rqndkx0ma6szjqximldgfi0jkhz8qfwqx1daz7q9gnfa2fjg";
      name = "apiDoc-3.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.suiyiwen.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "mpl-2.0";
        free = false;
      };
      description = ''
        apiDoc generation helper
    
      This is a plugin you can generate apiDoc from request in controller.
      Please do aware This plugin is only for IntelliJ IDEA.
      This plugin develop for the npm model apidoc, HomePage, install command npm i apidoc
      '';
    };
  }) {};

  apollox-script = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "apollox-script";
    plugname = "apollox script";
    plugid = "com.sunlands.apollox.script";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13919/80932/apollox-idea-plugin.zip";
      sha256 = "1ys5ha7flvbk2cg30vf0q5cz1myi6rm80gppsckd8ypkwk1jlrh5";
      name = "apollox-script-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://apolloxtest.sunlands.com";
      license = lib.licenses.asl20;
      description = ''
        A plugin to help people develop scripts.
      '';
    };
  }) {};

  arthas-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "arthas-idea";
    plugname = "arthas idea";
    plugid = "com.github.wangji92.arthas.plugin";
    version = "2.26";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13581/107882/arthas-idea-plugin.zip";
      sha256 = "179bvni65c615zapwwm9jhjvpn8kcgdfpfkhnxdlr635fvg6y7x3";
      name = "arthas-idea-2.26.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/WangJi92/arthas-idea-plugin";
      license = lib.licenses.asl20;
      description = ''
        Arthas Idea Help Tools,Help generated Arthas Common Command 
      Arthas helps developers in trouble-shooting issues in production environment for Java based applications without modifying code or restarting servers.
      English:
      
      Based on the  Arthas command generation plugin developed by IntelliJ IDEA, it supports  Alibaba Arthas  official commonly used commands.
      The official commands are too complicated. In order to simplify the difficulty of users, this plugin provides support for some common commands.
      The plugin supports  Alibaba Arthas commands such as watch、trace、ognl static、ognl bean method、field、monitor、stack 、tt etc.
      watch: Display the input/output parameter, return object, and thrown exception of specified method invocation
      trace: Trace the execution time of specified method invocation.
      ognl:Execute ognl expression.
      monitor:Monitor method execution statistics, e.g. total/success/failure count, average rt, fail rate, etc.
      stack:Display the stack trace for the specified class and method
      tt:Time Tunnel
      support get all spring property command、get selected spring property
      logger:Print logger info, and update the logger level
      Async Profiler. https://github.com/jvm-profiling-tools/async-profiler


      
      中文：
      
      基于IntelliJ IDEA开发的Alibaba Arthas 命令生成插件，支持Alibaba Arthas 官方常用的命令。
      官方的命令太复杂，此插件为了简化使用者的难度，提供了一些常用命令的支持
      该插件支持Alibaba Arthas 常用命令,比如 watch、trace、ognl static、ognl bean method、field、monitor、stack 、tt等命令
      支持设置static field、static final
      watch:能方便的观察到指定方法的调用情况,返回值、抛出异常、入参(特殊值、异常没有捕获排查)
      trace:方法内部调用路径，并输出方法路径上的每个节点上耗时(性能问题，调用链问题)
      ognl:执行表达式(方便获取静态变量，方法，获取spring context 为所欲为)
      monitor:方法执行监控(性能问题排查，一段时间内的性能指标)
      stack:获取方法从哪里执行的调用栈(用途：源码学习调用堆栈，了解调用流程)
      tt:方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测(可以重新触发，周期触发，唯一缺点对于ThreadLocal 信息丢失[隐含参数]、引用对象数据变更无效)
      支持获取选择中的spring 环境变量的值获取，获取spring 上下文所有的环境变量按照优先级打印出来,方便排查环境问题
      logger:动态更新日志等级
      Async Profiler. https://github.com/jvm-profiling-tools/async-profiler 火焰图命令支持
      '';
    };
  }) {};

  autotinypic = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "autoTinyPic";
    plugname = "autoTinyPic";
    plugid = "com.hhh.plugin.auto.tinypic";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12179/60686/autoTinyPic.zip";
      sha256 = "1vss9k6xl4cfbmw0bbhhqp5lzad5f133ylfkviigsib4kra8sj4v";
      name = "autoTinyPic-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/3HJack";
      license = lib.licenses.asl20;
      description = ''
        Automatically add png or jpg images to the project to the https://tinypng.com/ for compression.
      '';
    };
  }) {};

  autodoc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "autodoc";
    plugname = "autodoc";
    plugid = "com.ludditelabs.autodocintellij.plugin";
    version = "0.2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8561/50430/autodoc-intellij-plugin.zip";
      sha256 = "1v7v1gr1rcqd2dnyn5bwlv6j7wla7jxpj4761kx0jg3zk4iwi9yl";
      name = "autodoc-0.2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://autodoc.ai/";
      license = lib.licenses.asl20;
      description = ''
        Validate and auto fix source code documentation.

      
        Code -&gt; Autodoc file to generate documentation strings for Python.
        Code -&gt; Autodoc project to generate documentation strings for all files of a project.
        Settings: Settings -&gt; Tools -&gt; autodoc.
      

      
      Currently the plugin formats code in Google style, but can read reStructuredText and NumPy style.
      

      
      NOTE: This release temporarily disables Java support until better
      implementation.
      

      
      Current features:
      
        Adds missing docstrings.
        Follows changes in the API signatures and updates 'Args' section.
        Wraps long lines in docstrings.
        Supports the following reStructuredText constructions:
          
            admonitions
            block quotes
            comments
            definition lists
            doctests
            field lists
            common inline formatting (emphasis, strong emphasis, etc)
            line blocks
            lists
            literal blocks
            option lists
            sections.
          
          Other markup constructions are not supported yet.
        
        Understands docstring styles: reStructuredText, Google, NumPy.
      
      

      
      Future plans:
      
        Configuration support.
        Format python docstring in NumPy and reStructuredText formats.
        Support more reStructuredText constructions.
        Plugin documentation.
        Support more languages (priority: c/c++, Java).
        Better reStructuredText support.
        Class attributes support.
        Module and its attributes support.
        Inherited documentation.
        ...
      '';
    };
  }) {};

  aweme-as-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "aweme-as-plugin";
    plugname = "aweme-as-plugin";
    plugid = "com.aweme.as.plugin";
    version = "1.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11078/49751/aweme-as-plugin-1.2.3.jar";
      sha256 = "0q7d008m1f789riq03yir741j1h79a72bc1h649iyvbhzgzszwir";
      name = "aweme-as-plugin-1.2.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bytedance.com";
      license = lib.licenses.mit;
      description = ''
        a plugin for YUZHOUTIAO!
      '';
    };
  }) {};

  awesome-xbatis = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "awesome-xbatis";
    plugname = "awesome-xbatis";
    plugid = "me.xiongjinteng.plugin.xbatis";
    version = "2020.04";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10280/84508/awesome-xbatis-2020.04.jar";
      sha256 = "1a9gx5j32wy5knk0mfzbi7rlki7hvgy27a2659anbwi2ghh948s9";
      name = "awesome-xbatis-2020.04.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://xjt2016.gitee.io";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://xjt2016.gitee.io";
        free = false;
      };
      description = ''
        Solve the Java Mybatis method, the statementId in Mapper or Ibatis Dao, can't map the jump with the SQL fragment in Xml.
      '';
    };
  }) {};

  beetlsql-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "beetlsql-support";
    plugname = "beetlsql-support";
    plugid = "com.ibeetl.intellij.support";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15097/106426/beetlsql-support-1.0.6.jar";
      sha256 = "0p3mkgai5zkl2m057szd9vr8bwsnipl11qia7hd8g8cxmqj6xg7r";
      name = "beetlsql-support-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://ibeetl.com";
      license = lib.licenses.gpl3Only;
      description = ''
        BeetlSQL is a persistant framework that like mybatis. It uses a similar template language to JavaScript.
    And it have high performance more than most of persistant framework.
    This plugin provide code complete and BeetlSQL Mapper Interface jump to markdown file  feature.
    In future, may provide more feature.
      '';
    };
  }) {};

  better-mybatis-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "better-mybatis-generator";
    plugname = "better-mybatis-generator";
    plugid = "cn.kt.better.mybatis.generator.id";
    version = "1.5.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11021/53186/better-mybatis-generator.zip";
      sha256 = "17hd95975zkawg0v7r7fhzg1ji7a5d81jpcvrmdccy79rva25zk4";
      name = "better-mybatis-generator-1.5.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kmaster/better-mybatis-generator";
      license = lib.licenses.gpl3Only;
      description = ''
        插件功能：在idea的database工具中使用，选择表，生成mybatis相关的代码。已支持的数据库：Mysql、Mysql8、Oracle、MariaDB。待验证：PostgreSQL与SQL Server 
        Step1: 连接Database: View &gt; Tool Windows &gt; Database。
        Step2: 选择表（一或n,建议n小于10），右击 选择 mybatis generate 打开插件主页。
        Step3: 填写配置，检查无误后点击 ok。
        Step4: 首次使用时请提供账号密码。
        Step5: 检查、使用生成的代码。
   Setting: Tools &gt; MyBatis generator Plugin 此处设置默认配置，未设置则使用程序默认配置。
   更多的插件使用截图和注意事项见： 插件使用介绍
   

   
        Function: Use in idea database tool，right click table to generate mybatis files (include:dao、example、domain、xml).Currently supported databases: Mysql,Mysql8, Oracle. To be verified: Postgre SQL and SQL Server
        Step1: Connecting to Your Database: View &gt; Tool Windows &gt; Database.
        Step2: Select tables(one or N,recommend N less than 10),Right Click and select mybatis generate to open generator main UI.
        Step3: Check configuration in main ui,click ok.
        Step4: Provide account and password for the first time.
        Step5: Generate work finish,check files and it can be use.
   Setting: Tools &gt; MyBatis generator Plugin set custom default configuration，If not, use the program default configuration.
   More tutorial please visit here
      '';
    };
  }) {};

  birdseye = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "birdseye";
    plugname = "birdseye";
    plugid = "com.github.alexmojaki.birdseye.pycharm";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10917/50752/birdseye-pycharm.zip";
      sha256 = "0gq48lyxvzkylrq9a2s1zl89iq5i8sz8p3jz415n07syykl0gzzh";
      name = "birdseye-1.1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alexmojaki/birdseye-pycharm";
      license = lib.licenses.mit;
      description = ''
        Integrates the python debugger birdseye.
      '';
    };
  }) {};

  bookmarkx4idea = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "bookmarkx4idea";
    plugname = "bookmarkx4idea";
    plugid = "cn.alanhe.plugin.bookmarkx4idea";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12498/80824/bookmarkx4idea.jar";
      sha256 = "1aab7xwrakjbjiymyim8blgj1c4kj9qa2pi2jamji1yxndir25zp";
      name = "bookmarkx4idea-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/alanhg/bookmarkex4idea";
      license = lib.licenses.mit;
      description = ''
        In CodeReview, I used to bookmark to record the problematic lines of code, and I want bookmarks to support customize feature, so I made this plugin to enhance bookmark.
      '';
    };
  }) {};

  buildergenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "builderGenerator";
    plugname = "builderGenerator";
    plugid = "com.zw.builder";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10567/44499/BuilderGenerator.jar";
      sha256 = "06632ikl9qggxj4prdh7bld10q1p5qjh2jggpr6dxh2sl51a5y5q";
      name = "builderGenerator-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/we1zhang";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/we1zhang";
        free = false;
      };
      description = ''
        Generate class builder. 
 
most HTML tags may be used
      '';
    };
  }) {};

  bzr4idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "bzr4idea";
    plugname = "bzr4idea";
    plugid = "bzr4idea";
    version = "2.0-M3-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2172/7045/bzr4idea_7045.zip";
      sha256 = "1535d8br2bb8cbvbkj2kvshplr39yafpipfk73k9cgrc1ivmnq1w";
      name = "bzr4idea-2.0-M3-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://launchpad.net/bzr4idea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://launchpad.net/bzr4idea";
        free = false;
      };
      description = ''
        Provides integration with Bazaar distributed version control system.
    
    Features:
    
    add, remove, rename
    status, commit
    rollback
    history
    push, pull
    
    
    Requires: Bazaar (v1.11+) with xmloutput plugin (v0.8+).
    
		Visit our home page.
		Join us on Facebook.
    Report issues.
    Watch our progress.
    Snoop on developer channel.
    
    --bzr4idea team
      '';
    };
  }) {};

  camelbar = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "camelBar";
    plugname = "camelBar";
    plugid = "daehyun.kim.camelBar";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14811/93889/camelbarplugin.jar";
      sha256 = "1cdsgksdq58kl2xk6dfys9dw2zq8r1j7inyja04dyy5a7jyca6d5";
      name = "camelBar-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://daehyun.kim?src=camelBar";
      license = lib.licenses.mit;
      description = ''
        Convert snake_case to camelCase.
      See Edit menu or use SHIFT + ALT + U.

      for example:
      
        user_name -&gt; userName
        user-name -&gt; userName
      '';
    };
  }) {};

  carbon-now-sh = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "carbon-now-sh";
    plugname = "carbon-now-sh";
    plugid = "carbon-now-sh";
    version = "1.3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10469/108450/idea-carbon-now-sh-1.3.0.zip";
      sha256 = "0c2wrrixna9a6g40rvh2k3shwyw238a0rald7x0c2wlhsidd619v";
      name = "carbon-now-sh-1.3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/trubitsyn";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/trubitsyn/idea-carbon-now-sh/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Open the selected code in https://carbon.now.sh
      '';
    };
  }) {};

  cedarsoft-serializer-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "cedarsoft-Serializer-Generator";
    plugname = "cedarsoft Serializer Generator";
    plugid = "com.cedarsoft.serialization.generator.intellij-plugin";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9389/45628/cedarsoft-serializer-generator.jar";
      sha256 = "1249wrf6mip5diamz5mhvf83gc6ff4a250rq2qpvj9ivhnci4qki";
      name = "cedarsoft-Serializer-Generator-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.cedarsoft.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.cedarsoft.org/gpl3ce";
        free = false;
      };
      description = ''
        This plugin creates Serializers and Tests based upon 
cedarsoft Serialization.
      '';
    };
  }) {};

  challenging-timer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "challenging-timer";
    plugname = "challenging-timer";
    plugid = "com.github.pirocraft.challengingtimer";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15297/104976/ChallengingTimer-1.0.2.zip";
      sha256 = "1m85h7dk2czy96h9vyvz7rvgx131wqkd2xzrlg863cfk5zm84mah";
      name = "challenging-timer-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/pirocraft/challenging-timer";
      license = lib.licenses.asl20;
      description = ''
        Use the challenging timer to practice TDD baby-steps, 
challenging yourself to make small changes that keep your tests green after each period
      '';
    };
  }) {};

  cheat-sh-code-snippets = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "cheat.sh-code-snippets";
    plugname = "cheat.sh code snippets";
    plugid = "pl.szymonprz.idea-cheatsh-plugin";
    version = "1.3.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11942/95135/idea-cheatsh-plugin-1.3.2.zip";
      sha256 = "08br8zf2rdjh7c1mnii75bybqd28rl4pkks8h7z4cybd20i74icf";
      name = "cheat.sh-code-snippets-1.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/szymonprz/idea-cheatsh-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/szymonprz/idea-cheatsh-plugin/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for loading code snippets from cheat.sh directly to editor without need to switch your mental context
      '';
    };
  }) {};

  cjk-conv = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "cjk-conv";
    plugname = "cjk-conv";
    plugid = "sc.plugin.cjkconv";
    version = "2019.7.6.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11012/65200/idea-cjk-conv.jar";
      sha256 = "0653y702d3xx35dqxdw0dyckfvzal5wpl6x04w77rp2ly868fxf6";
      name = "cjk-conv-2019.7.6.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bluelovers/idea-cjk-conv/";
      license = lib.licenses.mit;
      description = ''
        idea-cjk-conv README
convert chinese／hanzi between Shinjitai／Traditional／Simplifiedidea-cjk-conv 中文漢字 轉換 新字体／繁體／简体
install
https://github.com/bluelovers/idea-cjk-conv

github
jetbrains

Feature

Feature already in this plugin


convert Traditional / Simplified (safe / unsafe mode)
convert full-width / half-width (need add more char support)


已實現功能


簡繁互轉 (分為 安全模式 與 危險模式)
全形 半形 轉換 (尚未完整支援所有這類字元)

Roadmap

but need help make it


support Shinjitai
support menu on search input field
fork feature from cjk-conv
fork feature from regexp-cjk
fully support convert full-width / half-width (full range)


以下功能 礙於 本人惰性與實際上不懂 kotlin / java 所以距離實現可能遙遙無期


支援日文漢字互轉 (新字体)
支援搜尋輸入框
將 cjk-conv 的功能移植進來
將 regexp-cjk 的功能移植進來
支援 全形/半形 轉換 (完整字元範圍)

Link

cjk-conv
regexp-cjk
Run Configuration for TypeScript


this plugin copy some code from

https://github.com/YiiGuxing/TranslationPlugin
https://github.com/krasa/StringManipulation


Screenshot
      '';
    };
  }) {};

  cloudutils = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "cloudutils";
    plugname = "cloudutils";
    plugid = "wiki.crowd.cloudutils";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11085/51248/CloudUtils.zip";
      sha256 = "15mabkcxmmjzw9v3nmngnsc3ixmynvb3h2j50yp21krmxkglyqwh";
      name = "cloudutils-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.crowd.wiki";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://talk_later.crowd.wiki";
        free = false;
      };
      description = ''
        CloudUtils
  
  English
  
      editing and Sharing Utils Method.
  
  中文
  
      编辑、共享 Utils 方法
      '';
    };
  }) {};

  cmdtools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "cmdTools";
    plugname = "cmdTools";
    plugid = "com.github.zouyq.cmdTools";
    version = "3.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12413/62361/CmdTools.zip";
      sha256 = "058gn03x68g0c4rlhq3fz5lpbsq9fl00fc7y5hvjnawsyf4rhsdk";
      name = "cmdTools-3.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        cmdTools is a mini windows cmd tools for one click shortcut operation:
    
    1.0 open file in file explore 
    2.0 open cmd on choosed file
    3.0 kill all java.exe process
      '';
    };
  }) {};

  cmp-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "cmp-helper";
    plugname = "cmp-helper";
    plugid = "com.shuqi.tools.cmp-helper";
    version = "0.9.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13579/79854/cmp-helper-idea.jar";
      sha256 = "0zmcfc3f6sj2i4njmzy173padi8np2p0pkylih8fmnx2vxkvv0pq";
      name = "cmp-helper-0.9.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/shuqi/cmp-helper-idea";
      license = lib.licenses.asl20;
      description = ''
        cmp-helper
      '';
    };
  }) {};

  codeappend = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "codeAppend";
    plugname = "codeAppend";
    plugid = "codeAppend";
    version = "1.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11501/76109/codeAppend-1.0.8.zip";
      sha256 = "1swwb7bld4ki438jqvcsqwg11hgsgzmr3rq7j5x4jzkkyj1brcki";
      name = "codeAppend-1.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/laoziyaonitian/codeAppend";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/laoziyaonitian/codeAppend";
        free = false;
      };
      description = ''
        input sql code, column if not exists,append field to [entity\mapper] file.
      input sql code, output [entity\mapper\dao\service] java file.
      openSource and Docs
      '';
    };
  }) {};

  codereview = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "codeReview";
    plugname = "codeReview";
    plugid = "com.mqx.codeReview";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12234/61470/codeReviewPlugin.zip";
      sha256 = "0kc9rp1909fz8xjnkw3gaz6bc1v38q5j366hmqwni8xwv0a7y886";
      name = "codeReview-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        1.Use the "Alt +a" shortcut key to pop up the record prompt box
    2.Document changes or problems during code reviews
    3.You can export the recorded questions with execl
      '';
    };
  }) {};

  codehelper-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "codehelper.generator";
    plugname = "codehelper.generator";
    plugid = "com.ccnode.codegenerator.mybatis.generator";
    version = "2018.12.14";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8640/53161/codehelper.generator-2018.12.14.zip";
      sha256 = "1qjqminr7kvmnh8zqshi19f3j3ab0gylmqqpjv0mdappnkqq6ifs";
      name = "codehelper.generator-2018.12.14.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.codehelper.me/generator";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zhengjunbase/codehelper.generator/blob/master/LICENSE";
        free = false;
      };
      description = ''
        GitHub
      |&nbsp;Issues

      An Generator, generate code more easily and productive.
      GenAllSetter Features
      
      Auto gen all Setter method(method start with set) when you click GenAllSetter btn(support shortcut).
      Auto gen all Setter method with default value when you click GenAllSetter btn twice.
      
       GenAllSetter Usage
      
      Click main menu Tools-&gt; Codehelper-&gt; GenAllSetter button to generate the code
      
      GenDaoCode Features
      
      Generate dao, service, sql and mybatis xml file according to pojo by one click.
      Update sql, mybatis xml file elegantly when the pojo file updated by one click.
      Provide insert, insertList, select, update and delete method.
      You can generate for multi pojo by once click.
      Recognize comment of pojo fields automatically and add as sql comment.
      Support rich config by config file, and use default config for no config file.
      Shortcut for generate.
      Support java + MySQL and later will support more DB.
      code at GitHub to learn more.
      
      GenDaoCode Usages
      
      Click main menu Tools-&gt; Codehelper-&gt; GenDaoCode button to generate the code.
      Method One: Click GenDaoCode, and then enter the Pojo name in prompt box, multiple Pojo separated by | ,
      CodeHelper will generate code use default config.
      Method two: Add a codehelper.properties in you project directory.Click GenDaoCode and Codehelper Generator will generates code for you based on codehelper.properties file.
      
      GenAllSetter 特性
      
      在Java方法中, 根据 new 关键词, 为Java Bean 生成所有Setter方法。
      按GenAllSetter键两次, 会为Setter方法生成默认值。
      可在Intellij Idea中为GenAllSetter设置快捷键。
      如何使用:
      将光标移动到 new 语句的下一行。
      点击主菜单Tools-&gt; Codehelper-&gt; GenAllSetter, 或者按下GenAllSetter快捷键。
      
      GenDaoCode 特性
      
      根据Pojo 文件一键生成 Dao，Service，Xml，Sql文件。
      Pojo文件更新后一键更新对应的Sql和mybatis xml文件。
      提供insert，insertList，update，select，delete五种方法。
      能够批量生成多个Pojo的对应的文件。
      自动将pojo的注释添加到对应的Sql文件的注释中。 
      丰富的配置，如果没有配置文件，则会使用默认配置。
      可以在Intellij Idea中快捷键配置中配置快捷键。
      目前支持MySQL + Java，后续会支持更多的DB。
      如果喜欢我们的插件，非常感谢您的分享。
      
      GenDaoCode 使用方法
      
      主菜单Tools-&gt; Codehelper-&gt; GenDaoCode 按键便可生成代码。
      方法一：点击GenDaoCode，然后根据提示框输入Pojo名字，多个Pojo以 | 分隔。
      Codehelper Generator会根据默认配置为您生成代码。
      方法二：在工程目录下添加文件名为codehelper.properties的文件。
      点击GenDaoCode，Codehelper Generator会根据您的配置文件为您生成代码
      如何配置: https://github.com/zhengjunbase/codehelper.generator
      
      联系作者 &amp; 加入开发
      
        QQ群: 322824200
      '';
    };
  }) {};

  coder-helper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "coder-helper";
    plugname = "coder-helper";
    plugid = "org.lr.helper";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10400/42564/coder-helper.zip";
      sha256 = "1h15fzghbrw270ivgi8y7s2cyhbsc4qj4gjq16ljfxdaq9d1f55f";
      name = "coder-helper-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zimuwse";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/zimuwse";
        free = false;
      };
      description = ''
        A java coder helper and more functions will be appended soon.
      '';
    };
  }) {};

  codetime = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "codetime";
    plugname = "codetime";
    plugid = "com.github.si9ma.codetimejetbrains";
    version = "0.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15507/107777/codetime-0.0.7.zip";
      sha256 = "1qcxwrhm3q7mp274i1b4m8i85rjzdc2n0l6m4lhpwvafia1bf2sw";
      name = "codetime-0.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://codetime.datreks.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/datreks/codetime-jetbrains/blob/main/LICENSE";
        free = false;
      };
      description = ''
        Codetime jetbrains plugin. Statistical analysis of your programming time.
Installation

Using IDE built-in plugin system:Preferences &gt; Plugins &gt; Marketplace &gt; Search for "codetime" &gt;
  Install PluginManually:Download the latest release and install it manually using
  Preferences &gt; Plugins &gt; ⚙️ &gt; Install plugin from disk...

Usage

Access https://codetime.datreks.com/ to signup and get an api tokenRestart your IDE after you install pluginEnter api token in the CodeTime configuration windowVisit https://codetime.datreks.com/ to see your code time statistical analysis.

Configuration

Tools &gt; Codetime Configuration &gt; Input Token
Troubleshooting
Turn debug mode:Tools &gt; Codetime Configuration &gt; Enable Debug Mode


Check Log(idea.log file):Help &gt; Show Log
      '';
    };
  }) {};

  componentplugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "componentPlugin";
    plugname = "componentPlugin";
    plugid = "com.dhc.plugin.component";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10790/49100/component.jar";
      sha256 = "06vz2440jirhgrq2pa49nqbkm3xddnmj75sd9dyd0rww9imp57wk";
      name = "componentPlugin-1.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/chengzichen/Flyabbit";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "apl-1.0";
        free = false;
      };
      description = ''
        use Component with FMVP  template  Quickly and easily.
      '';
    };
  }) {};

  convert-yaml-to-properties = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "convert-yaml-to-properties";
    plugname = "convert yaml to properties";
    plugid = "cn.sugarapp.plugins.yaml2props";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12446/66839/yaml2props-plugin.jar";
      sha256 = "1q1vc98i2dwqgjnb4z619whv7akz7c8pp2izcf5h6kac9i41lc56";
      name = "convert-yaml-to-properties-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.sugarapp.cn/";
      license = lib.licenses.asl20;
      description = ''
        - At first select yaml file.
      - Convert action is also available from the context menu after right-clicking yaml file. You can find it also in the menu:
        Code -&gt; convert yaml to properties.
      '';
    };
  }) {};

  cppcheck = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "cppcheck";
    plugname = "cppcheck";
    plugid = "com.github.johnthagen.cppcheck";
    version = "1.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8143/102059/clion-cppcheck.jar";
      sha256 = "09bjfr6wi5phqxsknyk23avhnd61mzd7r7ksvz5ym78wxf5q8g48";
      name = "cppcheck-1.5.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/johnthagen";
      license = lib.licenses.bsd3;
      description = ''
        Cppcheck plugin for CLion.

      Features:
      
        Runs Cppcheck on the fly while you write code
        Highlights lines and displays Cppcheck error messages
        Supports passing options to Cppcheck
      
      

      Usage:
      
        
          Install the cppcheck tool using directions on its homepage.
          This plugin does not bundle the Cppcheck tool itself, which must be installed separately.
        
        Install this Cppcheck plugin into CLion
        Configure the plugin with the absolute path to the Cppcheck executable into the
        'Cppcheck Path' configuration field
        
          Windows
            
              File | Settings | Cppcheck Configuration
              Usually the path is C:\Program Files (x86)\Cppcheck\cppcheck.exe
            
          
          macOS
             
               CLion | Preferences | Cppcheck Configuration
               In a terminal run `which cppcheck` to find the path to Cppcheck.
               If you installed it with Homebrew, the path will be
               /usr/local/bin/cppcheck
             
          
          Linux
            
              File | Settings | Cppcheck Configuration
              In a terminal run `which cppcheck` to find the path to Cppcheck.
              If you installed it with your system's package manager, it is probably located at
              /usr/bin/cppcheck
            
          
        
      
      

      Known issues:
        Cppcheck is not designed to be run on header files (.h) directly, as must be done for this
        plugin, and as a result may have false positives.
        When run on header files directly, Cppcheck defaults to C as the language, which will
        generate false positives for C++ projects. C++ projects should leave --language=c++ appended to the
        Cppcheck options.
        In addition, `--enable=unusedFunction` is not supported and will generate false positives.
      '';
    };
  }) {};

  ctttr = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ctttr";
    plugname = "ctttr";
    plugid = "com.bowmanb.ctttr";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8100/22996/ctttr.jar";
      sha256 = "0aka23srfq3fd9azrrs55z91i775zb8fdrpf60739gmi9j665mgn";
      name = "ctttr-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bowmanb/ctttr";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/bowmanb/ctttr/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Close tabs to the right, for Android Studio, IntelliJ IDEA, and other JetBrains products.
      '';
    };
  }) {};

  darkerla = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "darkerla";
    plugname = "darkerla";
    plugid = "au.com.clearboxsystems.plugin.jetbrains.darkerla";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12230/66033/darkerla.jar";
      sha256 = "12bbk2y7418cbnrl3khvrdj5sdn6snrxqbnfkrjanac979rqy7m1";
      name = "darkerla-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.clearboxsystems.com.au/";
      license = lib.licenses.mit;
      description = ''
        A darker darkula IDE theme with some base 16 tomorrow night inspiration. No editor color scheme included.
      '';
    };
  }) {};

  dart-json-serialize = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "dart-json-serialize";
    plugname = "dart json serialize";
    plugid = "com.github.jokerddj.dart_json_serialize";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12517/63571/dart_simple_json.jar";
      sha256 = "0vj7xzbq2gmnxfdi7mmw001mb0571g4q1xdrfpkf0jgga3ms7l4h";
      name = "dart-json-serialize-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jokerddj/dart_json_serialize.git";
      license = lib.licenses.asl20;
      description = ''
        dart json factory generater
      '';
    };
  }) {};

  dart-extensions = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "dart.extensions";
    plugname = "dart.extensions";
    plugid = "com.herbert.george.dart.extensions";
    version = "0.0.1+3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13529/74629/dart.extensions-0.0.1+3.zip";
      sha256 = "12mif3rlqqzndkk6qaqa6q5k9k286pf0pqgcp1gzabhm6h6gc5xv";
      name = "dart.extensions-0.0.1+3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/georgeherby/dart.extensions";
      license = lib.licenses.gpl3Only;
      description = ''
        dart.extensions provides snippets to Android Studio and IntelliJ letting you create method, property and operator extensions in Dart code (including Flutter).
      '';
    };
  }) {};

  databinding-generateallfiledsetter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "databinding-generateAllFiledSetter";
    plugname = "databinding generateAllFiledSetter";
    plugid = "com.leon.databinding.generate.all.filed.setter";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9819/36924/generatorAllFiledSetter.jar";
      sha256 = "0fp1h0m286z49k14j15dix5c5n3sdcl90a01qm939xs9ma9xdcm9";
      name = "databinding-generateAllFiledSetter-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/njleonzhang/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/njleonzhang/";
        free = false;
      };
      description = ''
        Adds an option to generate a set function with notifyChange for all filed to the generate menu (cmd + n). 
fork from https://github.com/jkovacs/CopyConstructorPlugin
      '';
    };
  }) {};

  db4o-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "db4o-plugin";
    plugname = "db4o plugin";
    plugid = "pl.vltr.db4oplugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7997/21920/db4o-plugin.zip";
      sha256 = "0yx126zh6xwlrzfxcrl1a2rr6a5ggqnv5h7xpaf9cr7z3y1m87z6";
      name = "db4o-plugin-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/vltRz00r/db4o-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/vltRz00r/db4o-plugin";
        free = false;
      };
      description = ''
        db4o integration - https://github.com/vltRz00r/db4o-plugin
      '';
    };
  }) {};

  dbcompare = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "dbcompare";
    plugname = "dbcompare";
    plugid = "com.gelonggld.plugin.dbcompare";
    version = "1.1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10132/41783/db2bean.zip";
      sha256 = "1h9y8r5ajfmbwm6mrhg28wic9wf4d8b3sag7nqmhry5m38pj1l5m";
      name = "dbcompare-1.1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.gelonggld.top";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gelonggld.top";
        free = false;
      };
      description = ''
        比较数据库和对象. 对着文件夹点击'db2bean'会遍历数据库表对象和项目中的对象进行匹配。选择要生成的对象，则会生成与表对象的对象。 对文件点击'db2bean'会生成表对象，如果已经有表对象则会进行比较 支持oracle/mysql Compare databases and objects. match the database table object and the object in the project by clicking'db2bean'on the folder. Select the object to be generated, then generate the object with the table object. Clicking on'db2bean'generates a table object, and if there are already table objects, it compares them oracle/mysql support.
      '';
    };
  }) {};

  ddescriber-for-jasmine = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ddescriber-for-jasmine";
    plugname = "ddescriber for jasmine";
    plugid = "com.karateca.jasmineDescriber";
    version = "3.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7233/100586/ddescriber.jar";
      sha256 = "1k8r8m5b2p6gv21hmlp19a6815w0ahjxck7cr3iqmsp0jpdqii7i";
      name = "ddescriber-for-jasmine-3.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.andresdominguez.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/andresdominguez/ddescriber/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A plugin to quickly run jasmine unit tests and suites by switching between
      describe() / fdescribe() / ddescribe() / xdescribe() and it() / fit() / iit() / xit()
    
    
      Just type Ctrl + Shift + D (Command + Shift + D on a Mac) to launch a dialog that lets you choose which suites or
      unit tests you want to include or exclude.
    
    
      Use the following shortcuts: (Alt I) to include, (Alt X) to exclude, and (Alt G) to jump to the selected test. The
      plugin will automatically add an iit/fit or fdescribe/ddescribe to the selected node if you don't have any pending changes.
    
    
      I have tested it on Webstorm and Intellij.
    
    
      Download the code at: https://github.com/andresdominguez/ddescriber
      '';
    };
  }) {};

  detekt = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "detekt";
    plugname = "detekt";
    plugid = "detekt";
    version = "1.6.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10761/100094/Detekt_IntelliJ_Plugin-1.6.1.zip";
      sha256 = "1a9x9dnxkbdsgfvfy87dlbh4h49f6l8vm8h61d6fc4i82rdqpj5l";
      name = "detekt-1.6.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/detekt/detekt";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/detekt/detekt-intellij-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for detekt, static code analysis for kotlin.
      '';
    };
  }) {};

  devudf = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "devUDF";
    plugname = "devUDF";
    plugid = "cwi.nl.devUDF";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12063/59169/simplifiedudf.zip";
      sha256 = "09yvn5cg3iy1gisw3jgs9yvniai18qhyl2rs0ps7yavn3j47n4xa";
      name = "devUDF-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.cwi.nl";
      license = lib.licenses.mit;
      description = ''
        The devUDF plugin is developed for the PyCharm IDE and facilitates the use of advanced IDE features for development of MonetDB/Python UDFs.

It allows developers to create, modify and test UDFs without leaving their IDE environment. All features of the IDE can be used to develop UDFs, including the sophisticated interactive debugger and VCS support.
      '';
    };
  }) {};

  devdocs = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "devdocs";
    plugname = "devdocs";
    plugid = "com.bchan84.intellij.devdocs";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15367/102283/intellij-devdocs.jar";
      sha256 = "0zb0nsvna9x1xighli3cv57lx1nq0l0vyrlymv9bxafhw65hchq5";
      name = "devdocs-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bchan84x/intellij-devdocs";
      license = lib.licenses.mit;
      description = ''
        devdocs for Intellij
      
      A simple Intellij plugin for searching on devdocs.io
      
      Usage
      
      The default shortcut assigned to smart-search is Ctrl-K (Windows, Linux).
      The plugin either searches for the statement at caret position or the current selection.
      It will identify the programming language in use and request filtered results accordingly.
      A non filtered search over all documentation entries can be invoked by adding the Alt modifier key to the shortcut.
      '';
    };
  }) {};

  dot = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "doT";
    plugname = "doT";
    plugid = "com.webschik.doT";
    version = "1.5.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7327/16293/idea-doT.jar";
      sha256 = "0cbrinixazjvjnp5s2zqhfi95byshw5xljlp02cpfsrgcvhfvhz2";
      name = "doT-1.5.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/webschik/idea-doT";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/webschik/idea-doT/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin for 
doT.js templates support. 
 
Donate with LiqPay
      '';
    };
  }) {};

  documentum-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "documentum-plugin";
    plugname = "documentum-plugin";
    plugid = "documentum-plugin";
    version = "1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10240/46565/documentum-plugin-1.3-assembly.zip";
      sha256 = "0862v4xqlnv0yi0fd8xlf8cr5hghc8z9ynvyh06m6xar2zym3izi";
      name = "documentum-plugin-1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/toolkas/documentum-plugin";
      license = lib.licenses.asl20;
      description = ''
        Documentum Plugin
      '';
    };
  }) {};

  dotplugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "dotplugin";
    plugname = "dotplugin";
    plugid = "org.plugin.dot.id";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10312/85483/dotplugin.zip";
      sha256 = "01sa0n3mvpjxag7bvdmm813hrz8ih387zhwc6196n1w050qxw7v4";
      name = "dotplugin-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/bzixilu/dotplugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/bzixilu/dotplugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        This plugin provides basic editing support for dot language files (dot and gv) in IntelliJ IDEA
      '';
    };
  }) {};

  duplicateclassfinder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "duplicateClassFinder";
    plugname = "duplicateClassFinder";
    plugid = "org.lff.plugin.dupfinder";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9845/37014/dupFinder-0.2.zip";
      sha256 = "0axcwmxk80zigpnj9l66mh8ajgf5y1ym7hyfhxkn0cgpv02w5y2z";
      name = "duplicateClassFinder-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/lff0305/duplicateClassFinder";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/lff0305/duplicateClassFinder/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Finds the duplicate classes in dependencies
      '';
    };
  }) {};

  esnippet-pro-plugin-1_4_3 = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "eSnippet-Pro-plugin-1_4_3";
    plugname = "eSnippet Pro plugin";
    plugid = "eSnippet Pro plugin_obsolete";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3675/13266/snippet_plugin.zip";
      sha256 = "0dn3yfh6qs7g5wsf9w9fdig5zm5pj5r214iscmprzmnq4fhlirsy";
      name = "eSnippet-Pro-plugin-1_4_3-1.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://snippet.mvnsearch.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://snippet.mvnsearch.org";
        free = false;
      };
      description = ''
        Make it to access code snippet repository easy! The central repository is 
http://snippet.mvnsearch.org. You can find all source code at 
http://code.google.com/p/esnippet 

  Features List: 
 Snippet repository 
 Snippet Search 
 Snippet Live Template 
 Snippet Editing
      '';
    };
  }) {};

  easycoding-utils = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "easyCoding-utils";
    plugname = "easyCoding utils";
    plugid = "com.dev.tools.kit.easycoding";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12818/68515/easycoding.zip";
      sha256 = "192p67iblsly88jdl4ha39ryfg1sc319njp674amwd7mnjbd308q";
      name = "easyCoding-utils-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://future-big-god.github.io/easyCoding/";
      license = lib.licenses.bsd2;
      description = ''
        Happy programming gadgets, currently available features a key to generate api, one-click generate convert code, welcome to eat, and look forward to your valuable comments
      '';
    };
  }) {};

  easyb = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "easyb";
    plugname = "easyb";
    plugid = "org.easyb.easyb_obsolete_obsolete";
    version = "0.9.7-1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2916/8158/org.easyb.easyb_8158.zip";
      sha256 = "1cgjjh6n99bl7r54jqzp3p9im113nggl5cqkhfywqs8xlcgjg9gz";
      name = "easyb-0.9.7-1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        easyb behavior driven development framework
      '';
    };
  }) {};

  easyb-x = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "easyb-X";
    plugname = "easyb-X";
    plugid = "org.easyb.easyb_obsolete";
    version = "1.1-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6017/9405/org.easyb.easyb_9405.zip";
      sha256 = "0y92wfh6jx2mpymg299bhi6i5x51d7n8qarjqj62mj8m13v3hxbs";
      name = "easyb-X-1.1-SNAPSHOT.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        easyb behavior driven development framework. This is the version for IDEA X
      '';
    };
  }) {};

  ecmascript4mps = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ecmascript4mps";
    plugname = "ecmascript4mps";
    plugid = "org.mar9000.mps.ecmascript";
    version = "2.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8199/95917/ecmascript4mps.zip";
      sha256 = "0idppdb5fkfhlywv3vhdggxbffggr1bf8fhs3100y5x4dfbppp45";
      name = "ecmascript4mps-2.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.mar9000.org";
      license = lib.licenses.asl20;
      description = ''
        MPS Ecma script support
      '';
    };
  }) {};

  elementor = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "elementor";
    plugname = "elementor";
    plugid = "com.karateca.elementorIdea";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7636/18127/elementor-idea.jar";
      sha256 = "0jjq0sw303zciiq5fbirldfw1lhq5mb6qcdhrm3fvci7mlq5zz1g";
      name = "elementor-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.andresdominguez.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/andresdominguez/elementor-idea/blob/master/LICENSE";
        free = false;
      };
      description = ''
        elementor 
 A plugin to connect to elementor an improved element explorer for Protractor.  Instructions 
 
 Start elementor 
 Select a locator or expression that you test against Protractor 
 Press SHIFT Ctrl P (Command SHIFT P on a Mac) or right click and select &quot;Test selected locator&quot; to run.  
 See the results in a popup
      '';
    };
  }) {};

  emacsideas = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "emacsIDEAs";
    plugname = "emacsIDEAs";
    plugid = "emacsIDEAs";
    version = "1.4.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7163/34082/emacsIDEAs.jar";
      sha256 = "0b2570s9k5wzwd2h9qq8ri0mj0nrqav22jhb3kjj6y2z9acjyyid";
      name = "emacsIDEAs-1.4.9.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/whunmr/emacsIDEAs";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/whunmr/emacsIDEAs";
        free = false;
      };
      description = ''
        Porting some great extensions of emacs to Intellij IDEA. such as AceJump, CopyWithoutSelectAction. And new created EditWithoutSelection (Cut/Move/Replace without selection).  
AceJump 
 
 C-L 't' 'm' : Basic Word Jump | Type C-L, then type target char (eg. 't') to jump to, then type marker char (eg. 'm') to move caret. 
 C-J 't' 'm' : Basic Char Jump  
 
 
AceJump, jump to special place 
 
 C-L ' ' 'm' : Jump to line end or start. | To show marker on line end and line start, type space ' ' as target char 
 C-L ',' 'm' : Jump to symbol key | Show markers on .{}(|`/\;.{}()[]?_=-+'"!@#''$%^&amp;*)_=  
 
 
Copy without selection: 
 
 C-c w  : Copy word 
 C-c s  : Copy string 
 C-c l  : Copy line 
 C-c b  : Copy block between balanced { and }  
 C-c q  : Copy quoted, such as abcd in "abcd" 
 C-c a  : Copy to line beginning 
 C-c A  : Copy to file beginning 
 C-c e  : Copy to line end 
 C-c E  : Copy to file end 
 C-c p  : Copy paragraph 
 C-c g  : Copy paragraph group (e.g.: entire function including white lines)  
 C-c u  : Copy to paragraph begining 
 C-c d  : Copy to paragraph end 
 C-c ' ' (w | s | l | q | a | A | e | E | p | g | u | d | b)  : Type one space to cut related area 
 C-c ' ' ' ' (w | s | l | q | a | A | e | E | p | g | u | d | b)  : Type two space to select related area 
 
 
Replace target (word | line | paragraph) with text at current caret: 
 
 C-i C-w 't' 'm' : replace target word  
 C-i C-s 't' 'm' : replace target string  
 C-i C-l 't' 'm' : replace target line  
 C-i C-b 't' 'm' : replace target block  
 C-i C-q 't' 'm' : replace target quote  
 C-i C-a 't' 'm' : replace target to line begining  
 C-i C-e 't' 'm' : replace target char to line end  
 C-i C-p 't' 'm' : replace target paragraph  
 C-i C-g 't' 'm' : replace target paragraph group  
 C-i C-u 't' 'm' : replace target to paragraph beginning  
 C-i C-d 't' 'm' : replace target to paragraph end  
 
 
Obtain target (word | line | paragraph), then replace text at current caret: 
 
 C-o C-w 't' 'm' : obtain target word, then replace current word 
 C-o C-s 't' 'm' : obtain target string, then replace current string 
 C-o C-l 't' 'm' : obtain target line, then replace current line 
 C-o C-b 't' 'm' : obtain target block  
 C-o C-q 't' 'm' : obtain target quote  
 C-o C-a 't' 'm' : obtain target to line beginning 
 C-o C-e 't' 'm' : obtain target char to line end  
 C-o C-p 't' 'm' : obtain target paragraph  
 C-o C-g 't' 'm' : obtain target paragraph group  
 C-o C-u 't' 'm' : obtain target to paragraph beginning  
 C-o C-d 't' 'm' : obtain target to paragraph end  
 
 
Copy target (word | line | paragraph), then insert text at current caret: 
 
 C-w C-w 't' 'm' : Copy target word, then insert at current caret 
 C-w C-s 't' 'm' : Copy target string, then insert at current caret 
 C-w C-l 't' 'm' : Copy target line, then insert at current caret 
 C-w C-b 't' 'm' : Copy target block  
 C-w C-q 't' 'm' : Copy target quote  
 C-w C-a 't' 'm' : Copy target to line beginning 
 C-w C-e 't' 'm' : Copy target char to line end  
 C-w C-p 't' 'm' : Copy target paragraph  
 C-w C-g 't' 'm' : Copy target paragraph group  
 C-w C-u 't' 'm' : Copy target to paragraph beginning  
 C-w C-d 't' 'm' : Copy target to paragraph end  
 
 
Cut target (word | line | paragraph), then insert text at current caret: 
 
 C-x C-w 't' 'm' : Cut target word, then insert at current caret 
 C-x C-s 't' 'm' : Cut target string, then insert at current caret 
 C-x C-l 't' 'm' : Cut target line, then insert at current caret 
 C-x C-b 't' 'm' : Cut target block  
 C-x C-q 't' 'm' : Cut target quote  
 C-x C-a 't' 'm' : Cut target to line beginning 
 C-x C-e 't' 'm' : Cut target char to line end  
 C-x C-p 't' 'm' : Cut target paragraph  
 C-x C-g 't' 'm' : Cut target paragraph group  
 C-x C-u 't' 'm' : Cut target to paragraph beginning  
 C-x C-d 't' 'm' : Cut target to paragraph end  
 
 
Delete target (word | line | paragraph...) 
 
 C-d C-w 't' 'm' : delete target word 
 C-d C-s 't' 'm' : delete target string 
 C-d C-l 't' 'm' : delete target line 
 C-d C-b 't' 'm' : delete target block  
 C-d C-q 't' 'm' : delete target quote  
 C-d C-a 't' 'm' : delete target to line beginning 
 C-d C-e 't' 'm' : delete target char to line end  
 C-d C-p 't' 'm' : delete target paragraph  
 C-d C-g 't' 'm' : delete target paragraph group  
 C-d C-u 't' 'm' : delete target to paragraph beginning  
 C-d C-d 't' 'm' : delete target to paragraph end  
 
 
 
Highlight symbol: 
 
 C-, : hightlight-symbol-prev | Jump to prev occurrence of symbol that around caret 
 C-. : hightlight-symbol-next | Jump to next occurrence of symbol that around caret 
 
 
Just one space: 
 
 C-M-Space : Make just one space around caret by Ctrl-Cmd-Space. 
 
 
Separate AceJump copy,cut,select command: 
 
 C-i C-c 't' 'm' : Copy jump area  | C-i C-c means type C-i then continue type C-c 
 C-i C-x 't' 'm' : Cut jump area  
 C-i C-i 't' 'm' : Select jump area  
 C-i C-f 't' 'm' : Basic Jump alias  
 
 
Copy and Replace: 
 
 C-I C-R (w | s | l | q | a | A | e | E | p | g | u | d) 't' 'm' : copy current word/line/paragraph, jump, then replace target word/line/paragraph
      '';
    };
  }) {};

  enjoymanager = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "enjoymanager";
    plugname = "enjoymanager";
    plugid = "com.youzan.mobile.enjoyplugin";
    version = "1.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13437/75454/enjoyDependenceManager.zip";
      sha256 = "1l324jj00xz8fm099jns7cnvxicmi1vd1sy3jgbmvhm37fyb6ap9";
      name = "enjoymanager-1.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.youzan.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/dudumuta";
        free = false;
      };
      description = ''
        EnjoyManager
      
      
      
      GitHub
      
      
      
      a enjoyDependence helper plugin.
      If you encounter any problems, contact Silas.
      '';
    };
  }) {};

  env-files-support = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "env-files-support";
    plugname = ".env files support";
    plugid = "ru.adelf.idea.dotenv";
    version = "2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9525/90639/idea-php-dotenv-plugin-2020.3.jar";
      sha256 = "0sx7f96sa19hmhmwbma0mb64k8zdh2wfhyj66g2cac5qzpqf9463";
      name = "env-files-support-2020.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://adelf.tech";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/adelf/idea-php-dotenv-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Homepage | Github | Issues.
    
    Sponsors
    
    
        
    
    Discussing code is now as easy as highlighting a block and typing a comment right from your IDE. Take the pain out of code reviews and improve code quality. Try it free!

    
    
    
      
    
    The most productive Laravel development environment. Try it free!

    
    
    Features
    
        Environment variables completion for PHP, JavaScript, Python, Go and Ruby languages based on .env, Dockerfile and docker-compose.yml files.
        Go to declaration(in .env file) and usages(in code), by Ctrl(Cmd)+click or hot key(Ctrl(Cmd)-B, etc.)
        .env file syntax highlighter
      '';
    };
  }) {};

  eql-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "eql-plugin";
    plugname = "eql-plugin";
    plugid = "com.github.bpazy";
    version = "0.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10169/49237/eql-plugin-0.2.3.zip";
      sha256 = "0mpm088k9ang1rhahrsmzbaifr2si48mbwwxmvqsfjnnxjjf6yj7";
      name = "eql-plugin-0.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Bpazy/eql-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Bpazy/eql-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Eql plugin.
      Change focus between Java code and eql file.
      Create Eql file with Java code.
      '';
    };
  }) {};

  equals-and-hashcode-reloaded = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "equals-and-hashCode-reloaded";
    plugname = "equals() and hashCode() reloaded";
    plugid = "net.omikron.equalsandhashcodereloaded";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9600/33903/EqualsAndHashCodeReloaded.zip";
      sha256 = "1y1sq1ayc8ik4y2zxq2rfan5iqm9y5ym1m32yqddpah35zzdpz8p";
      name = "equals-and-hashCode-reloaded-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.omikron.net";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.gnu.org/licenses/lgpl.txt";
        free = false;
      };
      description = ''
        Contains inspections: "Field not used in 'equals()/hashCode()' method": Will check if equals() and hashCode() implementations cover all class fields.
      '';
    };
  }) {};

  event-sounds = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "event-sounds";
    plugname = "event-sounds";
    plugid = "com.github.essquilo.eventsounds";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10976/48652/event-sounds-0.1.1.zip";
      sha256 = "0biamq07ppbi9hx58mz1yp5jgzcpq58zlyf5yh3iqn95yrrkbykn";
      name = "event-sounds-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Essquilo/intellij-event-sounds-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        event-sounds
      
      GitHub
      
      WIP: unfortunately, the  old plugin for playing sounds when run configuration starts/fails does not seem to work anymore, so here I am making new version which works.
      '';
    };
  }) {};

  export2local = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "export2Local";
    plugname = "export2Local";
    plugid = "org.summer.export2Local";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11524/107811/export2Local.jar";
      sha256 = "0kl6fbm1yz0ybwdydxp5rc6dbwl1diyj85fpiqa1asdf8wdw6ij6";
      name = "export2Local-1.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/dahai1698/export2Local";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/dahai1698/export2Local/blob/master/LICENSE";
        free = false;
      };
      description = ''
        export2Local
      Export File to Local,Select the appropriate file to export java, class (maven project only) to the local. Two directories (src and target) will be generated, and other files will be exported as they are.
      '';
    };
  }) {};

  farshid-light-v2-6-rainglow--color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "farshid-Light-v2.6-rainglow--Color-Scheme";
    plugname = "farshid Light v2.6 (rainglow)  Color Scheme";
    plugid = "color.scheme.farshid Light v2.6 (rainglow)";
    version = "2.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12353/61819/farshid_Light_v2.6__rainglow__.jar";
      sha256 = "0ln86l9r4h95k62lln297jlqdpz4ihskcvl7wmcmghqw2bxl4r2y";
      name = "farshid-Light-v2.6-rainglow--Color-Scheme-2.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/farshidnejati";
      license = lib.licenses.asl20;
      description = ''
        
      '';
    };
  }) {};

  fireworks = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "fireworks";
    plugname = "fireworks";
    plugid = "fireworks";
    version = "1.40";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1106/6824/fireworks_6824.zip";
      sha256 = "0pw4szswvrahabk2rz1b87hianmylcqrvj1k43hlp0qzb6m55saa";
      name = "fireworks-1.40.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://sites.google.com/site/swing1979/fireworks";
      license = lib.licenses.asl20;
      description = ''
        Features:
				
					Auto run tests
					Track tests edited, and run them
					Run all tests and track failure/error tests
					Better UI for test failures/errors
				
				

				

        
			    Do you know about the following steps? 
				
					Quickly add a test.
					Run all tests and see the new one fail.
					Make a little change.
					Run all tests and see them all succeed.
					Refactor to remove duplication.
				
				How about these?
				
					Quickly add a test.
					Take a break or review the code.
					IDE tells me that there is new test fail.
					Make a little change.
					Take a break or review the code.
					IDE tells me all tests succeed.
					Refactor to remove duplication.
					Take a drink of coffee and IDE tells me there is no broken test.
				
			  
				

				It's great that we have time to run all tests continuously. But more tests we wrote, more time costs.
				It was too much cost for me to run all tests in almost every real project before.
				So it's better that I just run tests about which are cared recently continuously and run all tests
				when I finish a task or need to commit code.
				

				Fireworks is such a plugin for helping TDDers to have more pleasure in process of test-driven development
				by spending more time on writing code.
				The configuration of "Delay time" is key of when to schedule task of running tests about which are cared
				after document changed and no error.
				It's a normal way to trigger a task after a delay time when there is no action performed by keyboard
				or mouse and all documents have no error marked during period of delay time.
				Yes, it's not good enough. I am still working on powup it. Yuo can read the changes of version to find
				what have been improved.
				

				There is a "recent test list" for collecting test about which are cared. JUnit TestCase will be added into "recent test list"
				when we open or edit it. And there is a regex of test class name for helping us to filter test we don't want to care recently.
				If there is a test failed after we run all tests by pressing hot key, it will be added into "recent test list" too.
      '';
    };
  }) {};

  flutter-img-sync = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "flutter-img-sync";
    plugname = "flutter-img-sync";
    plugid = "vip.okfood.idea.plugin.FlutterImgSync";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12585/67326/flutter-img-sync-idea.zip";
      sha256 = "12dky344byy4aay94kd4zplafhjs8cvj3ywrm8b7sh2bs8akxm9v";
      name = "flutter-img-sync-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://okfood.vip/blog/";
      license = lib.licenses.asl20;
      description = ''
        a plugin for flutter images synchronization, see:Document
      
      
      
      How To Use
      step1.创建资产图片存放目录 如: ./assets/img
      
      step2.修改pubspec.yaml
         assets:
         # assets-generator-begin
         # assets/img/*
         # assets-generator-end
      
      step3.Tools--FlutterImgSync
         pubspec.yaml中的assets变量会被配置项目的图片，并在./lib目录下生产r.dart文件
      
      step4.代码中导入r.dart文件，然后引用R类的变量
      '';
    };
  }) {};

  flutter_json_format = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "flutter_json_format";
    plugname = "flutter_json_format";
    plugid = "com.zll.format";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11551/63917/flutter_json_format.jar";
      sha256 = "1vma3iw5csiapj24c1ns7srdhglcc17fhj3y3kbwdcmj0r7znaj2";
      name = "flutter_json_format-2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/neverwoodsS";
      license = lib.licenses.asl20;
      description = ''
        Help to generate Dart data class from JSON string in Flutter Projects.
      '';
    };
  }) {};

  foggy-night = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "foggy-night";
    plugname = "foggy-night";
    plugid = "foggy-night";
    version = "0.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12336/85407/foggy-night.jar";
      sha256 = "0l8h2fiabpbmgf4ih2gd41g5pn0a3s1gxwlwsy2z8g8cn8xz0n2l";
      name = "foggy-night-0.1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        Custom dark ui theme with muted colors, made to fit with the foggy-night
  editor theme.
      '';
    };
  }) {};

  fugen = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "fuGen";
    plugname = "fuGen";
    plugid = "fuGen";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7188/15271/fuGen.jar";
      sha256 = "1q41ziy539w10wg0jj38dkgnk5fpk9n910vyswr2a8dyrjw7kwdf";
      name = "fuGen-1.3.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/korgov/fuGen";
      license = lib.licenses.asl20;
      description = ''
        Generating class fields and methods by custom templates for selected fields.
 With this plugin you can create your own &quot;Generate Action&quot; (Alt+Insert) (e.g. like standart Getter/Setter generation).
 Code will be generated by your own predefined template for this action.
 You can create any number of actions.
 Supported features: 
 
 Can be added custom generate-actions. 
 Generate fields by custom templates. 
 Generate methods by custom templates. 
 Generate getter-method if it need for your template. 
 Specifying generation template with vars from selected field context. 
 
Default shortcuts: 
 
 Code -&gt; Generate (Alt + Insert) -&gt; [YourAction] - Generate fields and methods by template specified for selected action 
 Settings Menu (Ctrl+Alt+S) -&gt; FuGen - Plugin properties 
 
Please note: This plugin is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      '';
    };
  }) {};

  fusion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "fusion";
    plugname = "fusion";
    plugid = "com.fusion";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10987/48468/Fusion.zip";
      sha256 = "0vfmrf2xkc95amzyxlh74kfbpnwfak7vgaxql5winn69lzf3qm4d";
      name = "fusion-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/VIOIO/Fusion";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/VIOIO/Fusion";
        free = false;
      };
      description = ''
        solidity to java
      '';
    };
  }) {};

  futuremarket-java-coding-guidelines = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "futuremarket-Java-Coding-Guidelines";
    plugname = "futuremarket Java Coding Guidelines";
    plugid = "com.futuremarket.p3c.smartfox";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13997/82107/futuremarket-0.0.2.zip";
      sha256 = "16zhw3avpclij4bvmbgl0fl4g1mbaaxp9ss9cm39m5llxsjnwsgn";
      name = "futuremarket-Java-Coding-Guidelines-0.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        futuremarket Java Coding Guidelines plugin support.
      '';
    };
  }) {};

  gb-json-pojo = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "gb-json-pojo";
    plugname = "gb-json-pojo";
    plugid = "com.tp.globalegrow";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10498/44049/GBGsonCreatedPOJO.zip";
      sha256 = "01zzda1vbz22q4y16kkmwb0707p132hhab3pdfdy9sy1flbvxx1r";
      name = "gb-json-pojo-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.globalegrow.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.globalegrow.com/";
        free = false;
      };
      description = ''
        JSON parsing to generate bean plug-ins
      '';
    };
  }) {};

  generate-builder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "generate-builder";
    plugname = "generate-builder";
    plugid = "io.github.nzlong.generator.generate-builder";
    version = "1.1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10502/43877/generate-builder.jar";
      sha256 = "050znjcdl8zjzsypg8ylswgbaxxm5y7571klppw476fa7lm9ff2l";
      name = "generate-builder-1.1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nzlong/generate-builder";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/nzlong/generate-builder";
        free = false;
      };
      description = ''
        generate getter、setter、toString、Structure、builder； You can use: User user = User.builder().setId(1).set("steven").setAge(12).setPhone("110").build(); Or User user = User.builder(user).setId(user.getUserId() == null ? 1 : user.getUserId()).set("steven").setAge(12).setPhone("110").build();
      '';
    };
  }) {};

  generateallfiledsetter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "generateAllFiledSetter";
    plugname = "generateAllFiledSetter";
    plugid = "com.leon.generate.all.filed.setter";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9806/36492/generatorAllFiledSetter.jar";
      sha256 = "0z813gdli8r7707grldxw346m470m7mj3p839lxrlg8k3infwr5p";
      name = "generateAllFiledSetter-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/njleonzhang/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/njleonzhang/";
        free = false;
      };
      description = ''
        Adds an option to generate a set function for all filed to the generate menu (cmd + n). 
fork from https://github.com/jkovacs/CopyConstructorPlugin
      '';
    };
  }) {};

  generategsdoc = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "generateGSDoc";
    plugname = "generateGSDoc";
    plugid = "org.xiaoweige.intellij.plugins";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11292/53215/generateGSDoc.jar";
      sha256 = "0d18hs41nsbfsyfyaqp9k2nzrggvav51xfhda9vw23mfbi9lrvz6";
      name = "generateGSDoc-1.0.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.xiaoweige.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.xiaoweige.org";
        free = false;
      };
      description = ''
        一款自动对属性生成getter/setter 的小插件
      (A small plugin that automatically generates getter/setter for properties)
      '';
    };
  }) {};

  generator-from-json = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "generator-from-json";
    plugname = "generator-from-json";
    plugid = "generator-java-from-json";
    version = "1.04";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14688/99145/gsonGnenrator.jar";
      sha256 = "0ll1blbdk0hw0pq2j700s8axdxvywcnb31ifg6rxd4hkvhnqw78w";
      name = "generator-from-json-1.04.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.signify.com.cn";
      license = lib.licenses.asl20;
      description = ''
        used to generator the class from the exists json
      '';
    };
  }) {};

  git-bisect-run = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "git-bisect-run";
    plugname = "git bisect run";
    plugid = "me.artspb.hackathon.git.bisect.run";
    version = "0.5.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10874/89062/git-bisect-run-0.5.3.zip";
      sha256 = "0xgxgdni7svzpm57jbfirf3h5lygq6870d8cllcdavca8jii3cni";
      name = "git-bisect-run-0.5.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://artspb.me";
      license = lib.licenses.asl20;
      description = ''
        The plugin is intended to bring 'git bisect run' functionality to the IntelliJ platform.
        Read more about 'git bisect' here.
        The documentation for the plugin can be found here.
      '';
    };
  }) {};

  google-java-format = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "google-java-format";
    plugname = "google-java-format";
    plugid = "google-java-format";
    version = "1.9.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8527/97203/google-java-format.zip";
      sha256 = "13vcvj6dl6nvhfaw6hwi8rcdw24yqq165b78dq900axk4qq030bm";
      name = "google-java-format-1.9.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/google/google-java-format/tree/master/idea_plugin";
      license = lib.licenses.asl20;
      description = ''
        Formats source code using the google-java-format tool. This version of the plugin uses version 1.9 of the tool.
      '';
    };
  }) {};

  hsenid-mobile-tap-ide = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "hSenid-Mobile-TAP-IDE";
    plugname = "hSenid Mobile TAP IDE";
    plugid = "hms.tap.idea.plugin";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7781/19750/tap-idea-plugin.zip";
      sha256 = "1hr06wpw83h10348hkrcax2dcjk0qx6ymq1v8b702rvsir6zbx72";
      name = "hSenid-Mobile-TAP-IDE-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.hsenidmobile.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.hsenidmobile.com/";
        free = false;
      };
      description = ''
        All in one plugin for telco application development with hSenid mobile apis. Logon to hSenid mobile 
DevSpace for more details. 
 TAP IDE features 
 
 1. Telco application skeleton projects. 
 2. Code generation. 
 3. Ant based extensive build system. 
 4. Running and debugging applications. 
 5. Automatic code snippet generation for integrations. 
 6. In build tap simulator. 
 7. Integrated SDK for USSD session management.
      '';
    };
  }) {};

  hibnet-themes = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "hibNet-Themes";
    plugname = "hibNet Themes";
    plugid = "org.hibnet.intellij.theme";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13893/80139/hibnet-theme.jar";
      sha256 = "03airy170fyxxwywnzkq8360r82am5jg8r79ayp8ask82858d1ys";
      name = "hibNet-Themes-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.hibnet.org";
      license = lib.licenses.asl20;
      description = ''
        A blueish theme based on the Gradianto Midnight Blue
      '';
    };
  }) {};

  hidpi-profiles = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "hidpi-profiles";
    plugname = "hidpi-profiles";
    plugid = "ms.konovalov.intellij.hidpi-profiles";
    version = "2017.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9541/44271/ms.konovalov.intellij.hidpi-profiles-2017.1.3.zip";
      sha256 = "0ad1krjscpw4bnp8bp5k83zfpv9w0qxh6f74r4y435gw06ip99zg";
      name = "hidpi-profiles-2017.1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mskonovalov/intellij-hidpi-profiles";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mskonovalov/intellij-hidpi-profiles/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Plugin provides possibility to create several UI profiles for different screen resolutions and easily toggle between them. 
 This plugin might be useful for Linux users with several displays of different resolutions. 
 
 To start using this plugin: 
 1) Set up all the fonts sizes in your IDE. Plugin supports: 
 
 
 Default system font size and type; 
 Editor font size and type; 
 Console font size and type. 
 Then go to 
Settings &gt; Appearance &amp; Behavior &gt; HIDPI profiles &gt; Add current profile and save your profile. 
 
 
 
 
 2) Toggle between profiles in main menu "HIDPI profiles" 
 
 
 
 
 If you like my plugin and want to thank now you can 
by me a beer
      '';
    };
  }) {};

  history-tab = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "history-tab";
    plugname = "history tab";
    plugid = "com.learn.plugins";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14300/86293/historytab.jar";
      sha256 = "0gjiigz6lvyp4k621dgp19idjx272bj8ikf82zqi5bwaci3y9fc9";
      name = "history-tab-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/biyusheng";
      license = lib.licenses.asl20;
      description = ''
        You can make something like the notebook, when you read/write code and
      want to compare the old code or your code file is too long etc
      you can select the old code and right mouse to click the `history operation`
      then you will see a dialog that you can type the code's mark,it will be shown
      into the historyTab which is you could find with toolwindow.

      important note:the content which is in historyTab toolwindow is not persistence.
       if you want to save,please contact me:1024557668@qq.com
      '';
    };
  }) {};

  hotfix = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "hotfix";
    plugname = "hotfix";
    plugid = "com.github.lzy.lets-hotfix-idea-plugin";
    version = "0.0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12050/89118/lets-hotfix-idea-plugin-0.0.10.zip";
      sha256 = "031szl53wqp053c9ngb769ya2r2i22yparnbi3f3ypvzil8cf98r";
      name = "hotfix-0.0.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/liuzhengyang/lets-hotfix-idea-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/liuzhengyang/lets-hotfix/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Java class file hot swap
    for https://github.com/liuzhengyang/lets-hotfix-idea-plugin
      '';
    };
  }) {};

  hzero-ui = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "hzero-ui";
    plugname = "hzero-ui";
    plugid = "com.qianxunc.hzero-ui";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15346/101989/hzero-ui.jar";
      sha256 = "1zm05ynvm900k3kzzgxp6waagl5qx5vnx86mlzqcadjbsv63084q";
      name = "hzero-ui-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.qianxunc.com";
      license = lib.licenses.mit;
      description = ''
        This plug-in is mainly used for the rapid development of Hzero-UI, which greatly saves the developer's time and lets the developer focus on the implementation of the algorithm and write less UI implementation.
      use domain：hzero-ui, antd2.x, dva 
       Plug-in usage file：js or ts file 
      Use the command line: 
      hzero-service-init: Implement the initialization of the service file 
      hzero-service-get: Generate the GET request method function 
      hzero-service-post: Generate the POST request method function
      hzero-service-delete: Generate the DELETE request method function 
      hzero-service-put: Generate the PUT request method function 
      hzero-model-init: Implement the initialization of the service file 
      hzero-model-res: Generates a function with a return value 
      hzero-model-nores: Generates a function with no return value 
      hzero-dispatch-nores: Generate a distapch request method 
      hzero-init-page:Initialize the Pages page
      '';
    };
  }) {};

  i18n-formatter = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "i18n-Formatter";
    plugname = "i18n-Formatter";
    plugid = "de.tfr.idea.plugins.i18n-formatter";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8573/27913/Idea-plugin-i18n-formatter.jar";
      sha256 = "19nvrwflvbcm800v9q5xs6ixmk2fh8ccwvax7kr8v8vlhv22kg79";
      name = "i18n-Formatter-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/TobseF/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/TobseF/";
        free = false;
      };
      description = ''
        Add 
Format Messages.properties action in 
Edit menu to format the current opened message.property-file.
      '';
    };
  }) {};

  i18n-robot = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "i18n-robot";
    plugname = "i18n robot";
    plugid = "com.i18ns.intellij.robot";
    version = "0.2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11567/61717/i18nsRobot.zip";
      sha256 = "12bqnvmnaxqfqab3m308ac59kwsfdswiv67i72zghgjvn6wvkwj5";
      name = "i18n-robot-0.2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.i18ns.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "cddl-1.0";
        free = false;
      };
      description = ''
        I18n robot is a plugin that can auto translate your language strings into other languages.
          Only one click you can i18n-translate your project. Full tutorial click here
           
          If auto-translate failed, you can translate manually use i18ns.com 
            
            
          welcome to feedback issues at i18nsRobot-issues
      '';
    };
  }) {};

  ibatismybatis-mini-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "iBATISMyBatis-mini-plugin";
    plugname = "iBATIS/MyBatis mini-plugin";
    plugid = "idea-mini-ibatis";
    version = "1.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6725/13840/idea-mini-ibatis.jar";
      sha256 = "183ld1j5dzz6489q5n2z3q8hnb0pk5j4ky446jmn2c63x8k81qp4";
      name = "iBATISMyBatis-mini-plugin-1.13.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ishchenko/idea-mini-ibatis";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/ishchenko/idea-mini-ibatis";
        free = false;
      };
      description = ''
        Simple iBATIS/MyBatis plugin 
 Contains essential features only, no datasource integration (yet)
 Works for IDEA &gt;= 10.0.3
      '';
    };
  }) {};

  ichong-commit-template = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ichong-commit-template";
    plugname = "ichong commit template";
    plugid = "com.ichong.pulgin.git";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13418/73539/git_commit_format.jar";
      sha256 = "0h0vr9zmpbdd7hjq6x6qsh4sf2wcavfvhfdms8h5mc8zkq4zpksg";
      name = "ichong-commit-template-1.0.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/a289459798";
      license = lib.licenses.asl20;
      description = ''
        爱宠代码提交格式生成插件
        提交信息模板生成插件,用于代码提交信息书写规范化
        作者:zhangzy
        依赖:https://github.com/RmondJone/Commit-Message-Plugin

        Pet code submission format generation plugin
        Submission information template generation plug-n for code submission information writing normalization
        Author: zhangzy
        Reliance on: https://github.com/RmondJone/Commit-Message-Plugin
      '';
    };
  }) {};

  icontract-hypothesis-pycharm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "icontract-hypothesis-pycharm";
    plugname = "icontract-hypothesis-pycharm";
    plugid = "ch.ristin.icontract_hypothesis_pycharm.icontract-hypothesis-pycharm";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15881/108268/icontract-hypothesis-pycharm-1.0.0.zip";
      sha256 = "0l012dhwq3gz5lzzwasn5xxrqyabfn6iq893v3xmkhz4d00gr4kl";
      name = "icontract-hypothesis-pycharm-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mristin";
      license = lib.licenses.mit;
      description = ''
        Icontract-hypothesis-pycharm allows you to automatically test your Python code using
    icontract-hypothesis
      '';
    };
  }) {};

  idea-mybatis-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "idea-mybatis-generator";
    plugname = "idea-mybatis-generator";
    plugid = "com.jlh.plugin.idea.mybatis.generator";
    version = "2.13";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10196/75353/idea-view-2.13.zip";
      sha256 = "0w9n727hdidapmwyblp8f8bww6j2d6cfk8rm7yxigbizpqnd3zx0";
      name = "idea-mybatis-generator-2.13.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/rohou";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://gitee.com/rohou/mybatis-generator/blob/master/license";
        free = false;
      };
      description = ''
        mybatis 生成器  
      注意：url中需要使用jdbc:mysql://xxxx:3306的形式 

      mybatis-generate 
      To generate sql template for mybatis
      Tips: the example of url like this  jdbc:mysql://xxxx:3306
      '';
    };
  }) {};

  idea-px-2-rem = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "idea-px-2-rem";
    plugname = "idea px 2 rem";
    plugid = "https://github.com/yclnycl";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10905/47485/cssrem.jar";
      sha256 = "03pzc6mkfdwkx8w13rkhfd2h0appvkkqnps4s76zs2cfgndv3d76";
      name = "idea-px-2-rem-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "www.jetbrains.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/yclnycl/ideapx2rem";
        free = false;
      };
      description = ''
        一款idea快捷转换px-&gt;rem的插件
      '';
    };
  }) {};

  idea-sourcetrail = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "idea-sourcetrail";
    plugname = "idea-sourcetrail";
    plugid = "io.sourcetrail.idea";
    version = "0.4.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9621/61306/idea-sourcetrail-0.4.9.zip";
      sha256 = "1ibakbdvqcvpm1m8xr1l7amynf60xi60bdp58clwhrcmwxqbqfvv";
      name = "idea-sourcetrail-0.4.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.sourcetrail.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/CoatiSoftware/idea-sourcetrail/master/license.txt";
        free = false;
      };
      description = ''
        Sourcetrail plugin for idea IDEs like Intellij or CLion. Provides synchronization with Sourcetrail.
      '';
    };
  }) {};

  idea-start-cost-time = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "idea-start-cost-time";
    plugname = "idea-start-cost-time";
    plugid = "xyz.stupidwolf.plugins.idea.start-cost-time";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13108/69836/IdeaStartTimePlugin.jar";
      sha256 = "1sxila9fwss78bc301kjygsfmhnl0kyyi504mshd4lv26hxban9a";
      name = "idea-start-cost-time-0.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/stupidwolf/idea-start-cost-time";
      license = lib.licenses.asl20;
      description = ''
        A idea plugin to calculate the cost time during your idea starting up.
      '';
    };
  }) {};

  idea-yapi = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "idea-yapi";
    plugname = "idea-yapi";
    plugid = "idea-yapi";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12592/64800/idea-yapi.jar";
      sha256 = "1rnl5i1ypwcmvja8aqpvjpi1l6cgsh9ym9c6ykgwbrvs92vlfx7d";
      name = "idea-yapi-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.superfeng.com";
      license = lib.licenses.asl20;
      description = ''
        idea yapi
      support dubbo api and api upload
      '';
    };
  }) {};

  idea-zookeezper = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "idea-zooKeezper";
    plugname = "idea zooKeezper";
    plugid = "idea-zookeeper";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13560/74975/idea-zookeeper.zip";
      sha256 = "01a4liqckxx71ggqkmzyf8kag06rp8pj066w68vmm3sarfnph9k5";
      name = "idea-zooKeezper-0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/zhaoyunxing92";
      license = lib.licenses.asl20;
      description = ''
        管理zookeeper的idea插件本代码是根据https://github.com/linux-china/zookeeper-intellij修改过来的，解决了一些npe异常
    	
    		Double click the leaf to edit node value
    		Right click editor to update node value into ZooKeeper
    		Right click ZK tree to execute "edit", "add" and "delete" operation
    		Recursive support for add and delete operation
    		Node filter support
    		Click "Refresh" button on "ZooKeeper" tool window to refress ZK tree or node
    		Icon for different type, and transparent icon for ephemeral node
    		Stat tooltip, Copy node path
      '';
    };
  }) {};

  idear = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "idear";
    plugname = "idear";
    plugid = "com.jetbrains.idear";
    version = "1.3.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7910/45491/idear-1.3.3.zip";
      sha256 = "11az0hm208na36kr9w7klcq2yjmdpbhf3x4iqz66bwbmg592k3sm";
      name = "idear-1.3.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/OpenASR/idear";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://github.com/OpenASR/idear";
        free = false;
      };
      description = ''
        Speech recognition for IntelliJ IDEA. Idear listens to voice commands and assists with simple actions like debugging, navigation, and refactoring. For a complete list of commands, please see the 
command grammar.
      '';
    };
  }) {};

  ifelse = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ifelse";
    plugname = "ifelse";
    plugid = "www.fclassroom.com.ifelse";
    version = "1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12094/64348/ifelse.zip";
      sha256 = "094sgz0a8plfb69bs6adb52zbmkcpkxdcyhx6v52zavyl5q8d3ak";
      name = "ifelse-1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.fclassroom.com";
      license = lib.licenses.asl20;
      description = ''
        Android auxiliary development plugin.
      
        ifelse github &nbsp; &amp; &nbsp;
         example github
      
      Activity, business visualization management;Download the example to modify.

      
      
        sendMessage(Event.B_INIT); One line of code
      '';
    };
  }) {};

  ignore = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ignore";
    plugname = ".ignore";
    plugid = "mobi.hsz.idea.gitignore";
    version = "4.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7495/107565/.ignore-4.0.3.zip";
      sha256 = "00lw2isy3s8p9ra08m5q6bfpa9651v1inx41r2xy1gpwysylmlb8";
      name = "ignore-4.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/idea-gitignore";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/JetBrains/idea-gitignore/master/LICENSE";
        free = false;
      };
      description = ''
        .ignore is a plugin for:

.gitignore (Git).hgignore (Mercurial).npmignore (NPM).dockerignore (Docker).chefignore (Chef).cvsignore (CVS).bzrignore (Bazaar).boringignore (Darcs).mtn-ignore (Monotone)ignore-glob (Fossil).jshintignore (JSHint).tfignore (Team Foundation).p4ignore (Perforce).flooignore (Floobits).eslintignore (ESLint).cfignore (Cloud Foundry).jpmignore (Jetpack).stylelintignore (StyleLint).stylintignore (Stylint).swagger-codegen-ignore (Swagger Codegen).helmignore (Kubernetes Helm).upignore (Up).prettierignore (Prettier).ebignore (ElasticBeanstalk).gcloudignore (Google Cloud)

files in your project. It supports the following IDEs:

Android StudioAppCodeCLionIntelliJ IDEAPhpStormPyCharmRubyMineWebStormDataGrip


Features

Files syntax highlightTemplates filtering and selecting in rules generator by name and contentUser custom templatesShow ignored files by specified Gitignore file (right-click on .gitignore file)Create a file in the currently selected directoryGenerate Gitignore rules basing on [GitHub's templates collection][github-gitignore]Add a selected file/directory to Gitignore rules from the popup menuSuggesting .gitignore file creation for a new projectEntries inspection (duplicated, covered, unused, incorrect syntax, relative entries) with quick-fix actionsComments and brackets supportNavigation to entries in Project viewRenaming entries from a dot-ignore fileClose opened ignored files actionCustom user templates with import/export features
      '';
    };
  }) {};

  insert-timestamp = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "insert-timestamp";
    plugname = "insert timestamp";
    plugid = "com.againfly.plugin.timestamp.MainAction";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14383/87111/timestamp.jar";
      sha256 = "0nkkngwfdgj6n9qsn9ngnxz8yb4xj2mbv959px8p54c2q10wapj5";
      name = "insert-timestamp-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.againfly.com";
      license = lib.licenses.mit;
      description = ''
        insert current time millis in your code.
      like this: 1590492112949
      '';
    };
  }) {};

  intellij-touch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "intellij-touch";
    plugname = "intellij-touch";
    plugid = "dk.lost_world.intellij-touch";
    version = "0.5.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10608/45507/intellij-touch-0.5.2.zip";
      sha256 = "0n2cq5b9cy2dm8bym7zd47irgj8xrxqa4kb6i8j7257d3nqnkadn";
      name = "intellij-touch-0.5.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/olivernybroe/intellij-touch";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/olivernybroe/intellij-touch";
        free = false;
      };
      description = ''
        MacBook Touch bar support for Intellij. 
 This project has full support for customization of the buttons.
 Contributions are welcome!
      '';
    };
  }) {};

  intellijlint = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "intellijLint";
    plugname = "intellijLint";
    plugid = "com.lmax.intellijLint";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9801/36930/external1";
      sha256 = "1gqypy30fjiaiz375y2i5s1mx71vfshcgrff4mq86zis0mwbcmql";
      name = "intellijLint-0.1.1";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/LMAX-Exchange/intellijLint";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/LMAX-Exchange/intellijLint/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Some additional inspections, including a type checker for annotated primitives.
      '';
    };
  }) {};

  ion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ion";
    plugname = "ion";
    plugid = "ion";
    version = "18";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12113/79638/ion-plugin.zip";
      sha256 = "07bb6fh3r6chlxap089jv9z51gsh01fhpk1si724hzbhyp891y95";
      name = "ion-18.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Bitwise ion language support
      '';
    };
  }) {};

  isearch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "isearch";
    plugname = "isearch";
    plugid = "io.github.takc923.isearch";
    version = "0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11211/92913/isearch-0.11.zip";
      sha256 = "1yxcx9790swl0jyh8zmqbzg63mvissqifhb8rhv6r9ig7mds5d37";
      name = "isearch-0.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/takc923/isearch";
      license = lib.licenses.asl20;
      description = ''
        isearch plugin.
    This plugin adds isearch-forward and isearch-backward action which are like Emacs.
    Default keymap(Mac)
    
      isearch-forward:  Control-S
      isearch-backward: Control-R
      '';
    };
  }) {};

  izi-gwt = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "izi-gwt";
    plugname = "izi-gwt";
    plugid = "izi-gwt";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7093/11811/izi-gwt-intellij-plugin.jar";
      sha256 = "1q3ycy3mwa2ni95c2wwar0d7c8y50l69nrihlc0dk1v2slg906ly";
      name = "izi-gwt-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        Plugin adding intentions and actions for generating setters for izi-gwt framework
      '';
    };
  }) {};

  j2s = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "j2s";
    plugname = "j2s";
    plugid = "com.321zou.j2s";
    version = "2021.01.03-IDEA.192-202";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14884/106876/j2s-plugin-idea-2019.zip";
      sha256 = "11zhifkw8dpsc9033pm8dxqncr54g2qnhf8h1444y4wzxxgl6hpl";
      name = "j2s-2021.01.03-IDEA.192-202.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.321zou.com";
      license = lib.licenses.asl20;
      description = ''
        J2S = (Json to Service) || (Json Service Script) 
    

    Right click and Run J2S or Format J2S
    

    Demo list:
    
        demo
        hello
        flow
        http
        postman
        mysql
        server
      '';
    };
  }) {};

  jdark = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "jDark";
    plugname = "jDark";
    plugid = "com.joncpl.jDark";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13452/74178/jDark.jar";
      sha256 = "1g1nl26qxd4m33m04aziqbngklhgbb8pcw6mlnbq50swvf4j187p";
      name = "jDark-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jonathanchapple.com";
      license = lib.licenses.mit;
      description = ''
        A Dark Theme. Slightly darker than Darcula. Uses IDE-native theme-ing tools for smooth experience.
      '';
    };
  }) {};

  jgrasp = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "jGRASP";
    plugname = "jGRASP";
    plugid = "org.jgrasp";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12769/104507/jgrasp-1.0.1.jar";
      sha256 = "04ynjwgbdgzn2ksk8vjfczpbjy1a30cyx3hcnd2l2ry1nbi0bf2l";
      name = "jGRASP-1.0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://jgrasp.org";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://www.jgrasp.org/ij_license/ij_license.html";
        free = false;
      };
      description = ''
        A tool for visualizing objects and primitives while debugging Java and Kotlin applications.
      '';
    };
  }) {};

  jqassistant-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "jQAssistant-Plugin";
    plugname = "jQAssistant Plugin";
    plugid = "de.kontext_e.idea.plugins.jqa";
    version = "2.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7618/44007/idea-jqa-plugin.zip";
      sha256 = "1qrv32qb8v6349z6r4a6h005z7w4hdf44zjbbnz6jf2zfsfhkxpv";
      name = "jQAssistant-Plugin-2.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.kontext-e.de";
      license = lib.licenses.gpl3Only;
      description = ''
        New in version 2.0 
 
  Don't open Neo4j locally anymore because there were lots compatibility issues. Now REST requests were sent to a running Neo4j.  
  Removed Neo4j jars.  
  Because of the REST requests, the jQAssistant server can now run on any reachable computer, e.g. a CI server.  
 New in version 1.1 
 
 Update to Neo4j 2.2.0 
 What is it? Execute queries against an existing jQAssistant database and show results in the Find Toolwindow. So you can search for code using Neo4J Cypher database queries. Usage This plugin doesn't create the jQAssistant database. So you should get a copy from 
jqassistant.org, configure and run it following the jQAssistant documentation. You can also use the jQAssistant plugins provided by Kontext E available at 
maven central. When you have created your database and started the jQAssistant server, you can open the jQA toolwindow. The database location has the default URL where most probably the database files should be found. Take the example query or enter your own and hit the 'Find' button gently. The result is shown in the standard Find toolwindow and you can use it to navigate as you know it. What can you find? You can find classes, methods and files where 
 
  * nodes have a 'fqn' property that contains the fully qualified name of a class in project scope, e.g. nodes with Class, CheckstyleFile, BugInstanceClass (of FindBugs plugin), JacocoClass lables 
  * nodes have a 'relativePath' property that contains the path of a file relative to the project root, e.g. with GitFile, GitCommitFile labels
      '';
    };
  }) {};

  jasmine = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "jasmine";
    plugname = "jasmine";
    plugid = "org.yidan.idea.plugin.jasmine";
    version = "1.172.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12650/68737/jasmine-1.172.3.zip";
      sha256 = "02nfwjggrawj69c0818gcl699159f1bp3fddmwssv79xj38fmbqf";
      name = "jasmine-1.172.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kongxiangxin/jasmine";
      license = lib.licenses.asl20;
      description = ''
        Code generator based on database model and velocity template
      '';
    };
  }) {};

  java-bean-to-ts-bean = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "java-bean-to-ts-bean";
    plugname = "java bean to ts bean";
    plugid = "org.freeone.2ts4j";
    version = "0.0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14800/95774/jbean2tsbean-0.0.10.zip";
      sha256 = "1rg2dyybbbclb47fn8k7qr32p5xy7wc6z1bqkiwfrv3hgqfm39k5";
      name = "java-bean-to-ts-bean-0.0.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/AFreeOne";
      license = lib.licenses.asl20;
      description = ''
        adds support for transforming DTO java file to typeScript bean file
      '';
    };
  }) {};

  java2smali = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "java2smali";
    plugname = "java2smali";
    plugid = "org.ollide.java2smali";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7385/84140/java2smali-2.0.1.zip";
      sha256 = "1r26w9j3gwj27aywyw0zicik858w5mqrxbx2f39q6faw670ab4w3";
      name = "java2smali-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ollide";
      license = lib.licenses.mit;
      description = ''
        Simple plugin to easily compile Java &amp; Kotlin files to smali.
      '';
    };
  }) {};

  javafmi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "javaFMI";
    plugname = "javaFMI";
    plugid = "org.siani.javafmi";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8462/26926/javaFMI-plugin-1.0.0.zip";
      sha256 = "1bg8jsk53mdlj32nf117lakb7fndfayq2drwfis9vbpsdyhzws7v";
      name = "javaFMI-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://bitbucket.org/siani/javafmi/wiki/Home";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://bitbucket.org/siani/javafmi/wiki/Home";
        free = false;
      };
      description = ''
        JavaFMI is a set of components to work with the Functional Mock-up Interface FMI. This plugin allow to build and inspect easily an FMU using the javaFMI builder and wrapper. https://bitbucket.org/siani/javafmi/wiki/FmuBuilder
      '';
    };
  }) {};

  jclasslib-bytecode-viewer = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "jclasslib-Bytecode-Viewer";
    plugname = "jclasslib Bytecode Viewer";
    plugid = "jclasslib";
    version = "5.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9248/99369/jclasslib-5.7.zip";
      sha256 = "1kczj695zl8rc5k5ws9n9jsknd35azzkqrbhm3nxv5a5xq5cnjir";
      name = "jclasslib-Bytecode-Viewer-5.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ingokegel/jclasslib";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        jclasslib is a bytecode viewer for Java class files
      '';
    };
  }) {};

  jcodes = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "jcodes";
    plugname = "jcodes";
    plugid = "cn.lvji";
    version = "1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12090/89303/jcodes-1.7.zip";
      sha256 = "072fhpyaslx44bwz5h0rl85d4kz661g3rvlgmc0d73x3wffz6nri";
      name = "jcodes-1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/czarea/jcodes";
      license = lib.licenses.asl20;
      description = ''
        producer project or codes from template
                source code
      '';
    };
  }) {};

  jenkins-debug-address = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "jenkins-debug-address";
    plugname = "jenkins-debug-address";
    plugid = "jenkins-debug-address-plugin";
    version = "1.1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14701/95257/jenkins-debug-address-plugin.zip";
      sha256 = "0y5lnc31wzwfbnyygqzbv1y85vp0xapc2abzn0qpn0cpxzvj1pf1";
      name = "jenkins-debug-address-1.1.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Get the DEBUG IP corresponding to Jenkins Job
    Some projects on jenkins will open the remote debug address, you need to check the log to get the debug address.
    This plugin is to get the IP quickly
    Instructions:
    1: Enter the tools menu and click Configure Jenkins to set up an account
    2: Enter the tools menu, click Get Jenkins Debug Address to get all jobs, select a single job to get ip
       Or you can use shortcut keys to get all jobs: Ctrl+Alt+K
      '';
    };
  }) {};

  jsdelivr-package-search = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "jsDelivr-package-search";
    plugname = "jsDelivr package search";
    plugid = "com.jsdelivr.pluginintellij.JsDelivrPackageSearch";
    version = "1.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11230/77784/plugin-intellij-1.0.7.zip";
      sha256 = "0105gvyal1dzxbml7gshyirz7gisa6kzw90xc12v062j0y6lm930";
      name = "jsDelivr-package-search-1.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/jsdelivr/plugin-intellij";
      license = lib.licenses.gpl3Only;
      description = ''
        Simple search and insertion of packages from https://www.jsdelivr.com
      '';
    };
  }) {};

  json2ts = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "json2ts";
    plugname = "json2ts";
    plugid = "com.jsonts.kotlin";
    version = "1.0.12";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13617/96348/com.jsonts.kotlin-1.0.12.zip";
      sha256 = "0dv2x99k6nzzljid9xw25sa26rdmgzspfg8mkid8va8fnjmxylhc";
      name = "json2ts-1.0.12.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/boneVidy";
      license = lib.licenses.mit;
      description = ''
        convert json to tss
    https://github.com/boneVidy/json2ts
      '';
    };
  }) {};

  jsondiff = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "jsondiff";
    plugname = "jsondiff";
    plugid = "pl.kpiska.jsondiff";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10471/45510/jsondiff.jar";
      sha256 = "10sk2wszp3ml95wqq2sv4k5ic1vkca584xrz3vc78f1yyqmw8lpr";
      name = "jsondiff-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kpiska/jsondiff";
      license = lib.licenses.asl20;
      description = ''
        Compare two json files (.json extension) regardless of the order of fields.
      '';
    };
  }) {};

  jte = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "jte";
    plugname = "jte";
    plugid = "org.jusecase.jte-intellij";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14521/100079/jte-intellij-1.1.1.zip";
      sha256 = "0lrwdp0xq30k0mdv0s35q5j3g3mm26c1yh4c0gqq7vs9qmvgh6aj";
      name = "jte-1.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/casid/jte";
      license = lib.licenses.asl20;
      description = ''
        Support for jte templates.

Getting started

    Install plugin.
    You will get jte-specific code completion, navigation, and many other features in .jte files.


Features

    Completion for all jte keywords in templates.
    Navigation from tags and layouts to their definition.
    Coding assistance for Java parts in jte files.
    Refactoring support for tag and layout names and parameters.
    Formatting of templates with HTML support.
      '';
    };
  }) {};

  juejin-pins = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "juejin-pins";
    plugname = "juejin-pins";
    plugid = "cn.olange.pins";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13985/104731/idea-juejin.jar";
      sha256 = "0n45dhqglpwl5ix5zyvv6lzi4vlfgqs0kyb2q7jc4hl09yb8fkv6";
      name = "juejin-pins-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Linindoo/idea-juejin";
      license = lib.licenses.mit;
      description = ''
        juejin pins plugin
   A idea plugin for juejin 
   here is the main functions:
   1.Get the latest trends in juejin
   2.Support login in juejin
   3. more beauty and more yellow 
   4.Communicate with developer 
   5.prise and fish 
   6.personal message notification 
    juejin-pins是一款增强idea对juejin社区支持的插件，目前可以提供以下功能 
   1.支持推荐，热门沸点切换刷新
   2.支持简单登录
   3.支持沸点详情查看，大图浏览
   4.评论+回复
   5.点赞
   6.个人消息查看
      '';
    };
  }) {};

  k3 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "k3";
    plugname = "k3";
    plugid = "idea.k3";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10927/85457/k3-intellij-plugin.jar";
      sha256 = "0g995dh7c8k5v3vbq427sqni52wc4yw9z3pj9gv7b329lh749anr";
      name = "k3-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/a2ndrade/k3-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        k3 Language Support (kx.com). Features:
      
        Syntax highlighting
        Navigate to declaration
        Code completion
        Find usages
        Rename refactoring
        File structure
        Go to symbol
        Color settings
        Code folding
      '';
    };
  }) {};

  kdoc-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "kdoc-generator";
    plugname = "kdoc-generator";
    plugid = "siosio.kodkod";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10389/58594/kdoc-generator-2.0.1.zip";
      sha256 = "1rdyd8wq0wwx8zl406yw825gqr0vdk0zyxx9hqxaxvh0cfyss7vj";
      name = "kdoc-generator-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/siosio";
      license = lib.licenses.mit;
      description = ''
        Plugin to generate class and method KDoc.
      '';
    };
  }) {};

  kotlin-builder-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "kotlin-builder-generator";
    plugname = "kotlin-builder-generator";
    plugid = "com.github.affishaikh.kotlinbuildergenerator";
    version = "1.0.4.RC";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14835/106061/kotlin-builder-generator-1.0.4.RC.zip";
      sha256 = "079vpdgy8rlgrn4bivgnqiqy09s5glxds5l7c68a8fspwb6a2605";
      name = "kotlin-builder-generator-1.0.4.RC.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        This plugin provides the ability to create builder classes for a Kotlin Class
         Steps:
          
              ALT+ENTER on the class name
              Select generate builder option
              Choose the package
              Builder will be generated in that package
      '';
    };
  }) {};

  kotlintest = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "kotlintest";
    plugname = "kotlintest";
    plugid = "kotlintest-plugin-intellij";
    version = "3.3.0.11";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11585/58981/kotlintest-intellij-plugin-3.3.0.11.zip";
      sha256 = "0wxf6fggr4sy03vk016ibx50jplxv7f6lrpccw2h6m2sb8khf053";
      name = "kotlintest-3.3.0.11.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/sksamuel";
      license = lib.licenses.asl20;
      description = ''
        Official IntelliJ IDEA plugin for KotlinTest.
      '';
    };
  }) {};

  krypton = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "krypton";
    plugname = "krypton模块生成插件";
    plugid = "com.bytedance.keypton";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11471/53563/KryptonPlugin.jar";
      sha256 = "0ljgq19krgzrhrqnmqd5rp6wxb4kahsv79dpdbcv8idqpvzgamwc";
      name = "krypton-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bytedance.com";
      license = lib.licenses.mit;
      description = ''
        Krypton 模块生成插件
      '';
    };
  }) {};

  ktfmt = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ktfmt";
    plugname = "ktfmt";
    plugid = "com.facebook.ktfmt_idea_plugin";
    version = "1.1.0.19";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14912/106669/ktfmt_idea_plugin-1.1.0.19.zip";
      sha256 = "1kw31arvj8snwkql22nscq1y4ynwpqgp7apj5bic092rsiz9xsv2";
      name = "ktfmt-1.1.0.19.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/facebookincubator/ktfmt/tree/master/ktfmt_idea_plugin";
      license = lib.licenses.asl20;
      description = ''
        ktfmt is a program that reformats Kotlin source code to comply with the common community standard for
        Kotlin code conventions.
      '';
    };
  }) {};

  lastedited = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "lastedited";
    plugname = "lastedited";
    plugid = "com.GEN.LastEdited.v1";
    version = "1.8.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13782/98816/lastedited.jar";
      sha256 = "0g6vnwij0d4z7qf2a95mfxyqs8dwin8d0rpyb4qqd1q3rpwlvwrd";
      name = "lastedited-1.8.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.gpl3Only;
      description = ''
        This plugin is specially designed for projects containing a lot of files,
    when the project tree organized in package is useless and when working
    on functionalities requires navigating to several places in the tree structure.
    The purpose of this plugin is to keep a view on recently edited files and to allow quick access to them.
    
       It keeps the last opened files into a view for further use
       It sorts the files the last edited first
       It computes groups of files using a kmean algorithm
       It contains a filter that allows a global file search on the all project
      '';
    };
  }) {};

  leetcode-editor = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "leetcode-editor";
    plugname = "leetcode editor";
    plugid = "leetcode-editor";
    version = "6.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12132/96518/leetcode-editor-6.8.zip";
      sha256 = "1gm9s9bjjk5d2icasw6scz3zzbyj4zv6kcnwil3gbym782s6dgjg";
      name = "leetcode-editor-6.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shuzijun/idea-leetcode-plugin";
      license = lib.licenses.asl20;
      description = ''
        Introduction
			
			
				Support for leetcode.com and leetcode-cn.com, can test and submit questions
				More tutorial please visit： here
			
			
				支持leetcode.com和leetcode-cn.com,可测试与提交问题
				更多的插件使用截图： 插件使用介绍
			
		
		
			How to use
			
			
				
			
		
		
		
			Local debugging  
			
			
				
			
		
		
		
			Configuration (configuration for first installation)
			
			
				
			
			
			Configuration path: File -&gt; settings-&gt;tools-&gt;leetcode plugin
			
			
				URL options: leetcode.com and leetcode-cn.com
				Code Type: Java, Python, C++, Python3, C, C#, JavaScript, Ruby, Swift, Go, Scala, Kotlin, Rust, PHP
				 Login Name: Login Username
				 Password: Login password
				Temp File Path: Temporary file storage catalogue
				proxy(HTTP Proxy): HTTP Proxy,config path:`File` -&gt; `settings`-&gt;`Appearance &amp; Behavior`-&gt;`System Settings`-&gt;`HTTP Proxy`
                Custom code template: Custom code template ([details](https://github.com/shuzijun/leetcode-editor/blob/master/doc/CustomCode.md))([demo](https://github.com/shuzijun/leetcode-question))

			
		
		
		
		
			Window (Icon in the lower right corner of the main window)
			
			
				
			
			
			Toolbar:
			
				Login: The login accounts of the two websites are not interoperable and the corresponding users need to be
					configured when switching websites.
				Logout: Exit the current account, if you encounter a login error, try to exit first
				Refresh: You can also refresh and load questions if you are not logged in, but you cannot submit it.
				Find: Input the content and press Enter to search , press again to search for the next one. It can only
					search under the question bank node.
				Collapse: Collapse all nodes.
				 Configuration: Quick jump to the configuration page
				 Clear: Clean up the files in the configured cache directories. The cache directories of the two websites
					are different and only the current configured websites are cleaned up. Carefully clean up cases without
					submitting.
			
			
			Tree:
			
				Questions: All questions
				Difficulty: Classification of difficulties
				Tags: Classification of types
				Explore: Explore content, only contains titles of the questions, exclusive content that needs to pay ; some
					questions are loaded in order
				Color: The color represents the difficulty of the question
				Symbol: The symbols of “√” and “?” represent the status of the current questions, and explores with the
					beginning of “''$” needs to pay or that cannot be viewed due to other causes.
			
		
		
		
		
			 Menu:
			
			
				
			
			
			Menu (right-click on the questions)
			
				Open question: Open the question or double click on the question
				Submit: Submit the question
				Submissions: View the submission record, select the record details in the pop-up window (Show detail)
				Run Code: Run the code, the test case for the question is used by default
				Test case: Customize test cases
				favorite:Add or remove favorite
				Clear cache: Clean up the current questionL
      '';
    };
  }) {};

  libgdx = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "libGDX";
    plugname = "libGDX";
    plugid = "com.gmail.blueboxware.libgdxplugin";
    version = "1.22.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8509/100065/LibGDX_Plugin-1.22.1.zip";
      sha256 = "1z9hm37q8vsdhil4vm9z1bhhyg4fda8iad1ddwwa3z32qawxay9r";
      name = "libGDX-1.22.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BlueBoxWare/LibGDXPlugin";
      license = lib.licenses.asl20;
      description = ''
        This unofficial plugin adds a number of libGDX related features to IntelliJ and Android Studio.
        
      This plugin needs a recent version of the official Kotlin plugin to be installed (even if you don't use Kotlin), so please install and/or enable that plugin first.
        
      See github.com/BlueBoxWare/LibGDXPlugin for more information.
      '';
    };
  }) {};

  litydity-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "litydity-Color-Scheme";
    plugname = "litydity Color Scheme";
    plugid = "color.scheme.litydity";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12290/61300/litydity.jar";
      sha256 = "0v17l3d7c6wwf72fhcmkdifah45pghc7b7ksbxn6i7vqmpamr5hi";
      name = "litydity-Color-Scheme-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://uokersam.github.io";
      license = lib.licenses.mit;
      description = ''
        Update
      '';
    };
  }) {};

  local-code-review-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "local-code-review-tool";
    plugname = "local code review tool";
    plugid = "codereview.idevcod.com";
    version = "0.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11218/50839/offline-code-review-tool-0.2.1.jar";
      sha256 = "1l36kn8qxyy3pvcbpdqcinpafca0nk7x0i5szmbrcycyk41yqsac";
      name = "local-code-review-tool-0.2.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ifreefly/offline-review-plugin-intellij";
      license = lib.licenses.mit;
      description = ''
        A offline review plugin for intellij.
      '';
    };
  }) {};

  logtag = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "logtag";
    plugname = "logtag";
    plugid = "com.bdpqchen.android.plugin.alog";
    version = "0.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12913/68038/logtag.jar";
      sha256 = "1ji1233l7gs604h3bzvhclyvd84hc1gfpa7ipkh557bmz0prv1kc";
      name = "logtag-0.0.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bdpqchen.com";
      license = lib.licenses.mit;
      description = ''
        A code tool for Log used on IDEA and Android Studio platform.
      in a easy way to generate a log tag for log output.
      Automatically generate private static final String TAG = "YourClassName" for each class, like easily using generate getter and setter
      '';
    };
  }) {};

  lottie-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "lottie-idea";
    plugname = "lottie-idea";
    plugid = "net.olegg.bodylookin";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9467/40809/lottie-idea-0.0.4.zip";
      sha256 = "11pkwi85lf7jgzic4ipsvngj16n28qa1f8arl7aqc8218fi47b7c";
      name = "lottie-idea-0.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/0legg/lottie-idea";
      license = lib.licenses.mit;
      description = ''
        Basic viewer for Lottie animations.
      '';
    };
  }) {};

  lsfusion = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "lsFusion";
    plugname = "lsFusion";
    plugid = "lsfusion.idea.plugin";
    version = "1.0.204";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7601/106021/lsfusion-idea-plugin.zip";
      sha256 = "0r7jj3yixpw6khhlwz3qnrnbbc6m8zyaj0p7h91p6ym8s16hn3gw";
      name = "lsFusion-1.0.204.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://lsfusion.org";
      license = lib.licenses.gpl3Only;
      description = ''
        Plugin provides lsFusion language support.
      '';
    };
  }) {};

  lucky-ibatis-generate = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "lucky-ibatis-generate";
    plugname = "lucky-ibatis-generate";
    plugid = "com.lucky.caige.ibatis";
    version = "1.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13131/72160/ibator-help.jar";
      sha256 = "11nj6wjhzncmzg9c56lchldg740g81za5a05g08idyfxgx4bnc9y";
      name = "lucky-ibatis-generate-1.0.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        lucky ibatis generate 提供自动跳转 代码生成等
      要求idea版本IntelliJ IDEA 2016.1以上 有疑问可以联系我 QQ624693304 注明ibatis插件问题
      '';
    };
  }) {};

  macos-for-all = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "macOS-For-All";
    plugname = "macOS For All";
    plugid = "com.samvtran.plugins.macosforallkeymap";
    version = "2.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13968/97758/macosforallkeymap-2.0.0.zip";
      sha256 = "15xa8licqmydm5in7dv7pwqckkdkj5cxz4d53675b7f5rpm0k6a5";
      name = "macOS-For-All-2.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/samvtran/jetbrains-macos-keybindings-for-all";
      license = lib.licenses.asl20;
      description = ''
        A keymap for Windows and Linux (and macOS if you really want!) that rebinds common macOS 10.5+
      shortcuts to non-Command keys. Some shortcuts aren't 1:1 replacements of modifier keys, so please
      check the key updates table.
      If you notice any conflicting shortcuts or have a suggestion for a new keybinding, please
      open an issue on GitHub.
      '';
    };
  }) {};

  macos-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "macOS-Keymap";
    plugname = "macOS Keymap";
    plugid = "com.intellij.plugins.macoskeymap";
    version = "202.6250.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13258/91201/macOSKeymap.zip";
      sha256 = "0mqz6d8q2a7ha9c4pm3b5pjncxhr0fcq7spzdib8622xlmv87svx";
      name = "macOS-Keymap-202.6250.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JetBrains/intellij-community/tree/master/platform/platform-resources/src/keymaps";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        macOS keymap for all IntelliJ-based IDEs.
    Use this plugin if macOS keymap is not pre-installed in your IDE.
      '';
    };
  }) {};

  macos-system-shortcuts-keymap = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "macOS-System-Shortcuts-Keymap";
    plugname = "macOS System Shortcuts Keymap";
    plugid = "org.jetbrains.macOsKeymap";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15082/97090/macOsKeymap-0.1.2.zip";
      sha256 = "1yyzbrp4z93anwy0pr8lngi17bxpjfj9xlg3i1shifz6hjn3qxsk";
      name = "macOS-System-Shortcuts-Keymap-0.1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.jetbrains.com";
      license = {
        shortName = "jetbrains";
        fullName = "Jetbrains Plugin Marketplace Agreement";
        url = "https://plugins.jetbrains.com/legal/terms-of-use";
        free = false;
      };
      description = ''
        Work-in-progress alternative macOS keymap, providing extended compatibility with system shortcuts
    and not using F-keys for essential actions.
      '';
    };
  }) {};

  madrid = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "madrid";
    plugname = "madrid";
    plugid = "madrid";
    version = "0.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12340/85811/madrid.jar";
      sha256 = "0cbvmmmd1z60ilx044za9nxanxcr8jz2nmnyjxrs3gw9sh2xs8vv";
      name = "madrid-0.1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        custom dark ui theme for the madrid color scheme.
      '';
    };
  }) {};

  mm-netmock-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "mm-netmock-tools";
    plugname = "mm netmock tools";
    plugid = "mm.netmock-tools";
    version = "0.0.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10965/50128/mm_netmock_plugin-0.0.7.zip";
      sha256 = "0lsz0lg2plkhzkg5vg2qkwanf4cbcyapgcl2f31s3yrxsc7phfdi";
      name = "mm-netmock-tools-0.0.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.tencent.com";
      license = lib.licenses.asl20;
      description = ''
        mm internal tools, for mm internal use!
    someone else don't try to use this tool.
      '';
    };
  }) {};

  moon-style = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "moon-style";
    plugname = "moon-style";
    plugid = "com.github.godmoonlight.moonstyle";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15331/106420/moon-style-0.0.6.zip";
      sha256 = "08bjxc2s5b1jn15plc6dpyb47g7ddvq2bivp8cg4c2s6qaia56i9";
      name = "moon-style-0.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/GodMoonLight/moon-style/main/LICENSE";
        free = false;
      };
      description = ''
        This is a tool set for editor

Usage:
Converter method
Put the caret in any place within the class, press Alt+Ins or Command + n.select Converter method in menu. In the dialog select the Class you want to convert To and select the class you want to convert From.Press Ok and converter method will be added to your current class.Plugin also writes in comments list of fields, that were not mapped (appropriate setter or getter is missing or different types).

To Json
Open the java class which you want to generate a json object forClick or Right Click the class ,and select To JsonFinally, you can paste the json to anywhere

To Yaml
Open the java class which you want to generate a yaml object forClick or Right Click the class ,and select To YamlFinally, you can paste the json to anywhere
      '';
    };
  }) {};

  mps-protobuf = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "mps-protobuf";
    plugname = "mps-protobuf";
    plugid = "mpsProtobuf";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12919/67749/mps-protobuf.zip";
      sha256 = "15rl9w5i2g6f3zqpxz50568daqx2qgjcf0gb804vxda73n096frg";
      name = "mps-protobuf-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/orlade/mps-protobuf";
      license = lib.licenses.mit;
      description = ''
        An MPS language implementation of Google's Protocol Buffers language.
      '';
    };
  }) {};

  mybitbucket = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "myBitbucket";
    plugname = "myBitbucket";
    plugid = "myBitbucket";
    version = "0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11577/86495/myBitbucket-0.4.zip";
      sha256 = "0izxcvqr8j5as01rsgmzflvr2vwqh9wx12z50d97dg5wgq6p6wbq";
      name = "myBitbucket-0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/BigBurritoInc";
      license = lib.licenses.mit;
      description = ''
        See the list of assigned Bitbucket Server pull-requests, approve them, checkout corresponding branches using Git
    
    
    Check readme for the latest info about the plugin.
    Report any issue to the GitHub tracker
    or email to bitbucket.plugin@gmail.com
      '';
    };
  }) {};

  myfolders-plugin-for-intellij-idea = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "myFolders-plugin-for-IntelliJ-IDEA";
    plugname = "myFolders plugin for IntelliJ IDEA";
    plugid = "myFolders plugin for IntelliJ IDEA";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10513/45051/myFolders.jar";
      sha256 = "17iv5g756jp3lbbw26idfg5xkrl8yndp0y31ff82x9xj5ygdqlqj";
      name = "myFolders-plugin-for-IntelliJ-IDEA-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wertklop";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/wertklop/myFolders/master/LICENSE";
        free = false;
      };
      description = ''
        Adds folders as favorites into FileChooser dialog toolbar
      '';
    };
  }) {};

  mybatis-code-generator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "mybatis-code-generator";
    plugname = "mybatis code generator";
    plugid = "cn.sourcespro";
    version = "2.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10910/54321/genCode.zip";
      sha256 = "1aq2r8apj7sw2r5rslap35mkdnl21x07vhlbg8yasby4wkp09i2q";
      name = "mybatis-code-generator-2.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.sourcespro.cn";
      license = lib.licenses.gpl3Only;
      description = ''
        mybatis code generator.
      source code: git(https://gitee.com/zhanghw/MybatisGenCode)
      You can clone the source code and modify it to fit your template.
      '';
    };
  }) {};

  mybatis-pro-max-plug = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "mybatis-pro-max-plug";
    plugname = "mybatis-pro-max-plug";
    plugid = "com.llt.mybatis.pro.max.plus";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14547/95867/mybatis-pro-max-plug-1.5.zip";
      sha256 = "0qv4ggz8gxqxjyia3bp6gay75600pjrbwzbp9vzny4radv95pffr";
      name = "mybatis-pro-max-plug-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.aexp.top";
      license = lib.licenses.asl20;
      description = ''
        If you have any questions, please leave a message to discuss
mybatis-helper github source
plug github source


    
        1.Brief introduction
         with this tool, you can use mybatis as you would use spring-jpa without introducing any dependencies 
         tool principle is to read javaBean file, generate mapper and database operation SQL 
         lets you develop the process without switching back and forth between ide and database tools, without worrying about modifying fields, the development process is extremely smooth 
         plug-in location tool menu -&gt;mybatis生成器 

        2.Panel description 
        

        
        3.Quick start
        Step 1: add .auto to the Java Doc Comments of your entity class and .key to the Java Doc Comments on the primary
        key field
        
        
        /**
         *.auto
         */
         
        public class User{

        
        /**
         *.key
         */
        private Integer id;

        private String name;

        }
        
            Step 2: click submit on configuration panel
        

        
        4. More keywords
        see mybatis-helper description
        I hope this project can help you. Your support is my driving force
        
        
    


中文版
如果有什么问题欢迎留言讨论
插件依赖 mybatis-helper 源码地址
插件源码地址






    一、简介
        使用此工具,你可以像使用spring-jpa一样使用mybatis,而且不用引入任何依赖
        工具原理是读取javaBean文件,生成mapper与数据库操作sql
        让你的开发过程不用在ide与数据库工具来回切换,不用再为修改字段而发愁,开发过程无比顺滑
        插件位置 tool菜单-&gt;mybatis生成器

    二、面板说明(Panel description) 
        

        
        二、快速开始
        第一步: 在你的实体类javadoc注释里加入 .auto 并在主键field上的javadoc注释里加入.key
        
        
        /**
         *.auto
         */
         
        public class User{

        
        /**
         *.key
         */
        private Integer id;

        private String name;

        }
        
            第二步: 配置面板点击提交
        

        
        三、 更多配置关键字
        更多细节请查看mybatis-helper描述

        希望该项目对您有所帮助,您的支持就是我的动力
      '';
    };
  }) {};

  mybatis-xml-validator = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "mybatis-xml-validator";
    plugname = "mybatis xml validator";
    plugid = "com.fuscent.idea.mybatis-xml-validator";
    version = "1.0.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9780/36304/mybatis-xml-basic-validator.zip";
      sha256 = "17sni15fdqyxrmrkzmm6hs1g9ka994y9zd9mhjma2v19cggy46fc";
      name = "mybatis-xml-validator-1.0.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/hollyshi";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/hollyshi";
        free = false;
      };
      description = ''
        Basic xml validator for MyBatis. Check your xml sql syntax without running it.  
Usage 
 
 Open a mybatis xml file. 
 Click "Tools &gt; MyBatis Xml Validator". 
 Done. The validation results will be shown in the message dialog. 
 
Why this tool 
 The plugin provides basic xml validator for MyBatis. Elements of MyBatis Dynamic SQL, which are if, trim (where, set), and foreach, can be parsed by the plugin, and basic sql syntax can be examined. Note that we do not check the parameters.  
 With the help of tools like MyBatis Generator, we can save a lot of time writing the xml files. However, there are times that we need to add or modify or delete some columns. It is painful to edit the complicated xml files, and it is very likely to make mistakes. It is frustrating to find that you miss a comma in one big Dynamic SQL when you run a unit test. In these situations, this plugin can help you do the validations and save you time, so that you don't have to actually run the application to find the bugs. It may not work if the sql is too complicated, so just keep the sql as simple as possible.  
 What this tool does are limited. If it can help you in some way, that would be great.
      '';
    };
  }) {};

  mybatisgenerator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "mybatisGenerator";
    plugname = "mybatisGenerator";
    plugid = "cn.lid.mybatis.generator";
    version = "1.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11398/80907/mybatisGenerator.jar";
      sha256 = "09qgqiqm1g2gv0nia7bxa7q31v35fxddnbfgp9qlllgxwqx3qc4q";
      name = "mybatisGenerator-1.8.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Visual Mybatis Entity Generation Plug-in
      '';
    };
  }) {};

  mysql-scaffold = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "mysql-scaffold";
    plugname = "mysql-scaffold";
    plugid = "com.erstens.plugins.scaffold";
    version = "1.2.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11476/53757/mysql-scaffol.zip";
      sha256 = "1drkp46gs6ivcqjgidpzkawq0alkyzdrgrmqc4qd8xzwp8z3x7n7";
      name = "mysql-scaffold-1.2.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://erstens.coding.me";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/erstens/mysql-scaffol/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Generate simple java code(*DAO,*ENTITY) through database configuration


Link

  Document


       Template



       Source





 UI
 


 Generate
 


 You need
 Using the beetl template engine to configure the template. If you can, using the template in my open source project directly.
      '';
    };
  }) {};

  mysql-table-to-jpa-entity = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "mysql-table-to-jpa-entity";
    plugname = "mysql-table-to-jpa-entity";
    plugid = "org.liujing.generator";
    version = "1.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11350/54127/generator-1.0.6.jar";
      sha256 = "1lqfqpx7fml5gg4qqarrmnnljga0nhgqcpidgwiasx25wpq09fl3";
      name = "mysql-table-to-jpa-entity-1.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.liujing.org";
      license = lib.licenses.asl20;
      description = ''
        🎉Very easy to convert MySql table to JPA entity.

一个简单易用的 MySQL table 转换到 JPA Entity 的插件。中文介绍

This is a lightweight, no-configuration interface-free plugin.if you just want to quickly convert a MySQL Table to JPA Entity. Then you CAN try it.

How to use

Copy Standard Create table statement from the MySQL client software.
Use shortcut keys in IntelliJ IDEA Ctrl + Shift + X.  NOTE:Need the cursor inside the java file and get the focus
A pop-up window will confirm that the build was successful.
Paste in the right place.


More Infomation please visit in github
      '';
    };
  }) {};

  namespacesqlid = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "namespaceSqlId";
    plugname = "namespaceSqlId";
    plugid = "com.marry.intelli.plugin.namespace.sqlId";
    version = "2.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12303/61514/mumu_sql_plugin.jar";
      sha256 = "06bxqfwn14hc0ybcbdljvqbzb95bjklkmpq6nlb2s8153ra3z3lb";
      name = "namespaceSqlId-2.2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.jianshu.com/u/beb7efdd11d0";
      license = lib.licenses.mit;
      description = ''
        The Tool is for the persistence framework for suning uniquely determines the query SQL based on Namespace and sql Id and displays
      namespace,sqlId
      '';
    };
  }) {};

  native2asciiplug = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "native2asciiplug";
    plugname = "native2asciiplug";
    plugid = "native2asciiplug";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6155/14800/native2asciiplug-1.0.2.zip";
      sha256 = "11h120abprpkc71klqik7461zdz3nf3x3l7sib6mf515j7wgwvsc";
      name = "native2asciiplug-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shyiko/native2asciiplug";
      license = lib.licenses.asl20;
      description = ''
        Converts property files with native-encoded characters (characters which are non-Latin 1 and non-Unicode) to Unicode-encoded. Processing is being done automatically during compilation phase.
      '';
    };
  }) {};

  naysayer88 = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "naysayer88";
    plugname = "naysayer88";
    plugid = "com.freer.naysayer88";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13824/78870/naysayer88-theme.jar";
      sha256 = "16l2x753s24wfwdhlsdcain4sqszpnmj56y70pbps7qlnsdhzbms";
      name = "naysayer88-0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/soulshined";
      license = lib.licenses.mit;
      description = ''
        A color theme that is easy on the eyes and feels like a cool leather portfolio.In honor of and inspired by Jonathan Blows emac theme
      '';
    };
  }) {};

  nginx-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "nginx-Support";
    plugname = "nginx Support";
    plugid = "ideanginx9";
    version = "0.1.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/4415/71230/idea-nginx-0.1.9.zip";
      sha256 = "1972y6k7ayvdz2mphp1a9z3wkh94hn6jr7v926ddx74hdc7ky5pw";
      name = "nginx-Support-0.1.9.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/ishchenko/idea-nginx";
      license = lib.licenses.asl20;
      description = ''
        nginx server support for IntelliJ IDEA
        Runs/reloads configuration/stops nginx server from IDEA.
        Configuration file syntax highlighting, auto-completion and inspections.

        By default .nginx files are registered as nginx files. To use other extensions you will need to associate those files with the correct file type.

        If you have the Lua extension installed Lua syntax highlighting will be enabled for *_by_lua_block directives used by the lua-nginx-module.
      '';
    };
  }) {};

  nullability-annotations-inspection = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "nullability-annotations-inspection";
    plugname = "nullability-annotations-inspection";
    plugid = "com.stylismo.nullability-annotations-inspection";
    version = "0.0.10";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9418/41508/nullability-annotations-inspection-0.0.10.zip";
      sha256 = "0hlaajrc91rx4c5047m3bwwrvz8pjday1kg56vkm32fv3swb8fra";
      name = "nullability-annotations-inspection-0.0.10.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/stylismo/nullability-annotations-inspection";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://github.com/stylismo/nullability-annotations-inspection";
        free = false;
      };
      description = ''
        nullability-annotations-inspections 
 
 Reports fields, parameters and return values of methods which do not have a nullability annotation, like @NotNull or @Nullable.[1]  
 
 Quick fixes are presented to add one of the annotations to the elements with a problem.  
 
 When your project uses 'default' annotations like @ParamsAreNonnulByDefault[1] by means of JSR305' javax.annotation.meta.TypeQualifierDefault, a quick fix will be presented to apply the annotation to the current package by adding the annotation to the package-info.java. If a package-info.java doesn't exist yet it will be created automatically.  
 
 Only annotations registered with IntelliJ will be suggested in the quick fixes. Go to Preferences | Build | Compiler | Configure annotations ... to register your own.  
 
 
 [1]: Any nullability annotation can be used, like JSR-305, JetBrains' or your own as long as you configure them in IDEA.
      '';
    };
  }) {};

  nutzwk-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "nutzwk-plugin";
    plugname = "nutzwk-plugin";
    plugid = "cn.enilu";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8506/29438/nutzwk-plugin.jar";
      sha256 = "0zamlixhm6y2hf41bhp3kk3bxwcfbb2jpvwibnapzamadashq8hp";
      name = "nutzwk-plugin-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.enilu.cn";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.enilu.cn";
        free = false;
      };
      description = ''
        基于nutzwk的代码生成插件，需要依赖nutzwk-code-generator项目.
      '';
    };
  }) {};

  nye-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "nye-Color-Scheme";
    plugname = "nye Color Scheme";
    plugid = "color.scheme.nye";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13937/80718/nye.jar";
      sha256 = "01sw7plwdn7rshxv4ikknpwrf8z3zr1j0ackidl256zhla4drln2";
      name = "nye-Color-Scheme-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.nye.cat";
      license = lib.licenses.asl20;
      description = ''
        My colour scheme with dark background.
      '';
    };
  }) {};

  oblivion-color-scheme = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "oblivion-Color-Scheme";
    plugname = "oblivion Color Scheme";
    plugid = "color.scheme.oblivion";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13998/108063/oblivion.jar";
      sha256 = "08cic3h433b5vg64i4mwzsq0788v5nshbin11wx00zafrmryd8h2";
      name = "oblivion-Color-Scheme-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/rodude123/oblivion-idea";
      license = lib.licenses.gpl3Only;
      description = ''
        For anyone that has used Unity and Monodevelop. I have created the oblivion theme that everyone loved. 
P.S. Thanks to everyone who downloaded it.
      '';
    };
  }) {};

  open-file-to-pane-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "open-file-to-pane-plugin";
    plugname = "open file to pane plugin";
    plugid = "siosio.FileOpenPlugin";
    version = "0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7493/37722/intellij-open-file-to-pane-plugin.zip";
      sha256 = "0h5wbidcb8d2n166wipl02ra7iff0v1csmjjsakkjz6dyr08n5hl";
      name = "open-file-to-pane-plugin-0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/siosio/intellij-open-file-to-pane-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/siosio/intellij-open-file-to-pane-plugin/blob/master/LICENSE.txt";
        free = false;
      };
      description = ''
        open file to left or right pane.
      '';
    };
  }) {};

  palantir-java-format = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "palantir-java-format";
    plugname = "palantir-java-format";
    plugid = "palantir-java-format";
    version = "2.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13180/107112/palantir-java-format-2.0.1.zip";
      sha256 = "0qpd3vvsp074bnmikpl7mf9anj17h41568inv2wvm8qm6ip8mb34";
      name = "palantir-java-format-2.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/palantir/palantir-java-format";
      license = lib.licenses.asl20;
      description = ''
        Formats source code using the palantir-java-format tool.
      '';
    };
  }) {};

  patcher = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "patcher";
    plugname = "patcher";
    plugid = "com.ldx.PatcherDialog";
    version = "2020.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12604/104529/patcher.jar";
      sha256 = "0cl5zrba4ykc2q4jbw6b6ipdfyyqy53vqpjivwa3nyazy0jx0d2v";
      name = "patcher-2020.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Liang-Dongxing/patcher";
      license = lib.licenses.asl20;
      description = ''
        Create Java SE and Java EE project patch files.
      '';
    };
  }) {};

  patient = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "patient";
    plugname = "patient";
    plugid = "com.zty.plugin";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11980/58448/patient.zip";
      sha256 = "1by876gm5n7i8vdv2zbfpz6mvv9xlcwlvx131sdvah3vzszpqdv3";
      name = "patient-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://blog.csdn.net/yanluandai1985";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/plugin/add#intellij";
        free = false;
      };
      description = ''
        This plugin is a gift for my respectful company SafeSoft.
            To commemorate the first anniversary of my work here.
                                                          -- Jay.zhou
        
        
            这款插件是送给我尊敬的苏州安软科技有限公司的礼物，
            以此纪念我在这里工作的一周年纪念日。
                                                          -- 周天宇
            Jay.zhou，中文名周天宇，2017年12月通过校招加入安软。
            因为英文名与周董相似，被同事戏称为"安软周杰伦"。
            熟悉JAVA语言，对多线程、并发、数据库等领域有浓厚的兴趣。
            平时喜欢阅读技术书籍，爱写博客，乐于分享。
         
         
            用户手册：点我查看
      '';
    };
  }) {};

  platform-gen = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "platform-gen";
    plugname = "platform-gen";
    plugid = "com.platform.gen";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12294/62810/platform-gen.zip";
      sha256 = "0bmvw9j8dwxw0fv3rjpfbphvxpwk3xb5rakkkflhj5r6ajhnqfnr";
      name = "platform-gen-1.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/fuyang_lipengjun";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "mpl-2.0";
        free = false;
      };
      description = ''
        platform-gen auto-code.
            Git：https://gitee.com/fuyang_lipengjun/platform-gen
            QQ Group：66502035、870579539
            Forum：https://fly2you.cn
      '';
    };
  }) {};

  plugin-proxy = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "plugin-proxy";
    plugname = "plugin proxy";
    plugid = "plugin proxy";
    version = "1.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/2168/5706/plugin_proxy_5706.jar";
      sha256 = "1k53y0fr1kg16vp05v6rdzi9z196h4l72m16i55h7bk7d3zjjrh5";
      name = "plugin-proxy-1.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.google.com/archive/p/plugproxy-idea";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://code.google.com/archive/p/plugproxy-idea";
        free = false;
      };
      description = ''
        PlugProxy was made by Christopher A. Longo(http://www.bbzzdd.com/plugproxy), and it is a Java-based
        port forwarder/port debugger implementation used to forward data from one TCP port to another. It allows you to
        invisibly send a request from one site to another, and lets you debug or inspect data as it travels through the
        port forwarder.
      '';
    };
  }) {};

  pojo-to-proto = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "pojo-to-proto";
    plugname = "pojo to proto";
    plugid = "org.github.pojo2proto";
    version = "1.0.2.2-SNAPSHOT";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14691/91761/pojo2proto-1.0.2.2-SNAPSHOT.jar";
      sha256 = "09qwf6vkl5cs93w1fhiiy0vfwhzkvgrrbr7zvdqyx2k4f58brgsx";
      name = "pojo-to-proto-1.0.2.2-SNAPSHOT.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xhjcehust";
      license = lib.licenses.asl20;
      description = ''
        Covert java pojo to proto message
    This plugin generates google protobuf message from right click in a java pojo class file.
    choose [PojoProto], the output proto code is copied to clipboard.
    git: https://github.com/xhjcehust/pojo2proto
    Support Java Scalar Value Types, List, Map and Class Types.
      '';
    };
  }) {};

  probie = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "probie";
    plugname = "probie";
    plugid = "com.ld.automatic.translation";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13397/81596/automatic.translation-1.0.2.zip";
      sha256 = "1jngl2qkwyj5bp932izkqk7n4f370msqcb8b7v8agxp52mfkvqa9";
      name = "probie-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/Myzhang/auto.translation.plugin";
      license = lib.licenses.asl20;
      description = ''
        菜鸟翻译/Rookie translation
        
        Only one difference between rookie and big god IDE Plugin, what to do when you do n’t understand English comments? When you don't understand API What about documents? What to do when you are still bothering with standard naming? Download it now!
        菜鸟和大神之间仅差一个IDE插件,当你看不懂英文注释怎么办？当你看不懂API文档怎么办？当你还在为标准命名烦恼怎么办？赶快下载使用吧!
        
        特色功能/Special feature
        
            中英互译 - alt p / 右键菜单 Probie Translate
            边写边译 - Tools -&gt; 实时编程 默认打开
            瞬间秒懂 - 鼠标点击提示框某个结果
      '';
    };
  }) {};

  project-window-filter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "project-window-filter";
    plugname = "project window filter";
    plugid = "com.yyh.filter";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12903/67713/filter-0.0.6.zip";
      sha256 = "1iqdrnjji8bq2r6pkb9dxdk67azc7wr9c1cbq3zcy040l88iikw3";
      name = "project-window-filter-0.0.6.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yu-young-hoon/java-intellij-plugin-filter.git";
      license = lib.licenses.asl20;
      description = ''
        project window filter
            
            
                This is filter and release filter action for project window.
                Makes items invisible in the tree.
            

            

            
                
                
                    Right-click in project window
                
            

            

            
                
                
                    Enter the text
                
            

            

            
                
                
                    Before filtering
                
            

            

            
                
                
                    Filtered result
      '';
    };
  }) {};

  ptg = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "ptg";
    plugname = "ptg";
    plugid = "com.ptg.quickcodegeneration.plugin";
    version = "1.4.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13598/75627/GenerateGoodCode.jar";
      sha256 = "09fh6sixjcap6l0ylb3ic4r1i9rwbggbk7hk4qni125wn8d7907r";
      name = "ptg-1.4.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Quick Generation JavaBean
        Quick Generation SQL
        Quick Generation JVM arguemnts
        Quick Generation Spring Configuration
      '';
    };
  }) {};

  px2rem = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "px2rem";
    plugname = "px2rem";
    plugid = "com.sunq.action.WebStormPX2REMTools";
    version = "2.1.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11187/95317/px2rem-2.1.3.zip";
      sha256 = "0qxr7kg6wm2g5qxkq6v8kvmmd6311p94ylj4vvv8zi4jn3jnrp9y";
      name = "px2rem-2.1.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/11187-px2remforwebstorm";
      license = lib.licenses.mit;
      description = ''
        this is a tool of converting px to rem/vw/vh in a css/less file by a few settings.
    
    there are three ways to convert: short-cut key, code intention, code completion. you can find the settings related to these converting ways in settings page with the path 'File - Settings - Px to Rem'
    
    1. short-cut key
    
    select a converting type from three options of rem, vw, vh in setting page and give a necessary value set below the radio group, then use the default short-cut key of Alt + d to convert a line or a selected text. you can also use the short-cut key of Ctrl + Alt + d to convert in a whole file.
    you can only choose one converting type of short-cut key from rem,vw,vg to convert.
    btw, you can change the short-cut key in your ide by setting the keymap option.
    
    2. code intention
    
    you can find three code intention types in settings page and you can select if a code intention type works by check the checkbox.
    by check a code intention in a line of a css file, which will display by typing Alt + Enter, you can convert the line where the caret displays.
    the unselected code intention types in settings page will not show in the list of code intention in a css file
    
    3. code completion
    
    you can also find three code completion types in the settings page and you can select if a code completion type works by check the checkbox.
    by typing 'px' in a css file, you can find some code completion types you set in settings page. choose a type then it will give a result of converting.
    the unselected code completion types in settings page will not show in the list of code completion in a css file
    
    Instructions:
    1. find menu at 'File - Settings - Px to Rem', and give some settings.
    2. select a text or move cursor at a line which contains a 'px' value.
    3. use default shortcut key Alt + d to convert px to rem/vw/vh with a line; btw, you can change the shortcut at 'File - Settings - keymap - Plug-ins - px2rem'.
    4. use default shortcut key Ctrl + Alt + d to convert px to rem/vw/vh in a whole file.
    5. use a code intention to convert px to rem/vw/vh in a css file
    6. use a code completion to convert px to rem/vw/vh in a css file
    7. use the short-cut key Ctrl + Shift + Alt + d to rollback the converting within one line
    
    this plugin only support css, less file type and you should not use it in other file types, because this will bring some unexpected errors.
    
    you can find more details in github
    
    if this plugin is not bad, you can give me a star in github and I will be very grateful for your support.
    
    这是一个转换css文件中的px单位为rem/vw/vh等单位的插件，主要适用于idea和webstorm.
    
    目前提供了三种方式来转换：快捷键、代码意图提示(Alt + Enter)、代码自动完成提示
    
    1. 快捷键
    
    默认的快捷键是Alt + d，在插件配置页面中可以看到快捷键部分有3种转换类型的选项，分别是rem,vw,vh，选择其中的一个来使用快捷键转换，需要注意的是，需要在选项下方的值配置中设置对应的基值。
    只能选择一种转换类型来使用快捷键转换单位。同时也可以重新设置快捷键。需要注意的是，跟之前的版本相比，默认的快捷键修改了，修改的原因主要是原来的'Shift' + 'd'会与大小写冲突。
    
    2. code intention
    
    选择使用代码意图提示的类型后即可使用已选择的类型来在css文件中通过Alt + Enter来调用code intention来快捷转换单位。未勾选的选项不会出现在文件的code intention列表中。
    
    3. code completion
    
    选择使用代码自动提示的类型后即可使用已选择的类型来在css文件中快捷转换单位，当输入'px'后，code completion列表中会出现在配置页面中选择的类型名称，选择其中一个类型后即可实现自动完成转换功能。
    
    如果觉得这个插件还不错，希望可以在github上给我点个赞，非常感激。
    
    插件仅支持css和less两种文件类型，在其他的样式文件类型如sass中也可以使用某一些功能，但可能会引起某些未知的错误，请谨慎使用！
    
    使用说明：
    1. File-Settings-Px to Rem进行必要的参数配置
    2. 选择一个需要转换的样式或者将光标移动到一个包含需要转换样式的行中，使用快捷键Alt + d来转换，也可以使用Ctrl + Alt + d来转换整个文件中的可转换样式
    3. 通过code intentionAlt + Enter来转换某一行中涉及到的样式
    4. 通过在输入'px'字符后显示的自动完成提示列表中选择相应的选项来转换相应的样式
    5. 通过快捷键Ctrl + Shift + Alt + d来回退一行内的转换
    
    更多请前往github查看
      '';
    };
  }) {};

  python-typing-adder = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "python-typing-adder";
    plugname = "python-typing-adder";
    plugid = "me.aristotll.python.typing.adder";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9766/35962/python-typing-adder.jar";
      sha256 = "0wnb5rijq2wd2mqb7ysbxij1vx90hjyf0948nmbclwx1h9x6k50w";
      name = "python-typing-adder-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aristotll/python-typing-adder/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/aristotll/python-typing-adder/";
        free = false;
      };
      description = ''
        README  
Using intellij to infer Python typing and 
add type comments using the typing module. 
See more from https://www.jetbrains.com/help/pycharm/2017.1/type-hinting-in-pycharm.html  
Move cursor to the element, and press ctrl shift Y to add the type comments. 
  
Before: 
def greeting_with_type(name):
    return 'Hello ' + name 
After: 
def greeting_with_type(name):  # type: (str) -&gt; str
    return 'Hello ' + name
  
It depends on the Python plugin of intellij, and I think Pycharm also works.
      '';
    };
  }) {};

  q = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "q";
    plugname = "q";
    plugid = "idea.k";
    version = "1.27";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7925/107329/q-intellij-plugin-1.27.zip";
      sha256 = "1nkylsmbbbnyvrbi7z0n2kz2pdcnpsawmf3xpprglgippsygls89";
      name = "q-1.27.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/a2ndrade/q-intellij-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        q/k4 Language Support (kx.com). Features:
      
        Syntax highlighting
        Navigate to declaration
        Code completion
        Find usages
        Rename refactoring
        File structure
        Go to symbol
        Color settings
        Code folding
      '';
    };
  }) {};

  quick-dev = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "quick-dev";
    plugname = "quick-dev";
    plugid = "io.github.newhoo.quick-dev";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13035/94132/quick-dev-intellij-plugin-1.0.1.zip";
      sha256 = "0ii8pm3dw3vsw27graz015xl2pdh4za4bmy69pxgi410ya9nnmaq";
      name = "quick-dev-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/newhoo/quick-dev-intellij-plugin";
      license = lib.licenses.mit;
      description = ''
        No more updates!! Please use my other plugins for same function.
    该插件不再更新！！具体功能已拆分为多个插件，请查看本人主页。

    

    quick-dev plugin, help development quickly!

    
    Main Functions:
    find Apollo config and open it in browser
    find git info and open it in browser
    auto execute mysql explain when execute sql
    invoke spring bean method conveniently when run project with jrebel
    manage jvm parameter

    
    主要功能：
    快速打开Apollo配置中心
    快速打开git仓库
    自动查看mysql执行计划
    快速调用Spring bean方法，依赖jrebel启动
    jvm启动参数管理
      '';
    };
  }) {};

  reflow-toolkit = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "reFlow-Toolkit";
    plugname = "reFlow Toolkit";
    plugid = "dev.totallynotrobots.reflow.tools";
    version = "0.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15791/107797/reflow-0.0.2.zip";
      sha256 = "1klrc51hy1y0agy6whvvj9nc150c6j47idi7yj60dvqvnz20rbsr";
      name = "reFlow-Toolkit-0.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://totallynotrobots.dev/";
      license = lib.licenses.asl20;
      description = ''
        Navigation and editing shortcuts for quickly iterating with existing code.
       Features
       
        
          Camel catcher - Quickly round up parts of the camel.
          Click on any part of a camelcase word.
          Hit once to select that portion.
          Hit a second time to select the whole word.
          Hit to cycle between selecting the clicked portion and selecting the whole word.
          Default shortcut on pc/mac =&gt; ctrl/cmd - M
        
       
       Notes
       The keyboard shortcuts are set for easy access on a laptop without stepping on the most common and useful
       existing shortcuts, especially in the WASD cluster. Please check the ide preferences if a shortcut does not suit your
       style or keyboard layout. If a shortcut is not working it means there is likely an existing action
       registered to that key combo - try removing and re-adding the keystroke in the reFlow shortcuts section
       and following the prompt to remove any other actions registered under the same key combo.
      '';
    };
  }) {};

  revu = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "reVu";
    plugname = "reVu";
    plugid = "org.sylfra.idea.plugins.revu";
    version = "2.7.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/3849/20548/revu.jar";
      sha256 = "0xjkr6bjc0jmhylf2c09xp8yrksljag7r1shvlalw0mndslaxg5y";
      name = "reVu-2.7.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/syllant/idea-plugin-revu";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/syllant/idea-plugin-revu";
        free = false;
      };
      description = ''
        Team Code Reviewer for Intellij IDEA. Simple and flexible, created specially for IDEA.
      '';
    };
  }) {};

  rebase-guru = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "rebase-guru";
    plugname = "rebase-guru";
    plugid = "rebase-guru";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10721/50688/git-fixup-0.1.1.zip";
      sha256 = "0jk1555g04i2w5f1p1dq01z64m3g98s9ac3aaxz16v4ijsxxk11f";
      name = "rebase-guru-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/serg-bloim/idea-rebase-guru";
      license = lib.licenses.asl20;
      description = ''
        Additional rebase functionality:
        - fixup commit
        - squash commit
      '';
    };
  }) {};

  recenter-top-bottom = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "recenter-top-bottom";
    plugname = "recenter-top-bottom";
    plugid = "io.github.takc923.recenter-top-bottom";
    version = "0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11407/60207/recenter-top-bottom-0.2.zip";
      sha256 = "1m05ih2bpldgldhl6gnph8bbnnf5vq5hs0nx0mqq2zk38va6ji88";
      name = "recenter-top-bottom-0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/takc923";
      license = lib.licenses.asl20;
      description = ''
        This plugin scroll like recenter-top-bottom of emacs.
    Default keymap is C-l
      '';
    };
  }) {};

  rock-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "rock-idea";
    plugname = "rock-idea";
    plugid = "le.cloud.rock";
    version = "0.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11293/51779/Rock-IntelliJ-Plugin-0.0.1.zip";
      sha256 = "1lma3z1frkdmmf8f0fq5vbdfsppx1ywz645xfkf9fjjl09hnj3wa";
      name = "rock-idea-0.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.cloudle.github.io";
      license = lib.licenses.mit;
      description = ''
        Rock language support for Intellij based IDE
      '';
    };
  }) {};

  ruby-doc-adder = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ruby-doc-adder";
    plugname = "ruby-doc-adder";
    plugid = "me.aristotll.ruby.rdoc.adder";
    version = "0.0.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9904/44811/RubyRDocAdder-0.0.4.zip";
      sha256 = "1rc8lwc9sc3amfsnqb3b596hf1kxd6jfb6wnmpiq0bv69pmbsisq";
      name = "ruby-doc-adder-0.0.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/aristotll/RubyDocAdder";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/aristotll/RubyDocAdder";
        free = false;
      };
      description = ''
        Add document comments to Ruby functions in Intellij or RubyMine. 
see https://www.jetbrains.com/help/ruby/documenting-source-code-in-rubymine.html for more info. &nbsp; 
Move cursor to the function name, and press the shortcut to add the Ruby doc comments. 
Shortcuts: 
 
 ctrl + shift + P in Windows and Linux 
 ⌘ + ⇧ + P (command shift P) in Mac os 
 &nbsp; 
 &nbsp; 
Before 
def encode!(test, num = 1, *several_variants, **new)
  '\'
end
 
After 
# @param [Object]  test
# @param [Fixnum]  num
# @param [Array]  several_variants
# @param [Hash]  new
# @return [String]
def encode!(test, num = 1, *several_variants, **new)
  '\'
end
      '';
    };
  }) {};

  scrcpy = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "scrcpy";
    plugname = "scrcpy";
    plugid = "com.codertainment.scrcpy";
    version = "0.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14565/107982/Scrcpy_Controller-0.1.4.zip";
      sha256 = "025hr9fs17s01qz7gin7ind0raxx4lbwbp58r8ksxf486ax6wcij";
      name = "scrcpy-0.1.4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/shripal17";
      license = lib.licenses.asl20;
      description = ''
        Provides options for running scrcpy directly from IntelliJ IDEA/Android Studio
      '';
    };
  }) {};

  scss-lint = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "scss-lint";
    plugname = "scss-lint";
    plugid = "com.wix.scss.lint";
    version = "2.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7530/67457/scss-lint-2.1.1.zip";
      sha256 = "0vg5cm055a22whaia7h8pqrf9kd6p6bsxiicpgciy7xphd8q595j";
      name = "scss-lint-2.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/idok/scss-lint-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://raw.githubusercontent.com/idok/scss-lint-plugin/master/scss-lint-plugin/LICENSE";
        free = false;
      };
      description = ''
        SCSS Lint intellij integration.
      Support displaying SCSS Lint warnings as intellij inspections
      '';
    };
  }) {};

  search-with-baidu = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "search-with-baidu";
    plugname = "search with baidu";
    plugid = "com.github.nreg.SearchWithBaidu";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12792/66308/Search_with_Baidu.jar";
      sha256 = "1c74v7cck7dhifblpyanxbfi5361arnli800dk60pjdi61c6hnvp";
      name = "search-with-baidu-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nreg";
      license = lib.licenses.epl20;
      description = ''
        In China, if you are not comfortable with Google, you can install this plugin to search with Baidu.
      Fixed Xu Wang 1.3 version cannot search for special characters bug.
      '';
    };
  }) {};

  search-with-bing = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "search-with-bing";
    plugname = "search with bing";
    plugid = "com.github.nreg.SearchWithBing";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12790/66306/Search_with_Bing.jar";
      sha256 = "0lmzrvcax48njkczkm54753qdv9j1x34acmjl5vxlvy3w2dr1kin";
      name = "search-with-bing-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/nreg";
      license = lib.licenses.epl20;
      description = ''
        In China, if you are not comfortable with Baidu, you can install this plugin to search with Bing.
      '';
    };
  }) {};

  servicedoc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "serviceDoc";
    plugname = "serviceDoc";
    plugid = "com.suiyiwen.plugin.idea.servicedoc";
    version = "2.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12314/93430/serviceDoc-2.3.zip";
      sha256 = "1ff4d29sr2fnm6m4sqpidls67wvc8wbhkw7ckajqs49hhrm9yy4k";
      name = "serviceDoc-2.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://blog.suiyiwen.com/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "mpl-2.0";
        free = false;
      };
      description = ''
        serviceDoc generation helper
    
      This is a plugin you can generate serviceDoc from public method.
      Please do aware This plugin is only for IntelliJ IDEA.
      This plugin develop for the npm model servicedoc, HomePage, install command npm i servicedoc
      '';
    };
  }) {};

  shanbay-translate = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "shanbay-translate";
    plugname = "shanbay translate";
    plugid = "com.heyangli.www.translation";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13421/73555/translation-1.0.zip";
      sha256 = "1s9xwk13bx5pq3kalgj875ww9fn3si1lniybk2r2f1vf65jvhq7c";
      name = "shanbay-translate-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.heyangli.com/blog?pageNum=1";
      license = lib.licenses.asl20;
      description = ''
        shanbay translate
        
          interpret words
          add word in your vocab list
      '';
    };
  }) {};

  shirotelin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "shirotelin";
    plugname = "shirotelin";
    plugid = "shirotelinintellij.yasukotelin.com.github";
    version = "1.9.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13104/83423/shirotelin.jar";
      sha256 = "1ip550xarj3j012idrl2ld33bqh6dh4qrwmqhjxdpr4vabpngkrb";
      name = "shirotelin-1.9.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yasukotelin/shirotelin-intellij";
      license = lib.licenses.mit;
      description = ''
        🎉 shirotelin for IntelliJ 🎉
      
      shirotelin is Ultimate standard light colorscheme for InteliJ!
      Original repository is vim plugin shirotelin
      
      shirotelin is inspired by Eclipse, notepad++, InteliJ, Visual Studio, Hidemaru editor, sakura editor, and more⚡
      '';
    };
  }) {};

  silkworm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "silkworm";
    plugname = "silkworm";
    plugid = "silkworm";
    version = "1.0.9";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12332/85566/silkworm.jar";
      sha256 = "1vw841j6xmy1iasai3f30iciah9avf9p9dqcn5ckxf16pj48mxhw";
      name = "silkworm-1.0.9.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        Custum light ui theme fitting for silkworm editor theme.
      '';
    };
  }) {};

  slides-presenter = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "slides-presenter";
    plugname = "slides-presenter";
    plugid = "slides-presenter";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10832/64098/slides-presenter.zip";
      sha256 = "0qnc20w794rd1x2vfkgqhqnysm8dcaj5nqmqs06rdrqv20ynhrfk";
      name = "slides-presenter-0.1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://github.com/dkandalov/slides-presenter";
      license = lib.licenses.asl20;
      description = ''
        This is a plugin to show slides and code examples directly from for IntelliJ IDEs.
        See plugin page on GitHub for more details.
      '';
    };
  }) {};

  soft-charcoal = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "soft-charcoal";
    plugname = "soft-charcoal";
    plugid = "soft-charcoal";
    version = "0.1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12338/85628/soft-charcoal.jar";
      sha256 = "14vprskwlc2iwc92z556fqzxsh56zxf6nxzyg6834klslm62i917";
      name = "soft-charcoal-0.1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        Custom dark ui theme with a charcoal background.
      '';
    };
  }) {};

  sparql4idea = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "sparql4idea";
    plugname = "sparql4idea";
    plugid = "sparql4idea";
    version = "0.1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/6126/9657/sparql4idea_9657.jar";
      sha256 = "10pid2jq7c72f7dij7hpkd4cmnzsqwnl8lgvd85r44xhak5dfy1s";
      name = "sparql4idea-0.1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mattnathan/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/mattnathan/";
        free = false;
      };
      description = ''
        IntelliJ IDEA support for the SPARQL query language.
  This plugin provides the following features:
  
    Basic code parsing and highlighting
    Brace matching
    Code folding for PREFIX and {} blocks
    Find Usages (namespaces, variables)
    Comment/Uncomment support
    Go to declaration for namespaces and variables
    Simple file templates for select and ask queries
      '';
    };
  }) {};

  spring-generation-tools = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "spring-generation-tools";
    plugname = "spring-generation-tools";
    plugid = "spring-generation-tools";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14848/94540/spring-generate-plugin.zip";
      sha256 = "1nlxkp5mrk09b9b2sbb7kb2zkqb9k5bqga9j0l14ldg22jjbwzw0";
      name = "spring-generation-tools-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/kostya05983/spring-generate-plugin";
      license = lib.licenses.mit;
      description = ''
        Plugin allows to generate model to dto converts in kotlin 

    
    This open source plugin can help you to generate a lot of converters code in kotlin.

    It uses org.springframework.core.convert.converter.Converter to define converters and matches
    field names from one model to other.
    

    
    Here are some of the advantages of this plugin:
    
         You can generate converters on the way. 
         You don't need to waste time and do monkey coding 
         Generated converters works faster in 5-7 times than converters on reflection
      '';
    };
  }) {};

  springmvc2swagger = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "springmvc2swagger";
    plugname = "springmvc2swagger";
    plugid = "com.github.wu191287278.springmvc2swagger";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15095/107716/spring2swagger-1.5.0.zip";
      sha256 = "1pfsm20qyqsxxykv349ib764hrzm6qvj319fc58xw7k0dshynvhl";
      name = "springmvc2swagger-1.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/wu191287278/springmvc2swagger";
      license = lib.licenses.asl20;
      description = ''
        Converts springmvc annotations and javadoc to swaggerdoc
      '';
    };
  }) {};

  sqltoy-orm-tool = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "sqltoy-orm-tool";
    plugname = "sqltoy-orm-tool";
    plugid = "com.gitee.threefish.sqltoy.plugin.id";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14339/86753/sqltoy-idea-plugins1.0.2.jar";
      sha256 = "1m2bphqnjpzam2w2cclnb81nf4iq8f3i1x89nbfxgvdk1ng6ry1k";
      name = "sqltoy-orm-tool-1.0.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/threefish/";
      license = lib.licenses.asl20;
      description = ''
        sqltoy-orm is an orm framework that is more suitable for projects than hibernate + my Batis. It has the convenience of adding, deleting, modifying and loading objects, and also has more flexible and elegant custom SQL query functions than my Batis.
      
      sqltoy-orm是比hibernate+myBatis更加贴合项目的orm框架，具有hibernate增删改和对象加载的便捷性同时也具有比myBatis更加灵活优雅的自定义sql查询功能.
       
      
         English
         1.Support xml definition jump java call statement
         2.java call jump xml definition 
         3.SQL statement highlighting 
       
       
         中文
         1.支持xml定义跳转java调用语句
         2.java调用跳转xml定义 
         3.SQL语句高亮
      '';
    };
  }) {};

  stackoverflow = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "stackoverflow";
    plugname = "stackoverflow";
    plugid = "com.bruce.intellijpluin.stackoverflow";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9513/33326/stackoverflow-1.1.zip";
      sha256 = "0rxmlc96k24wlpcbhkbgrsim4xd1l4qiy68r9n1bxajlf3aydz8m";
      name = "stackoverflow-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gejun123456/IntellijGoToStackOverFlow";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/gejun123456/IntellijGoToStackOverFlow";
        free = false;
      };
      description = ''
        go to stackoverflow by right click
      '';
    };
  }) {};

  start_time = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "start_time";
    plugname = "start_time";
    plugid = "org.yyx.plugin.start_time";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11083/49398/startTime.jar";
      sha256 = "0wzvpykb94s381b1ip2l45v75a6mac0zry0s9mzhl70wbgdg08g1";
      name = "start_time-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://my.oschina.net/yzwjyw";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "fpl-1.0.0";
        free = false;
      };
      description = ''
        Plug-ins that calculate the start and end time of the JVM
      
        The plug-in is a startup timing widget that records the difference
        between when the JVM starts and when the plug-in response completes.
      '';
    };
  }) {};

  stenciljs-web-components = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "stenciljs-web-components";
    plugname = "stenciljs-web-components";
    plugid = "com.github.glennlefevere.stenciljswebcomponents";
    version = "1.0.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15596/107128/stenciljs-web-components-1.0.0.zip";
      sha256 = "061zap31n3bw9lfqn9vbcf26zvs5dmnzp8ydy0jy2qryrixbcjf9";
      name = "stenciljs-web-components-1.0.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        Provides code completion and validation for NodeJS applications using a StencilJs component library.
      '';
    };
  }) {};

  stock = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "stock";
    plugname = "stock";
    plugid = "com.backkoms";
    version = "1.0.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/8491/27358/idea-stock-plugin.zip";
      sha256 = "06ic1lg2kmp4q53xwbp0hyhn2bcb2cfllkh6iqrya8s81a1170y9";
      name = "stock-1.0.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "";
        free = false;
      };
      description = ''
        After installing this plugin, you can choose the stock, and add to the "my stock" tool window, and then you will receive the latest price information.
 Note: currently only supports A-share market
      '';
    };
  }) {};

  stock-watch = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "stock-watch";
    plugname = "stock-watch";
    plugid = "top.shenluw.intellij.stock-watch";
    version = "0.1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14025/104656/stock-watch-0.1.7.zip";
      sha256 = "1vwlrrzfmadvsy1w79n48yza818rjlpzg0vsavhinj8012x64b46";
      name = "stock-watch-0.1.7.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://shenluw.top";
      license = lib.licenses.gpl3Only;
      description = ''
        Use the status bar to view stock quotes
        
        Symbol: # begins to indicate that this line does not take effect
        ALT + Z  Quick toggle
        Support script
        Support for custom displays
        
        &nbsp;
        Preview
      '';
    };
  }) {};

  stylus-assist = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "stylus-assist";
    plugname = "stylus-assist";
    plugid = "vip.guco.stylusassist";
    version = "1.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10329/54295/stylus-assist-1.4.3.zip";
      sha256 = "1lggsdp02sg24hddmpr2ncjb574j6m51iqw0qvzkz381qjm1zfqk";
      name = "stylus-assist-1.4.3.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/gucovip/stylus-assist";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/raiyeeeric/stylus-assist/blob/master/LICENSE";
        free = false;
      };
      description = ''
        Shortcut Key：
    Windows: Alt + insert, Mac: control + Enter
    Feature：
    
        GoCss
            
                Jump to stylus css
                    
                        .vue file
                        .pug jump to .styl file
                    
                
                New class mode
                    
                        If plugin can not find selected class,it will think you want to create a new class,such as：''$style.aBC =&gt; .a-b-c
                    
                
            
        
        PasteCss
            
                format some css(don't contains class or id) you copy from another place, such as chrome or files, such as margin:0;  =&gt;  margin 0
            
        
        InsertClass
            
                Insert class into zhe last of style-tag 
            
        
    
      Vue template jump to stylus, somebody who want find css from .vue template or .pug template!
      欢迎大家加入QQ群807838852交流及反馈BUG
      '';
    };
  }) {};

  suning-dal-support = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "suning-dal-support";
    plugname = "suning dal support";
    plugid = "com.suning.dal_support";
    version = "2.2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12656/74584/dal_support-2.2.2.zip";
      sha256 = "126lh9219xnjj2x35y5afbyd5b0q6sljijq4xixzycgy5pj5fldz";
      name = "suning-dal-support-2.2.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://www.heyangli.com";
      license = lib.licenses.asl20;
      description = ''
        SUNING DAL PLUGIN
        
         Adds support for the Suning dal framework.
         compatible with  store-dal-annotation  and  dal-sharding
        
        WIKI : http://wiki.cnsuning.com/display/suningplaza/2019/11/19/SUNING+DAL+PLUGIN
        This Plugin is fork from https://github.com/rockjava/intellij-mybatis-plugin
        depend plugin: https://plugins.jetbrains.com/plugin/4441-jrebel-for-intellij
        
          Jump from dao interface to mapper xml each other
          Modfiy java file or dal xml file no need redeploy&nbsp;&nbsp;&nbsp;(jrebel plugin must be installed)
          Print the original whole sql in the console replace "?" with param
          Generate entity from database&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(alt+s)
          Generate xml from dao interface&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(alt+entrer)
          Generate method in xml from dao interface
          Generate @DalParam or @DalParams in method
          Suning mapper sql auto completion
          support Refactor for suning dao interface fileName and method name
      '';
    };
  }) {};

  swagger-annotation-tool = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "swagger-annotation-tool";
    plugname = "swagger-annotation-tool";
    plugid = "com.everspring.plugin.swagger-tool";
    version = "1.4.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15484/107639/swagger-tool.zip";
      sha256 = "04nz7mbc11kx9f6dbdf67f7p4sdn617934avcs516w1vhd5bnb8y";
      name = "swagger-annotation-tool-1.4.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/EverSpring/swagger-tool";
      license = lib.licenses.asl20;
      description = ''
        gitee | github
    
    This plugin can
    
    (1) help you transform comment(include // or /** */) to springfox annotation.if there is no any comment,
    it can automatic add annotation by translating the filed name,so you'd better take a canonical name.And You can custom english
    mapping to chinese by yourself
    
    
    
    (2) generate object setter function
    
    
    
    Springfox-swagger Tool (springfox-Swagger Tool) In the model,
    the interface on the field is generally relatively few, I personally do not feel the need to automatically generate.
    Next,it will change the "swagger-tool" position，it will delete right click(the same with setter/getter)
    

    usage:
    Alt+Insert(right click,choose "swagger-tool",),then choose the transform method.
    
    功能、使用方法：
    
    只有在java文件中swagger-tool才可用。Alt+Insert(或者右键swagger-tool)，选择转换方式、一键生成set实现
    转换不翻译：如果有注释，直接采用注释，没有注释则选用自定义的配置，如果自定义没有就不生成注解
    转换翻译：如果有自定义转换配置，则采用自定义的，没有就自定义就直接采用注释，没有注释则翻译后生成注释
    生成set实现: 自动一键生成、选择性生成object的set实现
      '';
    };
  }) {};

  swagger-helper = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "swagger-helper";
    plugname = "swagger-helper";
    plugid = "com.sharedaka.idea.swagger-helper";
    version = "0.4.3";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15314/101211/swagger-helper.jar";
      sha256 = "0mwda2p3f2jrnkksmfvaaakmnz17v326whjy3rfxprpf8n5jn3n2";
      name = "swagger-helper-0.4.3.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Swagger-Helper provide these features: 
        1. Generate the @ApiImplicitParams annotation for the interface coded by Spring MVC to describe request
        2. Generate the @ApiResponse annotation for the interface coded by Spring MVC to describe Response (Including state code and state message)
        3. Generate the @ApiModel\@ApiModelProperty annotation for the DTO to describe DTO's attributes
        
        Getting start 
        
        1. Get the Generating code action's shortCut (Preferences -&gt; KeyMap -&gt; Search(Generate) -&gt; Get the Keyboard shortcut(Such as command+N or alt+insert))
        2. Open the class file in Editor, select the method name or the class name
        3. Using the Generating code action's shortCut -&gt; generate swagger annotation
        

        If you want to get more detail, please visit the index of swagger-helper 
        
        该插件提供功能如下：
        1. 为接口自动生成Swagger @ApiImplicitParams @ApiOperation注解
        2. 分析代码结构，根据抛出异常自动生成 @ApiResponses注解
        3. 为DTO自动生成@ApiModel注解、@ApiModelProperty注解
        
        使用方法如下：
        
        1. 通过Preferences-&gt;KeyMap-&gt;搜索Generate-&gt;查看Generate...的快捷键（通常为Command+N或者alt+insert）,即生成Getter、Setter方法的快捷键
        2. 在编辑界面打开要处理的类，选中需要处理的部分(可选部分：方法名、类名)
        3. 按动刚才拿到的快捷键，选中generate swagger annotation 
        

        具体使用方法，请查看 Github主页
      '';
    };
  }) {};

  swapi = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "swapi";
    plugname = "swapi";
    plugid = "io.github.api.swapi";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11986/87012/swapi-intellij-plugin-1.0.5.zip";
      sha256 = "049zn6p0a6clw574gjbwf9shpr5gapj8dxn51471rysvszs4l3s5";
      name = "swapi-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.asl20;
      description = ''
        Api tool for exporting http-apis to SWQA System.
      Only work well in SpringMvc project with Java language
      Single or batch export
      Goto api index page online
      '';
    };
  }) {};

  switch_project = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "switch_project";
    plugname = "switch_project";
    plugid = "switch_project";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10203/40742/switch-project.zip";
      sha256 = "1jfw3i13164r1nvmjicqysivvwwnjvvl3qwii87hmrh7i9skxph7";
      name = "switch_project-1.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xin497668869/project_manager";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/xin497668869/project_manager";
        free = false;
      };
      description = ''
        this plugin can switch the project to top window
      '';
    };
  }) {};

  tagalog = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "tagalog";
    plugname = "tagalog";
    plugid = "com.bdpqchen.android.plugin.tagalog";
    version = "0.0.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12960/68109/tagalog.jar";
      sha256 = "13yydknyx48lph6d6ba8kyc3ykwrdn3wqga6xfnwn9wmcn3snxcw";
      name = "tagalog-0.0.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.bdpqchen.com";
      license = lib.licenses.mit;
      description = ''
        A code tool for Log used on IDEA and Android Studio platform.
      in a easy way to generate a log tag for log output.
      Automatically generate private static final String TAG = "YourClassName" for each class, like easily using generate getter and setter
      '';
    };
  }) {};

  testit-livingdoc-intellij-idea-plugin = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "testIT-LivingDoc-Intellij-IDEA-Plugin";
    plugname = "testIT LivingDoc Intellij IDEA Plugin";
    plugid = "info.novatec.testit.livingdoc.intellij";
    version = "1.3.2";
    src = fetchurl {
      url = "https://github.com/testIT-LivingDoc/livingdoc-intellij/releases/download/v1.3.2/livingdoc-intellij-plugin-1.3.2.zip";
      sha256 = "0cn9qm3wa3xnwcqswkp8n8fy4rqwwphvmin3p6313wpp7hhbpzvi";
      name = "testIT-LivingDoc-Intellij-IDEA-Plugin-1.3.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.novatec-gmbh.de/en/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/testIT-LivingDoc/livingdoc-intellij/blob/master/LICENSE";
        free = false;
      };
      description = ''
        IntelliJ IDEA Plugin for LivingDoc. LivingDoc is a powerful Open Source tool that supports the implementation of collaboration driven methods like Behavior Driven Development or Specification By Example. Due to its smart integration into Atlassian Confluence it is one of the best tools to evolve a living documentation system, especially if you are already using Atlassian Confluence as your Knowledge Management System. This features what sets LivingDoc apart from its competitors. Some of those, while very developer friendly, are not really accepted by experts, like Business Analysts, Experts or Testers, without a strong technical background. Even the reporting features provided by those competitor tools or their extensions/plugins do not measure up to LivingDoc.
      '';
    };
  }) {};

  thief-book-idea = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "thief-book-idea";
    plugname = "thief-book-idea";
    plugid = "com.thief.idea";
    version = "0.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15442/103199/thief-book-idea.jar";
      sha256 = "0ggw2jmqa0mpzyvb0znhlpb25513h99gwg6yajc3v29llkwalbgc";
      name = "thief-book-idea-0.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/yisier/thief-book-idea";
      license = lib.licenses.asl20;
      description = ''
        This is a plug-in that can be read in the IDE. 
    
    
    
    How to use?
    
    1.Choose your book on the settings page
    
    2.Click the refresh button in the thief panel
    
    
    
    
    
    Settings page : File | Settings | Other Settings | Thief-Book Config
    
    Boss key : Ctrl + Shift + ↓
    
    You can choose font, number of lines, etc.
      '';
    };
  }) {};

  tostringgenjson = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "toStringGenjson";
    plugname = "toStringGen(json)";
    plugid = "QQ963577663";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10835/47035/toStringGen.jar";
      sha256 = "0mky4rafiscxrjsp0sciinng30s9i1cn4g9q6k949gqvdjw77bkx";
      name = "toStringGenjson-1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Jcuke/toStringGen";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Jcuke";
        free = false;
      };
      description = ''
        generate a toString() with a json format
      generate toString json
      '';
    };
  }) {};

  todo4me = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "todo4me";
    plugname = "todo4me";
    plugid = "com.chenrl.plugin.todo";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14966/96227/todotask.zip";
      sha256 = "07dgmcwg2j14vy0liwj3vp7jq22x0cxk8c2q0p6ppnmm4mmr0yhb";
      name = "todo4me-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/14966-to2do/";
      license = lib.licenses.asl20;
      description = ''
        In the work, often receive a variety of work tasks
      I often miss something because I have a lot of chores
      As a developer, idea is the one who accompanies me most.
      So develop this plug-in. No need to switch to other software, you can manage the task at any time
      It's really convenient. Try it if you don't believe it.
      Functions include: add, modify and delete tasks
      Task list: quick setting status, level and other operations.
      Task status can be set: completed, in progress, to do
      Task priority can be set: 1-5 stars
      Interested can try. I will gradually improve it, welcome to put forward valuable suggestions.
      A tool for task management！：D 
      ----------------------------------------------------------------
     在工作中,经常会接到各种工作任务.
     我经常会漏掉某些事情, 因为我杂事比较多. 
     作为一个码农，平日里陪伴我最多的就是IDEA。
     所以就自己开发这个插件.不用再切换到其他软件，随时可以对任务进行管理.
     真的方便很多哦，不信你试试。
     功能包括: 任务的新增，修改，刪除
     任務列表：快捷设置状态，等級等操作。
     任务状态可以设置: 完成 \ 进行中 \ 待办
     任务优先级可以设置: 1星-5星
     有兴趣的可以试试. 我会逐步的完善它，欢迎提出宝贵意见。
      一个记录任务的工具
      '';
    };
  }) {};

  tokkycout = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "tokkyCout";
    plugname = "tokkyCout";
    plugid = "com.tokky.cout";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13996/83778/tokkyCout.jar";
      sha256 = "1wfb763f7vhs6b29wfrmrvnvl3grcmj3v97jyxhq747yplnxihqk";
      name = "tokkyCout-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        This utility finds the entire source in a jsp file and wraps ''${}' with 'c:out'.
      '';
    };
  }) {};

  tokkymessage = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "tokkyMessage";
    plugname = "tokkyMessage";
    plugid = "com.me";
    version = "1.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13989/83762/tokkyMessage.jar";
      sha256 = "1awx20c0d5gmzghf2c4x6hx18jz351j0rj32bp1lrmg8rmy0hcck";
      name = "tokkyMessage-1.5.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "";
      license = lib.licenses.mit;
      description = ''
        This plugin is a tool for multilingual processing.
Finds and replaces words in the entire property.
      '';
    };
  }) {};

  topevery-db-log = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "topevery-db-log";
    plugname = "topevery db log";
    plugid = "com.honvin";
    version = "2020.12.17";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15493/105668/topevery-db-log.jar";
      sha256 = "0izf60b4jd0xrpn6yqqhyqv9i4f28c3rzbdl6knl1ryrqmb57a6p";
      name = "topevery-db-log-2020.12.17.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/author/264a3047-4419-4f4e-9f32-94fc05c5c73b";
      license = lib.licenses.asl20;
      description = ''
        The ORM framework log plug-in of Topevery Sanitation Division. According to dynamic SQL analysis parameters, directly generate executable SQL.
            
            How to use: Select the precompiled SQL and all parameters in the console, right-click topevery db log to generate, and select all contents in the pop-up box by Ctrl+A.
           

           

           
            图元环卫事业部ORM框架log插件。根据动态SQL解析参数，直接生成可执行SQL。
            
            使用方法：在控制台选中预编译SQL和所有参数，右键点击“Generate SQL”生成，将弹框中的内容Ctrl+A全选复制即可。
      '';
    };
  }) {};

  translate-properties = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "translate-properties";
    plugname = "translate-properties";
    plugid = "com.shuqi.tools.translate-properties";
    version = "1.1.4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13500/77067/translate-properties-idea.jar";
      sha256 = "0nk5qrrjr39hssk4jkifw9vlg9k2bbgc5shn7g84z7hqhwlim4y0";
      name = "translate-properties-1.1.4.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://gitee.com/shuqi/translate-properties-idea";
      license = lib.licenses.asl20;
      description = ''
        translate-properties-idea
      
      Automatic translation of international resource files,Usage example:
      '';
    };
  }) {};

  ttt-idea = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ttt-idea";
    plugname = "ttt-idea";
    plugid = "com.pojosontheweb.ttt";
    version = "0.1-beta4";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7880/20834/ttt-idea-plugin.zip";
      sha256 = "1qgnpacv1wdck9pzzr4p22qdnwjyqns8r7di85jfwx4wb206rclp";
      name = "ttt-idea-0.1-beta4.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.pojosontheweb.com";
      license = lib.licenses.asl20;
      description = ''
        A plugin for the 
Typed Text Templates framework. Provides 
 
 TTT paths (source and gen folders) can be configured from the modules settings page, via a new tab 
 Compile action for generating the Java sources from the templates 
 Detect .ttt file change and re-gen template Java sources transparently 
 No language support is bundled with the plugin. We recommend associating .ttt files to JSP Editor for the best UX (completion etc).
      '';
    };
  }) {};

  typescript-folding = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "typescript-folding";
    plugname = "typescript-folding";
    plugid = "com.github.fsancheztemprano.typescriptfolding";
    version = "0.0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/15454/105021/typescript-folding-0.0.8.zip";
      sha256 = "1slypwamznx0dh74nsbjbhzan1sr54y2xxarj8b868hr2bjr16mi";
      name = "typescript-folding-0.0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/fsancheztemprano/typescript-folding";
      license = lib.licenses.mit;
      description = ''
        Typescript Component Folding:

This plugin groups files which have same name and different extensions.

File name groupings: component|service|pipe|guard|directive|actions|effects|reducer|selectors|state|resolver 

Extensions folded: css|sass|scss|stylus|styl|less|html|haml|pug|ts|js|json|spec\.ts|.*\.ts 

For instance, app.component.ts, app.component.css, app.component.html, app.component.*.ts will be grouped a virtual folder named app.component.
      
Forked from Original idea plugin: https://github.com/rath/angular-folding by Jang-Ho Hwang
      '';
    };
  }) {};

  universal-argument = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "universal-argument";
    plugname = "universal-argument";
    plugid = "io.github.takc923.universal-argument";
    version = "0.8";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12111/92912/universal-argument-0.8.zip";
      sha256 = "1vayk267aqp18n0sh2lzj5sc0kjh6v3niihp1wh35r0ixy0lkfzs";
      name = "universal-argument-0.8.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/takc923/universal-argument";
      license = lib.licenses.asl20;
      description = ''
        universal-argument implements universal-argument of emacs
    Type C-u, input number, then input something. It repeats the "something" specified times
      '';
    };
  }) {};

  ut-assist = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "ut-assist";
    plugname = "ut-assist";
    plugid = "com.petre-s.mock-gen-intellij";
    version = "0.3.1-beta";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11958/63357/ut-assist-intellij-0.3.1-beta.zip";
      sha256 = "0y2i45i6bwgrwy810ixmxfbaijn5p9pc4bjpwifj1gfqiwbvxmxx";
      name = "ut-assist-0.3.1-beta.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://petrestanaringa.com";
      license = lib.licenses.bsd3;
      description = ''
        UTassist generate the boiler plate for unit tests:
      
        Generates the unit test class, if necessary
        Generate the test method
        Instantiates your objects
        Calls your method
        The calling arguments are generated with the appropriate types, when possible
      '';
    };
  }) {};

  warm-night = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "warm-night";
    plugname = "warm-night";
    plugid = "warm-night";
    version = "0.1.7";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12342/85871/warm-night.jar";
      sha256 = "11g4vmlb6hl9bhrgxqgvs889b5xxmhd67zjm41xpk4mby9qnh6a3";
      name = "warm-night-0.1.7.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        Custom dark ui theme with warm pleasant colors.
      '';
    };
  }) {};

  webos-storm = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "webOS-Storm";
    plugname = "webOS-Storm";
    plugid = "com.mojojungle.webosstorm";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/5867/9832/com.mojojungle.webosstorm_9832.zip";
      sha256 = "0p5arvq8rcnbzx2rhhjx1gixa76gnrz8zrd5shd6md4mqfbshdjr";
      name = "webOS-Storm-1.2.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.mojojungle.com";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://plugins.jetbrains.com/files/5867/license.txt";
        free = false;
      };
      description = ''
        Developer tools for HP webOS developers. Requires a valid installation of the HP webOS SDK 2.1 or 3.0 to function properly.
      '';
    };
  }) {};

  webflash-generator = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "webflash-generator";
    plugname = "webflash-generator";
    plugid = "cn.enilu.webflash.generator";
    version = "0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12648/64941/webflash-generator.jar";
      sha256 = "05is94il0c14hlxl8h7j6hdi2z4972nf4xpgzc95s36v046vimjf";
      name = "webflash-generator-0.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/enilu/web-flash";
      license = lib.licenses.asl20;
      description = ''
        Code Generation Tool Based on web-flash(https://github.com/enilu/web-flash)
      '';
    };
  }) {};

  webstorm-log-plugin = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "webstorm-log-plugin";
    plugname = "webstorm-log-plugin";
    plugid = "com.haskkor.webstorm.plugin";
    version = "1.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11989/58415/webstorm-log-plugin.jar";
      sha256 = "112n57qasdrr1mkv3kp4ayksxs55snwzmqg48vjlnb45ga3ycinw";
      name = "webstorm-log-plugin-1.0.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/Haskkor/webstorm-log-plugin";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Haskkor/webstorm-log-plugin/blob/master/LICENSE";
        free = false;
      };
      description = ''
        A plugin for JetBrains WebStorm to handle logs
      '';
    };
  }) {};

  white-sand-ui = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "white-sand-ui";
    plugname = "white-sand-ui";
    plugid = "white-sand-ui";
    version = "0.2.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12339/85567/white-sand-ui.jar";
      sha256 = "16063ryjmh0ilzriivz45hbb5h0xkjdihf042qid5wpmdz99fls3";
      name = "white-sand-ui-0.2.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/mswift42";
      license = lib.licenses.mit;
      description = ''
        Custom ui theme with a light, warm background and and medium contrast colors.
      '';
    };
  }) {};

  who-did-it = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "who-did-it";
    plugname = "who did it";
    plugid = "cn.joylau.code.who-did-it";
    version = "2018.2_20181029";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/11269/51524/who-did-it-2018.2_20181029.zip";
      sha256 = "1y21wlic00jnb6k5ijksmja553fy60f605k5pqkyp6vqqak2fwj4";
      name = "who-did-it-2018.2_20181029.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/JoyLau/who-did-it";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/JoyLau/who-did-it/blob/master/LICENSE";
        free = false;
      };
      description = ''
        who did it
      
      GitHub |
      Donate with PayPal
      
      

      who did it is a plugin that displays version control system information on software based on the IntelliJ platform (JetBrains IDEs), showing the last commit and submission time of the file,which will be displayed in the file tree of the project panel.
      

      who did it  是一个可以在基于 IntelliJ 平台上的软件(JetBrains 家族系列)显示版本控制系统信息的插件,显示文件最后一次提交人和提交时间,这些信息将被显示在 project 面板的文件树上
      

      Just like this:
      '';
    };
  }) {};

  wk-code-ideaplugin-nb = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "wk-code-ideaplugin-nb";
    plugname = "wk-code-ideaplugin-nb";
    plugid = "cn.wizzer.code";
    version = "5.1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/10854/52998/wk-code-ideaplugin-nb.jar";
      sha256 = "1mj2dlhbsbbj2z2hi69pz4fcv1mwcznialhhjnh0ids7ckljfgv7";
      name = "wk-code-ideaplugin-nb-5.1.1.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://wizzer.cn";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/Wizzercn/NutzWk";
        free = false;
      };
      description = ''
        NutzWk 5.1.x Code Generator plugin
      '';
    };
  }) {};

  wuhulala-typora = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "wuhulala-typora";
    plugname = "wuhulala-typora";
    plugid = "wuhulala-typora";
    version = "1.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12459/63376/typoraIntegration.zip";
      sha256 = "1raxxxl9656wd986iihiclhbh9bqhpgyr6sq5ila9rbpckx5nxra";
      name = "wuhulala-typora-1.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://wuhulala.github.io";
      license = lib.licenses.asl20;
      description = ''
        A plugin that use typora tool to open markdown file.
      '';
    };
  }) {};

  x-maker = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "x-maker";
    plugname = "x-maker";
    plugid = "com.dtyunxi.plugin.idea.x-maker";
    version = "1.0.5";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14472/89398/x-maker-1.0.5.zip";
      sha256 = "1cjf9ma6nlrmsgcijy8v4ylqfzcm188bqlilir0iksm50g27jcdc";
      name = "x-maker-1.0.5.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://plugins.jetbrains.com/plugin/14472-x-maker";
      license = lib.licenses.asl20;
      description = ''
        x-maker
          generator code 
          live template 
          x-maker plugin  from java to xml or from xml to java
          
          
              Website |
              Gitee |
              Issues|
      '';
    };
  }) {};

  xstructure = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "xStructure";
    plugname = "xStructure";
    plugid = "org.sylfra.idea.plugins.xstructure";
    version = "1.5.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/1867/16161/xstructure.zip";
      sha256 = "1520189cr8picf2p83pikmivf3rsrwi9pv4ivmhkfgzzhlhzh00a";
      name = "xStructure-1.5.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/syllant/idea-plugin-xstructure";
      license = lib.licenses.asl20;
      description = ''
        Provides a flexible way for displaying structure of XML files to make navigation easier. xStructure allows to configure node rendering to display attributes or tag values. It allows also to hide some nodes to make structure tree more compact.
      '';
    };
  }) {};

  xml2kt = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "xml2kt";
    plugname = "xml2kt";
    plugid = "com.kylo.xml2kt";
    version = "1.6";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14755/94189/xml2Kt.jar";
      sha256 = "04cpadn9ipkpqwbyr4amk36slkpr0hajb15k4r6ldr735ylw3hl4";
      name = "xml2kt-1.6.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.qq.com";
      license = lib.licenses.asl20;
      description = ''
        auto generate kotlin code from android XML file
    1. Choose an xml layout.
    2. enter absolute path(e.g. /Users/username/workspace/project/app/src/main/java/com/google/layout.kt).
    3. enter package name.
    4. apply xml2kt plugin.
      '';
    };
  }) {};

  xndlnk-monokai = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "xndlnk-monokai";
    plugname = "xndlnk-monokai";
    plugid = "xndlnk.monokai";
    version = "2.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/14355/101716/xndlnk-monokai.jar";
      sha256 = "025jgdswipnqa075pw6akjy5lwblhs8h0x858m42k1v9k3gblrav";
      name = "xndlnk-monokai-2.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/xndlnk";
      license = lib.licenses.mit;
      description = ''
        This is a dark high-contrast Monokai theme for IntelliJ 2019.1+.
      '';
    };
  }) {};

  xyktdoc = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "xyKtDoc";
    plugname = "xyKtDoc";
    plugid = "com.xingin.KDocGenerator";
    version = "1.0.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/12962/68481/xyKtDocAnnotationPlugin-1.0.1.zip";
      sha256 = "1gcl248zq6ysv8fdd6siihz1n1aqa8py8scha926rr78sq93jx11";
      name = "xyKtDoc-1.0.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://code.devops.xiaohongshu.com/android/xyAndroidStudioPlugin";
      license = lib.licenses.asl20;
      description = ''
        Auto generate class and method KDoc.
      '';
    };
  }) {};

  yfiles = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "yFiles";
    plugname = "yFiles";
    plugid = "com.github.turansky.yfiles";
    version = "1.5.0";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/13384/107297/yfiles-1.5.0.zip";
      sha256 = "1bb1i6y4i0p02hfdyadjgjhd05zc8d1cazj5icjzq6z3mj97k0x5";
      name = "yFiles-1.5.0.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/turansky";
      license = lib.licenses.asl20;
      description = ''
        Kotlin/JS
    • Check yFiles inheritance rules on the fly
    • Companion of yFiles Gradle plugin

    SVG Templates
    • Binding syntax highlight
    • Template MIME type support

    Links
    • yFiles Kotlin/JS declarations
    • yFiles Class Framework
      '';
    };
  }) {};

  yapf-pycharm = callPackage ({ fetchurl, ideaBuild, lib }: ideaBuild {
    pname = "yapf-pycharm";
    plugname = "yapf-pycharm";
    plugid = "com.toan2.yapf";
    version = "1.2";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/9705/35260/yapf-pycharm.jar";
      sha256 = "15vp40qjf27csqjxax9lrmjx1q4ljwpyv0q0l6ka6vlsrwlfri5j";
      name = "yapf-pycharm-1.2.jar";
    };
    buildInputs = [  ];
    packageRequires = [  ];
    meta = {
      homepage = "https://github.com/binh-vu/";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "https://github.com/binh-vu/";
        free = false;
      };
      description = ''
        Reformat (local) python code using google/yapf Requirement: + YAPF must be pre-installed and could be invoked using sh -c /usr/local/bin/yapf command.
      '';
    };
  }) {};

  z2-environment = callPackage ({ fetchurl, ideaBuild, lib, unzip }: ideaBuild {
    pname = "z2-environment";
    plugname = "z2-environment";
    plugid = "com.zfabrik.intellij.z2plugin";
    version = "3.1";
    src = fetchurl {
      url = "https://plugins.jetbrains.com/files/7470/44825/com.zfabrik.intellij.z2plugin.zip";
      sha256 = "0hw2j8ml23szrb8s6rsw8m6xngs0n4yhyxz62qp2zi6zn0hd1fpm";
      name = "z2-environment-3.1.zip";
    };
    buildInputs = [ unzip ];
    packageRequires = [  ];
    meta = {
      homepage = "http://www.z2-environment.eu";
      license = {
        shortName = "allrightsreserved";
        fullName = "All Rights Reserved";
        url = "http://www.z2-environment.eu/license";
        free = false;
      };
      description = ''
        The z2-plugin simplifies development with the z2-environment. 
 A more detailed description can be found at the 
z2-environment wiki Following features are implemented so far: 
 
 Launching: Start your z2-environment on your local machine from the IDE  
 z2-Sync: Synchronize your local changes with the z2-environment  
 z2 dependency resolution: Resolve missing dependencies from the z2-environment  
 Managing z2-modules: z2-modules can be created and deleted on demand  
 Arming modules: Armed z2-modules become active after z2-Sync.  
 z2-Module wizard: Create new z2-modules with or without Spring support  
 z2-Properties editor: Provides completions and documentation for z2-properties files
      '';
    };
  }) {};
}
